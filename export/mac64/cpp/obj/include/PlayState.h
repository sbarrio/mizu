// Generated by Haxe 3.4.4
#ifndef INCLUDED_PlayState
#define INCLUDED_PlayState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
HX_DECLARE_CLASS0(PlayState)
HX_DECLARE_CLASS0(Player)
HX_DECLARE_CLASS0(TiledLevel)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS4(flixel,addons,editors,tiled,TiledMap)
HX_DECLARE_CLASS3(flixel,addons,transition,FlxTransitionableState)
HX_DECLARE_CLASS3(flixel,addons,transition,TransitionData)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxUIState)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IEventGetter)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IFlxUIState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,_hx_system,FlxSound)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES PlayState_obj : public  ::flixel::addons::ui::FlxUIState_obj
{
	public:
		typedef  ::flixel::addons::ui::FlxUIState_obj super;
		typedef PlayState_obj OBJ_;
		PlayState_obj();

	public:
		enum { _hx_ClassId = 0x46c2835d };

		void __construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="PlayState")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"PlayState"); }
		static hx::ObjectPtr< PlayState_obj > __new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut);
		static hx::ObjectPtr< PlayState_obj > __alloc(hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~PlayState_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("PlayState","\x5d","\x83","\xc2","\x46"); }

		static void __boot();
		static ::String levelToLoad;
		static int RAIN_ANIMATION_TIME;
		static int lives;
		bool isRunning;
		bool isDead;
		bool levelFinished;
		bool canThrowWater;
		int rainAnimationCoolDown;
		 ::TiledLevel level;
		 ::flixel::FlxSprite splash;
		 ::Player player;
		 ::flixel::group::FlxTypedGroup goals;
		 ::flixel::group::FlxTypedGroup enemies;
		 ::flixel::group::FlxTypedGroup waters;
		 ::flixel::group::FlxTypedGroup buttons;
		 ::flixel::group::FlxTypedGroup blocks;
		 ::flixel::text::FlxText livesText;
		 ::flixel::FlxSprite lifeIcon;
		 ::flixel::text::FlxText waterText;
		 ::flixel::text::FlxText gameOverText;
		 ::flixel::_hx_system::FlxSound sndDie;
		 ::flixel::_hx_system::FlxSound sndWaterFill;
		 ::flixel::_hx_system::FlxSound sndFireOut;
		 ::flixel::_hx_system::FlxSound sndButtonClick;
		 ::flixel::_hx_system::FlxSound sndBlockMove;
		void create();

		void update(Float elapsed);

		bool overlapped( ::flixel::FlxObject Sprite1, ::flixel::FlxObject Sprite2);
		::Dynamic overlapped_dyn();

		void killPlayer();
		::Dynamic killPlayer_dyn();

		void increaseWater();
		::Dynamic increaseWater_dyn();

		void positionHUD();
		::Dynamic positionHUD_dyn();

		void animateWater();
		::Dynamic animateWater_dyn();

		void goToTitle();
		::Dynamic goToTitle_dyn();

		void goToEnding();
		::Dynamic goToEnding_dyn();

		void goToLevel(::String levelToLoad,int l);
		::Dynamic goToLevel_dyn();

		void delay(int ms);
		::Dynamic delay_dyn();

		void moveBlock(int id);
		::Dynamic moveBlock_dyn();

};


#endif /* INCLUDED_PlayState */ 
