// Generated by Haxe 3.4.4
#ifndef INCLUDED_Block
#define INCLUDED_Block

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
HX_DECLARE_CLASS0(Block)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES Block_obj : public  ::flixel::FlxSprite_obj
{
	public:
		typedef  ::flixel::FlxSprite_obj super;
		typedef Block_obj OBJ_;
		Block_obj();

	public:
		enum { _hx_ClassId = 0x4829e52d };

		void __construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,int identifier,Float dis,int dir);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Block")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Block"); }
		static hx::ObjectPtr< Block_obj > __new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,int identifier,Float dis,int dir);
		static hx::ObjectPtr< Block_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,int identifier,Float dis,int dir);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Block_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Block","\x2d","\xe5","\x29","\x48"); }

		int id;
		Float distance;
		int direction;
		bool moved;
		void update(Float elapsed);

		void destroy();

		void move();
		::Dynamic move_dyn();

};


#endif /* INCLUDED_Block */ 
