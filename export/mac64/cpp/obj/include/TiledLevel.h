// Generated by Haxe 3.4.4
#ifndef INCLUDED_TiledLevel
#define INCLUDED_TiledLevel

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_addons_editors_tiled_TiledMap
#include <flixel/addons/editors/tiled/TiledMap.h>
#endif
HX_DECLARE_CLASS0(PlayState)
HX_DECLARE_CLASS0(TiledLevel)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS4(flixel,addons,editors,tiled,TiledLayer)
HX_DECLARE_CLASS4(flixel,addons,editors,tiled,TiledMap)
HX_DECLARE_CLASS4(flixel,addons,editors,tiled,TiledObject)
HX_DECLARE_CLASS4(flixel,addons,editors,tiled,TiledObjectLayer)
HX_DECLARE_CLASS3(flixel,addons,transition,FlxTransitionableState)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxUIState)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IEventGetter)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IFlxUIState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,tile,FlxBaseTilemap)
HX_DECLARE_CLASS2(flixel,tile,FlxTilemap)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES TiledLevel_obj : public  ::flixel::addons::editors::tiled::TiledMap_obj
{
	public:
		typedef  ::flixel::addons::editors::tiled::TiledMap_obj super;
		typedef TiledLevel_obj OBJ_;
		TiledLevel_obj();

	public:
		enum { _hx_ClassId = 0x27f4004e };

		void __construct( ::Dynamic tiledLevel, ::PlayState state);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="TiledLevel")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"TiledLevel"); }
		static hx::ObjectPtr< TiledLevel_obj > __new( ::Dynamic tiledLevel, ::PlayState state);
		static hx::ObjectPtr< TiledLevel_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic tiledLevel, ::PlayState state);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TiledLevel_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("TiledLevel","\x4e","\x00","\xf4","\x27"); }

		static void __boot();
		static ::String c_PATH_LEVEL_TILESHEETS;
		 ::flixel::group::FlxTypedGroup platformTiles;
		 ::flixel::group::FlxTypedGroup bgLayer;
		 ::flixel::group::FlxTypedGroup fgLayer;
		 ::flixel::group::FlxTypedGroup rainLayer;
		 ::flixel::group::FlxTypedGroup objectsLayer;
		::Array< ::Dynamic> collidableTileLayers;
		void loadObjects( ::PlayState state);
		::Dynamic loadObjects_dyn();

		void loadObject( ::PlayState state, ::flixel::addons::editors::tiled::TiledObject o, ::flixel::addons::editors::tiled::TiledObjectLayer g, ::flixel::group::FlxTypedGroup group,::String layerName);
		::Dynamic loadObject_dyn();

		bool collideWithLevel( ::flixel::FlxObject obj, ::Dynamic notifyCallback, ::Dynamic processCallback);
		::Dynamic collideWithLevel_dyn();

};


#endif /* INCLUDED_TiledLevel */ 
