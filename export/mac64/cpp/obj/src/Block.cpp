// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Block
#include <Block.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_646686c1763ceffa_11_new,"Block","new",0xdb44209f,"Block.new","Block.hx",11,0xf33517b1)
HX_LOCAL_STACK_FRAME(_hx_pos_646686c1763ceffa_32_update,"Block","update",0x2ccba72a,"Block.update","Block.hx",32,0xf33517b1)
HX_LOCAL_STACK_FRAME(_hx_pos_646686c1763ceffa_36_destroy,"Block","destroy",0x8c1d08b9,"Block.destroy","Block.hx",36,0xf33517b1)
HX_LOCAL_STACK_FRAME(_hx_pos_646686c1763ceffa_39_move,"Block","move",0xffb6c9f2,"Block.move","Block.hx",39,0xf33517b1)

void Block_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,int identifier,Float dis,int dir){
Float X = __o_X.Default(((Float)0.0));
Float Y = __o_Y.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_646686c1763ceffa_11_new)
HXLINE(  17)		this->moved = false;
HXLINE(  16)		this->direction = (int)0;
HXLINE(  15)		this->distance = ((Float)0);
HXLINE(  14)		this->id = (int)0;
HXLINE(  21)		super::__construct(X,Y,null());
HXLINE(  23)		this->loadGraphic(HX_("assets/images/block.png",fd,b7,44,e1),true,(int)64,(int)64,null(),null());
HXLINE(  24)		this->set_immovable(true);
HXLINE(  25)		this->id = identifier;
HXLINE(  26)		this->distance = dis;
HXLINE(  27)		this->direction = dir;
            	}

Dynamic Block_obj::__CreateEmpty() { return new Block_obj; }

void *Block_obj::_hx_vtable = 0;

Dynamic Block_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Block_obj > _hx_result = new Block_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool Block_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x4829e52d;
	}
}

void Block_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_646686c1763ceffa_32_update)
HXDLIN(  32)		this->super::update(elapsed);
            	}


void Block_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_646686c1763ceffa_36_destroy)
HXDLIN(  36)		this->super::destroy();
            	}


void Block_obj::move(){
            	HX_STACKFRAME(&_hx_pos_646686c1763ceffa_39_move)
HXLINE(  40)		this->moved = true;
HXLINE(  42)		Float targetX = (int)0;
HXLINE(  43)		Float targetY = (int)0;
HXLINE(  45)		if ((this->direction == (int)256)) {
HXLINE(  46)			targetX = this->x;
HXLINE(  47)			targetY = (this->y - this->distance);
            		}
HXLINE(  50)		if ((this->direction == (int)4096)) {
HXLINE(  51)			targetX = this->x;
HXLINE(  52)			targetY = (this->y + this->distance);
            		}
HXLINE(  55)		if ((this->direction == (int)1)) {
HXLINE(  56)			targetX = (this->x - this->distance);
HXLINE(  57)			targetY = this->y;
            		}
HXLINE(  60)		if ((this->direction == (int)16)) {
HXLINE(  61)			targetX = (this->x + this->distance);
HXLINE(  62)			targetY = this->y;
            		}
HXLINE(  65)		::flixel::tweens::FlxTween_obj::tween(hx::ObjectPtr<OBJ_>(this), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),targetX)
            			->setFixed(1,HX_("y",79,00,00,00),targetY)),(int)2, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoInOut_dyn())
            			->setFixed(1,HX_("type",ba,f2,08,4d),(int)8)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Block_obj,move,(void))


hx::ObjectPtr< Block_obj > Block_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,int identifier,Float dis,int dir) {
	hx::ObjectPtr< Block_obj > __this = new Block_obj();
	__this->__construct(__o_X,__o_Y,identifier,dis,dir);
	return __this;
}

hx::ObjectPtr< Block_obj > Block_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,int identifier,Float dis,int dir) {
	Block_obj *__this = (Block_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Block_obj), true, "Block"));
	*(void **)__this = Block_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,identifier,dis,dir);
	return __this;
}

Block_obj::Block_obj()
{
}

hx::Val Block_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"move") ) { return hx::Val( move_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"moved") ) { return hx::Val( moved ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { return hx::Val( distance ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"direction") ) { return hx::Val( direction ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Block_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"moved") ) { moved=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { distance=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"direction") ) { direction=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Block_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("distance","\x35","\x93","\xf9","\x6b"));
	outFields->push(HX_HCSTRING("direction","\x3f","\x62","\x40","\x10"));
	outFields->push(HX_HCSTRING("moved","\x33","\xcc","\x65","\x0c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Block_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Block_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Block_obj,distance),HX_HCSTRING("distance","\x35","\x93","\xf9","\x6b")},
	{hx::fsInt,(int)offsetof(Block_obj,direction),HX_HCSTRING("direction","\x3f","\x62","\x40","\x10")},
	{hx::fsBool,(int)offsetof(Block_obj,moved),HX_HCSTRING("moved","\x33","\xcc","\x65","\x0c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Block_obj_sStaticStorageInfo = 0;
#endif

static ::String Block_obj_sMemberFields[] = {
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("distance","\x35","\x93","\xf9","\x6b"),
	HX_HCSTRING("direction","\x3f","\x62","\x40","\x10"),
	HX_HCSTRING("moved","\x33","\xcc","\x65","\x0c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("move","\x11","\xe3","\x60","\x48"),
	::String(null()) };

static void Block_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Block_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Block_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Block_obj::__mClass,"__mClass");
};

#endif

hx::Class Block_obj::__mClass;

void Block_obj::__register()
{
	hx::Object *dummy = new Block_obj;
	Block_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Block","\x2d","\xe5","\x29","\x48");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Block_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Block_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Block_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Block_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Block_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Block_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

