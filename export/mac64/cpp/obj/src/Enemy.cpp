// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Enemy
#include <Enemy.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPath
#include <flixel/util/FlxPath.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c595a05c1c7a687d_16_new,"Enemy","new",0x35d4571a,"Enemy.new","Enemy.hx",16,0xbda88996)
static const int _hx_array_data_03a88228_1[] = {
	(int)0,(int)1,(int)2,(int)3,(int)4,
};
static const int _hx_array_data_03a88228_2[] = {
	(int)0,(int)1,(int)2,(int)3,
};
HX_LOCAL_STACK_FRAME(_hx_pos_c595a05c1c7a687d_53_update,"Enemy","update",0xcf0e6f8f,"Enemy.update","Enemy.hx",53,0xbda88996)
HX_LOCAL_STACK_FRAME(_hx_pos_c595a05c1c7a687d_68_destroy,"Enemy","destroy",0xe44998b4,"Enemy.destroy","Enemy.hx",68,0xbda88996)

void Enemy_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,int range,::String tp, ::PlayState state){
Float X = __o_X.Default(((Float)0.0));
Float Y = __o_Y.Default(((Float)0.0));
            	HX_GC_STACKFRAME(&_hx_pos_c595a05c1c7a687d_16_new)
HXLINE(  18)		super::__construct(X,Y,null());
HXLINE(  20)		this->set_facing((int)1);
HXLINE(  22)		this->type = tp;
HXLINE(  24)		if ((this->type == HX_("spike",c6,a5,6c,81))) {
HXLINE(  25)			this->loadGraphic(HX_("assets/images/spike.png",f6,18,09,8d),true,(int)16,(int)16,null(),null());
            		}
HXLINE(  28)		if ((this->type == HX_("fork",42,61,c0,43))) {
HXLINE(  29)			this->loadGraphic(HX_("assets/images/fork.png",28,c2,5f,df),true,(int)16,(int)32,null(),null());
HXLINE(  30)			this->animation->add(HX_("walk",09,5d,f2,4e),::Array_obj< int >::fromData( _hx_array_data_03a88228_1,5),(int)8,true,null(),null());
HXLINE(  31)			this->animation->play(HX_("walk",09,5d,f2,4e),null(),null(),null());
HXLINE(  32)			this->set_width((int)8);
HXLINE(  33)			this->set_height((int)32);
HXLINE(  34)			this->offset->set_x((int)4);
HXLINE(  35)			this->offset->set_y((int)0);
            		}
HXLINE(  38)		if ((this->type == HX_("fire",b6,d3,bb,43))) {
HXLINE(  39)			this->loadGraphic(HX_("assets/images/fire.png",9c,7e,77,71),true,(int)16,(int)16,null(),null());
HXLINE(  40)			this->animation->add(HX_("idle",14,a7,b3,45),::Array_obj< int >::fromData( _hx_array_data_03a88228_2,4),(int)8,true,null(),null());
HXLINE(  41)			this->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
            		}
HXLINE(  45)		 ::flixel::math::FlxPoint destination;
HXLINE(  46)		this->set_immovable(true);
HXLINE(  47)		destination = this->getMidpoint(null());
HXLINE(  48)		{
HXLINE(  48)			 ::flixel::math::FlxPoint _g = destination;
HXDLIN(  48)			_g->set_x((_g->x + range));
            		}
HXLINE(  49)		 ::flixel::util::FlxPath _hx_tmp =  ::flixel::util::FlxPath_obj::__alloc( HX_CTX ,null());
HXDLIN(  49)		this->set_path(_hx_tmp->start(::Array_obj< ::Dynamic>::__new(2)->init(0,this->getMidpoint(null()))->init(1,destination),(int)40,(int)4096,null(),null()));
            	}

Dynamic Enemy_obj::__CreateEmpty() { return new Enemy_obj; }

void *Enemy_obj::_hx_vtable = 0;

Dynamic Enemy_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Enemy_obj > _hx_result = new Enemy_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool Enemy_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0b6ffd77) {
		if (inClassId<=(int)0x03a88228) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x03a88228;
		} else {
			return inClassId==(int)0x0b6ffd77;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x2e105115;
	}
}

void Enemy_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_c595a05c1c7a687d_53_update)
HXLINE(  54)		this->super::update(elapsed);
HXLINE(  56)		bool _hx_tmp;
HXDLIN(  56)		if ((this->type == HX_("fork",42,61,c0,43))) {
HXLINE(  56)			_hx_tmp = (this->oldX > this->x);
            		}
            		else {
HXLINE(  56)			_hx_tmp = false;
            		}
HXDLIN(  56)		if (_hx_tmp) {
HXLINE(  57)			this->scale->set_x((int)1);
            		}
            		else {
HXLINE(  59)			this->scale->set_x((int)-1);
            		}
HXLINE(  62)		this->oldX = this->x;
            	}


void Enemy_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_c595a05c1c7a687d_68_destroy)
HXDLIN(  68)		this->super::destroy();
            	}



hx::ObjectPtr< Enemy_obj > Enemy_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,int range,::String tp, ::PlayState state) {
	hx::ObjectPtr< Enemy_obj > __this = new Enemy_obj();
	__this->__construct(__o_X,__o_Y,range,tp,state);
	return __this;
}

hx::ObjectPtr< Enemy_obj > Enemy_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,int range,::String tp, ::PlayState state) {
	Enemy_obj *__this = (Enemy_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Enemy_obj), true, "Enemy"));
	*(void **)__this = Enemy_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,range,tp,state);
	return __this;
}

Enemy_obj::Enemy_obj()
{
}

void Enemy_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Enemy);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(oldX,"oldX");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Enemy_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(oldX,"oldX");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Enemy_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"oldX") ) { return hx::Val( oldX ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Enemy_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"oldX") ) { oldX=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Enemy_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("oldX","\xd1","\xf9","\xb0","\x49"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Enemy_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Enemy_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsFloat,(int)offsetof(Enemy_obj,oldX),HX_HCSTRING("oldX","\xd1","\xf9","\xb0","\x49")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Enemy_obj_sStaticStorageInfo = 0;
#endif

static ::String Enemy_obj_sMemberFields[] = {
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("oldX","\xd1","\xf9","\xb0","\x49"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	::String(null()) };

static void Enemy_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Enemy_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Enemy_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Enemy_obj::__mClass,"__mClass");
};

#endif

hx::Class Enemy_obj::__mClass;

void Enemy_obj::__register()
{
	hx::Object *dummy = new Enemy_obj;
	Enemy_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Enemy","\x28","\x82","\xa8","\x03");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Enemy_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Enemy_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Enemy_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Enemy_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Enemy_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Enemy_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

