// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_addons_tile_FlxTileAnimation
#include <flixel/addons/tile/FlxTileAnimation.h>
#endif
#ifndef INCLUDED_flixel_addons_tile_FlxTileSpecial
#include <flixel/addons/tile/FlxTileSpecial.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMatrix
#include <flixel/math/FlxMatrix.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Matrix
#include <openfl/_legacy/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Point
#include <openfl/_legacy/geom/Point.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_813c730f1cce36dc_16_new,"flixel.addons.tile.FlxTileSpecial","new",0x87a80782,"flixel.addons.tile.FlxTileSpecial.new","flixel/addons/tile/FlxTileSpecial.hx",16,0x5033d72d)
HX_LOCAL_STACK_FRAME(_hx_pos_813c730f1cce36dc_60_destroy,"flixel.addons.tile.FlxTileSpecial","destroy",0x83619d1c,"flixel.addons.tile.FlxTileSpecial.destroy","flixel/addons/tile/FlxTileSpecial.hx",60,0x5033d72d)
HX_LOCAL_STACK_FRAME(_hx_pos_813c730f1cce36dc_74_update,"flixel.addons.tile.FlxTileSpecial","update",0xbd66f027,"flixel.addons.tile.FlxTileSpecial.update","flixel/addons/tile/FlxTileSpecial.hx",74,0x5033d72d)
HX_LOCAL_STACK_FRAME(_hx_pos_813c730f1cce36dc_115_isSpecial,"flixel.addons.tile.FlxTileSpecial","isSpecial",0x44053411,"flixel.addons.tile.FlxTileSpecial.isSpecial","flixel/addons/tile/FlxTileSpecial.hx",115,0x5033d72d)
HX_LOCAL_STACK_FRAME(_hx_pos_813c730f1cce36dc_120_isFlipped,"flixel.addons.tile.FlxTileSpecial","isFlipped",0xe438261a,"flixel.addons.tile.FlxTileSpecial.isFlipped","flixel/addons/tile/FlxTileSpecial.hx",120,0x5033d72d)
HX_LOCAL_STACK_FRAME(_hx_pos_813c730f1cce36dc_125_hasAnimation,"flixel.addons.tile.FlxTileSpecial","hasAnimation",0x5057a8e8,"flixel.addons.tile.FlxTileSpecial.hasAnimation","flixel/addons/tile/FlxTileSpecial.hx",125,0x5033d72d)
HX_LOCAL_STACK_FRAME(_hx_pos_813c730f1cce36dc_129_paint,"flixel.addons.tile.FlxTileSpecial","paint",0xeb787b40,"flixel.addons.tile.FlxTileSpecial.paint","flixel/addons/tile/FlxTileSpecial.hx",129,0x5033d72d)
HX_LOCAL_STACK_FRAME(_hx_pos_813c730f1cce36dc_163_addAnimation,"flixel.addons.tile.FlxTileSpecial","addAnimation",0xc259e541,"flixel.addons.tile.FlxTileSpecial.addAnimation","flixel/addons/tile/FlxTileSpecial.hx",163,0x5033d72d)
HX_LOCAL_STACK_FRAME(_hx_pos_813c730f1cce36dc_172_fromSpriteAnimation,"flixel.addons.tile.FlxTileSpecial","fromSpriteAnimation",0xb09aef17,"flixel.addons.tile.FlxTileSpecial.fromSpriteAnimation","flixel/addons/tile/FlxTileSpecial.hx",172,0x5033d72d)
HX_LOCAL_STACK_FRAME(_hx_pos_813c730f1cce36dc_182_getMatrix,"flixel.addons.tile.FlxTileSpecial","getMatrix",0x98cffc19,"flixel.addons.tile.FlxTileSpecial.getMatrix","flixel/addons/tile/FlxTileSpecial.hx",182,0x5033d72d)
HX_LOCAL_STACK_FRAME(_hx_pos_813c730f1cce36dc_210_set_frames,"flixel.addons.tile.FlxTileSpecial","set_frames",0xdaee8f01,"flixel.addons.tile.FlxTileSpecial.set_frames","flixel/addons/tile/FlxTileSpecial.hx",210,0x5033d72d)
HX_LOCAL_STACK_FRAME(_hx_pos_813c730f1cce36dc_222_set_currTileId,"flixel.addons.tile.FlxTileSpecial","set_currTileId",0x581f5c16,"flixel.addons.tile.FlxTileSpecial.set_currTileId","flixel/addons/tile/FlxTileSpecial.hx",222,0x5033d72d)
HX_LOCAL_STACK_FRAME(_hx_pos_813c730f1cce36dc_18_boot,"flixel.addons.tile.FlxTileSpecial","boot",0x23778ad0,"flixel.addons.tile.FlxTileSpecial.boot","flixel/addons/tile/FlxTileSpecial.hx",18,0x5033d72d)
HX_LOCAL_STACK_FRAME(_hx_pos_813c730f1cce36dc_19_boot,"flixel.addons.tile.FlxTileSpecial","boot",0x23778ad0,"flixel.addons.tile.FlxTileSpecial.boot","flixel/addons/tile/FlxTileSpecial.hx",19,0x5033d72d)
HX_LOCAL_STACK_FRAME(_hx_pos_813c730f1cce36dc_20_boot,"flixel.addons.tile.FlxTileSpecial","boot",0x23778ad0,"flixel.addons.tile.FlxTileSpecial.boot","flixel/addons/tile/FlxTileSpecial.hx",20,0x5033d72d)
namespace flixel{
namespace addons{
namespace tile{

void FlxTileSpecial_obj::__construct(int TilesetId,bool FlipX,bool FlipY,int Rotate){
            	HX_GC_STACKFRAME(&_hx_pos_813c730f1cce36dc_16_new)
HXLINE(  45)		this->dirty = true;
HXLINE(  43)		this->_frameTimer = ((Float)0.0);
HXLINE(  41)		this->_lastIndex = (int)-1;
HXLINE(  40)		this->_currIndex = (int)0;
HXLINE(  29)		this->currTileId = (int)0;
HXLINE(  23)		this->flipY = false;
HXLINE(  22)		this->flipX = false;
HXLINE(  49)		super::__construct();
HXLINE(  51)		this->set_currTileId(TilesetId);
HXLINE(  52)		this->flipX = FlipX;
HXLINE(  53)		this->flipY = FlipY;
HXLINE(  54)		this->rotate = Rotate;
HXLINE(  56)		this->_matrix =  ::flixel::math::FlxMatrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            	}

Dynamic FlxTileSpecial_obj::__CreateEmpty() { return new FlxTileSpecial_obj; }

void *FlxTileSpecial_obj::_hx_vtable = 0;

Dynamic FlxTileSpecial_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxTileSpecial_obj > _hx_result = new FlxTileSpecial_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool FlxTileSpecial_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x25a685e0;
	} else {
		return inClassId==(int)0x70df0576;
	}
}

void FlxTileSpecial_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_813c730f1cce36dc_60_destroy)
HXLINE(  61)		this->super::destroy();
HXLINE(  63)		this->animation = ( ( ::flixel::addons::tile::FlxTileAnimation)(::flixel::util::FlxDestroyUtil_obj::destroy(this->animation)) );
HXLINE(  64)		this->_currAnimParam = null();
HXLINE(  65)		this->_matrix = null();
HXLINE(  67)		this->currFrame = null();
HXLINE(  68)		this->set_frames(null());
            	}


void FlxTileSpecial_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_813c730f1cce36dc_74_update)
HXLINE(  75)		this->super::update(elapsed);
HXLINE(  76)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE(  78)			this->dirty = false;
            		}
HXLINE(  81)		bool _hx_tmp;
HXDLIN(  81)		if (hx::IsNotNull( this->animation )) {
HXLINE(  81)			_hx_tmp = (this->animation->delay > (int)0);
            		}
            		else {
HXLINE(  81)			_hx_tmp = false;
            		}
HXDLIN(  81)		if (_hx_tmp) {
HXLINE(  83)			 ::flixel::addons::tile::FlxTileSpecial _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  83)			_hx_tmp1->_frameTimer = (_hx_tmp1->_frameTimer + elapsed);
HXLINE(  84)			if ((this->_frameTimer > this->animation->delay)) {
HXLINE(  86)				this->_lastIndex = this->_currIndex;
            			}
HXLINE(  88)			while((this->_frameTimer > this->animation->delay)){
HXLINE(  90)				this->_frameTimer = (this->_frameTimer - this->animation->delay);
HXLINE(  91)				int _hx_tmp2 = this->_currIndex;
HXDLIN(  91)				if ((_hx_tmp2 >= (this->animation->frames->length - (int)1))) {
HXLINE(  93)					this->_currIndex = (int)0;
            				}
            				else {
HXLINE(  97)					this->_currIndex++;
            				}
            			}
HXLINE( 100)			this->set_currTileId(this->animation->frames->__get(this->_currIndex));
HXLINE( 101)			if (hx::IsNotNull( this->animation->framesData )) {
HXLINE( 103)				this->_currAnimParam = this->animation->framesData->__get(this->_currIndex);
            			}
HXLINE( 106)			if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 108)				this->dirty = (this->_currIndex != this->_lastIndex);
            			}
            		}
            	}


bool FlxTileSpecial_obj::isSpecial(){
            	HX_STACKFRAME(&_hx_pos_813c730f1cce36dc_115_isSpecial)
HXDLIN( 115)		bool _hx_tmp;
HXDLIN( 115)		bool _hx_tmp1;
HXDLIN( 115)		if (!(this->flipX)) {
HXDLIN( 115)			_hx_tmp1 = this->flipY;
            		}
            		else {
HXDLIN( 115)			_hx_tmp1 = true;
            		}
HXDLIN( 115)		if (!(_hx_tmp1)) {
HXDLIN( 115)			_hx_tmp = (this->rotate != (int)0);
            		}
            		else {
HXDLIN( 115)			_hx_tmp = true;
            		}
HXDLIN( 115)		if (!(_hx_tmp)) {
HXDLIN( 115)			return hx::IsNotNull( this->animation );
            		}
            		else {
HXDLIN( 115)			return true;
            		}
HXDLIN( 115)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTileSpecial_obj,isSpecial,return )

bool FlxTileSpecial_obj::isFlipped(){
            	HX_STACKFRAME(&_hx_pos_813c730f1cce36dc_120_isFlipped)
HXDLIN( 120)		bool _hx_tmp;
HXDLIN( 120)		if (!(this->flipX)) {
HXDLIN( 120)			_hx_tmp = this->flipY;
            		}
            		else {
HXDLIN( 120)			_hx_tmp = true;
            		}
HXDLIN( 120)		if (!(_hx_tmp)) {
HXDLIN( 120)			return (this->rotate != (int)0);
            		}
            		else {
HXDLIN( 120)			return true;
            		}
HXDLIN( 120)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTileSpecial_obj,isFlipped,return )

bool FlxTileSpecial_obj::hasAnimation(){
            	HX_STACKFRAME(&_hx_pos_813c730f1cce36dc_125_hasAnimation)
HXDLIN( 125)		return hx::IsNotNull( this->animation );
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTileSpecial_obj,hasAnimation,return )

void FlxTileSpecial_obj::paint( ::openfl::_legacy::display::BitmapData bmd, ::openfl::_legacy::geom::Point at){
            	HX_STACKFRAME(&_hx_pos_813c730f1cce36dc_129_paint)
HXLINE( 130)		if (!(::flixel::FlxG_obj::renderBlit)) {
HXLINE( 130)			return;
            		}
HXLINE( 132)		this->_tmp_flipH = this->flipX;
HXLINE( 133)		this->_tmp_flipV = this->flipY;
HXLINE( 134)		this->_tmp_rot = this->rotate;
HXLINE( 136)		if (hx::IsNotNull( this->_currAnimParam )) {
HXLINE( 138)			this->_tmp_flipH = ( (bool)(this->_currAnimParam->__Field(HX_("flipX",0b,45,92,02),hx::paccDynamic)) );
HXLINE( 139)			this->_tmp_flipV = ( (bool)(this->_currAnimParam->__Field(HX_("flipY",0c,45,92,02),hx::paccDynamic)) );
HXLINE( 140)			this->_tmp_rot = ( (int)(this->_currAnimParam->__Field(HX_("rotate",5b,46,20,cb),hx::paccDynamic)) );
            		}
HXLINE( 143)		int rotation = (int)0;
HXLINE( 144)		if ((this->_tmp_rot == (int)1)) {
HXLINE( 146)			rotation = (int)90;
            		}
            		else {
HXLINE( 148)			if ((this->_tmp_rot == (int)2)) {
HXLINE( 150)				rotation = (int)-90;
            			}
            		}
HXLINE( 153)		this->currFrame->paintRotatedAndFlipped(bmd,at,rotation,this->_tmp_flipH,this->_tmp_flipV,true,null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTileSpecial_obj,paint,(void))

void FlxTileSpecial_obj::addAnimation(::Array< int > tiles,hx::Null< Float >  __o_frameRate,::Array< ::Dynamic> framesData){
Float frameRate = __o_frameRate.Default(30);
            	HX_GC_STACKFRAME(&_hx_pos_813c730f1cce36dc_163_addAnimation)
HXDLIN( 163)		this->animation =  ::flixel::addons::tile::FlxTileAnimation_obj::__alloc( HX_CTX ,HX_("tileAnim",5f,ac,77,7a),tiles,frameRate,true,framesData);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxTileSpecial_obj,addAnimation,(void))

void FlxTileSpecial_obj::fromSpriteAnimation( ::flixel::animation::FlxAnimation anim){
            	HX_GC_STACKFRAME(&_hx_pos_813c730f1cce36dc_172_fromSpriteAnimation)
HXDLIN( 172)		::String anim1 = anim->name;
HXDLIN( 172)		 ::Dynamic _hx_tmp = ::Reflect_obj::field(anim,HX_("_frames",45,c1,fc,1a));
HXDLIN( 172)		this->animation =  ::flixel::addons::tile::FlxTileAnimation_obj::__alloc( HX_CTX ,anim1,_hx_tmp,anim->frameRate,anim->looped,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTileSpecial_obj,fromSpriteAnimation,(void))

 ::flixel::math::FlxMatrix FlxTileSpecial_obj::getMatrix(){
            	HX_STACKFRAME(&_hx_pos_813c730f1cce36dc_182_getMatrix)
HXLINE( 183)		this->_tmp_flipH = this->flipX;
HXLINE( 184)		this->_tmp_flipV = this->flipY;
HXLINE( 185)		this->_tmp_rot = this->rotate;
HXLINE( 187)		if (hx::IsNotNull( this->_currAnimParam )) {
HXLINE( 189)			this->_tmp_flipH = ( (bool)(this->_currAnimParam->__Field(HX_("flipX",0b,45,92,02),hx::paccDynamic)) );
HXLINE( 190)			this->_tmp_flipV = ( (bool)(this->_currAnimParam->__Field(HX_("flipY",0c,45,92,02),hx::paccDynamic)) );
HXLINE( 191)			this->_tmp_rot = ( (int)(this->_currAnimParam->__Field(HX_("rotate",5b,46,20,cb),hx::paccDynamic)) );
            		}
HXLINE( 194)		int rotation = (int)0;
HXLINE( 195)		if ((this->_tmp_rot == (int)1)) {
HXLINE( 197)			rotation = (int)90;
            		}
            		else {
HXLINE( 199)			if ((this->_tmp_rot == (int)2)) {
HXLINE( 201)				rotation = (int)-90;
            			}
            		}
HXLINE( 204)		this->currFrame->prepareMatrix(this->_matrix,rotation,this->_tmp_flipH,this->_tmp_flipV);
HXLINE( 206)		return this->_matrix;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTileSpecial_obj,getMatrix,return )

 ::flixel::graphics::frames::FlxFramesCollection FlxTileSpecial_obj::set_frames( ::flixel::graphics::frames::FlxFramesCollection value){
            	HX_STACKFRAME(&_hx_pos_813c730f1cce36dc_210_set_frames)
HXLINE( 211)		this->frames = value;
HXLINE( 213)		if (hx::IsNotNull( value )) {
HXLINE( 215)			this->currFrame = this->frames->frames->__get(this->currTileId).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
            		}
HXLINE( 218)		return this->frames;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTileSpecial_obj,set_frames,return )

int FlxTileSpecial_obj::set_currTileId(int value){
            	HX_STACKFRAME(&_hx_pos_813c730f1cce36dc_222_set_currTileId)
HXLINE( 223)		if (hx::IsNotNull( this->frames )) {
HXLINE( 225)			this->currFrame = this->frames->frames->__get(value).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
            		}
HXLINE( 228)		return (this->currTileId = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTileSpecial_obj,set_currTileId,return )

int FlxTileSpecial_obj::ROTATE_0;

int FlxTileSpecial_obj::ROTATE_90;

int FlxTileSpecial_obj::ROTATE_270;


hx::ObjectPtr< FlxTileSpecial_obj > FlxTileSpecial_obj::__new(int TilesetId,bool FlipX,bool FlipY,int Rotate) {
	hx::ObjectPtr< FlxTileSpecial_obj > __this = new FlxTileSpecial_obj();
	__this->__construct(TilesetId,FlipX,FlipY,Rotate);
	return __this;
}

hx::ObjectPtr< FlxTileSpecial_obj > FlxTileSpecial_obj::__alloc(hx::Ctx *_hx_ctx,int TilesetId,bool FlipX,bool FlipY,int Rotate) {
	FlxTileSpecial_obj *__this = (FlxTileSpecial_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxTileSpecial_obj), true, "flixel.addons.tile.FlxTileSpecial"));
	*(void **)__this = FlxTileSpecial_obj::_hx_vtable;
	__this->__construct(TilesetId,FlipX,FlipY,Rotate);
	return __this;
}

FlxTileSpecial_obj::FlxTileSpecial_obj()
{
}

void FlxTileSpecial_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxTileSpecial);
	HX_MARK_MEMBER_NAME(flipX,"flipX");
	HX_MARK_MEMBER_NAME(flipY,"flipY");
	HX_MARK_MEMBER_NAME(rotate,"rotate");
	HX_MARK_MEMBER_NAME(frames,"frames");
	HX_MARK_MEMBER_NAME(currTileId,"currTileId");
	HX_MARK_MEMBER_NAME(currFrame,"currFrame");
	HX_MARK_MEMBER_NAME(_tmp_flipH,"_tmp_flipH");
	HX_MARK_MEMBER_NAME(_tmp_flipV,"_tmp_flipV");
	HX_MARK_MEMBER_NAME(_tmp_rot,"_tmp_rot");
	HX_MARK_MEMBER_NAME(_matrix,"_matrix");
	HX_MARK_MEMBER_NAME(animation,"animation");
	HX_MARK_MEMBER_NAME(_currIndex,"_currIndex");
	HX_MARK_MEMBER_NAME(_lastIndex,"_lastIndex");
	HX_MARK_MEMBER_NAME(_currAnimParam,"_currAnimParam");
	HX_MARK_MEMBER_NAME(_frameTimer,"_frameTimer");
	HX_MARK_MEMBER_NAME(dirty,"dirty");
	 ::flixel::FlxBasic_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxTileSpecial_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(flipX,"flipX");
	HX_VISIT_MEMBER_NAME(flipY,"flipY");
	HX_VISIT_MEMBER_NAME(rotate,"rotate");
	HX_VISIT_MEMBER_NAME(frames,"frames");
	HX_VISIT_MEMBER_NAME(currTileId,"currTileId");
	HX_VISIT_MEMBER_NAME(currFrame,"currFrame");
	HX_VISIT_MEMBER_NAME(_tmp_flipH,"_tmp_flipH");
	HX_VISIT_MEMBER_NAME(_tmp_flipV,"_tmp_flipV");
	HX_VISIT_MEMBER_NAME(_tmp_rot,"_tmp_rot");
	HX_VISIT_MEMBER_NAME(_matrix,"_matrix");
	HX_VISIT_MEMBER_NAME(animation,"animation");
	HX_VISIT_MEMBER_NAME(_currIndex,"_currIndex");
	HX_VISIT_MEMBER_NAME(_lastIndex,"_lastIndex");
	HX_VISIT_MEMBER_NAME(_currAnimParam,"_currAnimParam");
	HX_VISIT_MEMBER_NAME(_frameTimer,"_frameTimer");
	HX_VISIT_MEMBER_NAME(dirty,"dirty");
	 ::flixel::FlxBasic_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxTileSpecial_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"flipX") ) { return hx::Val( flipX ); }
		if (HX_FIELD_EQ(inName,"flipY") ) { return hx::Val( flipY ); }
		if (HX_FIELD_EQ(inName,"dirty") ) { return hx::Val( dirty ); }
		if (HX_FIELD_EQ(inName,"paint") ) { return hx::Val( paint_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"rotate") ) { return hx::Val( rotate ); }
		if (HX_FIELD_EQ(inName,"frames") ) { return hx::Val( frames ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_matrix") ) { return hx::Val( _matrix ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_tmp_rot") ) { return hx::Val( _tmp_rot ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"currFrame") ) { return hx::Val( currFrame ); }
		if (HX_FIELD_EQ(inName,"animation") ) { return hx::Val( animation ); }
		if (HX_FIELD_EQ(inName,"isSpecial") ) { return hx::Val( isSpecial_dyn() ); }
		if (HX_FIELD_EQ(inName,"isFlipped") ) { return hx::Val( isFlipped_dyn() ); }
		if (HX_FIELD_EQ(inName,"getMatrix") ) { return hx::Val( getMatrix_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"currTileId") ) { return hx::Val( currTileId ); }
		if (HX_FIELD_EQ(inName,"_tmp_flipH") ) { return hx::Val( _tmp_flipH ); }
		if (HX_FIELD_EQ(inName,"_tmp_flipV") ) { return hx::Val( _tmp_flipV ); }
		if (HX_FIELD_EQ(inName,"_currIndex") ) { return hx::Val( _currIndex ); }
		if (HX_FIELD_EQ(inName,"_lastIndex") ) { return hx::Val( _lastIndex ); }
		if (HX_FIELD_EQ(inName,"set_frames") ) { return hx::Val( set_frames_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_frameTimer") ) { return hx::Val( _frameTimer ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"hasAnimation") ) { return hx::Val( hasAnimation_dyn() ); }
		if (HX_FIELD_EQ(inName,"addAnimation") ) { return hx::Val( addAnimation_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_currAnimParam") ) { return hx::Val( _currAnimParam ); }
		if (HX_FIELD_EQ(inName,"set_currTileId") ) { return hx::Val( set_currTileId_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"fromSpriteAnimation") ) { return hx::Val( fromSpriteAnimation_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxTileSpecial_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"flipX") ) { flipX=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flipY") ) { flipY=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dirty") ) { dirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"rotate") ) { rotate=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frames") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_frames(inValue.Cast<  ::flixel::graphics::frames::FlxFramesCollection >()) );frames=inValue.Cast<  ::flixel::graphics::frames::FlxFramesCollection >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_matrix") ) { _matrix=inValue.Cast<  ::flixel::math::FlxMatrix >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_tmp_rot") ) { _tmp_rot=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"currFrame") ) { currFrame=inValue.Cast<  ::flixel::graphics::frames::FlxFrame >(); return inValue; }
		if (HX_FIELD_EQ(inName,"animation") ) { animation=inValue.Cast<  ::flixel::addons::tile::FlxTileAnimation >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"currTileId") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_currTileId(inValue.Cast< int >()) );currTileId=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_tmp_flipH") ) { _tmp_flipH=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_tmp_flipV") ) { _tmp_flipV=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_currIndex") ) { _currIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_lastIndex") ) { _lastIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_frameTimer") ) { _frameTimer=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_currAnimParam") ) { _currAnimParam=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxTileSpecial_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("flipX","\x0b","\x45","\x92","\x02"));
	outFields->push(HX_HCSTRING("flipY","\x0c","\x45","\x92","\x02"));
	outFields->push(HX_HCSTRING("rotate","\x5b","\x46","\x20","\xcb"));
	outFields->push(HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac"));
	outFields->push(HX_HCSTRING("currTileId","\x3b","\x33","\xe4","\x14"));
	outFields->push(HX_HCSTRING("currFrame","\xdb","\xaf","\x58","\x6a"));
	outFields->push(HX_HCSTRING("_tmp_flipH","\x14","\x28","\x5e","\x7b"));
	outFields->push(HX_HCSTRING("_tmp_flipV","\x22","\x28","\x5e","\x7b"));
	outFields->push(HX_HCSTRING("_tmp_rot","\xf0","\x9c","\x5b","\x62"));
	outFields->push(HX_HCSTRING("_matrix","\xe0","\x47","\x3f","\x2a"));
	outFields->push(HX_HCSTRING("animation","\x04","\xef","\x34","\x4b"));
	outFields->push(HX_HCSTRING("_currIndex","\x81","\x4e","\x8c","\x7d"));
	outFields->push(HX_HCSTRING("_lastIndex","\x9d","\x44","\x64","\x66"));
	outFields->push(HX_HCSTRING("_currAnimParam","\xab","\x63","\x24","\x5f"));
	outFields->push(HX_HCSTRING("_frameTimer","\x77","\xc1","\xe5","\xc5"));
	outFields->push(HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxTileSpecial_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(FlxTileSpecial_obj,flipX),HX_HCSTRING("flipX","\x0b","\x45","\x92","\x02")},
	{hx::fsBool,(int)offsetof(FlxTileSpecial_obj,flipY),HX_HCSTRING("flipY","\x0c","\x45","\x92","\x02")},
	{hx::fsInt,(int)offsetof(FlxTileSpecial_obj,rotate),HX_HCSTRING("rotate","\x5b","\x46","\x20","\xcb")},
	{hx::fsObject /*::flixel::graphics::frames::FlxFramesCollection*/ ,(int)offsetof(FlxTileSpecial_obj,frames),HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac")},
	{hx::fsInt,(int)offsetof(FlxTileSpecial_obj,currTileId),HX_HCSTRING("currTileId","\x3b","\x33","\xe4","\x14")},
	{hx::fsObject /*::flixel::graphics::frames::FlxFrame*/ ,(int)offsetof(FlxTileSpecial_obj,currFrame),HX_HCSTRING("currFrame","\xdb","\xaf","\x58","\x6a")},
	{hx::fsBool,(int)offsetof(FlxTileSpecial_obj,_tmp_flipH),HX_HCSTRING("_tmp_flipH","\x14","\x28","\x5e","\x7b")},
	{hx::fsBool,(int)offsetof(FlxTileSpecial_obj,_tmp_flipV),HX_HCSTRING("_tmp_flipV","\x22","\x28","\x5e","\x7b")},
	{hx::fsInt,(int)offsetof(FlxTileSpecial_obj,_tmp_rot),HX_HCSTRING("_tmp_rot","\xf0","\x9c","\x5b","\x62")},
	{hx::fsObject /*::flixel::math::FlxMatrix*/ ,(int)offsetof(FlxTileSpecial_obj,_matrix),HX_HCSTRING("_matrix","\xe0","\x47","\x3f","\x2a")},
	{hx::fsObject /*::flixel::addons::tile::FlxTileAnimation*/ ,(int)offsetof(FlxTileSpecial_obj,animation),HX_HCSTRING("animation","\x04","\xef","\x34","\x4b")},
	{hx::fsInt,(int)offsetof(FlxTileSpecial_obj,_currIndex),HX_HCSTRING("_currIndex","\x81","\x4e","\x8c","\x7d")},
	{hx::fsInt,(int)offsetof(FlxTileSpecial_obj,_lastIndex),HX_HCSTRING("_lastIndex","\x9d","\x44","\x64","\x66")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxTileSpecial_obj,_currAnimParam),HX_HCSTRING("_currAnimParam","\xab","\x63","\x24","\x5f")},
	{hx::fsFloat,(int)offsetof(FlxTileSpecial_obj,_frameTimer),HX_HCSTRING("_frameTimer","\x77","\xc1","\xe5","\xc5")},
	{hx::fsBool,(int)offsetof(FlxTileSpecial_obj,dirty),HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FlxTileSpecial_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &FlxTileSpecial_obj::ROTATE_0,HX_HCSTRING("ROTATE_0","\x0c","\xd2","\x08","\x62")},
	{hx::fsInt,(void *) &FlxTileSpecial_obj::ROTATE_90,HX_HCSTRING("ROTATE_90","\x7b","\x00","\xaf","\x65")},
	{hx::fsInt,(void *) &FlxTileSpecial_obj::ROTATE_270,HX_HCSTRING("ROTATE_270","\xa7","\x21","\x6c","\x93")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxTileSpecial_obj_sMemberFields[] = {
	HX_HCSTRING("flipX","\x0b","\x45","\x92","\x02"),
	HX_HCSTRING("flipY","\x0c","\x45","\x92","\x02"),
	HX_HCSTRING("rotate","\x5b","\x46","\x20","\xcb"),
	HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac"),
	HX_HCSTRING("currTileId","\x3b","\x33","\xe4","\x14"),
	HX_HCSTRING("currFrame","\xdb","\xaf","\x58","\x6a"),
	HX_HCSTRING("_tmp_flipH","\x14","\x28","\x5e","\x7b"),
	HX_HCSTRING("_tmp_flipV","\x22","\x28","\x5e","\x7b"),
	HX_HCSTRING("_tmp_rot","\xf0","\x9c","\x5b","\x62"),
	HX_HCSTRING("_matrix","\xe0","\x47","\x3f","\x2a"),
	HX_HCSTRING("animation","\x04","\xef","\x34","\x4b"),
	HX_HCSTRING("_currIndex","\x81","\x4e","\x8c","\x7d"),
	HX_HCSTRING("_lastIndex","\x9d","\x44","\x64","\x66"),
	HX_HCSTRING("_currAnimParam","\xab","\x63","\x24","\x5f"),
	HX_HCSTRING("_frameTimer","\x77","\xc1","\xe5","\xc5"),
	HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("isSpecial","\x6f","\xf7","\x53","\xe3"),
	HX_HCSTRING("isFlipped","\x78","\xe9","\x86","\x83"),
	HX_HCSTRING("hasAnimation","\x4a","\xd4","\x86","\xd8"),
	HX_HCSTRING("paint","\x9e","\xb7","\x4e","\xbd"),
	HX_HCSTRING("addAnimation","\xa3","\x10","\x89","\x4a"),
	HX_HCSTRING("fromSpriteAnimation","\xf5","\xd3","\xc6","\x7a"),
	HX_HCSTRING("getMatrix","\x77","\xbf","\x1e","\x38"),
	HX_HCSTRING("set_frames","\xe3","\xbd","\x8a","\xa0"),
	HX_HCSTRING("set_currTileId","\xf8","\xa3","\xf9","\xaa"),
	::String(null()) };

static void FlxTileSpecial_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxTileSpecial_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxTileSpecial_obj::ROTATE_0,"ROTATE_0");
	HX_MARK_MEMBER_NAME(FlxTileSpecial_obj::ROTATE_90,"ROTATE_90");
	HX_MARK_MEMBER_NAME(FlxTileSpecial_obj::ROTATE_270,"ROTATE_270");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxTileSpecial_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxTileSpecial_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxTileSpecial_obj::ROTATE_0,"ROTATE_0");
	HX_VISIT_MEMBER_NAME(FlxTileSpecial_obj::ROTATE_90,"ROTATE_90");
	HX_VISIT_MEMBER_NAME(FlxTileSpecial_obj::ROTATE_270,"ROTATE_270");
};

#endif

hx::Class FlxTileSpecial_obj::__mClass;

static ::String FlxTileSpecial_obj_sStaticFields[] = {
	HX_HCSTRING("ROTATE_0","\x0c","\xd2","\x08","\x62"),
	HX_HCSTRING("ROTATE_90","\x7b","\x00","\xaf","\x65"),
	HX_HCSTRING("ROTATE_270","\xa7","\x21","\x6c","\x93"),
	::String(null())
};

void FlxTileSpecial_obj::__register()
{
	hx::Object *dummy = new FlxTileSpecial_obj;
	FlxTileSpecial_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.tile.FlxTileSpecial","\x90","\xde","\xf1","\x3d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxTileSpecial_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxTileSpecial_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxTileSpecial_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxTileSpecial_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxTileSpecial_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTileSpecial_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTileSpecial_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxTileSpecial_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_813c730f1cce36dc_18_boot)
HXDLIN(  18)		ROTATE_0 = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_813c730f1cce36dc_19_boot)
HXDLIN(  19)		ROTATE_90 = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_813c730f1cce36dc_20_boot)
HXDLIN(  20)		ROTATE_270 = (int)2;
            	}
}

} // end namespace flixel
} // end namespace addons
} // end namespace tile
