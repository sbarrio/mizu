// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_flixel_addons_tile_FlxTileAnimation
#include <flixel/addons/tile/FlxTileAnimation.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_355a0122fee6f514_40_new,"flixel.addons.tile.FlxTileAnimation","new",0xe5f9218d,"flixel.addons.tile.FlxTileAnimation.new","flixel/addons/tile/FlxTileAnimation.hx",40,0xcddc8542)
HX_LOCAL_STACK_FRAME(_hx_pos_355a0122fee6f514_52_destroy,"flixel.addons.tile.FlxTileAnimation","destroy",0x9eb018a7,"flixel.addons.tile.FlxTileAnimation.destroy","flixel/addons/tile/FlxTileAnimation.hx",52,0xcddc8542)
HX_LOCAL_STACK_FRAME(_hx_pos_355a0122fee6f514_58_set_frameRate,"flixel.addons.tile.FlxTileAnimation","set_frameRate",0x8c7c32fd,"flixel.addons.tile.FlxTileAnimation.set_frameRate","flixel/addons/tile/FlxTileAnimation.hx",58,0xcddc8542)
namespace flixel{
namespace addons{
namespace tile{

void FlxTileAnimation_obj::__construct(::String Name,::Array< int > Frames,hx::Null< Float >  __o_FrameRate,hx::Null< bool >  __o_Looped,::cpp::VirtualArray FramesData){
Float FrameRate = __o_FrameRate.Default(0);
bool Looped = __o_Looped.Default(true);
            	HX_STACKFRAME(&_hx_pos_355a0122fee6f514_40_new)
HXLINE(  41)		this->name = Name;
HXLINE(  42)		this->set_frameRate(FrameRate);
HXLINE(  43)		this->frames = Frames;
HXLINE(  44)		this->looped = Looped;
HXLINE(  45)		this->framesData = FramesData;
            	}

Dynamic FlxTileAnimation_obj::__CreateEmpty() { return new FlxTileAnimation_obj; }

void *FlxTileAnimation_obj::_hx_vtable = 0;

Dynamic FlxTileAnimation_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxTileAnimation_obj > _hx_result = new FlxTileAnimation_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool FlxTileAnimation_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7aa58381;
}

static ::flixel::util::IFlxDestroyable_obj _hx_flixel_addons_tile_FlxTileAnimation__hx_flixel_util_IFlxDestroyable= {
	( void (hx::Object::*)())&::flixel::addons::tile::FlxTileAnimation_obj::destroy,
};

void *FlxTileAnimation_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xd4fe2fcd: return &_hx_flixel_addons_tile_FlxTileAnimation__hx_flixel_util_IFlxDestroyable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void FlxTileAnimation_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_355a0122fee6f514_52_destroy)
HXLINE(  53)		this->frames = null();
HXLINE(  54)		this->framesData = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTileAnimation_obj,destroy,(void))

Float FlxTileAnimation_obj::set_frameRate(Float value){
            	HX_STACKFRAME(&_hx_pos_355a0122fee6f514_58_set_frameRate)
HXLINE(  59)		this->delay = (int)0;
HXLINE(  60)		this->frameRate = value;
HXLINE(  61)		if ((value > (int)0)) {
HXLINE(  63)			this->delay = ((Float)((Float)1.0) / (Float)value);
            		}
HXLINE(  65)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTileAnimation_obj,set_frameRate,return )


hx::ObjectPtr< FlxTileAnimation_obj > FlxTileAnimation_obj::__new(::String Name,::Array< int > Frames,hx::Null< Float >  __o_FrameRate,hx::Null< bool >  __o_Looped,::cpp::VirtualArray FramesData) {
	hx::ObjectPtr< FlxTileAnimation_obj > __this = new FlxTileAnimation_obj();
	__this->__construct(Name,Frames,__o_FrameRate,__o_Looped,FramesData);
	return __this;
}

hx::ObjectPtr< FlxTileAnimation_obj > FlxTileAnimation_obj::__alloc(hx::Ctx *_hx_ctx,::String Name,::Array< int > Frames,hx::Null< Float >  __o_FrameRate,hx::Null< bool >  __o_Looped,::cpp::VirtualArray FramesData) {
	FlxTileAnimation_obj *__this = (FlxTileAnimation_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxTileAnimation_obj), true, "flixel.addons.tile.FlxTileAnimation"));
	*(void **)__this = FlxTileAnimation_obj::_hx_vtable;
	__this->__construct(Name,Frames,__o_FrameRate,__o_Looped,FramesData);
	return __this;
}

FlxTileAnimation_obj::FlxTileAnimation_obj()
{
}

void FlxTileAnimation_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxTileAnimation);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(delay,"delay");
	HX_MARK_MEMBER_NAME(frames,"frames");
	HX_MARK_MEMBER_NAME(looped,"looped");
	HX_MARK_MEMBER_NAME(framesData,"framesData");
	HX_MARK_MEMBER_NAME(frameRate,"frameRate");
	HX_MARK_END_CLASS();
}

void FlxTileAnimation_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(delay,"delay");
	HX_VISIT_MEMBER_NAME(frames,"frames");
	HX_VISIT_MEMBER_NAME(looped,"looped");
	HX_VISIT_MEMBER_NAME(framesData,"framesData");
	HX_VISIT_MEMBER_NAME(frameRate,"frameRate");
}

hx::Val FlxTileAnimation_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"delay") ) { return hx::Val( delay ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"frames") ) { return hx::Val( frames ); }
		if (HX_FIELD_EQ(inName,"looped") ) { return hx::Val( looped ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameRate") ) { return hx::Val( frameRate ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"framesData") ) { return hx::Val( framesData ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"set_frameRate") ) { return hx::Val( set_frameRate_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxTileAnimation_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"delay") ) { delay=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"frames") ) { frames=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"looped") ) { looped=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameRate") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_frameRate(inValue.Cast< Float >()) );frameRate=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"framesData") ) { framesData=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxTileAnimation_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("delay","\x83","\xd7","\x26","\xd7"));
	outFields->push(HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac"));
	outFields->push(HX_HCSTRING("looped","\xc3","\x5f","\xb9","\x61"));
	outFields->push(HX_HCSTRING("framesData","\xf0","\xfc","\x49","\xb4"));
	outFields->push(HX_HCSTRING("frameRate","\xad","\x11","\x25","\x39"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxTileAnimation_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(FlxTileAnimation_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsFloat,(int)offsetof(FlxTileAnimation_obj,delay),HX_HCSTRING("delay","\x83","\xd7","\x26","\xd7")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(FlxTileAnimation_obj,frames),HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac")},
	{hx::fsBool,(int)offsetof(FlxTileAnimation_obj,looped),HX_HCSTRING("looped","\xc3","\x5f","\xb9","\x61")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(FlxTileAnimation_obj,framesData),HX_HCSTRING("framesData","\xf0","\xfc","\x49","\xb4")},
	{hx::fsFloat,(int)offsetof(FlxTileAnimation_obj,frameRate),HX_HCSTRING("frameRate","\xad","\x11","\x25","\x39")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxTileAnimation_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxTileAnimation_obj_sMemberFields[] = {
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("delay","\x83","\xd7","\x26","\xd7"),
	HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac"),
	HX_HCSTRING("looped","\xc3","\x5f","\xb9","\x61"),
	HX_HCSTRING("framesData","\xf0","\xfc","\x49","\xb4"),
	HX_HCSTRING("frameRate","\xad","\x11","\x25","\x39"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("set_frameRate","\x90","\xc7","\x8e","\x3f"),
	::String(null()) };

static void FlxTileAnimation_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxTileAnimation_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxTileAnimation_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxTileAnimation_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxTileAnimation_obj::__mClass;

void FlxTileAnimation_obj::__register()
{
	hx::Object *dummy = new FlxTileAnimation_obj;
	FlxTileAnimation_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.tile.FlxTileAnimation","\x1b","\x57","\xf4","\xd4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxTileAnimation_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxTileAnimation_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxTileAnimation_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxTileAnimation_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTileAnimation_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTileAnimation_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace tile
