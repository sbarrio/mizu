// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_BorderDef
#include <flixel/addons/ui/BorderDef.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_ButtonLabelStyle
#include <flixel/addons/ui/ButtonLabelStyle.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIButton
#include <flixel/addons/ui/FlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIText
#include <flixel/addons/ui/FlxUIText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITypedButton
#include <flixel/addons/ui/FlxUITypedButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FontDef
#include <flixel/addons/ui/FontDef.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ICursorPointable
#include <flixel/addons/ui/interfaces/ICursorPointable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIButton
#include <flixel/addons/ui/interfaces/IFlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ILabeled
#include <flixel/addons/ui/interfaces/ILabeled.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxAssets
#include <flixel/system/FlxAssets.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_text__FlxText_FlxTextAlign_Impl_
#include <flixel/text/_FlxText/FlxTextAlign_Impl_.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton
#include <flixel/ui/FlxTypedButton.h>
#endif
#ifndef INCLUDED_flixel_ui__FlxButton_FlxButtonEvent
#include <flixel/ui/_FlxButton/FlxButtonEvent.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Point
#include <openfl/_legacy/geom/Point.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_TextField
#include <openfl/_legacy/text/TextField.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_TextFormat
#include <openfl/_legacy/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8344d6e231fc33c4_33_new,"flixel.addons.ui.FlxUIButton","new",0x9a0e8c99,"flixel.addons.ui.FlxUIButton.new","flixel/addons/ui/FlxUIButton.hx",33,0xbb6c9298)
HX_LOCAL_STACK_FRAME(_hx_pos_8344d6e231fc33c4_106_setLabelFormat,"flixel.addons.ui.FlxUIButton","setLabelFormat",0xd4f36830,"flixel.addons.ui.FlxUIButton.setLabelFormat","flixel/addons/ui/FlxUIButton.hx",106,0xbb6c9298)
HX_LOCAL_STACK_FRAME(_hx_pos_8344d6e231fc33c4_124_autoCenterLabel,"flixel.addons.ui.FlxUIButton","autoCenterLabel",0xdc3a6269,"flixel.addons.ui.FlxUIButton.autoCenterLabel","flixel/addons/ui/FlxUIButton.hx",124,0xbb6c9298)
HX_LOCAL_STACK_FRAME(_hx_pos_8344d6e231fc33c4_128_clone,"flixel.addons.ui.FlxUIButton","clone",0xd3700fd6,"flixel.addons.ui.FlxUIButton.clone","flixel/addons/ui/FlxUIButton.hx",128,0xbb6c9298)
HX_LOCAL_STACK_FRAME(_hx_pos_8344d6e231fc33c4_135_copyStyle,"flixel.addons.ui.FlxUIButton","copyStyle",0xb0cff635,"flixel.addons.ui.FlxUIButton.copyStyle","flixel/addons/ui/FlxUIButton.hx",135,0xbb6c9298)
HX_LOCAL_STACK_FRAME(_hx_pos_8344d6e231fc33c4_169_setLabel,"flixel.addons.ui.FlxUIButton","setLabel",0x4416cc19,"flixel.addons.ui.FlxUIButton.setLabel","flixel/addons/ui/FlxUIButton.hx",169,0xbb6c9298)
HX_LOCAL_STACK_FRAME(_hx_pos_8344d6e231fc33c4_170_getLabel,"flixel.addons.ui.FlxUIButton","getLabel",0x95b972a5,"flixel.addons.ui.FlxUIButton.getLabel","flixel/addons/ui/FlxUIButton.hx",170,0xbb6c9298)
HX_LOCAL_STACK_FRAME(_hx_pos_8344d6e231fc33c4_176_resize,"flixel.addons.ui.FlxUIButton","resize",0x28cb475b,"flixel.addons.ui.FlxUIButton.resize","flixel/addons/ui/FlxUIButton.hx",176,0xbb6c9298)
HX_LOCAL_STACK_FRAME(_hx_pos_8344d6e231fc33c4_180_addIcon,"flixel.addons.ui.FlxUIButton","addIcon",0xa78ff6f3,"flixel.addons.ui.FlxUIButton.addIcon","flixel/addons/ui/FlxUIButton.hx",180,0xbb6c9298)
HX_LOCAL_STACK_FRAME(_hx_pos_8344d6e231fc33c4_211_removeIcon,"flixel.addons.ui.FlxUIButton","removeIcon",0xfc624ec4,"flixel.addons.ui.FlxUIButton.removeIcon","flixel/addons/ui/FlxUIButton.hx",211,0xbb6c9298)
HX_LOCAL_STACK_FRAME(_hx_pos_8344d6e231fc33c4_225_changeIcon,"flixel.addons.ui.FlxUIButton","changeIcon",0x598c49f0,"flixel.addons.ui.FlxUIButton.changeIcon","flixel/addons/ui/FlxUIButton.hx",225,0xbb6c9298)
HX_LOCAL_STACK_FRAME(_hx_pos_8344d6e231fc33c4_231_destroy,"flixel.addons.ui.FlxUIButton","destroy",0x4a25f9b3,"flixel.addons.ui.FlxUIButton.destroy","flixel/addons/ui/FlxUIButton.hx",231,0xbb6c9298)
HX_LOCAL_STACK_FRAME(_hx_pos_8344d6e231fc33c4_239_loadDefaultGraphic,"flixel.addons.ui.FlxUIButton","loadDefaultGraphic",0xa27a0494,"flixel.addons.ui.FlxUIButton.loadDefaultGraphic","flixel/addons/ui/FlxUIButton.hx",239,0xbb6c9298)
HX_LOCAL_STACK_FRAME(_hx_pos_8344d6e231fc33c4_247_resetHelpers,"flixel.addons.ui.FlxUIButton","resetHelpers",0x11dffddd,"flixel.addons.ui.FlxUIButton.resetHelpers","flixel/addons/ui/FlxUIButton.hx",247,0xbb6c9298)
HX_LOCAL_STACK_FRAME(_hx_pos_8344d6e231fc33c4_259_onDownHandler,"flixel.addons.ui.FlxUIButton","onDownHandler",0x9da54a22,"flixel.addons.ui.FlxUIButton.onDownHandler","flixel/addons/ui/FlxUIButton.hx",259,0xbb6c9298)
HX_LOCAL_STACK_FRAME(_hx_pos_8344d6e231fc33c4_283_onOverHandler,"flixel.addons.ui.FlxUIButton","onOverHandler",0x790d9370,"flixel.addons.ui.FlxUIButton.onOverHandler","flixel/addons/ui/FlxUIButton.hx",283,0xbb6c9298)
HX_LOCAL_STACK_FRAME(_hx_pos_8344d6e231fc33c4_307_onOutHandler,"flixel.addons.ui.FlxUIButton","onOutHandler",0x7e879b82,"flixel.addons.ui.FlxUIButton.onOutHandler","flixel/addons/ui/FlxUIButton.hx",307,0xbb6c9298)
HX_LOCAL_STACK_FRAME(_hx_pos_8344d6e231fc33c4_331_onUpHandler,"flixel.addons.ui.FlxUIButton","onUpHandler",0xc867c2c9,"flixel.addons.ui.FlxUIButton.onUpHandler","flixel/addons/ui/FlxUIButton.hx",331,0xbb6c9298)
namespace flixel{
namespace addons{
namespace ui{

void FlxUIButton_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,::String Label, ::Dynamic OnClick, ::Dynamic __o_LoadDefaultGraphics, ::Dynamic __o_LoadBlank, ::Dynamic __o_Color){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
 ::Dynamic LoadDefaultGraphics = __o_LoadDefaultGraphics.Default(true);
 ::Dynamic LoadBlank = __o_LoadBlank.Default(false);
 ::Dynamic Color = __o_Color.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_8344d6e231fc33c4_33_new)
HXLINE(  43)		this->down_toggle_style = null();
HXLINE(  42)		this->over_toggle_style = null();
HXLINE(  41)		this->up_toggle_style = null();
HXLINE(  39)		this->down_style = null();
HXLINE(  38)		this->over_style = null();
HXLINE(  37)		this->up_style = null();
HXLINE(  57)		super::__construct(X,Y,OnClick);
HXLINE(  58)		this->set_color(Color);
HXLINE(  59)		if (hx::IsNotNull( Label )) {
HXLINE(  62)			this->set_label( ::flixel::addons::ui::FlxUIText_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)80,Label,(int)8,null()));
HXLINE(  63)			( ( ::flixel::text::FlxText)(this->label) )->setFormat(null(),(int)8,(int)3355443,HX_("center",d5,25,db,05),null(),null(),null());
            		}
HXLINE(  66)		if (LoadBlank) {
HXLINE(  68)			this->_no_graphic = true;
            		}
HXLINE(  71)		if (LoadDefaultGraphics) {
HXLINE(  73)			Float _hx_tmp = this->get_width();
HXDLIN(  73)			this->resize(_hx_tmp,this->get_height());
            		}
            		else {
HXLINE(  77)			if ((this->_no_graphic == false)) {
HXLINE(  79)				Float _hx_tmp1 = this->get_width();
HXDLIN(  79)				this->doResize(_hx_tmp1,this->get_height(),false);
            			}
            			else {
HXLINE(  86)				Float _hx_tmp2 = this->get_width();
HXDLIN(  86)				this->doResize(_hx_tmp2,this->get_height(),true);
            			}
            		}
            	}

Dynamic FlxUIButton_obj::__CreateEmpty() { return new FlxUIButton_obj; }

void *FlxUIButton_obj::_hx_vtable = 0;

Dynamic FlxUIButton_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxUIButton_obj > _hx_result = new FlxUIButton_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6]);
	return _hx_result;
}

bool FlxUIButton_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1aa5d1c2) {
		if (inClassId<=(int)0x1115e075) {
			if (inClassId<=(int)0x0b6ffd77) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
			} else {
				return inClassId==(int)0x1115e075;
			}
		} else {
			return inClassId==(int)0x1aa5d1c2;
		}
	} else {
		if (inClassId<=(int)0x2e105115) {
			return inClassId==(int)0x25a685e0 || inClassId==(int)0x2e105115;
		} else {
			return inClassId==(int)0x50397899;
		}
	}
}

static ::flixel::addons::ui::interfaces::IFlxUIButton_obj _hx_flixel_addons_ui_FlxUIButton__hx_flixel_addons_ui_interfaces_IFlxUIButton= {
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUIButton_obj::destroy,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIButton_obj::set_toggled,
	(  ::flixel::FlxSprite (hx::Object::*)( ::flixel::FlxSprite))&::flixel::addons::ui::FlxUIButton_obj::set_toggle_label,
	( bool (hx::Object::*)())&::flixel::addons::ui::FlxUIButton_obj::get_justMousedOver,
	( bool (hx::Object::*)())&::flixel::addons::ui::FlxUIButton_obj::get_mouseIsOver,
	( bool (hx::Object::*)())&::flixel::addons::ui::FlxUIButton_obj::get_mouseIsOut,
	( bool (hx::Object::*)())&::flixel::addons::ui::FlxUIButton_obj::get_justMousedOut,
	( int (hx::Object::*)(int))&::flixel::addons::ui::FlxUIButton_obj::set_status,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUIButton_obj::autoCenterLabel,
	( void (hx::Object::*)(::cpp::VirtualArray,hx::Null< int > ,hx::Null< int > ,::Array< ::Dynamic>,hx::Null< int > ,hx::Null< Float > ,hx::Null< bool > ,hx::Null< int > ,hx::Null< int > ,::Array< int >))&::flixel::addons::ui::FlxUIButton_obj::loadGraphicSlice9,
	( void (hx::Object::*)(::cpp::VirtualArray,::String))&::flixel::addons::ui::FlxUIButton_obj::loadGraphicsMultiple,
	( void (hx::Object::*)( ::Dynamic,hx::Null< bool > ,::String))&::flixel::addons::ui::FlxUIButton_obj::loadGraphicsUpOverDown,
	( void (hx::Object::*)(::String))&::flixel::addons::ui::FlxUIButton_obj::forceStateHandler,
};

static ::flixel::IFlxSprite_obj _hx_flixel_addons_ui_FlxUIButton__hx_flixel_IFlxSprite= {
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIButton_obj::set_active,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIButton_obj::set_visible,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIButton_obj::set_alive,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIButton_obj::set_exists,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUIButton_obj::draw,
	( void (hx::Object::*)(Float))&::flixel::addons::ui::FlxUIButton_obj::update,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUIButton_obj::destroy,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUIButton_obj::kill,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUIButton_obj::revive,
	( ::String (hx::Object::*)())&::flixel::addons::ui::FlxUIButton_obj::toString,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUIButton_obj::set_x,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUIButton_obj::set_y,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUIButton_obj::set_alpha,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUIButton_obj::set_angle,
	( int (hx::Object::*)(int))&::flixel::addons::ui::FlxUIButton_obj::set_facing,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIButton_obj::set_moves,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIButton_obj::set_immovable,
	( void (hx::Object::*)(Float,Float))&::flixel::addons::ui::FlxUIButton_obj::reset,
	( void (hx::Object::*)(hx::Null< Float > ,hx::Null< Float > ))&::flixel::addons::ui::FlxUIButton_obj::setPosition,
};

static ::flixel::IFlxBasic_obj _hx_flixel_addons_ui_FlxUIButton__hx_flixel_IFlxBasic= {
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIButton_obj::set_active,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIButton_obj::set_visible,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIButton_obj::set_alive,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIButton_obj::set_exists,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUIButton_obj::draw,
	( void (hx::Object::*)(Float))&::flixel::addons::ui::FlxUIButton_obj::update,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUIButton_obj::destroy,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUIButton_obj::kill,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUIButton_obj::revive,
	( ::String (hx::Object::*)())&::flixel::addons::ui::FlxUIButton_obj::toString,
};

static ::flixel::util::IFlxDestroyable_obj _hx_flixel_addons_ui_FlxUIButton__hx_flixel_util_IFlxDestroyable= {
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUIButton_obj::destroy,
};

static ::flixel::addons::ui::interfaces::IFlxUIWidget_obj _hx_flixel_addons_ui_FlxUIButton__hx_flixel_addons_ui_interfaces_IFlxUIWidget= {
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIButton_obj::set_active,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIButton_obj::set_visible,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIButton_obj::set_alive,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIButton_obj::set_exists,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUIButton_obj::draw,
	( void (hx::Object::*)(Float))&::flixel::addons::ui::FlxUIButton_obj::update,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUIButton_obj::destroy,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUIButton_obj::kill,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUIButton_obj::revive,
	( ::String (hx::Object::*)())&::flixel::addons::ui::FlxUIButton_obj::toString,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUIButton_obj::set_x,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUIButton_obj::set_y,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUIButton_obj::set_alpha,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUIButton_obj::set_angle,
	( int (hx::Object::*)(int))&::flixel::addons::ui::FlxUIButton_obj::set_facing,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIButton_obj::set_moves,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIButton_obj::set_immovable,
	( void (hx::Object::*)(Float,Float))&::flixel::addons::ui::FlxUIButton_obj::reset,
	( void (hx::Object::*)(hx::Null< Float > ,hx::Null< Float > ))&::flixel::addons::ui::FlxUIButton_obj::setPosition,
	( Float (hx::Object::*)())&::flixel::addons::ui::FlxUIButton_obj::get_width,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUIButton_obj::set_width,
	( Float (hx::Object::*)())&::flixel::addons::ui::FlxUIButton_obj::get_height,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUIButton_obj::set_height,
};

static ::flixel::addons::ui::interfaces::ILabeled_obj _hx_flixel_addons_ui_FlxUIButton__hx_flixel_addons_ui_interfaces_ILabeled= {
	(  ::flixel::addons::ui::FlxUIText (hx::Object::*)())&::flixel::addons::ui::FlxUIButton_obj::getLabel,
	(  ::flixel::addons::ui::FlxUIText (hx::Object::*)( ::flixel::addons::ui::FlxUIText))&::flixel::addons::ui::FlxUIButton_obj::setLabel,
};

static ::flixel::addons::ui::interfaces::IHasParams_obj _hx_flixel_addons_ui_FlxUIButton__hx_flixel_addons_ui_interfaces_IHasParams= {
	( ::cpp::VirtualArray (hx::Object::*)(::cpp::VirtualArray))&::flixel::addons::ui::FlxUIButton_obj::set_params,
};

void *FlxUIButton_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x2772d80c: return &_hx_flixel_addons_ui_FlxUIButton__hx_flixel_addons_ui_interfaces_IFlxUIButton;
		case (int)0x897c83aa: return &_hx_flixel_addons_ui_FlxUIButton__hx_flixel_IFlxSprite;
		case (int)0x284cfea9: return &_hx_flixel_addons_ui_FlxUIButton__hx_flixel_IFlxBasic;
		case (int)0xd4fe2fcd: return &_hx_flixel_addons_ui_FlxUIButton__hx_flixel_util_IFlxDestroyable;
		case (int)0x998525de: return &_hx_flixel_addons_ui_FlxUIButton__hx_flixel_addons_ui_interfaces_IFlxUIWidget;
		case (int)0xa7145b87: return &_hx_flixel_addons_ui_FlxUIButton__hx_flixel_addons_ui_interfaces_ILabeled;
		case (int)0x9e5db374: return &_hx_flixel_addons_ui_FlxUIButton__hx_flixel_addons_ui_interfaces_IHasParams;
	}
	return super::_hx_getInterface(inHash);
}

 ::flixel::text::FlxText FlxUIButton_obj::setLabelFormat(::String Font,hx::Null< int >  __o_Size,hx::Null< int >  __o_Color,::String Alignment, ::flixel::text::FlxTextBorderStyle BorderStyle,hx::Null< int >  __o_BorderColor,hx::Null< bool >  __o_Embedded){
int Size = __o_Size.Default(8);
int Color = __o_Color.Default(-1);
int BorderColor = __o_BorderColor.Default(0);
bool Embedded = __o_Embedded.Default(true);
            	HX_STACKFRAME(&_hx_pos_8344d6e231fc33c4_106_setLabelFormat)
HXLINE( 107)		if (hx::IsNotNull( ( ( ::flixel::addons::ui::FlxUIText)(this->label) ) )) {
HXLINE( 109)			( ( ::flixel::text::FlxText)(this->label) )->setFormat(Font,Size,Color,Alignment,BorderStyle,BorderColor,Embedded);
HXLINE( 117)			return ( ( ::flixel::text::FlxText)(this->label) );
            		}
HXLINE( 119)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC7(FlxUIButton_obj,setLabelFormat,return )

void FlxUIButton_obj::autoCenterLabel(){
            	HX_STACKFRAME(&_hx_pos_8344d6e231fc33c4_124_autoCenterLabel)
HXDLIN( 124)		this->super::autoCenterLabel();
            	}


 ::flixel::FlxSprite FlxUIButton_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_8344d6e231fc33c4_128_clone)
HXLINE( 129)		::String newButton;
HXDLIN( 129)		if (hx::IsNull( ( ( ::flixel::addons::ui::FlxUIText)(this->label) ) )) {
HXLINE( 129)			newButton = null();
            		}
            		else {
HXLINE( 129)			newButton = ( ( ::flixel::text::FlxText)(this->label) )->text;
            		}
HXDLIN( 129)		 ::flixel::addons::ui::FlxUIButton newButton1 =  ::flixel::addons::ui::FlxUIButton_obj::__alloc( HX_CTX ,(int)0,(int)0,newButton,this->onUp->callback,false,null(),null());
HXLINE( 130)		newButton1->copyGraphic(( ( ::flixel::addons::ui::FlxUITypedButton)(hx::ObjectPtr<OBJ_>(this)) ));
HXLINE( 131)		newButton1->copyStyle(( ( ::flixel::addons::ui::FlxUITypedButton)(hx::ObjectPtr<OBJ_>(this)) ));
HXLINE( 132)		return newButton1;
            	}


void FlxUIButton_obj::copyStyle( ::flixel::addons::ui::FlxUITypedButton other){
            	HX_STACKFRAME(&_hx_pos_8344d6e231fc33c4_135_copyStyle)
HXLINE( 136)		this->super::copyStyle(other);
HXLINE( 137)		if (::Std_obj::is(other,hx::ClassOf< ::flixel::addons::ui::FlxUIButton >())) {
HXLINE( 138)			 ::flixel::addons::ui::FlxUIButton fuib = ( ( ::flixel::addons::ui::FlxUIButton)(other) );
HXLINE( 140)			this->up_style = fuib->up_style;
HXLINE( 141)			this->over_style = fuib->over_style;
HXLINE( 142)			this->down_style = fuib->down_style;
HXLINE( 144)			this->up_toggle_style = fuib->up_toggle_style;
HXLINE( 145)			this->over_toggle_style = fuib->over_toggle_style;
HXLINE( 146)			this->down_toggle_style = fuib->down_toggle_style;
HXLINE( 148)			 ::flixel::addons::ui::FlxUIText t = ( ( ::flixel::addons::ui::FlxUIText)(fuib->label) );
HXLINE( 150)			 ::openfl::_legacy::text::TextFormat tf = t->textField->get_defaultTextFormat();
HXLINE( 152)			if ((t->_font.indexOf(::flixel::_hx_system::FlxAssets_obj::FONT_DEFAULT,null()) == (int)-1)) {
HXLINE( 154)				 ::flixel::addons::ui::FontDef fd = ::flixel::addons::ui::FontDef_obj::copyFromFlxText(t);
HXLINE( 155)				fd->apply(null(),( ( ::flixel::text::FlxText)(this->label) ));
            			}
            			else {
HXLINE( 159)				::String flxAlign = ::flixel::text::_FlxText::FlxTextAlign_Impl__obj::fromOpenFL(tf->align);
HXLINE( 162)				 ::flixel::addons::ui::FlxUIText _hx_tmp = ( ( ::flixel::addons::ui::FlxUIText)(this->label) );
HXDLIN( 162)				int _hx_tmp1 = ::Std_obj::_hx_int(tf->size);
HXDLIN( 162)				 ::Dynamic tf1 = tf->color;
HXDLIN( 162)				 ::flixel::text::FlxTextBorderStyle t1 = t->borderStyle;
HXDLIN( 162)				int t2 = t->borderColor;
HXDLIN( 162)				_hx_tmp->setFormat(null(),_hx_tmp1,tf1,flxAlign,t1,t2,t->textField->set_embedFonts(true));
            			}
            		}
            	}


 ::flixel::addons::ui::FlxUIText FlxUIButton_obj::setLabel( ::flixel::addons::ui::FlxUIText t){
            	HX_STACKFRAME(&_hx_pos_8344d6e231fc33c4_169_setLabel)
HXDLIN( 169)		this->set_label(t);
HXDLIN( 169)		return ( ( ::flixel::addons::ui::FlxUIText)(this->label) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUIButton_obj,setLabel,return )

 ::flixel::addons::ui::FlxUIText FlxUIButton_obj::getLabel(){
            	HX_STACKFRAME(&_hx_pos_8344d6e231fc33c4_170_getLabel)
HXDLIN( 170)		return ( ( ::flixel::addons::ui::FlxUIText)(this->label) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUIButton_obj,getLabel,return )

void FlxUIButton_obj::resize(Float W,Float H){
            	HX_STACKFRAME(&_hx_pos_8344d6e231fc33c4_176_resize)
HXDLIN( 176)		this->super::resize(W,H);
            	}


void FlxUIButton_obj::addIcon( ::flixel::FlxSprite icon,hx::Null< int >  __o_X,hx::Null< int >  __o_Y, ::Dynamic __o_center){
int X = __o_X.Default(0);
int Y = __o_Y.Default(0);
 ::Dynamic center = __o_center.Default(true);
            	HX_STACKFRAME(&_hx_pos_8344d6e231fc33c4_180_addIcon)
HXLINE( 182)		this->_noIconGraphicsBkup = this->graphic->bitmap->clone();
HXLINE( 185)		 ::openfl::_legacy::display::BitmapData newBmp = this->_noIconGraphicsBkup->clone();
HXLINE( 188)		::String key = ((this->graphic->key + HX_(",icon:",f5,82,8b,4e)) + icon->graphic->key);
HXLINE( 189)		 ::flixel::graphics::FlxGraphic newGraphic = ::flixel::FlxG_obj::bitmap->add(newBmp,false,key);
HXLINE( 192)		int _hx_tmp = ::Std_obj::_hx_int(this->get_width());
HXDLIN( 192)		this->loadGraphic(newGraphic,true,_hx_tmp,::Std_obj::_hx_int(this->get_height()),null(),null());
HXLINE( 194)		int sx = X;
HXLINE( 195)		int sy = Y;
HXLINE( 197)		if (center) {
HXLINE( 198)			Float sx1 = this->get_width();
HXDLIN( 198)			sx = ::Std_obj::_hx_int(((Float)(sx1 - icon->get_width()) / (Float)(int)2));
HXLINE( 199)			Float sy1 = this->get_height();
HXDLIN( 199)			sy = ::Std_obj::_hx_int(((Float)(sy1 - icon->get_height()) / (Float)(int)2));
            		}
HXLINE( 203)		{
HXLINE( 203)			int _g1 = (int)0;
HXDLIN( 203)			int _g = this->numFrames;
HXDLIN( 203)			while((_g1 < _g)){
HXLINE( 203)				_g1 = (_g1 + (int)1);
HXDLIN( 203)				int i = (_g1 - (int)1);
HXLINE( 205)				int _hx_tmp1;
HXDLIN( 205)				if ((i > (int)2)) {
HXLINE( 205)					_hx_tmp1 = (int)2;
            				}
            				else {
HXLINE( 205)					_hx_tmp1 = i;
            				}
HXDLIN( 205)				int _hx_tmp2 = (sx + ::Std_obj::_hx_int(this->labelOffsets->__get(_hx_tmp1).StaticCast<  ::flixel::math::FlxPoint >()->x));
HXDLIN( 205)				int _hx_tmp3 = (sy + ::Std_obj::_hx_int((i * this->get_height())));
HXDLIN( 205)				int _hx_tmp4;
HXDLIN( 205)				if ((i > (int)2)) {
HXLINE( 205)					_hx_tmp4 = (int)2;
            				}
            				else {
HXLINE( 205)					_hx_tmp4 = i;
            				}
HXDLIN( 205)				this->stamp(icon,_hx_tmp2,(_hx_tmp3 + ::Std_obj::_hx_int(this->labelOffsets->__get(_hx_tmp4).StaticCast<  ::flixel::math::FlxPoint >()->y)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUIButton_obj,addIcon,(void))

void FlxUIButton_obj::removeIcon(){
            	HX_GC_STACKFRAME(&_hx_pos_8344d6e231fc33c4_211_removeIcon)
HXDLIN( 211)		if (hx::IsNotNull( this->_noIconGraphicsBkup )) {
HXLINE( 214)			 ::openfl::_legacy::display::BitmapData _hx_tmp = this->graphic->bitmap;
HXDLIN( 214)			_hx_tmp->fillRect(this->graphic->bitmap->get_rect(),(int)0);
HXLINE( 215)			 ::openfl::_legacy::display::BitmapData _hx_tmp1 = this->graphic->bitmap;
HXDLIN( 215)			 ::openfl::_legacy::display::BitmapData _hx_tmp2 = this->_noIconGraphicsBkup;
HXDLIN( 215)			int _hx_tmp3 = this->_noIconGraphicsBkup->get_width();
HXDLIN( 215)			 ::openfl::_legacy::geom::Rectangle _hx_tmp4 =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,_hx_tmp3,this->_noIconGraphicsBkup->get_height());
HXDLIN( 215)			_hx_tmp1->copyPixels(_hx_tmp2,_hx_tmp4, ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,null(),null()),null(),null(),null());
HXLINE( 216)			this->dirty = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUIButton_obj,removeIcon,(void))

void FlxUIButton_obj::changeIcon( ::flixel::FlxSprite newIcon){
            	HX_STACKFRAME(&_hx_pos_8344d6e231fc33c4_225_changeIcon)
HXLINE( 226)		this->removeIcon();
HXLINE( 227)		this->addIcon(newIcon,null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUIButton_obj,changeIcon,(void))

void FlxUIButton_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_8344d6e231fc33c4_231_destroy)
HXLINE( 232)		this->_noIconGraphicsBkup = ::flixel::util::FlxDestroyUtil_obj::dispose(this->_noIconGraphicsBkup);
HXLINE( 233)		this->super::destroy();
            	}


void FlxUIButton_obj::loadDefaultGraphic(){
            	HX_STACKFRAME(&_hx_pos_8344d6e231fc33c4_239_loadDefaultGraphic)
            	}


void FlxUIButton_obj::resetHelpers(){
            	HX_STACKFRAME(&_hx_pos_8344d6e231fc33c4_247_resetHelpers)
HXLINE( 248)		this->super::resetHelpers();
HXLINE( 250)		if (hx::IsNotNull( ( ( ::flixel::addons::ui::FlxUIText)(this->label) ) )) {
HXLINE( 252)			 ::flixel::addons::ui::FlxUIText _hx_tmp = ( ( ::flixel::addons::ui::FlxUIText)(this->label) );
HXDLIN( 252)			Float _hx_tmp1 = this->get_width();
HXDLIN( 252)			_hx_tmp->set_width((( ( ::flixel::FlxSprite)(this->label) )->frameWidth = ::Std_obj::_hx_int(_hx_tmp1)));
HXLINE( 253)			 ::flixel::addons::ui::FlxUIText _hx_tmp2 = ( ( ::flixel::addons::ui::FlxUIText)(this->label) );
HXDLIN( 253)			_hx_tmp2->set_fieldWidth(( ( ::flixel::text::FlxText)(this->label) )->get_width());
HXLINE( 254)			 ::flixel::addons::ui::FlxUIText _hx_tmp3 = ( ( ::flixel::addons::ui::FlxUIText)(this->label) );
HXDLIN( 254)			_hx_tmp3->set_size(::Std_obj::_hx_int(( ( ::flixel::text::FlxText)(this->label) )->_defaultFormat->size));
            		}
            	}


void FlxUIButton_obj::onDownHandler(){
            	HX_STACKFRAME(&_hx_pos_8344d6e231fc33c4_259_onDownHandler)
HXLINE( 260)		this->super::onDownHandler();
HXLINE( 261)		if (hx::IsNotNull( ( ( ::flixel::addons::ui::FlxUIText)(this->label) ) )) {
HXLINE( 262)			bool _hx_tmp;
HXDLIN( 262)			if (this->toggled) {
HXLINE( 262)				_hx_tmp = hx::IsNotNull( this->down_toggle_style );
            			}
            			else {
HXLINE( 262)				_hx_tmp = false;
            			}
HXDLIN( 262)			if (_hx_tmp) {
HXLINE( 263)				( ( ::flixel::text::FlxText)(this->label) )->set_color(this->down_toggle_style->color);
HXLINE( 264)				if (hx::IsNotNull( this->down_toggle_style->border )) {
HXLINE( 265)					( ( ::flixel::text::FlxText)(this->label) )->set_borderStyle(this->down_toggle_style->border->style);
HXLINE( 266)					( ( ::flixel::text::FlxText)(this->label) )->set_borderColor(this->down_toggle_style->border->color);
HXLINE( 267)					( ( ::flixel::text::FlxText)(this->label) )->set_borderSize(this->down_toggle_style->border->size);
HXLINE( 268)					( ( ::flixel::text::FlxText)(this->label) )->set_borderQuality(this->down_toggle_style->border->quality);
            				}
            			}
            			else {
HXLINE( 270)				bool _hx_tmp1;
HXDLIN( 270)				if (!(this->toggled)) {
HXLINE( 270)					_hx_tmp1 = hx::IsNotNull( this->down_style );
            				}
            				else {
HXLINE( 270)					_hx_tmp1 = false;
            				}
HXDLIN( 270)				if (_hx_tmp1) {
HXLINE( 271)					( ( ::flixel::text::FlxText)(this->label) )->set_color(this->down_style->color);
HXLINE( 272)					if (hx::IsNotNull( this->down_style->border )) {
HXLINE( 273)						( ( ::flixel::text::FlxText)(this->label) )->set_borderStyle(this->down_style->border->style);
HXLINE( 274)						( ( ::flixel::text::FlxText)(this->label) )->set_borderColor(this->down_style->border->color);
HXLINE( 275)						( ( ::flixel::text::FlxText)(this->label) )->set_borderSize(this->down_style->border->size);
HXLINE( 276)						( ( ::flixel::text::FlxText)(this->label) )->set_borderQuality(this->down_style->border->quality);
            					}
            				}
            			}
            		}
            	}


void FlxUIButton_obj::onOverHandler(){
            	HX_STACKFRAME(&_hx_pos_8344d6e231fc33c4_283_onOverHandler)
HXLINE( 284)		this->super::onOverHandler();
HXLINE( 285)		if (hx::IsNotNull( ( ( ::flixel::addons::ui::FlxUIText)(this->label) ) )) {
HXLINE( 286)			bool _hx_tmp;
HXDLIN( 286)			if (this->toggled) {
HXLINE( 286)				_hx_tmp = hx::IsNotNull( this->over_toggle_style );
            			}
            			else {
HXLINE( 286)				_hx_tmp = false;
            			}
HXDLIN( 286)			if (_hx_tmp) {
HXLINE( 287)				( ( ::flixel::text::FlxText)(this->label) )->set_color(this->over_toggle_style->color);
HXLINE( 288)				if (hx::IsNotNull( this->over_toggle_style->border )) {
HXLINE( 289)					( ( ::flixel::text::FlxText)(this->label) )->set_borderStyle(this->over_toggle_style->border->style);
HXLINE( 290)					( ( ::flixel::text::FlxText)(this->label) )->set_borderColor(this->over_toggle_style->border->color);
HXLINE( 291)					( ( ::flixel::text::FlxText)(this->label) )->set_borderSize(this->over_toggle_style->border->size);
HXLINE( 292)					( ( ::flixel::text::FlxText)(this->label) )->set_borderQuality(this->over_toggle_style->border->quality);
            				}
            			}
            			else {
HXLINE( 294)				bool _hx_tmp1;
HXDLIN( 294)				if (!(this->toggled)) {
HXLINE( 294)					_hx_tmp1 = hx::IsNotNull( this->over_style );
            				}
            				else {
HXLINE( 294)					_hx_tmp1 = false;
            				}
HXDLIN( 294)				if (_hx_tmp1) {
HXLINE( 295)					( ( ::flixel::text::FlxText)(this->label) )->set_color(this->over_style->color);
HXLINE( 296)					if (hx::IsNotNull( this->over_style->border )) {
HXLINE( 297)						( ( ::flixel::text::FlxText)(this->label) )->set_borderStyle(this->over_style->border->style);
HXLINE( 298)						( ( ::flixel::text::FlxText)(this->label) )->set_borderColor(this->over_style->border->color);
HXLINE( 299)						( ( ::flixel::text::FlxText)(this->label) )->set_borderSize(this->over_style->border->size);
HXLINE( 300)						( ( ::flixel::text::FlxText)(this->label) )->set_borderQuality(this->over_style->border->quality);
            					}
            				}
            			}
            		}
            	}


void FlxUIButton_obj::onOutHandler(){
            	HX_STACKFRAME(&_hx_pos_8344d6e231fc33c4_307_onOutHandler)
HXLINE( 308)		this->super::onOutHandler();
HXLINE( 309)		if (hx::IsNotNull( ( ( ::flixel::addons::ui::FlxUIText)(this->label) ) )) {
HXLINE( 310)			bool _hx_tmp;
HXDLIN( 310)			if (this->toggled) {
HXLINE( 310)				_hx_tmp = hx::IsNotNull( this->up_toggle_style );
            			}
            			else {
HXLINE( 310)				_hx_tmp = false;
            			}
HXDLIN( 310)			if (_hx_tmp) {
HXLINE( 311)				( ( ::flixel::text::FlxText)(this->label) )->set_color(this->up_toggle_style->color);
HXLINE( 312)				if (hx::IsNotNull( this->up_toggle_style->border )) {
HXLINE( 313)					( ( ::flixel::text::FlxText)(this->label) )->set_borderStyle(this->up_toggle_style->border->style);
HXLINE( 314)					( ( ::flixel::text::FlxText)(this->label) )->set_borderColor(this->up_toggle_style->border->color);
HXLINE( 315)					( ( ::flixel::text::FlxText)(this->label) )->set_borderSize(this->up_toggle_style->border->size);
HXLINE( 316)					( ( ::flixel::text::FlxText)(this->label) )->set_borderQuality(this->up_toggle_style->border->quality);
            				}
            			}
            			else {
HXLINE( 318)				bool _hx_tmp1;
HXDLIN( 318)				if (!(this->toggled)) {
HXLINE( 318)					_hx_tmp1 = hx::IsNotNull( this->up_style );
            				}
            				else {
HXLINE( 318)					_hx_tmp1 = false;
            				}
HXDLIN( 318)				if (_hx_tmp1) {
HXLINE( 319)					( ( ::flixel::text::FlxText)(this->label) )->set_color(this->up_style->color);
HXLINE( 320)					if (hx::IsNotNull( this->up_style->border )) {
HXLINE( 321)						( ( ::flixel::text::FlxText)(this->label) )->set_borderStyle(this->up_style->border->style);
HXLINE( 322)						( ( ::flixel::text::FlxText)(this->label) )->set_borderColor(this->up_style->border->color);
HXLINE( 323)						( ( ::flixel::text::FlxText)(this->label) )->set_borderSize(this->up_style->border->size);
HXLINE( 324)						( ( ::flixel::text::FlxText)(this->label) )->set_borderQuality(this->up_style->border->quality);
            					}
            				}
            			}
            		}
            	}


void FlxUIButton_obj::onUpHandler(){
            	HX_STACKFRAME(&_hx_pos_8344d6e231fc33c4_331_onUpHandler)
HXLINE( 332)		this->super::onUpHandler();
HXLINE( 333)		if (hx::IsNotNull( ( ( ::flixel::addons::ui::FlxUIText)(this->label) ) )) {
HXLINE( 334)			bool _hx_tmp;
HXDLIN( 334)			if (this->toggled) {
HXLINE( 334)				_hx_tmp = hx::IsNotNull( this->up_toggle_style );
            			}
            			else {
HXLINE( 334)				_hx_tmp = false;
            			}
HXDLIN( 334)			if (_hx_tmp) {
HXLINE( 335)				( ( ::flixel::text::FlxText)(this->label) )->set_color(this->up_toggle_style->color);
HXLINE( 336)				if (hx::IsNotNull( this->up_toggle_style->border )) {
HXLINE( 337)					( ( ::flixel::text::FlxText)(this->label) )->set_borderStyle(this->up_toggle_style->border->style);
HXLINE( 338)					( ( ::flixel::text::FlxText)(this->label) )->set_borderColor(this->up_toggle_style->border->color);
HXLINE( 339)					( ( ::flixel::text::FlxText)(this->label) )->set_borderSize(this->up_toggle_style->border->size);
HXLINE( 340)					( ( ::flixel::text::FlxText)(this->label) )->set_borderQuality(this->up_toggle_style->border->quality);
            				}
            			}
            			else {
HXLINE( 342)				bool _hx_tmp1;
HXDLIN( 342)				if (!(this->toggled)) {
HXLINE( 342)					_hx_tmp1 = hx::IsNotNull( this->up_style );
            				}
            				else {
HXLINE( 342)					_hx_tmp1 = false;
            				}
HXDLIN( 342)				if (_hx_tmp1) {
HXLINE( 343)					( ( ::flixel::text::FlxText)(this->label) )->set_color(this->up_style->color);
HXLINE( 344)					if (hx::IsNotNull( this->up_style->border )) {
HXLINE( 345)						( ( ::flixel::text::FlxText)(this->label) )->set_borderStyle(this->up_style->border->style);
HXLINE( 346)						( ( ::flixel::text::FlxText)(this->label) )->set_borderColor(this->up_style->border->color);
HXLINE( 347)						( ( ::flixel::text::FlxText)(this->label) )->set_borderSize(this->up_style->border->size);
HXLINE( 348)						( ( ::flixel::text::FlxText)(this->label) )->set_borderQuality(this->up_style->border->quality);
            					}
            				}
            			}
            		}
            	}



hx::ObjectPtr< FlxUIButton_obj > FlxUIButton_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,::String Label, ::Dynamic OnClick, ::Dynamic __o_LoadDefaultGraphics, ::Dynamic __o_LoadBlank, ::Dynamic __o_Color) {
	hx::ObjectPtr< FlxUIButton_obj > __this = new FlxUIButton_obj();
	__this->__construct(__o_X,__o_Y,Label,OnClick,__o_LoadDefaultGraphics,__o_LoadBlank,__o_Color);
	return __this;
}

hx::ObjectPtr< FlxUIButton_obj > FlxUIButton_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,::String Label, ::Dynamic OnClick, ::Dynamic __o_LoadDefaultGraphics, ::Dynamic __o_LoadBlank, ::Dynamic __o_Color) {
	FlxUIButton_obj *__this = (FlxUIButton_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxUIButton_obj), true, "flixel.addons.ui.FlxUIButton"));
	*(void **)__this = FlxUIButton_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,Label,OnClick,__o_LoadDefaultGraphics,__o_LoadBlank,__o_Color);
	return __this;
}

FlxUIButton_obj::FlxUIButton_obj()
{
}

void FlxUIButton_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxUIButton);
	HX_MARK_MEMBER_NAME(_noIconGraphicsBkup,"_noIconGraphicsBkup");
	HX_MARK_MEMBER_NAME(up_style,"up_style");
	HX_MARK_MEMBER_NAME(over_style,"over_style");
	HX_MARK_MEMBER_NAME(down_style,"down_style");
	HX_MARK_MEMBER_NAME(up_toggle_style,"up_toggle_style");
	HX_MARK_MEMBER_NAME(over_toggle_style,"over_toggle_style");
	HX_MARK_MEMBER_NAME(down_toggle_style,"down_toggle_style");
	 ::flixel::addons::ui::FlxUITypedButton_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxUIButton_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_noIconGraphicsBkup,"_noIconGraphicsBkup");
	HX_VISIT_MEMBER_NAME(up_style,"up_style");
	HX_VISIT_MEMBER_NAME(over_style,"over_style");
	HX_VISIT_MEMBER_NAME(down_style,"down_style");
	HX_VISIT_MEMBER_NAME(up_toggle_style,"up_toggle_style");
	HX_VISIT_MEMBER_NAME(over_toggle_style,"over_toggle_style");
	HX_VISIT_MEMBER_NAME(down_toggle_style,"down_toggle_style");
	 ::flixel::addons::ui::FlxUITypedButton_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxUIButton_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"resize") ) { return hx::Val( resize_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addIcon") ) { return hx::Val( addIcon_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"up_style") ) { return hx::Val( up_style ); }
		if (HX_FIELD_EQ(inName,"setLabel") ) { return hx::Val( setLabel_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLabel") ) { return hx::Val( getLabel_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"copyStyle") ) { return hx::Val( copyStyle_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"over_style") ) { return hx::Val( over_style ); }
		if (HX_FIELD_EQ(inName,"down_style") ) { return hx::Val( down_style ); }
		if (HX_FIELD_EQ(inName,"removeIcon") ) { return hx::Val( removeIcon_dyn() ); }
		if (HX_FIELD_EQ(inName,"changeIcon") ) { return hx::Val( changeIcon_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onUpHandler") ) { return hx::Val( onUpHandler_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resetHelpers") ) { return hx::Val( resetHelpers_dyn() ); }
		if (HX_FIELD_EQ(inName,"onOutHandler") ) { return hx::Val( onOutHandler_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onDownHandler") ) { return hx::Val( onDownHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"onOverHandler") ) { return hx::Val( onOverHandler_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"setLabelFormat") ) { return hx::Val( setLabelFormat_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"up_toggle_style") ) { return hx::Val( up_toggle_style ); }
		if (HX_FIELD_EQ(inName,"autoCenterLabel") ) { return hx::Val( autoCenterLabel_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"over_toggle_style") ) { return hx::Val( over_toggle_style ); }
		if (HX_FIELD_EQ(inName,"down_toggle_style") ) { return hx::Val( down_toggle_style ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"loadDefaultGraphic") ) { return hx::Val( loadDefaultGraphic_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_noIconGraphicsBkup") ) { return hx::Val( _noIconGraphicsBkup ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxUIButton_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"up_style") ) { up_style=inValue.Cast<  ::flixel::addons::ui::ButtonLabelStyle >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"over_style") ) { over_style=inValue.Cast<  ::flixel::addons::ui::ButtonLabelStyle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"down_style") ) { down_style=inValue.Cast<  ::flixel::addons::ui::ButtonLabelStyle >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"up_toggle_style") ) { up_toggle_style=inValue.Cast<  ::flixel::addons::ui::ButtonLabelStyle >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"over_toggle_style") ) { over_toggle_style=inValue.Cast<  ::flixel::addons::ui::ButtonLabelStyle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"down_toggle_style") ) { down_toggle_style=inValue.Cast<  ::flixel::addons::ui::ButtonLabelStyle >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_noIconGraphicsBkup") ) { _noIconGraphicsBkup=inValue.Cast<  ::openfl::_legacy::display::BitmapData >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxUIButton_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_noIconGraphicsBkup","\x68","\x7e","\x8a","\x62"));
	outFields->push(HX_HCSTRING("up_style","\x0d","\x09","\x77","\xd5"));
	outFields->push(HX_HCSTRING("over_style","\xc6","\x34","\x0b","\x31"));
	outFields->push(HX_HCSTRING("down_style","\x54","\x5a","\x74","\x88"));
	outFields->push(HX_HCSTRING("up_toggle_style","\xaa","\xa2","\xcd","\x16"));
	outFields->push(HX_HCSTRING("over_toggle_style","\x11","\x50","\x59","\xe4"));
	outFields->push(HX_HCSTRING("down_toggle_style","\x43","\x18","\x8a","\x40"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxUIButton_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::_legacy::display::BitmapData*/ ,(int)offsetof(FlxUIButton_obj,_noIconGraphicsBkup),HX_HCSTRING("_noIconGraphicsBkup","\x68","\x7e","\x8a","\x62")},
	{hx::fsObject /*::flixel::addons::ui::ButtonLabelStyle*/ ,(int)offsetof(FlxUIButton_obj,up_style),HX_HCSTRING("up_style","\x0d","\x09","\x77","\xd5")},
	{hx::fsObject /*::flixel::addons::ui::ButtonLabelStyle*/ ,(int)offsetof(FlxUIButton_obj,over_style),HX_HCSTRING("over_style","\xc6","\x34","\x0b","\x31")},
	{hx::fsObject /*::flixel::addons::ui::ButtonLabelStyle*/ ,(int)offsetof(FlxUIButton_obj,down_style),HX_HCSTRING("down_style","\x54","\x5a","\x74","\x88")},
	{hx::fsObject /*::flixel::addons::ui::ButtonLabelStyle*/ ,(int)offsetof(FlxUIButton_obj,up_toggle_style),HX_HCSTRING("up_toggle_style","\xaa","\xa2","\xcd","\x16")},
	{hx::fsObject /*::flixel::addons::ui::ButtonLabelStyle*/ ,(int)offsetof(FlxUIButton_obj,over_toggle_style),HX_HCSTRING("over_toggle_style","\x11","\x50","\x59","\xe4")},
	{hx::fsObject /*::flixel::addons::ui::ButtonLabelStyle*/ ,(int)offsetof(FlxUIButton_obj,down_toggle_style),HX_HCSTRING("down_toggle_style","\x43","\x18","\x8a","\x40")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxUIButton_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxUIButton_obj_sMemberFields[] = {
	HX_HCSTRING("_noIconGraphicsBkup","\x68","\x7e","\x8a","\x62"),
	HX_HCSTRING("up_style","\x0d","\x09","\x77","\xd5"),
	HX_HCSTRING("over_style","\xc6","\x34","\x0b","\x31"),
	HX_HCSTRING("down_style","\x54","\x5a","\x74","\x88"),
	HX_HCSTRING("up_toggle_style","\xaa","\xa2","\xcd","\x16"),
	HX_HCSTRING("over_toggle_style","\x11","\x50","\x59","\xe4"),
	HX_HCSTRING("down_toggle_style","\x43","\x18","\x8a","\x40"),
	HX_HCSTRING("setLabelFormat","\xc9","\x3b","\x4d","\xf0"),
	HX_HCSTRING("autoCenterLabel","\xb0","\xb4","\x79","\xaf"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("copyStyle","\x3c","\xc9","\x18","\x0a"),
	HX_HCSTRING("setLabel","\xf2","\x76","\xe3","\x7d"),
	HX_HCSTRING("getLabel","\x7e","\x1d","\x86","\xcf"),
	HX_HCSTRING("resize","\xf4","\x59","\x7b","\x08"),
	HX_HCSTRING("addIcon","\x3a","\x2a","\xf0","\x81"),
	HX_HCSTRING("removeIcon","\xdd","\x21","\xd2","\xc2"),
	HX_HCSTRING("changeIcon","\x09","\x1d","\xfc","\x1f"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("loadDefaultGraphic","\xad","\x18","\x08","\x83"),
	HX_HCSTRING("resetHelpers","\x36","\x89","\x3d","\x32"),
	HX_HCSTRING("onDownHandler","\xa9","\xac","\x21","\xcf"),
	HX_HCSTRING("onOverHandler","\xf7","\xf5","\x89","\xaa"),
	HX_HCSTRING("onOutHandler","\xdb","\x26","\xe5","\x9e"),
	HX_HCSTRING("onUpHandler","\x90","\xa5","\xd0","\xa3"),
	::String(null()) };

static void FlxUIButton_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxUIButton_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxUIButton_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxUIButton_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxUIButton_obj::__mClass;

void FlxUIButton_obj::__register()
{
	hx::Object *dummy = new FlxUIButton_obj;
	FlxUIButton_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.ui.FlxUIButton","\x27","\x4c","\x9c","\x14");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxUIButton_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxUIButton_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxUIButton_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxUIButton_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxUIButton_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxUIButton_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace ui
