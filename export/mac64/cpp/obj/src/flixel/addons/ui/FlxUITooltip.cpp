// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_Anchor
#include <flixel/addons/ui/Anchor.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_AnchorPoint
#include <flixel/addons/ui/AnchorPoint.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_BorderDef
#include <flixel/addons/ui/BorderDef.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIText
#include <flixel/addons/ui/FlxUIText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITooltip
#include <flixel/addons/ui/FlxUITooltip.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FontDef
#include <flixel/addons/ui/FontDef.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Matrix
#include <openfl/_legacy/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_TextField
#include <openfl/_legacy/text/TextField.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_TextFormat
#include <openfl/_legacy/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7b5caaba09e0a704_28_new,"flixel.addons.ui.FlxUITooltip","new",0x7e948120,"flixel.addons.ui.FlxUITooltip.new","flixel/addons/ui/FlxUITooltip.hx",28,0xb6bba58f)
HX_LOCAL_STACK_FRAME(_hx_pos_7b5caaba09e0a704_43_show,"flixel.addons.ui.FlxUITooltip","show",0x46accc3d,"flixel.addons.ui.FlxUITooltip.show","flixel/addons/ui/FlxUITooltip.hx",43,0xb6bba58f)
HX_LOCAL_STACK_FRAME(_hx_pos_7b5caaba09e0a704_224_get_height,"flixel.addons.ui.FlxUITooltip","get_height",0x50de5ef0,"flixel.addons.ui.FlxUITooltip.get_height","flixel/addons/ui/FlxUITooltip.hx",224,0xb6bba58f)
HX_LOCAL_STACK_FRAME(_hx_pos_7b5caaba09e0a704_253_hide,"flixel.addons.ui.FlxUITooltip","hide",0x3f682c02,"flixel.addons.ui.FlxUITooltip.hide","flixel/addons/ui/FlxUITooltip.hx",253,0xb6bba58f)
HX_LOCAL_STACK_FRAME(_hx_pos_7b5caaba09e0a704_261_set_anchor,"flixel.addons.ui.FlxUITooltip","set_anchor",0xb2812ff2,"flixel.addons.ui.FlxUITooltip.set_anchor","flixel/addons/ui/FlxUITooltip.hx",261,0xb6bba58f)
HX_LOCAL_STACK_FRAME(_hx_pos_7b5caaba09e0a704_272_set_style,"flixel.addons.ui.FlxUITooltip","set_style",0x4b15ae54,"flixel.addons.ui.FlxUITooltip.set_style","flixel/addons/ui/FlxUITooltip.hx",272,0xb6bba58f)
HX_LOCAL_STACK_FRAME(_hx_pos_7b5caaba09e0a704_278_set_title,"flixel.addons.ui.FlxUITooltip","set_title",0xd7331ebb,"flixel.addons.ui.FlxUITooltip.set_title","flixel/addons/ui/FlxUITooltip.hx",278,0xb6bba58f)
HX_LOCAL_STACK_FRAME(_hx_pos_7b5caaba09e0a704_284_set_body,"flixel.addons.ui.FlxUITooltip","set_body",0xdcfa26df,"flixel.addons.ui.FlxUITooltip.set_body","flixel/addons/ui/FlxUITooltip.hx",284,0xb6bba58f)
HX_LOCAL_STACK_FRAME(_hx_pos_7b5caaba09e0a704_299_refresh,"flixel.addons.ui.FlxUITooltip","refresh",0x9e68ea9b,"flixel.addons.ui.FlxUITooltip.refresh","flixel/addons/ui/FlxUITooltip.hx",299,0xb6bba58f)
static const int _hx_array_data_943db12e_10[] = {
	(int)0,
};
static const int _hx_array_data_943db12e_11[] = {
	(int)1,
};
static const int _hx_array_data_943db12e_12[] = {
	(int)2,
};
static const int _hx_array_data_943db12e_13[] = {
	(int)3,
};
HX_LOCAL_STACK_FRAME(_hx_pos_7b5caaba09e0a704_392_refreshBkg,"flixel.addons.ui.FlxUITooltip","refreshBkg",0x652bdaa3,"flixel.addons.ui.FlxUITooltip.refreshBkg","flixel/addons/ui/FlxUITooltip.hx",392,0xb6bba58f)
HX_LOCAL_STACK_FRAME(_hx_pos_7b5caaba09e0a704_414_getStyleKey,"flixel.addons.ui.FlxUITooltip","getStyleKey",0x6e476464,"flixel.addons.ui.FlxUITooltip.getStyleKey","flixel/addons/ui/FlxUITooltip.hx",414,0xb6bba58f)
HX_LOCAL_STACK_FRAME(_hx_pos_7b5caaba09e0a704_418_makeArrowBkg,"flixel.addons.ui.FlxUITooltip","makeArrowBkg",0x668c4783,"flixel.addons.ui.FlxUITooltip.makeArrowBkg","flixel/addons/ui/FlxUITooltip.hx",418,0xb6bba58f)
HX_LOCAL_STACK_FRAME(_hx_pos_7b5caaba09e0a704_468_getArrowAnchor,"flixel.addons.ui.FlxUITooltip","getArrowAnchor",0x379dff68,"flixel.addons.ui.FlxUITooltip.getArrowAnchor","flixel/addons/ui/FlxUITooltip.hx",468,0xb6bba58f)
HX_LOCAL_STACK_FRAME(_hx_pos_7b5caaba09e0a704_549_styleFix,"flixel.addons.ui.FlxUITooltip","styleFix",0xca970064,"flixel.addons.ui.FlxUITooltip.styleFix","flixel/addons/ui/FlxUITooltip.hx",549,0xb6bba58f)
HX_LOCAL_STACK_FRAME(_hx_pos_7b5caaba09e0a704_665_cloneStyle,"flixel.addons.ui.FlxUITooltip","cloneStyle",0xdd1e97d4,"flixel.addons.ui.FlxUITooltip.cloneStyle","flixel/addons/ui/FlxUITooltip.hx",665,0xb6bba58f)
HX_LOCAL_STACK_FRAME(_hx_pos_7b5caaba09e0a704_693_fillFontDefNulls,"flixel.addons.ui.FlxUITooltip","fillFontDefNulls",0x74a2ef59,"flixel.addons.ui.FlxUITooltip.fillFontDefNulls","flixel/addons/ui/FlxUITooltip.hx",693,0xb6bba58f)
HX_LOCAL_STACK_FRAME(_hx_pos_7b5caaba09e0a704_701_fillFormatNulls,"flixel.addons.ui.FlxUITooltip","fillFormatNulls",0x253ee452,"flixel.addons.ui.FlxUITooltip.fillFormatNulls","flixel/addons/ui/FlxUITooltip.hx",701,0xb6bba58f)
namespace flixel{
namespace addons{
namespace ui{

void FlxUITooltip_obj::__construct(int Width,int Height, ::flixel::addons::ui::Anchor Anchor_, ::Dynamic Style){
            	HX_GC_STACKFRAME(&_hx_pos_7b5caaba09e0a704_28_new)
HXLINE(  29)		super::__construct((int)0,(int)0);
HXLINE(  31)		if (hx::IsNull( Anchor_ )) {
HXLINE(  33)			Anchor_ =  ::flixel::addons::ui::Anchor_obj::__alloc( HX_CTX ,(int)0,(int)0,HX_("left",07,08,b0,47),HX_("top",95,66,58,00),HX_("right",dc,0b,64,e9),HX_("top",95,66,58,00));
            		}
HXLINE(  36)		Style = ::flixel::addons::ui::FlxUITooltip_obj::styleFix(Style,null());
HXLINE(  38)		this->refresh(Width,Height,HX_("",00,00,00,00),HX_("",00,00,00,00),Anchor_,Style);
HXLINE(  39)		this->setScrollFactor((int)0,(int)0);
            	}

Dynamic FlxUITooltip_obj::__CreateEmpty() { return new FlxUITooltip_obj; }

void *FlxUITooltip_obj::_hx_vtable = 0;

Dynamic FlxUITooltip_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxUITooltip_obj > _hx_result = new FlxUITooltip_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool FlxUITooltip_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x263b73ac) {
		if (inClassId<=(int)0x25a685e0) {
			if (inClassId<=(int)0x0b6ffd77) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
			} else {
				return inClassId==(int)0x25a685e0;
			}
		} else {
			return inClassId==(int)0x263b73ac;
		}
	} else {
		if (inClassId<=(int)0x2e105115) {
			return inClassId==(int)0x282173df || inClassId==(int)0x2e105115;
		} else {
			return inClassId==(int)0x4b31f184;
		}
	}
}

void FlxUITooltip_obj::show( ::flixel::FlxObject obj,::String __o_Title,::String __o_Body,hx::Null< bool >  __o_AutoSizeVertical,hx::Null< bool >  __o_AutoSizeHorizontal,hx::Null< bool >  __o_ShowArrow){
::String Title = __o_Title.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
::String Body = __o_Body.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
bool AutoSizeVertical = __o_AutoSizeVertical.Default(true);
bool AutoSizeHorizontal = __o_AutoSizeHorizontal.Default(true);
bool ShowArrow = __o_ShowArrow.Default(true);
            	HX_STACKFRAME(&_hx_pos_7b5caaba09e0a704_43_show)
HXLINE(  44)		this->set_visible(true);
HXLINE(  45)		this->set_active(true);
HXLINE(  48)		this->set_x((int)0);
HXLINE(  49)		this->set_y((int)0);
HXLINE(  50)		this->_bkg->set_x((int)0);
HXLINE(  51)		this->_bkg->set_y((int)0);
HXLINE(  52)		this->_arrow->set_x((int)0);
HXLINE(  53)		this->_arrow->set_y((int)0);
HXLINE(  54)		this->_arrowBkg->set_x((int)0);
HXLINE(  55)		this->_arrowBkg->set_y((int)0);
HXLINE(  57)		this->_arrowBkg = this->makeArrowBkg(this->_arrowBkg);
HXLINE(  58)		this->_arrow->set_color(( (int)(this->style->__Field(HX_("background",ee,93,1d,26),hx::paccDynamic)) ));
HXLINE(  60)		 ::flixel::FlxSprite _hx_tmp = this->_arrow;
HXDLIN(  60)		_hx_tmp->set_visible(this->_arrowBkg->set_visible(ShowArrow));
HXLINE(  62)		if (hx::IsGreater( this->style->__Field(HX_("titleWidth",4e,c9,47,dc),hx::paccDynamic),(int)0 )) {
HXLINE(  64)			 ::flixel::addons::ui::FlxUIText _hx_tmp1 = this->_titleText;
HXDLIN(  64)			_hx_tmp1->set_width(::Std_obj::_hx_int(this->_titleText->textField->set_width(( (Float)(this->style->__Field(HX_("titleWidth",4e,c9,47,dc),hx::paccDynamic)) ))));
            		}
HXLINE(  66)		if (hx::IsGreater( this->style->__Field(HX_("bodyWidth",04,e0,6a,8a),hx::paccDynamic),(int)0 )) {
HXLINE(  68)			 ::flixel::addons::ui::FlxUIText _hx_tmp2 = this->_bodyText;
HXDLIN(  68)			_hx_tmp2->set_width(::Std_obj::_hx_int(this->_bodyText->textField->set_width(( (Float)(this->style->__Field(HX_("bodyWidth",04,e0,6a,8a),hx::paccDynamic)) ))));
            		}
HXLINE(  71)		if (hx::IsNotNull( ( ( ::flixel::addons::ui::FontDef)(this->style->__Field(HX_("titleFormat",ef,5a,1a,94),hx::paccDynamic)) ) )) {
HXLINE(  73)			( ( ::flixel::addons::ui::FontDef)(this->style->__Field(HX_("titleFormat",ef,5a,1a,94),hx::paccDynamic)) )->apply(null(),this->_titleText);
            		}
HXLINE(  75)		if (hx::IsNotNull( ( ( ::flixel::addons::ui::FontDef)(this->style->__Field(HX_("bodyFormat",79,23,ab,44),hx::paccDynamic)) ) )) {
HXLINE(  77)			( ( ::flixel::addons::ui::FontDef)(this->style->__Field(HX_("bodyFormat",79,23,ab,44),hx::paccDynamic)) )->apply(null(),this->_bodyText);
            		}
HXLINE(  80)		if (hx::IsNotNull( ( ( ::flixel::addons::ui::BorderDef)(this->style->__Field(HX_("titleBorder",a4,18,a6,fa),hx::paccDynamic)) ) )) {
HXLINE(  82)			( ( ::flixel::addons::ui::BorderDef)(this->style->__Field(HX_("titleBorder",a4,18,a6,fa),hx::paccDynamic)) )->apply(this->_titleText);
            		}
HXLINE(  84)		if (hx::IsNotNull( ( ( ::flixel::addons::ui::BorderDef)(this->style->__Field(HX_("bodyBorder",2e,e1,36,ab),hx::paccDynamic)) ) )) {
HXLINE(  86)			( ( ::flixel::addons::ui::BorderDef)(this->style->__Field(HX_("bodyBorder",2e,e1,36,ab),hx::paccDynamic)) )->apply(this->_bodyText);
            		}
HXLINE(  89)		this->_titleText->set_text(Title);
HXLINE(  90)		this->_bodyText->set_text(Body);
HXLINE(  92)		this->_titleText->update((int)0);
HXLINE(  93)		this->_bodyText->update((int)0);
HXLINE(  95)		int titleHeight = ::Std_obj::_hx_int((this->_titleText->textField->get_textHeight() + (int)4));
HXLINE(  97)		if (hx::IsNotNull( ( ( ::flixel::math::FlxPoint)(this->style->__Field(HX_("titleOffset",4b,63,cb,f6),hx::paccDynamic)) ) )) {
HXLINE(  99)			 ::flixel::addons::ui::FlxUIText _hx_tmp3 = this->_titleText;
HXDLIN(  99)			_hx_tmp3->set_x(::Std_obj::_hx_int(( ( ::flixel::math::FlxPoint)(this->style->__Field(HX_("titleOffset",4b,63,cb,f6),hx::paccDynamic)) )->x));
HXLINE( 100)			 ::flixel::addons::ui::FlxUIText _hx_tmp4 = this->_titleText;
HXDLIN( 100)			_hx_tmp4->set_y(::Std_obj::_hx_int(( ( ::flixel::math::FlxPoint)(this->style->__Field(HX_("titleOffset",4b,63,cb,f6),hx::paccDynamic)) )->y));
            		}
HXLINE( 102)		if (hx::IsNotNull( ( ( ::flixel::math::FlxPoint)(this->style->__Field(HX_("bodyOffset",d5,2b,5c,a7),hx::paccDynamic)) ) )) {
HXLINE( 104)			 ::flixel::addons::ui::FlxUIText _hx_tmp5 = this->_bodyText;
HXDLIN( 104)			_hx_tmp5->set_x(::Std_obj::_hx_int(( ( ::flixel::math::FlxPoint)(this->style->__Field(HX_("bodyOffset",d5,2b,5c,a7),hx::paccDynamic)) )->x));
HXLINE( 105)			 ::flixel::addons::ui::FlxUIText _hx_tmp6 = this->_bodyText;
HXDLIN( 105)			_hx_tmp6->set_y(::Std_obj::_hx_int(((this->_titleText->y + titleHeight) + ( ( ::flixel::math::FlxPoint)(this->style->__Field(HX_("bodyOffset",d5,2b,5c,a7),hx::paccDynamic)) )->y)));
            		}
HXLINE( 108)		int W = ::Std_obj::_hx_int(this->_bkg->get_width());
HXLINE( 109)		int H = ::Std_obj::_hx_int(this->_bkg->get_height());
HXLINE( 111)		if (AutoSizeHorizontal) {
HXLINE( 113)			Float tw;
HXDLIN( 113)			if ((this->_titleText->text != HX_("",00,00,00,00))) {
HXLINE( 113)				Float tw1 = this->_titleText->x;
HXDLIN( 113)				tw = (tw1 + this->_titleText->get_width());
            			}
            			else {
HXLINE( 113)				tw = (int)0;
            			}
HXLINE( 114)			Float bw;
HXDLIN( 114)			if ((this->_bodyText->text != HX_("",00,00,00,00))) {
HXLINE( 114)				Float bw1 = this->_bodyText->x;
HXDLIN( 114)				bw = (bw1 + this->_bodyText->get_width());
            			}
            			else {
HXLINE( 114)				bw = (int)0;
            			}
HXLINE( 115)			W = ::Std_obj::_hx_int(::Math_obj::max(tw,bw));
            		}
HXLINE( 118)		if (AutoSizeVertical) {
HXLINE( 120)			Float th;
HXDLIN( 120)			if ((this->_titleText->text != HX_("",00,00,00,00))) {
HXLINE( 120)				Float th1 = this->_titleText->y;
HXDLIN( 120)				th = (th1 + this->_titleText->get_height());
            			}
            			else {
HXLINE( 120)				th = (int)0;
            			}
HXLINE( 121)			Float bh;
HXDLIN( 121)			if ((this->_bodyText->text != HX_("",00,00,00,00))) {
HXLINE( 121)				Float bh1 = this->_bodyText->y;
HXDLIN( 121)				bh = (bh1 + this->_bodyText->get_height());
            			}
            			else {
HXLINE( 121)				bh = (int)0;
            			}
HXLINE( 122)			H = ::Std_obj::_hx_int(::Math_obj::max(th,bh));
HXLINE( 123)			H = ::Std_obj::_hx_int(::Math_obj::max(H,this->_arrowBkg->get_height()));
            		}
HXLINE( 126)		if (hx::IsNull( this->style->__Field(HX_("leftPadding",8a,98,10,d0),hx::paccDynamic) )) {
HXLINE( 126)			this->style->__SetField(HX_("leftPadding",8a,98,10,d0),(int)0,hx::paccDynamic);
            		}
HXLINE( 127)		if (hx::IsNull( this->style->__Field(HX_("rightPadding",55,e9,2b,bb),hx::paccDynamic) )) {
HXLINE( 127)			this->style->__SetField(HX_("rightPadding",55,e9,2b,bb),(int)0,hx::paccDynamic);
            		}
HXLINE( 128)		if (hx::IsNull( this->style->__Field(HX_("topPadding",bc,47,4b,3c),hx::paccDynamic) )) {
HXLINE( 128)			this->style->__SetField(HX_("topPadding",bc,47,4b,3c),(int)0,hx::paccDynamic);
            		}
HXLINE( 129)		if (hx::IsNull( this->style->__Field(HX_("bottomPadding",26,1e,2d,2b),hx::paccDynamic) )) {
HXLINE( 129)			this->style->__SetField(HX_("bottomPadding",26,1e,2d,2b),(int)0,hx::paccDynamic);
            		}
HXLINE( 132)		W = (W + (this->style->__Field(HX_("leftPadding",8a,98,10,d0),hx::paccDynamic) + this->style->__Field(HX_("rightPadding",55,e9,2b,bb),hx::paccDynamic)));
HXLINE( 133)		H = (H + (this->style->__Field(HX_("topPadding",bc,47,4b,3c),hx::paccDynamic) + this->style->__Field(HX_("bottomPadding",26,1e,2d,2b),hx::paccDynamic)));
HXLINE( 135)		W = ::Std_obj::_hx_int(W);
HXLINE( 136)		H = ::Std_obj::_hx_int(H);
HXLINE( 138)		this->refreshBkg(W,H,this->style);
HXLINE( 140)		int oldOffX = ::Std_obj::_hx_int(this->_anchorArrow->x->offset);
HXLINE( 141)		int oldOffY = ::Std_obj::_hx_int(this->_anchorArrow->y->offset);
HXLINE( 143)		 ::flixel::addons::ui::AnchorPoint _hx_tmp7 = this->_anchorArrow->x;
HXDLIN( 143)		_hx_tmp7->offset = (_hx_tmp7->offset - this->anchor->x->offset);
HXLINE( 144)		 ::flixel::addons::ui::AnchorPoint _hx_tmp8 = this->_anchorArrow->y;
HXDLIN( 144)		_hx_tmp8->offset = (_hx_tmp8->offset + this->anchor->y->offset);
HXLINE( 146)		this->_anchorArrow->x->offset = ::Std_obj::_hx_int(this->_anchorArrow->x->offset);
HXLINE( 147)		this->_anchorArrow->y->offset = ::Std_obj::_hx_int(this->_anchorArrow->y->offset);
HXLINE( 149)		this->_anchorArrow->anchorThing(this->_arrow,this->_bkg);
HXLINE( 151)		this->_anchorArrow->x->offset = oldOffX;
HXLINE( 152)		this->_anchorArrow->y->offset = oldOffY;
HXLINE( 154)		if ((this->_arrow->x < (int)0)) {
HXLINE( 156)			int xx = ::Std_obj::_hx_int(::Math_obj::abs(this->_arrow->x));
HXLINE( 157)			{
HXLINE( 157)				 ::flixel::FlxSprite _g = this->_bkg;
HXDLIN( 157)				_g->set_x((_g->x + xx));
            			}
HXLINE( 158)			{
HXLINE( 158)				 ::flixel::addons::ui::FlxUIText _g1 = this->_titleText;
HXDLIN( 158)				_g1->set_x((_g1->x + xx));
            			}
HXLINE( 159)			{
HXLINE( 159)				 ::flixel::addons::ui::FlxUIText _g2 = this->_bodyText;
HXDLIN( 159)				_g2->set_x((_g2->x + xx));
            			}
HXLINE( 160)			this->_arrow->set_x((int)0);
            		}
HXLINE( 162)		if ((this->_arrow->y < (int)0)) {
HXLINE( 164)			int yy = ::Std_obj::_hx_int(::Math_obj::abs(this->_arrow->y));
HXLINE( 165)			{
HXLINE( 165)				 ::flixel::FlxSprite _g3 = this->_bkg;
HXDLIN( 165)				_g3->set_y((_g3->y + yy));
            			}
HXLINE( 166)			{
HXLINE( 166)				 ::flixel::addons::ui::FlxUIText _g4 = this->_titleText;
HXDLIN( 166)				_g4->set_y((_g4->y + yy));
            			}
HXLINE( 167)			{
HXLINE( 167)				 ::flixel::addons::ui::FlxUIText _g5 = this->_bodyText;
HXDLIN( 167)				_g5->set_y((_g5->y + yy));
            			}
HXLINE( 168)			this->_arrow->set_y((int)0);
            		}
HXLINE( 171)		bool _hx_tmp9;
HXDLIN( 171)		if ((this->_titleText->text != HX_("",00,00,00,00))) {
HXLINE( 171)			_hx_tmp9 = (this->_bodyText->text == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 171)			_hx_tmp9 = false;
            		}
HXDLIN( 171)		if (_hx_tmp9) {
HXLINE( 176)			int tempH = (H - (this->style->__Field(HX_("topPadding",bc,47,4b,3c),hx::paccDynamic) + this->style->__Field(HX_("bottomPadding",26,1e,2d,2b),hx::paccDynamic)));
HXLINE( 177)			int titleOnlyOffset = ::Std_obj::_hx_int(((Float)(tempH - titleHeight) / (Float)(int)2));
HXLINE( 178)			{
HXLINE( 178)				 ::flixel::addons::ui::FlxUIText _g6 = this->_titleText;
HXDLIN( 178)				_g6->set_y((_g6->y + titleOnlyOffset));
            			}
            		}
HXLINE( 182)		{
HXLINE( 182)			 ::flixel::addons::ui::FlxUIText _g7 = this->_titleText;
HXDLIN( 182)			_g7->set_x((_g7->x + this->style->__Field(HX_("leftPadding",8a,98,10,d0),hx::paccDynamic)));
            		}
HXLINE( 183)		{
HXLINE( 183)			 ::flixel::addons::ui::FlxUIText _g8 = this->_bodyText;
HXDLIN( 183)			_g8->set_x((_g8->x + this->style->__Field(HX_("leftPadding",8a,98,10,d0),hx::paccDynamic)));
            		}
HXLINE( 185)		{
HXLINE( 185)			 ::flixel::addons::ui::FlxUIText _g9 = this->_titleText;
HXDLIN( 185)			_g9->set_y((_g9->y + this->style->__Field(HX_("topPadding",bc,47,4b,3c),hx::paccDynamic)));
            		}
HXLINE( 186)		{
HXLINE( 186)			 ::flixel::addons::ui::FlxUIText _g10 = this->_bodyText;
HXDLIN( 186)			_g10->set_y((_g10->y + this->style->__Field(HX_("topPadding",bc,47,4b,3c),hx::paccDynamic)));
            		}
HXLINE( 190)		if ((this->_titleText->text == HX_("",00,00,00,00))) {
HXLINE( 192)			this->_titleText->set_x(this->_bkg->x);
HXLINE( 193)			this->_titleText->set_y(this->_bkg->y);
HXLINE( 194)			 ::flixel::addons::ui::FlxUIText _hx_tmp10 = this->_titleText;
HXDLIN( 194)			_hx_tmp10->set_width(this->_bkg->get_width());
            		}
HXLINE( 197)		if ((this->_bodyText->text == HX_("",00,00,00,00))) {
HXLINE( 199)			this->_bodyText->set_x(this->_bkg->x);
HXLINE( 200)			this->_bodyText->set_y(this->_bkg->y);
HXLINE( 201)			 ::flixel::addons::ui::FlxUIText _hx_tmp11 = this->_bodyText;
HXDLIN( 201)			_hx_tmp11->set_width(this->_bkg->get_width());
            		}
HXLINE( 204)		this->anchor->anchorThing(hx::ObjectPtr<OBJ_>(this),obj);
HXLINE( 206)		this->set_x(::Std_obj::_hx_int(this->x));
HXLINE( 207)		this->set_y(::Std_obj::_hx_int(this->y));
HXLINE( 209)		 ::flixel::FlxSprite _hx_tmp12 = this->_arrowBkg;
HXDLIN( 209)		_hx_tmp12->set_x(::Std_obj::_hx_int((this->_arrow->x - this->style->__Field(HX_("borderSize",cd,ff,ed,06),hx::paccDynamic))));
HXLINE( 210)		 ::flixel::FlxSprite _hx_tmp13 = this->_arrowBkg;
HXDLIN( 210)		_hx_tmp13->set_y(::Std_obj::_hx_int((this->_arrow->y - this->style->__Field(HX_("borderSize",cd,ff,ed,06),hx::paccDynamic))));
HXLINE( 212)		 ::flixel::addons::ui::FlxUIText _hx_tmp14 = this->_titleText;
HXDLIN( 212)		_hx_tmp14->set_x(::Std_obj::_hx_int(this->_titleText->x));
HXLINE( 213)		 ::flixel::addons::ui::FlxUIText _hx_tmp15 = this->_bodyText;
HXDLIN( 213)		_hx_tmp15->set_x(::Std_obj::_hx_int(this->_bodyText->x));
HXLINE( 214)		 ::flixel::FlxSprite _hx_tmp16 = this->_bkg;
HXDLIN( 214)		_hx_tmp16->set_x(::Std_obj::_hx_int(this->_bkg->x));
HXLINE( 215)		 ::flixel::FlxSprite _hx_tmp17 = this->_bkg;
HXDLIN( 215)		_hx_tmp17->set_y(::Std_obj::_hx_int(this->_bkg->y));
HXLINE( 216)		 ::flixel::FlxSprite _hx_tmp18 = this->_arrowBkg;
HXDLIN( 216)		_hx_tmp18->set_x(::Std_obj::_hx_int(this->_arrowBkg->x));
HXLINE( 217)		 ::flixel::FlxSprite _hx_tmp19 = this->_arrowBkg;
HXDLIN( 217)		_hx_tmp19->set_y(::Std_obj::_hx_int(this->_arrowBkg->y));
HXLINE( 218)		 ::flixel::FlxSprite _hx_tmp20 = this->_arrow;
HXDLIN( 218)		_hx_tmp20->set_x(::Std_obj::_hx_int(this->_arrow->x));
HXLINE( 219)		 ::flixel::FlxSprite _hx_tmp21 = this->_arrow;
HXDLIN( 219)		_hx_tmp21->set_y(::Std_obj::_hx_int(this->_arrow->y));
            	}


HX_DEFINE_DYNAMIC_FUNC6(FlxUITooltip_obj,show,(void))

Float FlxUITooltip_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_7b5caaba09e0a704_224_get_height)
HXLINE( 225)		if ((this->group->length == (int)0)) {
HXLINE( 227)			return (int)0;
            		}
HXLINE( 230)		Float minY = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 231)		Float maxY = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 233)		{
HXLINE( 233)			int _g = (int)0;
HXDLIN( 233)			::Array< ::Dynamic> _g1 = this->_sprites;
HXDLIN( 233)			while((_g < _g1->length)){
HXLINE( 233)				 ::flixel::FlxSprite member = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 233)				_g = (_g + (int)1);
HXLINE( 235)				if (hx::IsNull( member )) {
HXLINE( 235)					continue;
            				}
HXLINE( 236)				if (::Std_obj::is(member,hx::ClassOf< ::flixel::text::FlxText >())) {
HXLINE( 236)					continue;
            				}
HXLINE( 237)				Float minMemberY = member->y;
HXLINE( 238)				Float maxMemberY = (minMemberY + member->get_height());
HXLINE( 240)				if ((maxMemberY > maxY)) {
HXLINE( 242)					maxY = maxMemberY;
            				}
HXLINE( 244)				if ((minMemberY < minY)) {
HXLINE( 246)					minY = minMemberY;
            				}
            			}
            		}
HXLINE( 249)		return (maxY - minY);
            	}


void FlxUITooltip_obj::hide(){
            	HX_STACKFRAME(&_hx_pos_7b5caaba09e0a704_253_hide)
HXLINE( 254)		this->set_visible(false);
HXLINE( 255)		this->set_active(false);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUITooltip_obj,hide,(void))

 ::flixel::addons::ui::Anchor FlxUITooltip_obj::set_anchor( ::flixel::addons::ui::Anchor a){
            	HX_STACKFRAME(&_hx_pos_7b5caaba09e0a704_261_set_anchor)
HXLINE( 262)		this->anchor = a;
HXLINE( 263)		this->_anchorArrow = this->getArrowAnchor(a,this->_anchorArrow);
HXLINE( 264)		if (hx::IsNotNull( this->_arrowBkg )) {
HXLINE( 266)			this->makeArrowBkg(this->_arrowBkg);
            		}
HXLINE( 268)		return a;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITooltip_obj,set_anchor,return )

 ::Dynamic FlxUITooltip_obj::set_style( ::Dynamic s){
            	HX_STACKFRAME(&_hx_pos_7b5caaba09e0a704_272_set_style)
HXLINE( 273)		this->style = s;
HXLINE( 274)		return s;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITooltip_obj,set_style,return )

::String FlxUITooltip_obj::set_title(::String t){
            	HX_STACKFRAME(&_hx_pos_7b5caaba09e0a704_278_set_title)
HXLINE( 279)		this->title = t;
HXLINE( 280)		return t;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITooltip_obj,set_title,return )

::String FlxUITooltip_obj::set_body(::String b){
            	HX_STACKFRAME(&_hx_pos_7b5caaba09e0a704_284_set_body)
HXLINE( 285)		this->body = b;
HXLINE( 286)		return b;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITooltip_obj,set_body,return )

void FlxUITooltip_obj::refresh(int Width,int Height,::String Title,::String Body, ::flixel::addons::ui::Anchor Anchor_, ::Dynamic Style){
            	HX_GC_STACKFRAME(&_hx_pos_7b5caaba09e0a704_299_refresh)
HXLINE( 301)		bool newBkg = hx::IsNull( this->_bkg );
HXLINE( 302)		bool newArrow = hx::IsNull( this->_arrow );
HXLINE( 303)		bool newTitle = hx::IsNull( this->_titleText );
HXLINE( 304)		bool newBody = hx::IsNull( this->_bodyText );
HXLINE( 305)		if (newBkg) {
HXLINE( 307)			this->_bkg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
            		}
HXLINE( 309)		if (newArrow) {
HXLINE( 311)			this->_arrow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
            		}
HXLINE( 313)		if (newTitle) {
HXLINE( 315)			this->_titleText =  ::flixel::addons::ui::FlxUIText_obj::__alloc( HX_CTX ,(int)0,(int)0,Width,null(),null(),null());
HXLINE( 316)			if (hx::IsNotNull( ( ( ::flixel::addons::ui::FontDef)(Style->__Field(HX_("titleFormat",ef,5a,1a,94),hx::paccDynamic)) ) )) {
HXLINE( 318)				( ( ::flixel::addons::ui::FontDef)(Style->__Field(HX_("titleFormat",ef,5a,1a,94),hx::paccDynamic)) )->apply(null(),this->_titleText);
            			}
HXLINE( 320)			if (hx::IsNotNull( ( ( ::flixel::addons::ui::BorderDef)(Style->__Field(HX_("titleBorder",a4,18,a6,fa),hx::paccDynamic)) ) )) {
HXLINE( 322)				( ( ::flixel::addons::ui::BorderDef)(Style->__Field(HX_("titleBorder",a4,18,a6,fa),hx::paccDynamic)) )->apply(this->_titleText);
            			}
            		}
HXLINE( 325)		if (newBody) {
HXLINE( 327)			this->_bodyText =  ::flixel::addons::ui::FlxUIText_obj::__alloc( HX_CTX ,(int)0,(int)0,Width,null(),null(),null());
HXLINE( 328)			if (hx::IsNotNull( ( ( ::flixel::addons::ui::FontDef)(Style->__Field(HX_("bodyFormat",79,23,ab,44),hx::paccDynamic)) ) )) {
HXLINE( 330)				( ( ::flixel::addons::ui::FontDef)(Style->__Field(HX_("bodyFormat",79,23,ab,44),hx::paccDynamic)) )->apply(null(),this->_bodyText);
            			}
HXLINE( 332)			if (hx::IsNotNull( ( ( ::flixel::addons::ui::BorderDef)(Style->__Field(HX_("bodyBorder",2e,e1,36,ab),hx::paccDynamic)) ) )) {
HXLINE( 334)				( ( ::flixel::addons::ui::BorderDef)(Style->__Field(HX_("bodyBorder",2e,e1,36,ab),hx::paccDynamic)) )->apply(this->_bodyText);
            			}
            		}
HXLINE( 338)		this->_titleText->set_text(Title);
HXLINE( 339)		this->_bodyText->set_text(Body);
HXLINE( 342)		this->_arrow->set_color(( (int)(Style->__Field(HX_("background",ee,93,1d,26),hx::paccDynamic)) ));
HXLINE( 343)		 ::flixel::graphics::FlxGraphic test = ::flixel::FlxG_obj::bitmap->add( ::Dynamic(Style->__Field(HX_("arrow",c9,79,8f,25),hx::paccDynamic)),null(),null());
HXLINE( 344)		if (hx::IsNull(  ::Dynamic(Style->__Field(HX_("arrow",c9,79,8f,25),hx::paccDynamic)) )) {
HXLINE( 346)			Style->__SetField(HX_("arrow",c9,79,8f,25),HX_("flixel/flixel-ui/img/tooltip_arrow.png",df,64,ce,50),hx::paccDynamic);
HXLINE( 347)			::flixel::FlxG_obj::bitmap->add( ::Dynamic(Style->__Field(HX_("arrow",c9,79,8f,25),hx::paccDynamic)),null(),null());
            		}
HXLINE( 349)		this->_arrow->loadGraphic( ::Dynamic(Style->__Field(HX_("arrow",c9,79,8f,25),hx::paccDynamic)),true,test->height,test->height,null(),null());
HXLINE( 351)		if (newArrow) {
HXLINE( 353)			this->_arrow->animation->add(HX_("right",dc,0b,64,e9),::Array_obj< int >::fromData( _hx_array_data_943db12e_10,1),(int)0,false,null(),null());
HXLINE( 354)			this->_arrow->animation->add(HX_("down",62,f8,6d,42),::Array_obj< int >::fromData( _hx_array_data_943db12e_11,1),(int)0,false,null(),null());
HXLINE( 355)			this->_arrow->animation->add(HX_("left",07,08,b0,47),::Array_obj< int >::fromData( _hx_array_data_943db12e_12,1),(int)0,false,null(),null());
HXLINE( 356)			this->_arrow->animation->add(HX_("up",5b,66,00,00),::Array_obj< int >::fromData( _hx_array_data_943db12e_13,1),(int)0,false,null(),null());
            		}
HXLINE( 359)		this->refreshBkg(Width,Height,Style);
HXLINE( 360)		this->set_style(Style);
HXLINE( 362)		bool _hx_tmp;
HXDLIN( 362)		if (newArrow) {
HXLINE( 362)			_hx_tmp = hx::IsGreater( Style->__Field(HX_("borderSize",cd,ff,ed,06),hx::paccDynamic),(int)0 );
            		}
            		else {
HXLINE( 362)			_hx_tmp = false;
            		}
HXDLIN( 362)		if (_hx_tmp) {
HXLINE( 364)			this->_arrowBkg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 365)			this->add(this->_arrowBkg);
            		}
HXLINE( 368)		this->set_anchor(Anchor_);
HXLINE( 370)		if (newBkg) {
HXLINE( 372)			this->add(this->_bkg);
            		}
HXLINE( 375)		if (newArrow) {
HXLINE( 377)			this->add(this->_arrow);
            		}
HXLINE( 380)		if (newTitle) {
HXLINE( 382)			this->add(this->_titleText);
            		}
HXLINE( 385)		if (newBody) {
HXLINE( 387)			this->add(this->_bodyText);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC6(FlxUITooltip_obj,refresh,(void))

void FlxUITooltip_obj::refreshBkg(int Width,int Height, ::Dynamic Style){
            	HX_GC_STACKFRAME(&_hx_pos_7b5caaba09e0a704_392_refreshBkg)
HXLINE( 394)		::String key = this->getStyleKey(Width,Height,Style);
HXLINE( 395)		if (hx::IsNull( ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,key)) ) )) {
HXLINE( 397)			 ::openfl::_legacy::display::BitmapData pix = null();
HXLINE( 398)			if (hx::IsGreater( Style->__Field(HX_("borderSize",cd,ff,ed,06),hx::paccDynamic),(int)0 )) {
HXLINE( 400)				pix =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,Width,Height,false, ::Dynamic(Style->__Field(HX_("borderColor",d7,3c,d5,d6),hx::paccDynamic)),null());
HXLINE( 401)				 ::Dynamic Style1 = Style->__Field(HX_("borderSize",cd,ff,ed,06),hx::paccDynamic);
HXDLIN( 401)				 ::Dynamic Style2 = Style->__Field(HX_("borderSize",cd,ff,ed,06),hx::paccDynamic);
HXDLIN( 401)				int _hx_tmp = (Width - (Style->__Field(HX_("borderSize",cd,ff,ed,06),hx::paccDynamic) * (int)2));
HXDLIN( 401)				pix->fillRect( ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,Style1,Style2,_hx_tmp,(Height - (Style->__Field(HX_("borderSize",cd,ff,ed,06),hx::paccDynamic) * (int)2))),( (int)(Style->__Field(HX_("background",ee,93,1d,26),hx::paccDynamic)) ));
            			}
            			else {
HXLINE( 405)				pix =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,Width,Height,false, ::Dynamic(Style->__Field(HX_("background",ee,93,1d,26),hx::paccDynamic)),null());
            			}
HXLINE( 407)			::flixel::FlxG_obj::bitmap->add(pix,true,key);
            		}
HXLINE( 409)		this->_bkg->loadGraphic(key,null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUITooltip_obj,refreshBkg,(void))

::String FlxUITooltip_obj::getStyleKey(int W,int H, ::Dynamic Style){
            	HX_STACKFRAME(&_hx_pos_7b5caaba09e0a704_414_getStyleKey)
HXDLIN( 414)		int this1 = ( (int)(Style->__Field(HX_("background",ee,93,1d,26),hx::paccDynamic)) );
HXDLIN( 414)		::String _hx_tmp;
HXDLIN( 414)		_hx_tmp = HX_("0x",48,2a,00,00);
HXDLIN( 414)		::String _hx_tmp1;
HXDLIN( 414)		_hx_tmp1 = ::StringTools_obj::hex(((int)((int)this1 >> (int)(int)24) & (int)(int)255),(int)2);
HXDLIN( 414)		::String _hx_tmp2 = (_hx_tmp + _hx_tmp1);
HXDLIN( 414)		::String _hx_tmp3 = (_hx_tmp2 + ::StringTools_obj::hex(((int)((int)this1 >> (int)(int)16) & (int)(int)255),(int)2));
HXDLIN( 414)		::String _hx_tmp4 = (_hx_tmp3 + ::StringTools_obj::hex(((int)((int)this1 >> (int)(int)8) & (int)(int)255),(int)2));
HXDLIN( 414)		::String _hx_tmp5 = (((((W + HX_(",",2c,00,00,00)) + H) + HX_(",",2c,00,00,00)) + (_hx_tmp4 + ::StringTools_obj::hex(((int)this1 & (int)(int)255),(int)2))) + HX_(",",2c,00,00,00));
HXDLIN( 414)		::String _hx_tmp6 = ((_hx_tmp5 + Style->__Field(HX_("borderSize",cd,ff,ed,06),hx::paccDynamic)) + HX_(",",2c,00,00,00));
HXDLIN( 414)		int this2 = ( (int)(Style->__Field(HX_("borderColor",d7,3c,d5,d6),hx::paccDynamic)) );
HXDLIN( 414)		::String _hx_tmp7;
HXDLIN( 414)		_hx_tmp7 = HX_("0x",48,2a,00,00);
HXDLIN( 414)		::String _hx_tmp8;
HXDLIN( 414)		_hx_tmp8 = ::StringTools_obj::hex(((int)((int)this2 >> (int)(int)24) & (int)(int)255),(int)2);
HXDLIN( 414)		::String _hx_tmp9 = (_hx_tmp7 + _hx_tmp8);
HXDLIN( 414)		::String _hx_tmp10 = (_hx_tmp9 + ::StringTools_obj::hex(((int)((int)this2 >> (int)(int)16) & (int)(int)255),(int)2));
HXDLIN( 414)		::String _hx_tmp11 = (_hx_tmp10 + ::StringTools_obj::hex(((int)((int)this2 >> (int)(int)8) & (int)(int)255),(int)2));
HXDLIN( 414)		return (_hx_tmp6 + (_hx_tmp11 + ::StringTools_obj::hex(((int)this2 & (int)(int)255),(int)2)));
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUITooltip_obj,getStyleKey,return )

 ::flixel::FlxSprite FlxUITooltip_obj::makeArrowBkg( ::flixel::FlxSprite b){
            	HX_GC_STACKFRAME(&_hx_pos_7b5caaba09e0a704_418_makeArrowBkg)
HXLINE( 419)		if (hx::IsNull( b )) {
HXLINE( 421)			b =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
            		}
HXLINE( 423)		::String animName;
HXDLIN( 423)		if (hx::IsNull( this->_arrow )) {
HXLINE( 423)			animName = HX_("null",87,9e,0e,49);
            		}
            		else {
HXLINE( 423)			if (hx::IsNull( this->_arrow->animation->_curAnim )) {
HXLINE( 423)				animName = HX_("null",87,9e,0e,49);
            			}
            			else {
HXLINE( 423)				animName = this->_arrow->animation->_curAnim->name;
            			}
            		}
HXLINE( 425)		::String key = (((((((HX_("arrowBkg:",65,32,bc,fc) + this->style->__Field(HX_("background",ee,93,1d,26),hx::paccDynamic)) + HX_(",",2c,00,00,00)) + this->style->__Field(HX_("borderSize",cd,ff,ed,06),hx::paccDynamic)) + HX_(",",2c,00,00,00)) + this->style->__Field(HX_("borderColor",d7,3c,d5,d6),hx::paccDynamic)) + HX_(",",2c,00,00,00)) + animName);
HXLINE( 427)		if (hx::IsNull( ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,key)) ) )) {
HXLINE( 429)			 ::Dynamic bs = this->style->__Field(HX_("borderSize",cd,ff,ed,06),hx::paccDynamic);
HXLINE( 430)			bool _hx_tmp;
HXDLIN( 430)			if (hx::IsGreaterEq( bs,(int)0 )) {
HXLINE( 430)				_hx_tmp = hx::IsNull( bs );
            			}
            			else {
HXLINE( 430)				_hx_tmp = true;
            			}
HXDLIN( 430)			if (_hx_tmp) {
HXLINE( 432)				bs = (int)0;
            			}
HXLINE( 435)			int W = ::Std_obj::_hx_int((this->_arrow->get_width() + bs));
HXLINE( 436)			int H = ::Std_obj::_hx_int((this->_arrow->get_height() + bs));
HXLINE( 438)			 ::openfl::_legacy::display::BitmapData bd =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,W,H,true,(int)0,null());
HXLINE( 439)			::flixel::FlxG_obj::bitmap->add(bd,false,key);
HXLINE( 440)			b->loadGraphic(key,null(),null(),null(),null(),null());
HXLINE( 442)			int oldColor = this->_arrow->color;
HXLINE( 444)			this->_arrow->set_color(( (int)(this->style->__Field(HX_("borderColor",d7,3c,d5,d6),hx::paccDynamic)) ));
HXLINE( 446)			 ::openfl::_legacy::geom::Matrix m =  ::openfl::_legacy::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 447)			m->identity();
HXLINE( 448)			{
HXLINE( 448)				int _g = (int)0;
HXDLIN( 448)				while((_g < (int)3)){
HXLINE( 448)					_g = (_g + (int)1);
HXDLIN( 448)					int yy = (_g - (int)1);
HXLINE( 450)					{
HXLINE( 450)						int _g1 = (int)0;
HXDLIN( 450)						while((_g1 < (int)3)){
HXLINE( 450)							_g1 = (_g1 + (int)1);
HXDLIN( 450)							int xx = (_g1 - (int)1);
HXLINE( 452)							bool _hx_tmp1;
HXDLIN( 452)							if ((yy == (int)1)) {
HXLINE( 452)								_hx_tmp1 = (xx != (int)1);
            							}
            							else {
HXLINE( 452)								_hx_tmp1 = true;
            							}
HXDLIN( 452)							if (_hx_tmp1) {
HXLINE( 454)								 ::flixel::FlxSprite _hx_tmp2 = this->_arrow;
HXDLIN( 454)								int _hx_tmp3 = (xx * this->style->__Field(HX_("borderSize",cd,ff,ed,06),hx::paccDynamic));
HXDLIN( 454)								b->stamp(_hx_tmp2,_hx_tmp3,(yy * this->style->__Field(HX_("borderSize",cd,ff,ed,06),hx::paccDynamic)));
            							}
            						}
            					}
            				}
            			}
HXLINE( 459)			this->_arrow->set_color(oldColor);
            		}
HXLINE( 462)		b->loadGraphic(key,null(),null(),null(),null(),null());
HXLINE( 464)		return b;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITooltip_obj,makeArrowBkg,return )

 ::flixel::addons::ui::Anchor FlxUITooltip_obj::getArrowAnchor( ::flixel::addons::ui::Anchor a, ::flixel::addons::ui::Anchor result){
            	HX_STACKFRAME(&_hx_pos_7b5caaba09e0a704_468_getArrowAnchor)
HXLINE( 470)		bool touchHorz;
HXDLIN( 470)		bool touchHorz1;
HXDLIN( 470)		if ((a->x->side == HX_("left",07,08,b0,47))) {
HXLINE( 470)			touchHorz1 = (a->x->flush == HX_("right",dc,0b,64,e9));
            		}
            		else {
HXLINE( 470)			touchHorz1 = false;
            		}
HXDLIN( 470)		if (!(touchHorz1)) {
HXLINE( 470)			if ((a->x->side == HX_("right",dc,0b,64,e9))) {
HXLINE( 470)				touchHorz = (a->x->flush == HX_("left",07,08,b0,47));
            			}
            			else {
HXLINE( 470)				touchHorz = false;
            			}
            		}
            		else {
HXLINE( 470)			touchHorz = true;
            		}
HXLINE( 471)		bool touchVert;
HXDLIN( 471)		bool touchVert1;
HXDLIN( 471)		if ((a->y->side == HX_("top",95,66,58,00))) {
HXLINE( 471)			touchVert1 = (a->y->flush == HX_("bottom",eb,e6,78,65));
            		}
            		else {
HXLINE( 471)			touchVert1 = false;
            		}
HXDLIN( 471)		if (!(touchVert1)) {
HXLINE( 471)			if ((a->y->side == HX_("bottom",eb,e6,78,65))) {
HXLINE( 471)				touchVert = (a->y->flush == HX_("top",95,66,58,00));
            			}
            			else {
HXLINE( 471)				touchVert = false;
            			}
            		}
            		else {
HXLINE( 471)			touchVert = true;
            		}
HXLINE( 473)		bool matchHorz;
HXDLIN( 473)		bool matchHorz1;
HXDLIN( 473)		if ((a->x->side == HX_("left",07,08,b0,47))) {
HXLINE( 473)			matchHorz1 = (a->x->flush == HX_("left",07,08,b0,47));
            		}
            		else {
HXLINE( 473)			matchHorz1 = false;
            		}
HXDLIN( 473)		if (!(matchHorz1)) {
HXLINE( 473)			if ((a->x->side == HX_("right",dc,0b,64,e9))) {
HXLINE( 473)				matchHorz = (a->x->flush == HX_("right",dc,0b,64,e9));
            			}
            			else {
HXLINE( 473)				matchHorz = false;
            			}
            		}
            		else {
HXLINE( 473)			matchHorz = true;
            		}
HXLINE( 474)		bool matchVert;
HXDLIN( 474)		bool matchVert1;
HXDLIN( 474)		if ((a->y->side == HX_("top",95,66,58,00))) {
HXLINE( 474)			matchVert1 = (a->y->flush == HX_("top",95,66,58,00));
            		}
            		else {
HXLINE( 474)			matchVert1 = false;
            		}
HXDLIN( 474)		if (!(matchVert1)) {
HXLINE( 474)			if ((a->y->side == HX_("bottom",eb,e6,78,65))) {
HXLINE( 474)				matchVert = (a->y->flush == HX_("bottom",eb,e6,78,65));
            			}
            			else {
HXLINE( 474)				matchVert = false;
            			}
            		}
            		else {
HXLINE( 474)			matchVert = true;
            		}
HXLINE( 476)		bool touchBoth;
HXDLIN( 476)		if (touchHorz) {
HXLINE( 476)			touchBoth = touchVert;
            		}
            		else {
HXLINE( 476)			touchBoth = false;
            		}
HXLINE( 477)		bool matchBoth;
HXDLIN( 477)		if (matchHorz) {
HXLINE( 477)			matchBoth = matchVert;
            		}
            		else {
HXLINE( 477)			matchBoth = false;
            		}
HXLINE( 479)		int off = ( (int)(this->style->__Field(HX_("borderSize",cd,ff,ed,06),hx::paccDynamic)) );
HXLINE( 481)		if (!(touchBoth)) {
HXLINE( 483)			if (touchHorz) {
HXLINE( 485)				result = a->getFlipped(true,false,result);
HXLINE( 486)				if ((result->x->flush == HX_("left",07,08,b0,47))) {
HXLINE( 488)					 ::flixel::addons::ui::AnchorPoint result1 = result->x;
HXDLIN( 488)					result1->offset = (result1->offset - off);
HXLINE( 489)					this->_arrow->animation->play(HX_("right",dc,0b,64,e9),null(),null(),null());
            				}
HXLINE( 491)				if ((result->x->flush == HX_("right",dc,0b,64,e9))) {
HXLINE( 493)					 ::flixel::addons::ui::AnchorPoint result2 = result->x;
HXDLIN( 493)					result2->offset = (result2->offset + off);
HXLINE( 494)					this->_arrow->animation->play(HX_("left",07,08,b0,47),null(),null(),null());
            				}
            			}
HXLINE( 497)			if (touchVert) {
HXLINE( 499)				result = a->getFlipped(false,true,result);
HXLINE( 500)				if ((result->y->flush == HX_("top",95,66,58,00))) {
HXLINE( 502)					 ::flixel::addons::ui::AnchorPoint result3 = result->y;
HXDLIN( 502)					result3->offset = (result3->offset - off);
HXLINE( 503)					this->_arrow->animation->play(HX_("down",62,f8,6d,42),null(),null(),null());
            				}
HXLINE( 505)				if ((result->y->flush == HX_("bottom",eb,e6,78,65))) {
HXLINE( 507)					 ::flixel::addons::ui::AnchorPoint result4 = result->y;
HXDLIN( 507)					result4->offset = (result4->offset + off);
HXLINE( 508)					this->_arrow->animation->play(HX_("up",5b,66,00,00),null(),null(),null());
            				}
            			}
            		}
HXLINE( 513)		if (!(matchBoth)) {
HXLINE( 515)			if (matchHorz) {
HXLINE( 517)				if ((result->x->flush == HX_("left",07,08,b0,47))) {
HXLINE( 519)					 ::flixel::addons::ui::AnchorPoint result5 = result->x;
HXDLIN( 519)					result5->offset = (result5->offset + off);
            				}
HXLINE( 521)				if ((result->x->flush == HX_("right",dc,0b,64,e9))) {
HXLINE( 523)					 ::flixel::addons::ui::AnchorPoint result6 = result->x;
HXDLIN( 523)					result6->offset = (result6->offset - off);
            				}
            			}
HXLINE( 526)			if (matchVert) {
HXLINE( 528)				if ((result->y->flush == HX_("top",95,66,58,00))) {
HXLINE( 530)					 ::flixel::addons::ui::AnchorPoint result7 = result->y;
HXDLIN( 530)					result7->offset = (result7->offset + off);
            				}
HXLINE( 532)				if ((result->y->flush == HX_("bottom",eb,e6,78,65))) {
HXLINE( 534)					 ::flixel::addons::ui::AnchorPoint result8 = result->y;
HXDLIN( 534)					result8->offset = (result8->offset - off);
            				}
            			}
            		}
HXLINE( 539)		if (hx::IsNotNull( result )) {
HXLINE( 541)			return result;
            		}
HXLINE( 544)		return a;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUITooltip_obj,getArrowAnchor,return )

 ::Dynamic FlxUITooltip_obj::styleFix( ::Dynamic Style, ::Dynamic DefaultStyle){
            	HX_GC_STACKFRAME(&_hx_pos_7b5caaba09e0a704_549_styleFix)
HXLINE( 550)		if (hx::IsNull( Style )) {
HXLINE( 552)			Style =  ::Dynamic(hx::Anon_obj::Create(18)
            				->setFixed(0,HX_("bodyWidth",04,e0,6a,8a),(int)-1)
            				->setFixed(1,HX_("titleFormat",ef,5a,1a,94),null())
            				->setFixed(2,HX_("autoSizeHorizontal",d4,74,ce,9f),null())
            				->setFixed(3,HX_("bodyOffset",d5,2b,5c,a7),null())
            				->setFixed(4,HX_("bodyBorder",2e,e1,36,ab),null())
            				->setFixed(5,HX_("rightPadding",55,e9,2b,bb),(int)-1)
            				->setFixed(6,HX_("leftPadding",8a,98,10,d0),(int)-1)
            				->setFixed(7,HX_("borderColor",d7,3c,d5,d6),null())
            				->setFixed(8,HX_("titleWidth",4e,c9,47,dc),(int)-1)
            				->setFixed(9,HX_("titleOffset",4b,63,cb,f6),null())
            				->setFixed(10,HX_("titleBorder",a4,18,a6,fa),null())
            				->setFixed(11,HX_("borderSize",cd,ff,ed,06),(int)-1)
            				->setFixed(12,HX_("arrow",c9,79,8f,25),null())
            				->setFixed(13,HX_("background",ee,93,1d,26),null())
            				->setFixed(14,HX_("bottomPadding",26,1e,2d,2b),(int)-1)
            				->setFixed(15,HX_("topPadding",bc,47,4b,3c),(int)-1)
            				->setFixed(16,HX_("bodyFormat",79,23,ab,44),null())
            				->setFixed(17,HX_("autoSizeVertical",66,58,0d,52),null()));
            		}
HXLINE( 576)		if (hx::IsNotNull( DefaultStyle )) {
HXLINE( 577)			if (hx::IsNull( ( ( ::flixel::addons::ui::FontDef)(Style->__Field(HX_("titleFormat",ef,5a,1a,94),hx::paccDynamic)) ) )) {
HXLINE( 577)				Style->__SetField(HX_("titleFormat",ef,5a,1a,94),( ( ::flixel::addons::ui::FontDef)(DefaultStyle->__Field(HX_("titleFormat",ef,5a,1a,94),hx::paccDynamic)) ),hx::paccDynamic);
            			}
HXLINE( 578)			if (hx::IsNull( ( ( ::flixel::addons::ui::FontDef)(Style->__Field(HX_("bodyFormat",79,23,ab,44),hx::paccDynamic)) ) )) {
HXLINE( 578)				Style->__SetField(HX_("bodyFormat",79,23,ab,44),( ( ::flixel::addons::ui::FontDef)(DefaultStyle->__Field(HX_("bodyFormat",79,23,ab,44),hx::paccDynamic)) ),hx::paccDynamic);
            			}
HXLINE( 579)			if (hx::IsNull( ( ( ::flixel::addons::ui::BorderDef)(Style->__Field(HX_("titleBorder",a4,18,a6,fa),hx::paccDynamic)) ) )) {
HXLINE( 579)				Style->__SetField(HX_("titleBorder",a4,18,a6,fa),( ( ::flixel::addons::ui::BorderDef)(DefaultStyle->__Field(HX_("titleBorder",a4,18,a6,fa),hx::paccDynamic)) ),hx::paccDynamic);
            			}
HXLINE( 580)			if (hx::IsNull( ( ( ::flixel::addons::ui::BorderDef)(Style->__Field(HX_("bodyBorder",2e,e1,36,ab),hx::paccDynamic)) ) )) {
HXLINE( 580)				Style->__SetField(HX_("bodyBorder",2e,e1,36,ab),( ( ::flixel::addons::ui::BorderDef)(DefaultStyle->__Field(HX_("bodyBorder",2e,e1,36,ab),hx::paccDynamic)) ),hx::paccDynamic);
            			}
HXLINE( 581)			if (hx::IsNull( ( ( ::flixel::math::FlxPoint)(Style->__Field(HX_("titleOffset",4b,63,cb,f6),hx::paccDynamic)) ) )) {
HXLINE( 581)				Style->__SetField(HX_("titleOffset",4b,63,cb,f6),( ( ::flixel::math::FlxPoint)(DefaultStyle->__Field(HX_("titleOffset",4b,63,cb,f6),hx::paccDynamic)) ),hx::paccDynamic);
            			}
HXLINE( 582)			if (hx::IsNull( ( ( ::flixel::math::FlxPoint)(Style->__Field(HX_("bodyOffset",d5,2b,5c,a7),hx::paccDynamic)) ) )) {
HXLINE( 582)				Style->__SetField(HX_("bodyOffset",d5,2b,5c,a7),( ( ::flixel::math::FlxPoint)(DefaultStyle->__Field(HX_("bodyOffset",d5,2b,5c,a7),hx::paccDynamic)) ),hx::paccDynamic);
            			}
HXLINE( 583)			if (hx::IsNull( Style->__Field(HX_("background",ee,93,1d,26),hx::paccDynamic) )) {
HXLINE( 583)				Style->__SetField(HX_("background",ee,93,1d,26),DefaultStyle->__Field(HX_("background",ee,93,1d,26),hx::paccDynamic),hx::paccDynamic);
            			}
HXLINE( 584)			if (hx::IsNull( Style->__Field(HX_("borderColor",d7,3c,d5,d6),hx::paccDynamic) )) {
HXLINE( 584)				Style->__SetField(HX_("borderColor",d7,3c,d5,d6),DefaultStyle->__Field(HX_("borderColor",d7,3c,d5,d6),hx::paccDynamic),hx::paccDynamic);
            			}
HXLINE( 585)			if (hx::IsNull(  ::Dynamic(Style->__Field(HX_("arrow",c9,79,8f,25),hx::paccDynamic)) )) {
HXLINE( 585)				Style->__SetField(HX_("arrow",c9,79,8f,25), ::Dynamic(DefaultStyle->__Field(HX_("arrow",c9,79,8f,25),hx::paccDynamic)),hx::paccDynamic);
            			}
HXLINE( 587)			bool _hx_tmp;
HXDLIN( 587)			if (hx::IsNotNull( Style->__Field(HX_("borderSize",cd,ff,ed,06),hx::paccDynamic) )) {
HXLINE( 587)				_hx_tmp = hx::IsLess( Style->__Field(HX_("borderSize",cd,ff,ed,06),hx::paccDynamic),(int)0 );
            			}
            			else {
HXLINE( 587)				_hx_tmp = true;
            			}
HXDLIN( 587)			if (_hx_tmp) {
HXLINE( 588)				Style->__SetField(HX_("borderSize",cd,ff,ed,06),DefaultStyle->__Field(HX_("borderSize",cd,ff,ed,06),hx::paccDynamic),hx::paccDynamic);
            			}
HXLINE( 589)			bool _hx_tmp1;
HXDLIN( 589)			if (hx::IsNotNull( Style->__Field(HX_("titleWidth",4e,c9,47,dc),hx::paccDynamic) )) {
HXLINE( 589)				_hx_tmp1 = hx::IsLess( Style->__Field(HX_("titleWidth",4e,c9,47,dc),hx::paccDynamic),(int)0 );
            			}
            			else {
HXLINE( 589)				_hx_tmp1 = true;
            			}
HXDLIN( 589)			if (_hx_tmp1) {
HXLINE( 590)				Style->__SetField(HX_("titleWidth",4e,c9,47,dc),DefaultStyle->__Field(HX_("titleWidth",4e,c9,47,dc),hx::paccDynamic),hx::paccDynamic);
            			}
HXLINE( 591)			bool _hx_tmp2;
HXDLIN( 591)			if (hx::IsNotNull( Style->__Field(HX_("bodyWidth",04,e0,6a,8a),hx::paccDynamic) )) {
HXLINE( 591)				_hx_tmp2 = hx::IsLess( Style->__Field(HX_("bodyWidth",04,e0,6a,8a),hx::paccDynamic),(int)0 );
            			}
            			else {
HXLINE( 591)				_hx_tmp2 = true;
            			}
HXDLIN( 591)			if (_hx_tmp2) {
HXLINE( 592)				Style->__SetField(HX_("bodyWidth",04,e0,6a,8a),DefaultStyle->__Field(HX_("bodyWidth",04,e0,6a,8a),hx::paccDynamic),hx::paccDynamic);
            			}
HXLINE( 593)			if (hx::IsNull( Style->__Field(HX_("autoSizeHorizontal",d4,74,ce,9f),hx::paccDynamic) )) {
HXLINE( 594)				Style->__SetField(HX_("autoSizeHorizontal",d4,74,ce,9f),DefaultStyle->__Field(HX_("autoSizeHorizontal",d4,74,ce,9f),hx::paccDynamic),hx::paccDynamic);
            			}
HXLINE( 595)			if (hx::IsNull( Style->__Field(HX_("autoSizeVertical",66,58,0d,52),hx::paccDynamic) )) {
HXLINE( 596)				Style->__SetField(HX_("autoSizeVertical",66,58,0d,52),DefaultStyle->__Field(HX_("autoSizeVertical",66,58,0d,52),hx::paccDynamic),hx::paccDynamic);
            			}
HXLINE( 598)			bool _hx_tmp3;
HXDLIN( 598)			if (hx::IsNotNull( Style->__Field(HX_("leftPadding",8a,98,10,d0),hx::paccDynamic) )) {
HXLINE( 598)				_hx_tmp3 = hx::IsLess( Style->__Field(HX_("leftPadding",8a,98,10,d0),hx::paccDynamic),(int)0 );
            			}
            			else {
HXLINE( 598)				_hx_tmp3 = true;
            			}
HXDLIN( 598)			if (_hx_tmp3) {
HXLINE( 599)				Style->__SetField(HX_("leftPadding",8a,98,10,d0),DefaultStyle->__Field(HX_("leftPadding",8a,98,10,d0),hx::paccDynamic),hx::paccDynamic);
            			}
HXLINE( 600)			bool _hx_tmp4;
HXDLIN( 600)			if (hx::IsNotNull( Style->__Field(HX_("rightPadding",55,e9,2b,bb),hx::paccDynamic) )) {
HXLINE( 600)				_hx_tmp4 = hx::IsLess( Style->__Field(HX_("rightPadding",55,e9,2b,bb),hx::paccDynamic),(int)0 );
            			}
            			else {
HXLINE( 600)				_hx_tmp4 = true;
            			}
HXDLIN( 600)			if (_hx_tmp4) {
HXLINE( 601)				Style->__SetField(HX_("rightPadding",55,e9,2b,bb),DefaultStyle->__Field(HX_("rightPadding",55,e9,2b,bb),hx::paccDynamic),hx::paccDynamic);
            			}
HXLINE( 602)			bool _hx_tmp5;
HXDLIN( 602)			if (hx::IsNotNull( Style->__Field(HX_("topPadding",bc,47,4b,3c),hx::paccDynamic) )) {
HXLINE( 602)				_hx_tmp5 = hx::IsLess( Style->__Field(HX_("topPadding",bc,47,4b,3c),hx::paccDynamic),(int)0 );
            			}
            			else {
HXLINE( 602)				_hx_tmp5 = true;
            			}
HXDLIN( 602)			if (_hx_tmp5) {
HXLINE( 603)				Style->__SetField(HX_("topPadding",bc,47,4b,3c),DefaultStyle->__Field(HX_("topPadding",bc,47,4b,3c),hx::paccDynamic),hx::paccDynamic);
            			}
HXLINE( 604)			bool _hx_tmp6;
HXDLIN( 604)			if (hx::IsNotNull( Style->__Field(HX_("leftPadding",8a,98,10,d0),hx::paccDynamic) )) {
HXLINE( 604)				_hx_tmp6 = hx::IsLess( Style->__Field(HX_("bottomPadding",26,1e,2d,2b),hx::paccDynamic),(int)0 );
            			}
            			else {
HXLINE( 604)				_hx_tmp6 = true;
            			}
HXDLIN( 604)			if (_hx_tmp6) {
HXLINE( 605)				Style->__SetField(HX_("bottomPadding",26,1e,2d,2b),DefaultStyle->__Field(HX_("bottomPadding",26,1e,2d,2b),hx::paccDynamic),hx::paccDynamic);
            			}
            		}
HXLINE( 609)		if (hx::IsNotNull( DefaultStyle )) {
HXLINE( 611)			if (hx::IsNotNull( ( ( ::flixel::addons::ui::FontDef)(Style->__Field(HX_("titleFormat",ef,5a,1a,94),hx::paccDynamic)) ) )) {
HXLINE( 613)				::flixel::addons::ui::FlxUITooltip_obj::fillFontDefNulls(( ( ::flixel::addons::ui::FontDef)(Style->__Field(HX_("titleFormat",ef,5a,1a,94),hx::paccDynamic)) ),( ( ::flixel::addons::ui::FontDef)(DefaultStyle->__Field(HX_("titleFormat",ef,5a,1a,94),hx::paccDynamic)) ));
HXLINE( 614)				bool _hx_tmp7;
HXDLIN( 614)				if (hx::IsNotNull( ( ( ::flixel::addons::ui::FontDef)(Style->__Field(HX_("titleFormat",ef,5a,1a,94),hx::paccDynamic)) )->format )) {
HXLINE( 614)					_hx_tmp7 = hx::IsNotNull( ( ( ::flixel::addons::ui::FontDef)(DefaultStyle->__Field(HX_("titleFormat",ef,5a,1a,94),hx::paccDynamic)) )->format );
            				}
            				else {
HXLINE( 614)					_hx_tmp7 = false;
            				}
HXDLIN( 614)				if (_hx_tmp7) {
HXLINE( 616)					::flixel::addons::ui::FlxUITooltip_obj::fillFormatNulls(( ( ::flixel::addons::ui::FontDef)(Style->__Field(HX_("titleFormat",ef,5a,1a,94),hx::paccDynamic)) )->format,( ( ::flixel::addons::ui::FontDef)(DefaultStyle->__Field(HX_("titleFormat",ef,5a,1a,94),hx::paccDynamic)) )->format);
            				}
            			}
HXLINE( 619)			if (hx::IsNotNull( ( ( ::flixel::addons::ui::FontDef)(Style->__Field(HX_("bodyFormat",79,23,ab,44),hx::paccDynamic)) ) )) {
HXLINE( 621)				::flixel::addons::ui::FlxUITooltip_obj::fillFontDefNulls(( ( ::flixel::addons::ui::FontDef)(Style->__Field(HX_("bodyFormat",79,23,ab,44),hx::paccDynamic)) ),( ( ::flixel::addons::ui::FontDef)(DefaultStyle->__Field(HX_("bodyFormat",79,23,ab,44),hx::paccDynamic)) ));
HXLINE( 622)				bool _hx_tmp8;
HXDLIN( 622)				if (hx::IsNotNull( ( ( ::flixel::addons::ui::FontDef)(Style->__Field(HX_("bodyFormat",79,23,ab,44),hx::paccDynamic)) )->format )) {
HXLINE( 622)					_hx_tmp8 = hx::IsNotNull( ( ( ::flixel::addons::ui::FontDef)(DefaultStyle->__Field(HX_("bodyFormat",79,23,ab,44),hx::paccDynamic)) )->format );
            				}
            				else {
HXLINE( 622)					_hx_tmp8 = false;
            				}
HXDLIN( 622)				if (_hx_tmp8) {
HXLINE( 624)					::flixel::addons::ui::FlxUITooltip_obj::fillFormatNulls(( ( ::flixel::addons::ui::FontDef)(Style->__Field(HX_("bodyFormat",79,23,ab,44),hx::paccDynamic)) )->format,( ( ::flixel::addons::ui::FontDef)(DefaultStyle->__Field(HX_("bodyFormat",79,23,ab,44),hx::paccDynamic)) )->format);
            				}
            			}
            		}
HXLINE( 630)		if (hx::IsNull( ( ( ::flixel::addons::ui::FontDef)(Style->__Field(HX_("titleFormat",ef,5a,1a,94),hx::paccDynamic)) ) )) {
HXLINE( 630)			Style->__SetField(HX_("titleFormat",ef,5a,1a,94), ::flixel::addons::ui::FontDef_obj::__alloc( HX_CTX ,null(),null(),null(), ::openfl::_legacy::text::TextFormat_obj::__alloc( HX_CTX ,null(),(int)8,(int)-16777216,null(),null(),null(),null(),null(),null(),null(),null(),null(),null()),null()),hx::paccDynamic);
            		}
HXLINE( 631)		if (hx::IsNull( ( ( ::flixel::addons::ui::FontDef)(Style->__Field(HX_("bodyFormat",79,23,ab,44),hx::paccDynamic)) ) )) {
HXLINE( 631)			Style->__SetField(HX_("bodyFormat",79,23,ab,44), ::flixel::addons::ui::FontDef_obj::__alloc( HX_CTX ,null(),null(),null(), ::openfl::_legacy::text::TextFormat_obj::__alloc( HX_CTX ,null(),(int)8,(int)-16777216,null(),null(),null(),null(),null(),null(),null(),null(),null(),null()),null()),hx::paccDynamic);
            		}
HXLINE( 633)		if (hx::IsNull( ( ( ::flixel::addons::ui::BorderDef)(Style->__Field(HX_("titleBorder",a4,18,a6,fa),hx::paccDynamic)) ) )) {
HXLINE( 633)			Style->__SetField(HX_("titleBorder",a4,18,a6,fa), ::flixel::addons::ui::BorderDef_obj::__alloc( HX_CTX ,::flixel::text::FlxTextBorderStyle_obj::NONE_dyn(),(int)0,(int)0,(int)1),hx::paccDynamic);
            		}
HXLINE( 634)		if (hx::IsNull( ( ( ::flixel::addons::ui::BorderDef)(Style->__Field(HX_("bodyBorder",2e,e1,36,ab),hx::paccDynamic)) ) )) {
HXLINE( 634)			Style->__SetField(HX_("bodyBorder",2e,e1,36,ab), ::flixel::addons::ui::BorderDef_obj::__alloc( HX_CTX ,::flixel::text::FlxTextBorderStyle_obj::NONE_dyn(),(int)0,(int)0,(int)1),hx::paccDynamic);
            		}
HXLINE( 635)		if (hx::IsNull( ( ( ::flixel::math::FlxPoint)(Style->__Field(HX_("titleOffset",4b,63,cb,f6),hx::paccDynamic)) ) )) {
HXLINE( 635)			Style->__SetField(HX_("titleOffset",4b,63,cb,f6), ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,(int)0,(int)0),hx::paccDynamic);
            		}
HXLINE( 636)		if (hx::IsNull( ( ( ::flixel::math::FlxPoint)(Style->__Field(HX_("bodyOffset",d5,2b,5c,a7),hx::paccDynamic)) ) )) {
HXLINE( 636)			Style->__SetField(HX_("bodyOffset",d5,2b,5c,a7), ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,(int)0,(int)0),hx::paccDynamic);
            		}
HXLINE( 637)		if (hx::IsNull( Style->__Field(HX_("background",ee,93,1d,26),hx::paccDynamic) )) {
HXLINE( 637)			Style->__SetField(HX_("background",ee,93,1d,26),(int)16777162,hx::paccDynamic);
            		}
HXLINE( 638)		if (hx::IsNull( Style->__Field(HX_("borderColor",d7,3c,d5,d6),hx::paccDynamic) )) {
HXLINE( 638)			Style->__SetField(HX_("borderColor",d7,3c,d5,d6),(int)-16777216,hx::paccDynamic);
            		}
HXLINE( 639)		if (hx::IsNull(  ::Dynamic(Style->__Field(HX_("arrow",c9,79,8f,25),hx::paccDynamic)) )) {
HXLINE( 639)			Style->__SetField(HX_("arrow",c9,79,8f,25),HX_("flixel/flixel-ui/img/tooltip_arrow.png",df,64,ce,50),hx::paccDynamic);
            		}
HXLINE( 641)		bool _hx_tmp9;
HXDLIN( 641)		if (hx::IsNotNull( Style->__Field(HX_("borderSize",cd,ff,ed,06),hx::paccDynamic) )) {
HXLINE( 641)			_hx_tmp9 = hx::IsLess( Style->__Field(HX_("borderSize",cd,ff,ed,06),hx::paccDynamic),(int)0 );
            		}
            		else {
HXLINE( 641)			_hx_tmp9 = true;
            		}
HXDLIN( 641)		if (_hx_tmp9) {
HXLINE( 642)			Style->__SetField(HX_("borderSize",cd,ff,ed,06),(int)1,hx::paccDynamic);
            		}
HXLINE( 643)		bool _hx_tmp10;
HXDLIN( 643)		if (hx::IsNotNull( Style->__Field(HX_("titleWidth",4e,c9,47,dc),hx::paccDynamic) )) {
HXLINE( 643)			_hx_tmp10 = hx::IsLess( Style->__Field(HX_("titleWidth",4e,c9,47,dc),hx::paccDynamic),(int)0 );
            		}
            		else {
HXLINE( 643)			_hx_tmp10 = true;
            		}
HXDLIN( 643)		if (_hx_tmp10) {
HXLINE( 644)			Style->__SetField(HX_("titleWidth",4e,c9,47,dc),(int)100,hx::paccDynamic);
            		}
HXLINE( 645)		bool _hx_tmp11;
HXDLIN( 645)		if (hx::IsNotNull( Style->__Field(HX_("bodyWidth",04,e0,6a,8a),hx::paccDynamic) )) {
HXLINE( 645)			_hx_tmp11 = hx::IsLess( Style->__Field(HX_("bodyWidth",04,e0,6a,8a),hx::paccDynamic),(int)0 );
            		}
            		else {
HXLINE( 645)			_hx_tmp11 = true;
            		}
HXDLIN( 645)		if (_hx_tmp11) {
HXLINE( 646)			Style->__SetField(HX_("bodyWidth",04,e0,6a,8a),(int)100,hx::paccDynamic);
            		}
HXLINE( 647)		if (hx::IsNull( Style->__Field(HX_("autoSizeHorizontal",d4,74,ce,9f),hx::paccDynamic) )) {
HXLINE( 648)			Style->__SetField(HX_("autoSizeHorizontal",d4,74,ce,9f),true,hx::paccDynamic);
            		}
HXLINE( 649)		if (hx::IsNull( Style->__Field(HX_("autoSizeVertical",66,58,0d,52),hx::paccDynamic) )) {
HXLINE( 650)			Style->__SetField(HX_("autoSizeVertical",66,58,0d,52),true,hx::paccDynamic);
            		}
HXLINE( 652)		bool _hx_tmp12;
HXDLIN( 652)		if (hx::IsNotNull( Style->__Field(HX_("leftPadding",8a,98,10,d0),hx::paccDynamic) )) {
HXLINE( 652)			_hx_tmp12 = hx::IsLess( Style->__Field(HX_("leftPadding",8a,98,10,d0),hx::paccDynamic),(int)0 );
            		}
            		else {
HXLINE( 652)			_hx_tmp12 = true;
            		}
HXDLIN( 652)		if (_hx_tmp12) {
HXLINE( 653)			Style->__SetField(HX_("leftPadding",8a,98,10,d0),(int)0,hx::paccDynamic);
            		}
HXLINE( 654)		bool _hx_tmp13;
HXDLIN( 654)		if (hx::IsNotNull( Style->__Field(HX_("rightPadding",55,e9,2b,bb),hx::paccDynamic) )) {
HXLINE( 654)			_hx_tmp13 = hx::IsLess( Style->__Field(HX_("rightPadding",55,e9,2b,bb),hx::paccDynamic),(int)0 );
            		}
            		else {
HXLINE( 654)			_hx_tmp13 = true;
            		}
HXDLIN( 654)		if (_hx_tmp13) {
HXLINE( 655)			Style->__SetField(HX_("rightPadding",55,e9,2b,bb),(int)0,hx::paccDynamic);
            		}
HXLINE( 656)		bool _hx_tmp14;
HXDLIN( 656)		if (hx::IsNotNull( Style->__Field(HX_("topPadding",bc,47,4b,3c),hx::paccDynamic) )) {
HXLINE( 656)			_hx_tmp14 = hx::IsLess( Style->__Field(HX_("topPadding",bc,47,4b,3c),hx::paccDynamic),(int)0 );
            		}
            		else {
HXLINE( 656)			_hx_tmp14 = true;
            		}
HXDLIN( 656)		if (_hx_tmp14) {
HXLINE( 657)			Style->__SetField(HX_("topPadding",bc,47,4b,3c),(int)0,hx::paccDynamic);
            		}
HXLINE( 658)		bool _hx_tmp15;
HXDLIN( 658)		if (hx::IsNotNull( Style->__Field(HX_("leftPadding",8a,98,10,d0),hx::paccDynamic) )) {
HXLINE( 658)			_hx_tmp15 = hx::IsLess( Style->__Field(HX_("bottomPadding",26,1e,2d,2b),hx::paccDynamic),(int)0 );
            		}
            		else {
HXLINE( 658)			_hx_tmp15 = true;
            		}
HXDLIN( 658)		if (_hx_tmp15) {
HXLINE( 659)			Style->__SetField(HX_("bottomPadding",26,1e,2d,2b),(int)0,hx::paccDynamic);
            		}
HXLINE( 661)		return Style;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxUITooltip_obj,styleFix,return )

 ::Dynamic FlxUITooltip_obj::cloneStyle( ::Dynamic s){
            	HX_STACKFRAME(&_hx_pos_7b5caaba09e0a704_665_cloneStyle)
HXLINE( 666)		 ::flixel::addons::ui::FontDef tf;
HXDLIN( 666)		if (hx::IsNotNull( ( ( ::flixel::addons::ui::FontDef)(s->__Field(HX_("titleFormat",ef,5a,1a,94),hx::paccDynamic)) ) )) {
HXLINE( 666)			tf = ( ( ::flixel::addons::ui::FontDef)(s->__Field(HX_("titleFormat",ef,5a,1a,94),hx::paccDynamic)) )->clone();
            		}
            		else {
HXLINE( 666)			tf = null();
            		}
HXLINE( 667)		 ::flixel::addons::ui::FontDef bf;
HXDLIN( 667)		if (hx::IsNotNull( ( ( ::flixel::addons::ui::FontDef)(s->__Field(HX_("bodyFormat",79,23,ab,44),hx::paccDynamic)) ) )) {
HXLINE( 667)			bf = ( ( ::flixel::addons::ui::FontDef)(s->__Field(HX_("bodyFormat",79,23,ab,44),hx::paccDynamic)) )->clone();
            		}
            		else {
HXLINE( 667)			bf = null();
            		}
HXLINE( 672)		 ::Dynamic s1 = s->__Field(HX_("borderSize",cd,ff,ed,06),hx::paccDynamic);
HXLINE( 673)		 ::Dynamic s2 = s->__Field(HX_("titleWidth",4e,c9,47,dc),hx::paccDynamic);
HXLINE( 674)		 ::Dynamic s3 = s->__Field(HX_("bodyWidth",04,e0,6a,8a),hx::paccDynamic);
HXLINE( 675)		 ::Dynamic s4 = s->__Field(HX_("background",ee,93,1d,26),hx::paccDynamic);
HXLINE( 676)		 ::Dynamic s5 = s->__Field(HX_("borderColor",d7,3c,d5,d6),hx::paccDynamic);
HXLINE( 677)		 ::Dynamic s6 =  ::Dynamic(s->__Field(HX_("arrow",c9,79,8f,25),hx::paccDynamic));
HXLINE( 678)		 ::flixel::math::FlxPoint obj = ( ( ::flixel::math::FlxPoint)(s->__Field(HX_("titleOffset",4b,63,cb,f6),hx::paccDynamic)) )->copyTo(null());
HXLINE( 679)		 ::flixel::math::FlxPoint obj1 = ( ( ::flixel::math::FlxPoint)(s->__Field(HX_("bodyOffset",d5,2b,5c,a7),hx::paccDynamic)) )->copyTo(null());
HXLINE( 680)		 ::flixel::addons::ui::BorderDef obj2 = ( ( ::flixel::addons::ui::BorderDef)(s->__Field(HX_("titleBorder",a4,18,a6,fa),hx::paccDynamic)) )->clone();
HXLINE( 681)		 ::flixel::addons::ui::BorderDef obj3 = ( ( ::flixel::addons::ui::BorderDef)(s->__Field(HX_("bodyBorder",2e,e1,36,ab),hx::paccDynamic)) )->clone();
HXLINE( 669)		 ::Dynamic obj4 =  ::Dynamic(hx::Anon_obj::Create(18)
            			->setFixed(0,HX_("bodyWidth",04,e0,6a,8a),s3)
            			->setFixed(1,HX_("titleFormat",ef,5a,1a,94),tf)
            			->setFixed(2,HX_("autoSizeHorizontal",d4,74,ce,9f), ::Dynamic(s->__Field(HX_("autoSizeHorizontal",d4,74,ce,9f),hx::paccDynamic)))
            			->setFixed(3,HX_("bodyOffset",d5,2b,5c,a7),obj1)
            			->setFixed(4,HX_("bodyBorder",2e,e1,36,ab),obj3)
            			->setFixed(5,HX_("rightPadding",55,e9,2b,bb), ::Dynamic(s->__Field(HX_("rightPadding",55,e9,2b,bb),hx::paccDynamic)))
            			->setFixed(6,HX_("leftPadding",8a,98,10,d0), ::Dynamic(s->__Field(HX_("leftPadding",8a,98,10,d0),hx::paccDynamic)))
            			->setFixed(7,HX_("borderColor",d7,3c,d5,d6),s5)
            			->setFixed(8,HX_("titleWidth",4e,c9,47,dc),s2)
            			->setFixed(9,HX_("titleOffset",4b,63,cb,f6),obj)
            			->setFixed(10,HX_("titleBorder",a4,18,a6,fa),obj2)
            			->setFixed(11,HX_("borderSize",cd,ff,ed,06),s1)
            			->setFixed(12,HX_("arrow",c9,79,8f,25),s6)
            			->setFixed(13,HX_("background",ee,93,1d,26),s4)
            			->setFixed(14,HX_("bottomPadding",26,1e,2d,2b), ::Dynamic(s->__Field(HX_("bottomPadding",26,1e,2d,2b),hx::paccDynamic)))
            			->setFixed(15,HX_("topPadding",bc,47,4b,3c), ::Dynamic(s->__Field(HX_("topPadding",bc,47,4b,3c),hx::paccDynamic)))
            			->setFixed(16,HX_("bodyFormat",79,23,ab,44),bf)
            			->setFixed(17,HX_("autoSizeVertical",66,58,0d,52), ::Dynamic(s->__Field(HX_("autoSizeVertical",66,58,0d,52),hx::paccDynamic))));
HXLINE( 689)		return obj4;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxUITooltip_obj,cloneStyle,return )

void FlxUITooltip_obj::fillFontDefNulls( ::flixel::addons::ui::FontDef a, ::flixel::addons::ui::FontDef b){
            	HX_STACKFRAME(&_hx_pos_7b5caaba09e0a704_693_fillFontDefNulls)
HXLINE( 694)		if ((a->get_size() == (int)0)) {
HXLINE( 694)			a->set_size(b->get_size());
            		}
HXLINE( 695)		bool _hx_tmp;
HXDLIN( 695)		if (hx::IsNotNull( a->name )) {
HXLINE( 695)			_hx_tmp = (a->name == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 695)			_hx_tmp = true;
            		}
HXDLIN( 695)		if (_hx_tmp) {
HXLINE( 695)			a->name = b->name;
            		}
HXLINE( 696)		bool _hx_tmp1;
HXDLIN( 696)		if (hx::IsNotNull( a->file )) {
HXLINE( 696)			_hx_tmp1 = (a->file == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 696)			_hx_tmp1 = true;
            		}
HXDLIN( 696)		if (_hx_tmp1) {
HXLINE( 696)			a->file = b->file;
            		}
HXLINE( 697)		bool _hx_tmp2;
HXDLIN( 697)		if (hx::IsNotNull( a->extension )) {
HXLINE( 697)			_hx_tmp2 = (a->extension == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 697)			_hx_tmp2 = true;
            		}
HXDLIN( 697)		if (_hx_tmp2) {
HXLINE( 697)			a->extension = b->extension;
            		}
HXLINE( 698)		if (hx::IsNull( a->border )) {
HXLINE( 698)			 ::flixel::addons::ui::BorderDef _hx_tmp3;
HXDLIN( 698)			if (hx::IsNotNull( b->border )) {
HXLINE( 698)				_hx_tmp3 = b->border->clone();
            			}
            			else {
HXLINE( 698)				_hx_tmp3 = null();
            			}
HXDLIN( 698)			a->border = _hx_tmp3;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxUITooltip_obj,fillFontDefNulls,(void))

void FlxUITooltip_obj::fillFormatNulls( ::openfl::_legacy::text::TextFormat a, ::openfl::_legacy::text::TextFormat b){
            	HX_STACKFRAME(&_hx_pos_7b5caaba09e0a704_701_fillFormatNulls)
HXLINE( 702)		if (hx::IsNull( a->align )) {
HXLINE( 702)			a->align = b->align;
            		}
HXLINE( 703)		if (hx::IsNull( a->blockIndent )) {
HXLINE( 703)			a->blockIndent = b->blockIndent;
            		}
HXLINE( 704)		if (hx::IsNull( a->bold )) {
HXLINE( 704)			a->bold = b->bold;
            		}
HXLINE( 705)		if (hx::IsNull( a->bullet )) {
HXLINE( 705)			a->bullet = b->bullet;
            		}
HXLINE( 706)		if (hx::IsNull( a->color )) {
HXLINE( 706)			a->color = b->color;
            		}
HXLINE( 707)		if (hx::IsNull( a->font )) {
HXLINE( 707)			a->font = b->font;
            		}
HXLINE( 708)		if (hx::IsNull( a->indent )) {
HXLINE( 708)			a->indent = b->indent;
            		}
HXLINE( 709)		if (hx::IsNull( a->italic )) {
HXLINE( 709)			a->italic = b->italic;
            		}
HXLINE( 710)		if (hx::IsNull( a->kerning )) {
HXLINE( 710)			a->kerning = b->kerning;
            		}
HXLINE( 711)		if (hx::IsNull( a->leading )) {
HXLINE( 711)			a->leading = b->leading;
            		}
HXLINE( 712)		if (hx::IsNull( a->leftMargin )) {
HXLINE( 712)			a->leftMargin = b->leftMargin;
            		}
HXLINE( 713)		if (hx::IsNull( a->letterSpacing )) {
HXLINE( 713)			a->letterSpacing = b->letterSpacing;
            		}
HXLINE( 714)		if (hx::IsNull( a->rightMargin )) {
HXLINE( 714)			a->rightMargin = b->rightMargin;
            		}
HXLINE( 715)		if (hx::IsNull( a->size )) {
HXLINE( 715)			a->size = b->size;
            		}
HXLINE( 716)		if (hx::IsNull( a->tabStops )) {
HXLINE( 716)			a->tabStops = b->tabStops;
            		}
HXLINE( 717)		if (hx::IsNull( a->target )) {
HXLINE( 717)			a->target = b->target;
            		}
HXLINE( 718)		if (hx::IsNull( a->underline )) {
HXLINE( 718)			a->underline = b->underline;
            		}
HXLINE( 719)		if (hx::IsNull( a->url )) {
HXLINE( 719)			a->url = b->url;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxUITooltip_obj,fillFormatNulls,(void))


hx::ObjectPtr< FlxUITooltip_obj > FlxUITooltip_obj::__new(int Width,int Height, ::flixel::addons::ui::Anchor Anchor_, ::Dynamic Style) {
	hx::ObjectPtr< FlxUITooltip_obj > __this = new FlxUITooltip_obj();
	__this->__construct(Width,Height,Anchor_,Style);
	return __this;
}

hx::ObjectPtr< FlxUITooltip_obj > FlxUITooltip_obj::__alloc(hx::Ctx *_hx_ctx,int Width,int Height, ::flixel::addons::ui::Anchor Anchor_, ::Dynamic Style) {
	FlxUITooltip_obj *__this = (FlxUITooltip_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxUITooltip_obj), true, "flixel.addons.ui.FlxUITooltip"));
	*(void **)__this = FlxUITooltip_obj::_hx_vtable;
	__this->__construct(Width,Height,Anchor_,Style);
	return __this;
}

FlxUITooltip_obj::FlxUITooltip_obj()
{
}

void FlxUITooltip_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxUITooltip);
	HX_MARK_MEMBER_NAME(style,"style");
	HX_MARK_MEMBER_NAME(anchor,"anchor");
	HX_MARK_MEMBER_NAME(title,"title");
	HX_MARK_MEMBER_NAME(body,"body");
	HX_MARK_MEMBER_NAME(_bkg,"_bkg");
	HX_MARK_MEMBER_NAME(_titleText,"_titleText");
	HX_MARK_MEMBER_NAME(_bodyText,"_bodyText");
	HX_MARK_MEMBER_NAME(_arrow,"_arrow");
	HX_MARK_MEMBER_NAME(_arrowBkg,"_arrowBkg");
	HX_MARK_MEMBER_NAME(_anchorArrow,"_anchorArrow");
	 ::flixel::addons::ui::FlxUIGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxUITooltip_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(style,"style");
	HX_VISIT_MEMBER_NAME(anchor,"anchor");
	HX_VISIT_MEMBER_NAME(title,"title");
	HX_VISIT_MEMBER_NAME(body,"body");
	HX_VISIT_MEMBER_NAME(_bkg,"_bkg");
	HX_VISIT_MEMBER_NAME(_titleText,"_titleText");
	HX_VISIT_MEMBER_NAME(_bodyText,"_bodyText");
	HX_VISIT_MEMBER_NAME(_arrow,"_arrow");
	HX_VISIT_MEMBER_NAME(_arrowBkg,"_arrowBkg");
	HX_VISIT_MEMBER_NAME(_anchorArrow,"_anchorArrow");
	 ::flixel::addons::ui::FlxUIGroup_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxUITooltip_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"body") ) { return hx::Val( body ); }
		if (HX_FIELD_EQ(inName,"show") ) { return hx::Val( show_dyn() ); }
		if (HX_FIELD_EQ(inName,"hide") ) { return hx::Val( hide_dyn() ); }
		if (HX_FIELD_EQ(inName,"_bkg") ) { return hx::Val( _bkg ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"style") ) { return hx::Val( style ); }
		if (HX_FIELD_EQ(inName,"title") ) { return hx::Val( title ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"anchor") ) { return hx::Val( anchor ); }
		if (HX_FIELD_EQ(inName,"_arrow") ) { return hx::Val( _arrow ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"refresh") ) { return hx::Val( refresh_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"set_body") ) { return hx::Val( set_body_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"set_style") ) { return hx::Val( set_style_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_title") ) { return hx::Val( set_title_dyn() ); }
		if (HX_FIELD_EQ(inName,"_bodyText") ) { return hx::Val( _bodyText ); }
		if (HX_FIELD_EQ(inName,"_arrowBkg") ) { return hx::Val( _arrowBkg ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_anchor") ) { return hx::Val( set_anchor_dyn() ); }
		if (HX_FIELD_EQ(inName,"_titleText") ) { return hx::Val( _titleText ); }
		if (HX_FIELD_EQ(inName,"refreshBkg") ) { return hx::Val( refreshBkg_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getStyleKey") ) { return hx::Val( getStyleKey_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_anchorArrow") ) { return hx::Val( _anchorArrow ); }
		if (HX_FIELD_EQ(inName,"makeArrowBkg") ) { return hx::Val( makeArrowBkg_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getArrowAnchor") ) { return hx::Val( getArrowAnchor_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxUITooltip_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"styleFix") ) { outValue = styleFix_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"cloneStyle") ) { outValue = cloneStyle_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"fillFormatNulls") ) { outValue = fillFormatNulls_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"fillFontDefNulls") ) { outValue = fillFontDefNulls_dyn(); return true; }
	}
	return false;
}

hx::Val FlxUITooltip_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"body") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_body(inValue.Cast< ::String >()) );body=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_bkg") ) { _bkg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"style") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_style(inValue.Cast<  ::Dynamic >()) );style=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"title") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_title(inValue.Cast< ::String >()) );title=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"anchor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_anchor(inValue.Cast<  ::flixel::addons::ui::Anchor >()) );anchor=inValue.Cast<  ::flixel::addons::ui::Anchor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_arrow") ) { _arrow=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_bodyText") ) { _bodyText=inValue.Cast<  ::flixel::addons::ui::FlxUIText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_arrowBkg") ) { _arrowBkg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_titleText") ) { _titleText=inValue.Cast<  ::flixel::addons::ui::FlxUIText >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_anchorArrow") ) { _anchorArrow=inValue.Cast<  ::flixel::addons::ui::Anchor >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxUITooltip_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("style","\x31","\xa5","\x1d","\x84"));
	outFields->push(HX_HCSTRING("anchor","\x75","\x3a","\x71","\x60"));
	outFields->push(HX_HCSTRING("title","\x98","\x15","\x3b","\x10"));
	outFields->push(HX_HCSTRING("body","\xa2","\x7a","\x1b","\x41"));
	outFields->push(HX_HCSTRING("_bkg","\x7f","\xff","\x15","\x3f"));
	outFields->push(HX_HCSTRING("_titleText","\x26","\x36","\x47","\xcc"));
	outFields->push(HX_HCSTRING("_bodyText","\xce","\x63","\xb3","\x13"));
	outFields->push(HX_HCSTRING("_arrow","\x0a","\xc1","\x76","\x21"));
	outFields->push(HX_HCSTRING("_arrowBkg","\x94","\x73","\x46","\x45"));
	outFields->push(HX_HCSTRING("_anchorArrow","\x15","\x55","\x64","\xff"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxUITooltip_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxUITooltip_obj,style),HX_HCSTRING("style","\x31","\xa5","\x1d","\x84")},
	{hx::fsObject /*::flixel::addons::ui::Anchor*/ ,(int)offsetof(FlxUITooltip_obj,anchor),HX_HCSTRING("anchor","\x75","\x3a","\x71","\x60")},
	{hx::fsString,(int)offsetof(FlxUITooltip_obj,title),HX_HCSTRING("title","\x98","\x15","\x3b","\x10")},
	{hx::fsString,(int)offsetof(FlxUITooltip_obj,body),HX_HCSTRING("body","\xa2","\x7a","\x1b","\x41")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(FlxUITooltip_obj,_bkg),HX_HCSTRING("_bkg","\x7f","\xff","\x15","\x3f")},
	{hx::fsObject /*::flixel::addons::ui::FlxUIText*/ ,(int)offsetof(FlxUITooltip_obj,_titleText),HX_HCSTRING("_titleText","\x26","\x36","\x47","\xcc")},
	{hx::fsObject /*::flixel::addons::ui::FlxUIText*/ ,(int)offsetof(FlxUITooltip_obj,_bodyText),HX_HCSTRING("_bodyText","\xce","\x63","\xb3","\x13")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(FlxUITooltip_obj,_arrow),HX_HCSTRING("_arrow","\x0a","\xc1","\x76","\x21")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(FlxUITooltip_obj,_arrowBkg),HX_HCSTRING("_arrowBkg","\x94","\x73","\x46","\x45")},
	{hx::fsObject /*::flixel::addons::ui::Anchor*/ ,(int)offsetof(FlxUITooltip_obj,_anchorArrow),HX_HCSTRING("_anchorArrow","\x15","\x55","\x64","\xff")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxUITooltip_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxUITooltip_obj_sMemberFields[] = {
	HX_HCSTRING("style","\x31","\xa5","\x1d","\x84"),
	HX_HCSTRING("anchor","\x75","\x3a","\x71","\x60"),
	HX_HCSTRING("title","\x98","\x15","\x3b","\x10"),
	HX_HCSTRING("body","\xa2","\x7a","\x1b","\x41"),
	HX_HCSTRING("show","\xfd","\xd4","\x52","\x4c"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("hide","\xc2","\x34","\x0e","\x45"),
	HX_HCSTRING("set_anchor","\xb2","\x48","\x76","\x54"),
	HX_HCSTRING("set_style","\x94","\xed","\x17","\xab"),
	HX_HCSTRING("set_title","\xfb","\x5d","\x35","\x37"),
	HX_HCSTRING("set_body","\x9f","\x8f","\x33","\x6f"),
	HX_HCSTRING("_bkg","\x7f","\xff","\x15","\x3f"),
	HX_HCSTRING("_titleText","\x26","\x36","\x47","\xcc"),
	HX_HCSTRING("_bodyText","\xce","\x63","\xb3","\x13"),
	HX_HCSTRING("_arrow","\x0a","\xc1","\x76","\x21"),
	HX_HCSTRING("_arrowBkg","\x94","\x73","\x46","\x45"),
	HX_HCSTRING("_anchorArrow","\x15","\x55","\x64","\xff"),
	HX_HCSTRING("refresh","\xdb","\xd9","\x20","\xed"),
	HX_HCSTRING("refreshBkg","\x63","\xf3","\x20","\x07"),
	HX_HCSTRING("getStyleKey","\xa4","\xf3","\xc7","\x82"),
	HX_HCSTRING("makeArrowBkg","\x43","\x10","\x89","\x42"),
	HX_HCSTRING("getArrowAnchor","\x28","\x78","\xee","\xa2"),
	::String(null()) };

static void FlxUITooltip_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxUITooltip_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxUITooltip_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxUITooltip_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxUITooltip_obj::__mClass;

static ::String FlxUITooltip_obj_sStaticFields[] = {
	HX_HCSTRING("styleFix","\x24","\x69","\xd0","\x5c"),
	HX_HCSTRING("cloneStyle","\x94","\xb0","\x13","\x7f"),
	HX_HCSTRING("fillFontDefNulls","\x19","\x18","\x93","\xaf"),
	HX_HCSTRING("fillFormatNulls","\x92","\x13","\x58","\xa0"),
	::String(null())
};

void FlxUITooltip_obj::__register()
{
	hx::Object *dummy = new FlxUITooltip_obj;
	FlxUITooltip_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.ui.FlxUITooltip","\x2e","\xb1","\x3d","\x94");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxUITooltip_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxUITooltip_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxUITooltip_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxUITooltip_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxUITooltip_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxUITooltip_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxUITooltip_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxUITooltip_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace ui
