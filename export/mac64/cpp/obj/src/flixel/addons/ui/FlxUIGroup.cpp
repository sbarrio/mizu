// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_774c2f74f08363c0_13_new,"flixel.addons.ui.FlxUIGroup","new",0x7ddf049c,"flixel.addons.ui.FlxUIGroup.new","flixel/addons/ui/FlxUIGroup.hx",13,0xd49587d3)
HX_LOCAL_STACK_FRAME(_hx_pos_774c2f74f08363c0_37_destroy,"flixel.addons.ui.FlxUIGroup","destroy",0x25c62f36,"flixel.addons.ui.FlxUIGroup.destroy","flixel/addons/ui/FlxUIGroup.hx",37,0xd49587d3)
HX_LOCAL_STACK_FRAME(_hx_pos_774c2f74f08363c0_40_add,"flixel.addons.ui.FlxUIGroup","add",0x7dd5265d,"flixel.addons.ui.FlxUIGroup.add","flixel/addons/ui/FlxUIGroup.hx",40,0xd49587d3)
HX_LOCAL_STACK_FRAME(_hx_pos_774c2f74f08363c0_48_remove,"flixel.addons.ui.FlxUIGroup","remove",0xd69eb588,"flixel.addons.ui.FlxUIGroup.remove","flixel/addons/ui/FlxUIGroup.hx",48,0xd49587d3)
HX_LOCAL_STACK_FRAME(_hx_pos_774c2f74f08363c0_58_setScrollFactor,"flixel.addons.ui.FlxUIGroup","setScrollFactor",0xef2c5dba,"flixel.addons.ui.FlxUIGroup.setScrollFactor","flixel/addons/ui/FlxUIGroup.hx",58,0xd49587d3)
HX_LOCAL_STACK_FRAME(_hx_pos_774c2f74f08363c0_67_hasThis,"flixel.addons.ui.FlxUIGroup","hasThis",0x1d802914,"flixel.addons.ui.FlxUIGroup.hasThis","flixel/addons/ui/FlxUIGroup.hx",67,0xd49587d3)
HX_LOCAL_STACK_FRAME(_hx_pos_774c2f74f08363c0_82_calcBounds,"flixel.addons.ui.FlxUIGroup","calcBounds",0xdbe23c2e,"flixel.addons.ui.FlxUIGroup.calcBounds","flixel/addons/ui/FlxUIGroup.hx",82,0xd49587d3)
HX_LOCAL_STACK_FRAME(_hx_pos_774c2f74f08363c0_122_floorAll,"flixel.addons.ui.FlxUIGroup","floorAll",0x028cf8f9,"flixel.addons.ui.FlxUIGroup.floorAll","flixel/addons/ui/FlxUIGroup.hx",122,0xd49587d3)
namespace flixel{
namespace addons{
namespace ui{

void FlxUIGroup_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_774c2f74f08363c0_13_new)
HXLINE(  27)		this->autoBounds = true;
HXLINE(  20)		this->broadcastToFlxUI = true;
HXLINE(  33)		super::__construct(X,Y,null());
            	}

Dynamic FlxUIGroup_obj::__CreateEmpty() { return new FlxUIGroup_obj; }

void *FlxUIGroup_obj::_hx_vtable = 0;

Dynamic FlxUIGroup_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxUIGroup_obj > _hx_result = new FlxUIGroup_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FlxUIGroup_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x263b73ac) {
		if (inClassId<=(int)0x25a685e0) {
			if (inClassId<=(int)0x0b6ffd77) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
			} else {
				return inClassId==(int)0x25a685e0;
			}
		} else {
			return inClassId==(int)0x263b73ac;
		}
	} else {
		return inClassId==(int)0x282173df || inClassId==(int)0x2e105115;
	}
}

static ::flixel::IFlxSprite_obj _hx_flixel_addons_ui_FlxUIGroup__hx_flixel_IFlxSprite= {
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIGroup_obj::set_active,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIGroup_obj::set_visible,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIGroup_obj::set_alive,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIGroup_obj::set_exists,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUIGroup_obj::draw,
	( void (hx::Object::*)(Float))&::flixel::addons::ui::FlxUIGroup_obj::update,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUIGroup_obj::destroy,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUIGroup_obj::kill,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUIGroup_obj::revive,
	( ::String (hx::Object::*)())&::flixel::addons::ui::FlxUIGroup_obj::toString,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUIGroup_obj::set_x,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUIGroup_obj::set_y,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUIGroup_obj::set_alpha,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUIGroup_obj::set_angle,
	( int (hx::Object::*)(int))&::flixel::addons::ui::FlxUIGroup_obj::set_facing,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIGroup_obj::set_moves,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIGroup_obj::set_immovable,
	( void (hx::Object::*)(Float,Float))&::flixel::addons::ui::FlxUIGroup_obj::reset,
	( void (hx::Object::*)(hx::Null< Float > ,hx::Null< Float > ))&::flixel::addons::ui::FlxUIGroup_obj::setPosition,
};

static ::flixel::IFlxBasic_obj _hx_flixel_addons_ui_FlxUIGroup__hx_flixel_IFlxBasic= {
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIGroup_obj::set_active,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIGroup_obj::set_visible,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIGroup_obj::set_alive,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIGroup_obj::set_exists,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUIGroup_obj::draw,
	( void (hx::Object::*)(Float))&::flixel::addons::ui::FlxUIGroup_obj::update,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUIGroup_obj::destroy,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUIGroup_obj::kill,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUIGroup_obj::revive,
	( ::String (hx::Object::*)())&::flixel::addons::ui::FlxUIGroup_obj::toString,
};

static ::flixel::addons::ui::interfaces::IFlxUIWidget_obj _hx_flixel_addons_ui_FlxUIGroup__hx_flixel_addons_ui_interfaces_IFlxUIWidget= {
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIGroup_obj::set_active,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIGroup_obj::set_visible,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIGroup_obj::set_alive,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIGroup_obj::set_exists,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUIGroup_obj::draw,
	( void (hx::Object::*)(Float))&::flixel::addons::ui::FlxUIGroup_obj::update,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUIGroup_obj::destroy,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUIGroup_obj::kill,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUIGroup_obj::revive,
	( ::String (hx::Object::*)())&::flixel::addons::ui::FlxUIGroup_obj::toString,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUIGroup_obj::set_x,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUIGroup_obj::set_y,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUIGroup_obj::set_alpha,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUIGroup_obj::set_angle,
	( int (hx::Object::*)(int))&::flixel::addons::ui::FlxUIGroup_obj::set_facing,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIGroup_obj::set_moves,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIGroup_obj::set_immovable,
	( void (hx::Object::*)(Float,Float))&::flixel::addons::ui::FlxUIGroup_obj::reset,
	( void (hx::Object::*)(hx::Null< Float > ,hx::Null< Float > ))&::flixel::addons::ui::FlxUIGroup_obj::setPosition,
	( Float (hx::Object::*)())&::flixel::addons::ui::FlxUIGroup_obj::get_width,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUIGroup_obj::set_width,
	( Float (hx::Object::*)())&::flixel::addons::ui::FlxUIGroup_obj::get_height,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUIGroup_obj::set_height,
};

void *FlxUIGroup_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x897c83aa: return &_hx_flixel_addons_ui_FlxUIGroup__hx_flixel_IFlxSprite;
		case (int)0x284cfea9: return &_hx_flixel_addons_ui_FlxUIGroup__hx_flixel_IFlxBasic;
		case (int)0x998525de: return &_hx_flixel_addons_ui_FlxUIGroup__hx_flixel_addons_ui_interfaces_IFlxUIWidget;
	}
	return super::_hx_getInterface(inHash);
}

void FlxUIGroup_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_774c2f74f08363c0_37_destroy)
HXDLIN(  37)		this->super::destroy();
            	}


 ::Dynamic FlxUIGroup_obj::add( ::Dynamic _tmp_Object){
            	HX_STACKFRAME(&_hx_pos_774c2f74f08363c0_40_add)
HXLINE(  41)		 ::flixel::FlxSprite Object = ( ( ::flixel::FlxSprite)(_tmp_Object) );
HXDLIN(  41)		 ::flixel::FlxSprite obj = ( ( ::flixel::FlxSprite)(this->super::add(Object)) );
HXLINE(  42)		if (this->autoBounds) {
HXLINE(  43)			this->calcBounds(null());
            		}
HXLINE(  45)		return obj;
            	}


 ::Dynamic FlxUIGroup_obj::remove( ::Dynamic _tmp_Object,hx::Null< bool >  __o_Splice){
bool Splice = __o_Splice.Default(false);
            	HX_STACKFRAME(&_hx_pos_774c2f74f08363c0_48_remove)
HXLINE(  49)		 ::flixel::FlxSprite Object = ( ( ::flixel::FlxSprite)(_tmp_Object) );
HXDLIN(  49)		 ::flixel::FlxSprite obj = ( ( ::flixel::FlxSprite)(this->super::remove(Object,Splice)) );
HXLINE(  50)		if (this->autoBounds) {
HXLINE(  51)			this->calcBounds(null());
            		}
HXLINE(  53)		return obj;
            	}


void FlxUIGroup_obj::setScrollFactor(Float X,Float Y){
            	HX_STACKFRAME(&_hx_pos_774c2f74f08363c0_58_setScrollFactor)
HXDLIN(  58)		int _g = (int)0;
HXDLIN(  58)		::Array< ::Dynamic> _g1 = this->group->members;
HXDLIN(  58)		while((_g < _g1->length)){
HXDLIN(  58)			 ::flixel::FlxSprite obj = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(  58)			_g = (_g + (int)1);
HXLINE(  60)			if (hx::IsNotNull( obj )) {
HXLINE(  62)				obj->scrollFactor->set(X,Y);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUIGroup_obj,setScrollFactor,(void))

bool FlxUIGroup_obj::hasThis( ::flixel::FlxSprite Object){
            	HX_STACKFRAME(&_hx_pos_774c2f74f08363c0_67_hasThis)
HXLINE(  68)		{
HXLINE(  68)			int _g = (int)0;
HXDLIN(  68)			::Array< ::Dynamic> _g1 = this->group->members;
HXDLIN(  68)			while((_g < _g1->length)){
HXLINE(  68)				 ::flixel::FlxSprite obj = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(  68)				_g = (_g + (int)1);
HXLINE(  69)				if (hx::IsEq( obj,Object )) {
HXLINE(  70)					return true;
            				}
            			}
            		}
HXLINE(  73)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUIGroup_obj,hasThis,return )

void FlxUIGroup_obj::calcBounds( ::flixel::math::FlxRect rect){
            	HX_STACKFRAME(&_hx_pos_774c2f74f08363c0_82_calcBounds)
HXDLIN(  82)		bool _hx_tmp;
HXDLIN(  82)		if (hx::IsNotNull( this->group->members )) {
HXDLIN(  82)			_hx_tmp = (this->group->members->get_length() > (int)0);
            		}
            		else {
HXDLIN(  82)			_hx_tmp = false;
            		}
HXDLIN(  82)		if (_hx_tmp) {
HXLINE(  83)			Float left = ::Math_obj::POSITIVE_INFINITY;
HXLINE(  84)			Float right = ::Math_obj::NEGATIVE_INFINITY;
HXLINE(  85)			Float top = ::Math_obj::POSITIVE_INFINITY;
HXLINE(  86)			Float bottom = ::Math_obj::NEGATIVE_INFINITY;
HXLINE(  87)			{
HXLINE(  87)				int _g = (int)0;
HXDLIN(  87)				::Array< ::Dynamic> _g1 = this->group->members;
HXDLIN(  87)				while((_g < _g1->length)){
HXLINE(  87)					 ::flixel::FlxSprite fb = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(  87)					_g = (_g + (int)1);
HXLINE(  88)					if (hx::IsNotNull( fb )) {
HXLINE(  89)						if (::Std_obj::is(fb,hx::ClassOf< ::flixel::addons::ui::interfaces::IFlxUIWidget >())) {
HXLINE(  90)							 ::flixel::FlxSprite flui = fb;
HXLINE(  91)							if ((flui->x < left)) {
HXLINE(  91)								left = flui->x;
            							}
HXLINE(  92)							Float flui1 = flui->x;
HXDLIN(  92)							if (((flui1 + flui->get_width()) > right)) {
HXLINE(  92)								Float flui2 = flui->x;
HXDLIN(  92)								right = (flui2 + flui->get_width());
            							}
HXLINE(  93)							if ((flui->y < top)) {
HXLINE(  93)								top = flui->y;
            							}
HXLINE(  94)							Float flui3 = flui->y;
HXDLIN(  94)							if (((flui3 + flui->get_height()) > bottom)) {
HXLINE(  94)								Float flui4 = flui->y;
HXDLIN(  94)								bottom = (flui4 + flui->get_height());
            							}
            						}
            						else {
HXLINE(  95)							if (::Std_obj::is(fb,hx::ClassOf< ::flixel::FlxSprite >())) {
HXLINE(  96)								 ::flixel::FlxSprite flxi = fb;
HXLINE(  97)								if ((flxi->x < left)) {
HXLINE(  97)									left = flxi->x;
            								}
HXLINE(  98)								if ((flxi->x > right)) {
HXLINE(  98)									right = flxi->x;
            								}
HXLINE(  99)								if ((flxi->y < top)) {
HXLINE(  99)									top = flxi->y;
            								}
HXLINE( 100)								if ((flxi->y > bottom)) {
HXLINE( 100)									bottom = flxi->y;
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 104)			this->set_width((right - left));
HXLINE( 105)			this->set_height((bottom - top));
HXLINE( 106)			if (hx::IsNotNull( rect )) {
HXLINE( 108)				rect->x = left;
HXLINE( 109)				rect->y = top;
HXLINE( 110)				rect->width = this->get_width();
HXLINE( 111)				rect->height = this->get_height();
            			}
            		}
            		else {
HXLINE( 114)			this->set_width(this->set_height((int)0));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUIGroup_obj,calcBounds,(void))

void FlxUIGroup_obj::floorAll(){
            	HX_STACKFRAME(&_hx_pos_774c2f74f08363c0_122_floorAll)
HXLINE( 123)		 ::flixel::FlxSprite fs = null();
HXLINE( 124)		{
HXLINE( 124)			int _g = (int)0;
HXDLIN( 124)			::Array< ::Dynamic> _g1 = this->group->members;
HXDLIN( 124)			while((_g < _g1->length)){
HXLINE( 124)				 ::flixel::FlxSprite fb = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 124)				_g = (_g + (int)1);
HXLINE( 125)				fs = fb;
HXLINE( 126)				fs->set_x(::Math_obj::floor(fs->x));
HXLINE( 127)				fs->set_y(::Math_obj::floor(fs->y));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUIGroup_obj,floorAll,(void))


hx::ObjectPtr< FlxUIGroup_obj > FlxUIGroup_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y) {
	hx::ObjectPtr< FlxUIGroup_obj > __this = new FlxUIGroup_obj();
	__this->__construct(__o_X,__o_Y);
	return __this;
}

hx::ObjectPtr< FlxUIGroup_obj > FlxUIGroup_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y) {
	FlxUIGroup_obj *__this = (FlxUIGroup_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxUIGroup_obj), true, "flixel.addons.ui.FlxUIGroup"));
	*(void **)__this = FlxUIGroup_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y);
	return __this;
}

FlxUIGroup_obj::FlxUIGroup_obj()
{
}

void FlxUIGroup_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxUIGroup);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(broadcastToFlxUI,"broadcastToFlxUI");
	HX_MARK_MEMBER_NAME(autoBounds,"autoBounds");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxUIGroup_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(broadcastToFlxUI,"broadcastToFlxUI");
	HX_VISIT_MEMBER_NAME(autoBounds,"autoBounds");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxUIGroup_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"hasThis") ) { return hx::Val( hasThis_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"floorAll") ) { return hx::Val( floorAll_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"autoBounds") ) { return hx::Val( autoBounds ); }
		if (HX_FIELD_EQ(inName,"calcBounds") ) { return hx::Val( calcBounds_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"setScrollFactor") ) { return hx::Val( setScrollFactor_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"broadcastToFlxUI") ) { return hx::Val( broadcastToFlxUI ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxUIGroup_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"autoBounds") ) { autoBounds=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"broadcastToFlxUI") ) { broadcastToFlxUI=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxUIGroup_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("broadcastToFlxUI","\xca","\x32","\x56","\x1a"));
	outFields->push(HX_HCSTRING("autoBounds","\x44","\x97","\xe8","\xd1"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxUIGroup_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(FlxUIGroup_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsBool,(int)offsetof(FlxUIGroup_obj,broadcastToFlxUI),HX_HCSTRING("broadcastToFlxUI","\xca","\x32","\x56","\x1a")},
	{hx::fsBool,(int)offsetof(FlxUIGroup_obj,autoBounds),HX_HCSTRING("autoBounds","\x44","\x97","\xe8","\xd1")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxUIGroup_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxUIGroup_obj_sMemberFields[] = {
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("broadcastToFlxUI","\xca","\x32","\x56","\x1a"),
	HX_HCSTRING("autoBounds","\x44","\x97","\xe8","\xd1"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("setScrollFactor","\x7e","\xbf","\x85","\x5a"),
	HX_HCSTRING("hasThis","\xd8","\x26","\x40","\x1c"),
	HX_HCSTRING("calcBounds","\xea","\x30","\x0c","\x1b"),
	HX_HCSTRING("floorAll","\xb5","\x06","\xcb","\xeb"),
	::String(null()) };

static void FlxUIGroup_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxUIGroup_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxUIGroup_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxUIGroup_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxUIGroup_obj::__mClass;

void FlxUIGroup_obj::__register()
{
	hx::Object *dummy = new FlxUIGroup_obj;
	FlxUIGroup_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.ui.FlxUIGroup","\xaa","\xc6","\xa9","\x9d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxUIGroup_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxUIGroup_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxUIGroup_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxUIGroup_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxUIGroup_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxUIGroup_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace ui
