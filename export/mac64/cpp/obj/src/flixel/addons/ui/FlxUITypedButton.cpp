// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI
#include <flixel/addons/ui/FlxUI.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI9SliceSprite
#include <flixel/addons/ui/FlxUI9SliceSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISprite
#include <flixel/addons/ui/FlxUISprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIText
#include <flixel/addons/ui/FlxUIText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITypedButton
#include <flixel/addons/ui/FlxUITypedButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_U
#include <flixel/addons/ui/U.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ICursorPointable
#include <flixel/addons/ui/interfaces/ICursorPointable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIButton
#include <flixel/addons/ui/interfaces/IFlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton
#include <flixel/ui/FlxTypedButton.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Point
#include <openfl/_legacy/geom/Point.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6bf08eba80b23956_26_new,"flixel.addons.ui.FlxUITypedButton","new",0xdcfb6819,"flixel.addons.ui.FlxUITypedButton.new","flixel/addons/ui/FlxUITypedButton.hx",26,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_40_set_toggled,"flixel.addons.ui.FlxUITypedButton","set_toggled",0x8d76c22c,"flixel.addons.ui.FlxUITypedButton.set_toggled","flixel/addons/ui/FlxUITypedButton.hx",40,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_57_get_justMousedOver,"flixel.addons.ui.FlxUITypedButton","get_justMousedOver",0x215ae20f,"flixel.addons.ui.FlxUITypedButton.get_justMousedOver","flixel/addons/ui/FlxUITypedButton.hx",57,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_62_get_justMousedOut,"flixel.addons.ui.FlxUITypedButton","get_justMousedOut",0xc7e60033,"flixel.addons.ui.FlxUITypedButton.get_justMousedOut","flixel/addons/ui/FlxUITypedButton.hx",62,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_67_get_mouseIsOver,"flixel.addons.ui.FlxUITypedButton","get_mouseIsOver",0xcad20b33,"flixel.addons.ui.FlxUITypedButton.get_mouseIsOver","flixel/addons/ui/FlxUITypedButton.hx",67,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_72_get_mouseIsOut,"flixel.addons.ui.FlxUITypedButton","get_mouseIsOut",0xe8cd478f,"flixel.addons.ui.FlxUITypedButton.get_mouseIsOut","flixel/addons/ui/FlxUITypedButton.hx",72,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_95_set_toggle_label,"flixel.addons.ui.FlxUITypedButton","set_toggle_label",0x2a641e6d,"flixel.addons.ui.FlxUITypedButton.set_toggle_label","flixel/addons/ui/FlxUITypedButton.hx",95,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_104_set_visible,"flixel.addons.ui.FlxUITypedButton","set_visible",0x6497584e,"flixel.addons.ui.FlxUITypedButton.set_visible","flixel/addons/ui/FlxUITypedButton.hx",104,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_122_set_skipButtonUpdate,"flixel.addons.ui.FlxUITypedButton","set_skipButtonUpdate",0xb2aa475e,"flixel.addons.ui.FlxUITypedButton.set_skipButtonUpdate","flixel/addons/ui/FlxUITypedButton.hx",122,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_128_set_params,"flixel.addons.ui.FlxUITypedButton","set_params",0x0e7dcaea,"flixel.addons.ui.FlxUITypedButton.set_params","flixel/addons/ui/FlxUITypedButton.hx",128,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_133_destroy,"flixel.addons.ui.FlxUITypedButton","destroy",0xe7669533,"flixel.addons.ui.FlxUITypedButton.destroy","flixel/addons/ui/FlxUITypedButton.hx",133,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_162_graphicLoaded,"flixel.addons.ui.FlxUITypedButton","graphicLoaded",0x3b865dc6,"flixel.addons.ui.FlxUITypedButton.graphicLoaded","flixel/addons/ui/FlxUITypedButton.hx",162,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_176_copyGraphic,"flixel.addons.ui.FlxUITypedButton","copyGraphic",0xfb27502c,"flixel.addons.ui.FlxUITypedButton.copyGraphic","flixel/addons/ui/FlxUITypedButton.hx",176,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_213_copyStyle,"flixel.addons.ui.FlxUITypedButton","copyStyle",0x940e71b5,"flixel.addons.ui.FlxUITypedButton.copyStyle","flixel/addons/ui/FlxUITypedButton.hx",213,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_252_setAllLabelOffsets,"flixel.addons.ui.FlxUITypedButton","setAllLabelOffsets",0x57424f92,"flixel.addons.ui.FlxUITypedButton.setAllLabelOffsets","flixel/addons/ui/FlxUITypedButton.hx",252,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_257_update,"flixel.addons.ui.FlxUITypedButton","update",0x163ec7f0,"flixel.addons.ui.FlxUITypedButton.update","flixel/addons/ui/FlxUITypedButton.hx",257,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_290_updateStatusAnimation,"flixel.addons.ui.FlxUITypedButton","updateStatusAnimation",0xbd8e1f62,"flixel.addons.ui.FlxUITypedButton.updateStatusAnimation","flixel/addons/ui/FlxUITypedButton.hx",290,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_301_draw,"flixel.addons.ui.FlxUITypedButton","draw",0x786d562b,"flixel.addons.ui.FlxUITypedButton.draw","flixel/addons/ui/FlxUITypedButton.hx",301,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_311_resize,"flixel.addons.ui.FlxUITypedButton","resize",0x97b49bdb,"flixel.addons.ui.FlxUITypedButton.resize","flixel/addons/ui/FlxUITypedButton.hx",311,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_315_doResize,"flixel.addons.ui.FlxUITypedButton","doResize",0x5e0da986,"flixel.addons.ui.FlxUITypedButton.doResize","flixel/addons/ui/FlxUITypedButton.hx",315,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_385_getBmp,"flixel.addons.ui.FlxUITypedButton","getBmp",0x32533736,"flixel.addons.ui.FlxUITypedButton.getBmp","flixel/addons/ui/FlxUITypedButton.hx",385,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_395_loadGraphicsMultiple,"flixel.addons.ui.FlxUITypedButton","loadGraphicsMultiple",0x389aa468,"flixel.addons.ui.FlxUITypedButton.loadGraphicsMultiple","flixel/addons/ui/FlxUITypedButton.hx",395,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_455_loadGraphicsUpOverDown,"flixel.addons.ui.FlxUITypedButton","loadGraphicsUpOverDown",0xbee26da9,"flixel.addons.ui.FlxUITypedButton.loadGraphicsUpOverDown","flixel/addons/ui/FlxUITypedButton.hx",455,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_526_loadGraphicSlice9,"flixel.addons.ui.FlxUITypedButton","loadGraphicSlice9",0xb9685fe2,"flixel.addons.ui.FlxUITypedButton.loadGraphicSlice9","flixel/addons/ui/FlxUITypedButton.hx",526,0x55608c36)
static const int _hx_array_data_221567a7_43[] = {
	(int)0,(int)1,(int)2,(int)3,(int)4,(int)5,
};
static const int _hx_array_data_221567a7_44[] = {
	(int)0,(int)1,(int)2,
};
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_861_autoCenterLabel,"flixel.addons.ui.FlxUITypedButton","autoCenterLabel",0x5cc27de9,"flixel.addons.ui.FlxUITypedButton.autoCenterLabel","flixel/addons/ui/FlxUITypedButton.hx",861,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_881_setCenterLabelOffset,"flixel.addons.ui.FlxUITypedButton","setCenterLabelOffset",0x7858e6f7,"flixel.addons.ui.FlxUITypedButton.setCenterLabelOffset","flixel/addons/ui/FlxUITypedButton.hx",881,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_887_getCenterLabelOffset,"flixel.addons.ui.FlxUITypedButton","getCenterLabelOffset",0xaba12f83,"flixel.addons.ui.FlxUITypedButton.getCenterLabelOffset","flixel/addons/ui/FlxUITypedButton.hx",887,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_891_forceStateHandler,"flixel.addons.ui.FlxUITypedButton","forceStateHandler",0xa487b1bd,"flixel.addons.ui.FlxUITypedButton.forceStateHandler","flixel/addons/ui/FlxUITypedButton.hx",891,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_916_grabButtonFrame,"flixel.addons.ui.FlxUITypedButton","grabButtonFrame",0x214d85a8,"flixel.addons.ui.FlxUITypedButton.grabButtonFrame","flixel/addons/ui/FlxUITypedButton.hx",916,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_983_combineToggleBitmaps,"flixel.addons.ui.FlxUITypedButton","combineToggleBitmaps",0xea818e98,"flixel.addons.ui.FlxUITypedButton.combineToggleBitmaps","flixel/addons/ui/FlxUITypedButton.hx",983,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_999_assembleButtonFrames,"flixel.addons.ui.FlxUITypedButton","assembleButtonFrames",0x4be9f791,"flixel.addons.ui.FlxUITypedButton.assembleButtonFrames","flixel/addons/ui/FlxUITypedButton.hx",999,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_1028_updateButton,"flixel.addons.ui.FlxUITypedButton","updateButton",0x92a23202,"flixel.addons.ui.FlxUITypedButton.updateButton","flixel/addons/ui/FlxUITypedButton.hx",1028,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_1034_addToCleanup,"flixel.addons.ui.FlxUITypedButton","addToCleanup",0x93288eaf,"flixel.addons.ui.FlxUITypedButton.addToCleanup","flixel/addons/ui/FlxUITypedButton.hx",1034,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_1043_cleanup,"flixel.addons.ui.FlxUITypedButton","cleanup",0x6e22745d,"flixel.addons.ui.FlxUITypedButton.cleanup","flixel/addons/ui/FlxUITypedButton.hx",1043,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_1054_fetchAndShowCorrectLabel,"flixel.addons.ui.FlxUITypedButton","fetchAndShowCorrectLabel",0x9f7daa4b,"flixel.addons.ui.FlxUITypedButton.fetchAndShowCorrectLabel","flixel/addons/ui/FlxUITypedButton.hx",1054,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_1072_onUpHandler,"flixel.addons.ui.FlxUITypedButton","onUpHandler",0xd4dc1e49,"flixel.addons.ui.FlxUITypedButton.onUpHandler","flixel/addons/ui/FlxUITypedButton.hx",1072,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_1093_onDownHandler,"flixel.addons.ui.FlxUITypedButton","onDownHandler",0xf48785a2,"flixel.addons.ui.FlxUITypedButton.onDownHandler","flixel/addons/ui/FlxUITypedButton.hx",1093,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_1110_onOverHandler,"flixel.addons.ui.FlxUITypedButton","onOverHandler",0xcfefcef0,"flixel.addons.ui.FlxUITypedButton.onOverHandler","flixel/addons/ui/FlxUITypedButton.hx",1110,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_1128_onOutHandler,"flixel.addons.ui.FlxUITypedButton","onOutHandler",0x57e35002,"flixel.addons.ui.FlxUITypedButton.onOutHandler","flixel/addons/ui/FlxUITypedButton.hx",1128,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_1146_set_x,"flixel.addons.ui.FlxUITypedButton","set_x",0x81b75354,"flixel.addons.ui.FlxUITypedButton.set_x","flixel/addons/ui/FlxUITypedButton.hx",1146,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_1165_set_y,"flixel.addons.ui.FlxUITypedButton","set_y",0x81b75355,"flixel.addons.ui.FlxUITypedButton.set_y","flixel/addons/ui/FlxUITypedButton.hx",1165,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_116_boot,"flixel.addons.ui.FlxUITypedButton","boot",0x7718ae59,"flixel.addons.ui.FlxUITypedButton.boot","flixel/addons/ui/FlxUITypedButton.hx",116,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_117_boot,"flixel.addons.ui.FlxUITypedButton","boot",0x7718ae59,"flixel.addons.ui.FlxUITypedButton.boot","flixel/addons/ui/FlxUITypedButton.hx",117,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_118_boot,"flixel.addons.ui.FlxUITypedButton","boot",0x7718ae59,"flixel.addons.ui.FlxUITypedButton.boot","flixel/addons/ui/FlxUITypedButton.hx",118,0x55608c36)
HX_LOCAL_STACK_FRAME(_hx_pos_6bf08eba80b23956_119_boot,"flixel.addons.ui.FlxUITypedButton","boot",0x7718ae59,"flixel.addons.ui.FlxUITypedButton.boot","flixel/addons/ui/FlxUITypedButton.hx",119,0x55608c36)
namespace flixel{
namespace addons{
namespace ui{

void FlxUITypedButton_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic OnClick){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_6bf08eba80b23956_26_new)
HXLINE(1200)		this->_centerLabelOffset = null();
HXLINE(1191)		this->_src_h = (int)0;
HXLINE(1189)		this->_src_w = (int)0;
HXLINE(1187)		this->_no_graphic = false;
HXLINE(1185)		this->_assetsToCleanup = ::Array_obj< ::String >::__new(0);
HXLINE(1184)		this->_autoCleanup = true;
HXLINE( 139)		this->autoResizeLabel = false;
HXLINE( 121)		this->skipButtonUpdate = false;
HXLINE( 114)		this->round_labels = true;
HXLINE(  91)		this->down_toggle_visible = true;
HXLINE(  90)		this->over_toggle_visible = true;
HXLINE(  89)		this->up_toggle_visible = true;
HXLINE(  87)		this->down_visible = true;
HXLINE(  86)		this->over_visible = true;
HXLINE(  85)		this->up_visible = true;
HXLINE(  83)		this->down_toggle_color = null();
HXLINE(  82)		this->over_toggle_color = null();
HXLINE(  81)		this->up_toggle_color = null();
HXLINE(  79)		this->down_color = null();
HXLINE(  78)		this->over_color = null();
HXLINE(  77)		this->up_color = null();
HXLINE(  46)		this->broadcastToFlxUI = true;
HXLINE(  38)		this->toggled = false;
HXLINE(  37)		this->has_toggle = false;
HXLINE(  35)		this->tile = (int)0;
HXLINE(  34)		this->resize_point = null();
HXLINE(  32)		this->resize_ratio_axis = (int)1;
HXLINE(  29)		this->resize_ratio = ((Float)-1);
HXLINE( 149)		super::__construct(X,Y,OnClick);
HXLINE( 151)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 151)		point->_inPool = false;
HXDLIN( 151)		this->_centerLabelOffset = point;
HXLINE( 153)		this->statusAnimations[(int)3] = HX_("normal_toggled",f8,ac,ae,ea);
HXLINE( 154)		this->statusAnimations[(int)4] = HX_("highlight_toggled",05,e6,0b,e5);
HXLINE( 155)		this->statusAnimations[(int)5] = HX_("pressed_toggled",73,80,89,1a);
HXLINE( 157)		::Array< Float > _g = ::Array_obj< Float >::__new(0);
HXDLIN( 157)		{
HXLINE( 157)			int _g1 = (int)0;
HXDLIN( 157)			while((_g1 < (int)3)){
HXLINE( 157)				_g1 = (_g1 + (int)1);
HXDLIN( 157)				int i = (_g1 - (int)1);
HXDLIN( 157)				_g->push((int)1);
            			}
            		}
HXDLIN( 157)		this->labelAlphas = _g;
HXLINE( 159)		this->inputOver =  ::flixel::input::FlxInput_obj::__alloc( HX_CTX ,(int)0);
            	}

Dynamic FlxUITypedButton_obj::__CreateEmpty() { return new FlxUITypedButton_obj; }

void *FlxUITypedButton_obj::_hx_vtable = 0;

Dynamic FlxUITypedButton_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxUITypedButton_obj > _hx_result = new FlxUITypedButton_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool FlxUITypedButton_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x1aa5d1c2) {
			if (inClassId<=(int)0x0b6ffd77) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
			} else {
				return inClassId==(int)0x1aa5d1c2;
			}
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x50397899;
	}
}

static ::flixel::addons::ui::interfaces::IFlxUIButton_obj _hx_flixel_addons_ui_FlxUITypedButton__hx_flixel_addons_ui_interfaces_IFlxUIButton= {
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUITypedButton_obj::destroy,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUITypedButton_obj::set_toggled,
	(  ::flixel::FlxSprite (hx::Object::*)( ::flixel::FlxSprite))&::flixel::addons::ui::FlxUITypedButton_obj::set_toggle_label,
	( bool (hx::Object::*)())&::flixel::addons::ui::FlxUITypedButton_obj::get_justMousedOver,
	( bool (hx::Object::*)())&::flixel::addons::ui::FlxUITypedButton_obj::get_mouseIsOver,
	( bool (hx::Object::*)())&::flixel::addons::ui::FlxUITypedButton_obj::get_mouseIsOut,
	( bool (hx::Object::*)())&::flixel::addons::ui::FlxUITypedButton_obj::get_justMousedOut,
	( int (hx::Object::*)(int))&::flixel::addons::ui::FlxUITypedButton_obj::set_status,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUITypedButton_obj::autoCenterLabel,
	( void (hx::Object::*)(::cpp::VirtualArray,hx::Null< int > ,hx::Null< int > ,::Array< ::Dynamic>,hx::Null< int > ,hx::Null< Float > ,hx::Null< bool > ,hx::Null< int > ,hx::Null< int > ,::Array< int >))&::flixel::addons::ui::FlxUITypedButton_obj::loadGraphicSlice9,
	( void (hx::Object::*)(::cpp::VirtualArray,::String))&::flixel::addons::ui::FlxUITypedButton_obj::loadGraphicsMultiple,
	( void (hx::Object::*)( ::Dynamic,hx::Null< bool > ,::String))&::flixel::addons::ui::FlxUITypedButton_obj::loadGraphicsUpOverDown,
	( void (hx::Object::*)(::String))&::flixel::addons::ui::FlxUITypedButton_obj::forceStateHandler,
};

static ::flixel::IFlxSprite_obj _hx_flixel_addons_ui_FlxUITypedButton__hx_flixel_IFlxSprite= {
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUITypedButton_obj::set_active,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUITypedButton_obj::set_visible,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUITypedButton_obj::set_alive,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUITypedButton_obj::set_exists,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUITypedButton_obj::draw,
	( void (hx::Object::*)(Float))&::flixel::addons::ui::FlxUITypedButton_obj::update,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUITypedButton_obj::destroy,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUITypedButton_obj::kill,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUITypedButton_obj::revive,
	( ::String (hx::Object::*)())&::flixel::addons::ui::FlxUITypedButton_obj::toString,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUITypedButton_obj::set_x,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUITypedButton_obj::set_y,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUITypedButton_obj::set_alpha,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUITypedButton_obj::set_angle,
	( int (hx::Object::*)(int))&::flixel::addons::ui::FlxUITypedButton_obj::set_facing,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUITypedButton_obj::set_moves,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUITypedButton_obj::set_immovable,
	( void (hx::Object::*)(Float,Float))&::flixel::addons::ui::FlxUITypedButton_obj::reset,
	( void (hx::Object::*)(hx::Null< Float > ,hx::Null< Float > ))&::flixel::addons::ui::FlxUITypedButton_obj::setPosition,
};

static ::flixel::IFlxBasic_obj _hx_flixel_addons_ui_FlxUITypedButton__hx_flixel_IFlxBasic= {
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUITypedButton_obj::set_active,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUITypedButton_obj::set_visible,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUITypedButton_obj::set_alive,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUITypedButton_obj::set_exists,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUITypedButton_obj::draw,
	( void (hx::Object::*)(Float))&::flixel::addons::ui::FlxUITypedButton_obj::update,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUITypedButton_obj::destroy,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUITypedButton_obj::kill,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUITypedButton_obj::revive,
	( ::String (hx::Object::*)())&::flixel::addons::ui::FlxUITypedButton_obj::toString,
};

static ::flixel::util::IFlxDestroyable_obj _hx_flixel_addons_ui_FlxUITypedButton__hx_flixel_util_IFlxDestroyable= {
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUITypedButton_obj::destroy,
};

static ::flixel::addons::ui::interfaces::ICursorPointable_obj _hx_flixel_addons_ui_FlxUITypedButton__hx_flixel_addons_ui_interfaces_ICursorPointable= {
};

static ::flixel::addons::ui::interfaces::IFlxUIWidget_obj _hx_flixel_addons_ui_FlxUITypedButton__hx_flixel_addons_ui_interfaces_IFlxUIWidget= {
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUITypedButton_obj::set_active,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUITypedButton_obj::set_visible,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUITypedButton_obj::set_alive,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUITypedButton_obj::set_exists,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUITypedButton_obj::draw,
	( void (hx::Object::*)(Float))&::flixel::addons::ui::FlxUITypedButton_obj::update,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUITypedButton_obj::destroy,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUITypedButton_obj::kill,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUITypedButton_obj::revive,
	( ::String (hx::Object::*)())&::flixel::addons::ui::FlxUITypedButton_obj::toString,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUITypedButton_obj::set_x,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUITypedButton_obj::set_y,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUITypedButton_obj::set_alpha,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUITypedButton_obj::set_angle,
	( int (hx::Object::*)(int))&::flixel::addons::ui::FlxUITypedButton_obj::set_facing,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUITypedButton_obj::set_moves,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUITypedButton_obj::set_immovable,
	( void (hx::Object::*)(Float,Float))&::flixel::addons::ui::FlxUITypedButton_obj::reset,
	( void (hx::Object::*)(hx::Null< Float > ,hx::Null< Float > ))&::flixel::addons::ui::FlxUITypedButton_obj::setPosition,
	( Float (hx::Object::*)())&::flixel::addons::ui::FlxUITypedButton_obj::get_width,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUITypedButton_obj::set_width,
	( Float (hx::Object::*)())&::flixel::addons::ui::FlxUITypedButton_obj::get_height,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUITypedButton_obj::set_height,
};

static ::flixel::addons::ui::interfaces::IHasParams_obj _hx_flixel_addons_ui_FlxUITypedButton__hx_flixel_addons_ui_interfaces_IHasParams= {
	( ::cpp::VirtualArray (hx::Object::*)(::cpp::VirtualArray))&::flixel::addons::ui::FlxUITypedButton_obj::set_params,
};

static ::flixel::addons::ui::interfaces::IFlxUIClickable_obj _hx_flixel_addons_ui_FlxUITypedButton__hx_flixel_addons_ui_interfaces_IFlxUIClickable= {
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUITypedButton_obj::set_skipButtonUpdate,
};

static ::flixel::addons::ui::interfaces::IResizable_obj _hx_flixel_addons_ui_FlxUITypedButton__hx_flixel_addons_ui_interfaces_IResizable= {
	( Float (hx::Object::*)())&::flixel::addons::ui::FlxUITypedButton_obj::get_width,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUITypedButton_obj::set_width,
	( Float (hx::Object::*)())&::flixel::addons::ui::FlxUITypedButton_obj::get_height,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUITypedButton_obj::set_height,
	( void (hx::Object::*)(Float,Float))&::flixel::addons::ui::FlxUITypedButton_obj::resize,
};

void *FlxUITypedButton_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x2772d80c: return &_hx_flixel_addons_ui_FlxUITypedButton__hx_flixel_addons_ui_interfaces_IFlxUIButton;
		case (int)0x897c83aa: return &_hx_flixel_addons_ui_FlxUITypedButton__hx_flixel_IFlxSprite;
		case (int)0x284cfea9: return &_hx_flixel_addons_ui_FlxUITypedButton__hx_flixel_IFlxBasic;
		case (int)0xd4fe2fcd: return &_hx_flixel_addons_ui_FlxUITypedButton__hx_flixel_util_IFlxDestroyable;
		case (int)0x82c13468: return &_hx_flixel_addons_ui_FlxUITypedButton__hx_flixel_addons_ui_interfaces_ICursorPointable;
		case (int)0x998525de: return &_hx_flixel_addons_ui_FlxUITypedButton__hx_flixel_addons_ui_interfaces_IFlxUIWidget;
		case (int)0x9e5db374: return &_hx_flixel_addons_ui_FlxUITypedButton__hx_flixel_addons_ui_interfaces_IHasParams;
		case (int)0x3e998408: return &_hx_flixel_addons_ui_FlxUITypedButton__hx_flixel_addons_ui_interfaces_IFlxUIClickable;
		case (int)0x194a3c9f: return &_hx_flixel_addons_ui_FlxUITypedButton__hx_flixel_addons_ui_interfaces_IResizable;
	}
	return super::_hx_getInterface(inHash);
}

bool FlxUITypedButton_obj::set_toggled(bool b){
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_40_set_toggled)
HXLINE(  41)		this->toggled = b;
HXLINE(  42)		this->updateStatusAnimation();
HXLINE(  43)		return this->toggled;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITypedButton_obj,set_toggled,return )

bool FlxUITypedButton_obj::get_justMousedOver(){
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_57_get_justMousedOver)
HXDLIN(  57)		return (this->inputOver->current == (int)2);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUITypedButton_obj,get_justMousedOver,return )

bool FlxUITypedButton_obj::get_justMousedOut(){
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_62_get_justMousedOut)
HXDLIN(  62)		return (this->inputOver->current == (int)-1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUITypedButton_obj,get_justMousedOut,return )

bool FlxUITypedButton_obj::get_mouseIsOver(){
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_67_get_mouseIsOver)
HXDLIN(  67)		 ::flixel::input::FlxInput _this = this->inputOver;
HXDLIN(  67)		if ((_this->current != (int)1)) {
HXDLIN(  67)			return (_this->current == (int)2);
            		}
            		else {
HXDLIN(  67)			return true;
            		}
HXDLIN(  67)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUITypedButton_obj,get_mouseIsOver,return )

bool FlxUITypedButton_obj::get_mouseIsOut(){
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_72_get_mouseIsOut)
HXDLIN(  72)		 ::flixel::input::FlxInput _this = this->inputOver;
HXDLIN(  72)		if ((_this->current != (int)0)) {
HXDLIN(  72)			return (_this->current == (int)-1);
            		}
            		else {
HXDLIN(  72)			return true;
            		}
HXDLIN(  72)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUITypedButton_obj,get_mouseIsOut,return )

 ::flixel::FlxSprite FlxUITypedButton_obj::set_toggle_label( ::flixel::FlxSprite f){
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_95_set_toggle_label)
HXLINE(  96)		if (hx::IsNotNull( this->label )) {
HXLINE(  97)			this->toggle_label = f;
HXLINE(  98)			return this->toggle_label;
            		}
HXLINE( 100)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITypedButton_obj,set_toggle_label,return )

bool FlxUITypedButton_obj::set_visible(bool Value){
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_104_set_visible)
HXLINE( 105)		bool _hx_tmp;
HXDLIN( 105)		if (this->visible) {
HXLINE( 105)			_hx_tmp = (Value == false);
            		}
            		else {
HXLINE( 105)			_hx_tmp = false;
            		}
HXDLIN( 105)		if (_hx_tmp) {
HXLINE( 107)			this->inputOver->release();
            		}
HXLINE( 109)		return this->super::set_visible(Value);
            	}


bool FlxUITypedButton_obj::set_skipButtonUpdate(bool b){
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_122_set_skipButtonUpdate)
HXLINE( 123)		this->skipButtonUpdate = b;
HXLINE( 124)		return this->skipButtonUpdate;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITypedButton_obj,set_skipButtonUpdate,return )

::cpp::VirtualArray FlxUITypedButton_obj::set_params(::cpp::VirtualArray p){
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_128_set_params)
HXLINE( 129)		this->params = p;
HXLINE( 130)		return this->params;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITypedButton_obj,set_params,return )

void FlxUITypedButton_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_133_destroy)
HXLINE( 134)		this->resize_point = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->resize_point)) );
HXLINE( 135)		this->super::destroy();
            	}


void FlxUITypedButton_obj::graphicLoaded(){
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_162_graphicLoaded)
HXLINE( 163)		this->super::graphicLoaded();
HXLINE( 165)		this->setupAnimation(HX_("normal_toggled",f8,ac,ae,ea),(int)3);
HXLINE( 166)		this->setupAnimation(HX_("highlight_toggled",05,e6,0b,e5),(int)4);
HXLINE( 167)		this->setupAnimation(HX_("pressed_toggled",73,80,89,1a),(int)5);
HXLINE( 169)		if (this->_autoCleanup) {
HXLINE( 171)			this->cleanup();
            		}
            	}


void FlxUITypedButton_obj::copyGraphic( ::flixel::addons::ui::FlxUITypedButton other){
            	HX_GC_STACKFRAME(&_hx_pos_6bf08eba80b23956_176_copyGraphic)
HXLINE( 177)		this->_src_w = other->_src_w;
HXLINE( 178)		this->_src_h = other->_src_h;
HXLINE( 179)		this->_frame_indeces = ::flixel::addons::ui::U_obj::copy_shallow_arr_i(other->_frame_indeces);
HXLINE( 180)		this->tile = other->tile;
HXLINE( 181)		this->resize_ratio = other->resize_ratio;
HXLINE( 183)		if (hx::IsNull( other->_centerLabelOffset )) {
HXLINE( 185)			this->_centerLabelOffset = null();
            		}
            		else {
HXLINE( 189)			this->_centerLabelOffset =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,other->_centerLabelOffset->x,other->_centerLabelOffset->y);
            		}
HXLINE( 192)		this->_no_graphic = other->_no_graphic;
HXLINE( 194)		if (hx::IsNotNull( other->_slice9_arrays )) {
HXLINE( 196)			this->_slice9_arrays = other->_slice9_arrays->copy();
            		}
HXLINE( 198)		if (hx::IsNotNull( other->_slice9_assets )) {
HXLINE( 200)			this->_slice9_assets = other->_slice9_assets->copy();
            		}
HXLINE( 203)		bool _hx_tmp;
HXDLIN( 203)		if (hx::IsNotNull( this->_slice9_arrays )) {
HXLINE( 203)			_hx_tmp = hx::IsNull( this->_slice9_assets );
            		}
            		else {
HXLINE( 203)			_hx_tmp = true;
            		}
HXDLIN( 203)		if (_hx_tmp) {
HXLINE( 205)			 ::flixel::graphics::FlxGraphic other1 = other->graphic;
HXDLIN( 205)			int _hx_tmp1 = other->get_width();
HXDLIN( 205)			this->loadGraphic(other1,true,_hx_tmp1,other->get_height(),null(),null());
            		}
            		else {
HXLINE( 209)			Float _hx_tmp2 = other->get_width();
HXDLIN( 209)			this->resize(_hx_tmp2,other->get_height());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITypedButton_obj,copyGraphic,(void))

void FlxUITypedButton_obj::copyStyle( ::flixel::addons::ui::FlxUITypedButton other){
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_213_copyStyle)
HXLINE( 214)		this->up_color = other->up_color;
HXLINE( 215)		this->over_color = other->over_color;
HXLINE( 216)		this->down_color = other->down_color;
HXLINE( 218)		this->up_toggle_color = other->up_toggle_color;
HXLINE( 219)		this->over_toggle_color = other->over_toggle_color;
HXLINE( 220)		this->down_toggle_color = other->over_toggle_color;
HXLINE( 222)		this->up_visible = other->up_visible;
HXLINE( 223)		this->over_visible = other->over_visible;
HXLINE( 224)		this->down_visible = other->down_visible;
HXLINE( 226)		this->up_toggle_visible = other->up_toggle_visible;
HXLINE( 227)		this->over_toggle_visible = other->over_toggle_visible;
HXLINE( 228)		this->down_toggle_visible = other->down_toggle_visible;
HXLINE( 230)		 ::flixel::math::FlxPoint ctPt = other->getCenterLabelOffset();
HXLINE( 231)		this->setCenterLabelOffset(ctPt->x,ctPt->y);
HXLINE( 233)		int i = (int)0;
HXLINE( 234)		{
HXLINE( 234)			int _g = (int)0;
HXDLIN( 234)			::Array< ::Dynamic> _g1 = other->labelOffsets;
HXDLIN( 234)			while((_g < _g1->length)){
HXLINE( 234)				 ::flixel::math::FlxPoint flxPt = _g1->__get(_g).StaticCast<  ::flixel::math::FlxPoint >();
HXDLIN( 234)				_g = (_g + (int)1);
HXLINE( 235)				this->labelOffsets->__get(i).StaticCast<  ::flixel::math::FlxPoint >()->set_x(flxPt->x);
HXLINE( 236)				this->labelOffsets->__get(i).StaticCast<  ::flixel::math::FlxPoint >()->set_y(flxPt->y);
HXLINE( 237)				i = (i + (int)1);
            			}
            		}
HXLINE( 240)		i = (int)0;
HXLINE( 241)		{
HXLINE( 241)			int _g2 = (int)0;
HXDLIN( 241)			::Array< Float > _g11 = other->labelAlphas;
HXDLIN( 241)			while((_g2 < _g11->length)){
HXLINE( 241)				Float alpha = _g11->__get(_g2);
HXDLIN( 241)				_g2 = (_g2 + (int)1);
HXLINE( 242)				this->labelAlphas[i] = alpha;
HXLINE( 243)				i = (i + (int)1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITypedButton_obj,copyStyle,(void))

void FlxUITypedButton_obj::setAllLabelOffsets(Float X,Float Y){
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_252_setAllLabelOffsets)
HXDLIN( 252)		int _g = (int)0;
HXDLIN( 252)		::Array< ::Dynamic> _g1 = this->labelOffsets;
HXDLIN( 252)		while((_g < _g1->length)){
HXDLIN( 252)			 ::flixel::math::FlxPoint labelOffset = _g1->__get(_g).StaticCast<  ::flixel::math::FlxPoint >();
HXDLIN( 252)			_g = (_g + (int)1);
HXLINE( 253)			labelOffset->set(X,Y);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUITypedButton_obj,setAllLabelOffsets,(void))

void FlxUITypedButton_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_257_update)
HXLINE( 258)		this->super::update(elapsed);
HXLINE( 260)		bool _hx_tmp;
HXDLIN( 260)		bool _hx_tmp1;
HXDLIN( 260)		if ((this->status == (int)0)) {
HXLINE( 260)			 ::flixel::input::FlxInput _this = this->inputOver;
HXDLIN( 260)			if ((_this->current != (int)1)) {
HXLINE( 260)				_hx_tmp1 = (_this->current == (int)2);
            			}
            			else {
HXLINE( 260)				_hx_tmp1 = true;
            			}
            		}
            		else {
HXLINE( 260)			_hx_tmp1 = false;
            		}
HXDLIN( 260)		if (_hx_tmp1) {
HXLINE( 260)			_hx_tmp = ((this->input->current == (int)-1) == false);
            		}
            		else {
HXLINE( 260)			_hx_tmp = false;
            		}
HXDLIN( 260)		if (_hx_tmp) {
HXLINE( 265)			this->inputOver->release();
            		}
HXLINE( 268)		this->inputOver->update();
HXLINE( 271)		if (hx::IsNotNull( this->label )) {
HXLINE( 273)			 ::flixel::FlxSprite theLabel = this->fetchAndShowCorrectLabel();
HXLINE( 274)			theLabel->set_x(((this->x + this->_centerLabelOffset->x) + this->labelOffsets->__get(this->status).StaticCast<  ::flixel::math::FlxPoint >()->x));
HXLINE( 275)			theLabel->set_y(((this->y + this->_centerLabelOffset->y) + this->labelOffsets->__get(this->status).StaticCast<  ::flixel::math::FlxPoint >()->y));
HXLINE( 277)			if (this->round_labels) {
HXLINE( 278)				theLabel->set_x(::Std_obj::_hx_int((theLabel->x + ((Float)0.5))));
HXLINE( 279)				theLabel->set_y(::Std_obj::_hx_int((theLabel->y + ((Float)0.5))));
            			}
HXLINE( 282)			theLabel->scrollFactor = this->scrollFactor;
            		}
            	}


void FlxUITypedButton_obj::updateStatusAnimation(){
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_290_updateStatusAnimation)
HXDLIN( 290)		bool _hx_tmp;
HXDLIN( 290)		if (this->has_toggle) {
HXDLIN( 290)			_hx_tmp = this->toggled;
            		}
            		else {
HXDLIN( 290)			_hx_tmp = false;
            		}
HXDLIN( 290)		if (_hx_tmp) {
HXLINE( 291)			 ::flixel::animation::FlxAnimationController _hx_tmp1 = this->animation;
HXDLIN( 291)			::Array< ::String > _hx_tmp2 = this->statusAnimations;
HXDLIN( 291)			_hx_tmp1->play(_hx_tmp2->__get((this->status + (int)3)),null(),null(),null());
            		}
            		else {
HXLINE( 293)			this->super::updateStatusAnimation();
            		}
            	}


void FlxUITypedButton_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_301_draw)
HXLINE( 302)		this->super::draw();
HXLINE( 303)		bool _hx_tmp;
HXDLIN( 303)		bool _hx_tmp1;
HXDLIN( 303)		bool _hx_tmp2;
HXDLIN( 303)		if (this->has_toggle) {
HXLINE( 303)			_hx_tmp2 = this->toggled;
            		}
            		else {
HXLINE( 303)			_hx_tmp2 = false;
            		}
HXDLIN( 303)		if (_hx_tmp2) {
HXLINE( 303)			_hx_tmp1 = hx::IsNotNull( this->toggle_label );
            		}
            		else {
HXLINE( 303)			_hx_tmp1 = false;
            		}
HXDLIN( 303)		if (_hx_tmp1) {
HXLINE( 303)			_hx_tmp = (this->toggle_label->visible == true);
            		}
            		else {
HXLINE( 303)			_hx_tmp = false;
            		}
HXDLIN( 303)		if (_hx_tmp) {
HXLINE( 304)			 ::flixel::FlxSprite _hx_tmp3 = this->toggle_label;
HXDLIN( 304)			_hx_tmp3->set_cameras(this->get_cameras());
HXLINE( 305)			this->toggle_label->draw();
            		}
            	}


void FlxUITypedButton_obj::resize(Float W,Float H){
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_311_resize)
HXDLIN( 311)		this->doResize(W,H,null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUITypedButton_obj,resize,(void))

void FlxUITypedButton_obj::doResize(Float W,Float H,hx::Null< bool >  __o_Redraw){
bool Redraw = __o_Redraw.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_6bf08eba80b23956_315_doResize)
HXLINE( 316)		Float old_width = this->get_width();
HXLINE( 317)		Float old_height = this->get_height();
HXLINE( 319)		Float label_diffx = (int)0;
HXLINE( 320)		Float label_diffy = (int)0;
HXLINE( 321)		if (hx::IsNotNull( this->label )) {
HXLINE( 323)			Float label_diffx1 = this->get_width();
HXDLIN( 323)			label_diffx = (label_diffx1 - this->_spriteLabel->get_width());
HXLINE( 324)			Float label_diffy1 = this->get_height();
HXDLIN( 324)			label_diffy = (label_diffy1 - this->_spriteLabel->get_height());
            		}
HXLINE( 327)		if ((W <= (int)0)) {
HXLINE( 327)			W = (int)80;
            		}
HXLINE( 328)		if ((H <= (int)0)) {
HXLINE( 328)			H = (int)20;
            		}
HXLINE( 330)		if (Redraw) {
HXLINE( 332)			if (hx::IsNotNull( this->_slice9_assets )) {
HXLINE( 334)				::cpp::VirtualArray _hx_tmp = this->_slice9_assets;
HXDLIN( 334)				int _hx_tmp1 = ::Std_obj::_hx_int(W);
HXDLIN( 334)				int _hx_tmp2 = ::Std_obj::_hx_int(H);
HXDLIN( 334)				this->loadGraphicSlice9(_hx_tmp,_hx_tmp1,_hx_tmp2,this->_slice9_arrays,this->tile,this->resize_ratio,this->has_toggle,this->_src_w,this->_src_h,this->_frame_indeces);
            			}
            			else {
HXLINE( 338)				if (this->_no_graphic) {
HXLINE( 340)					 ::openfl::_legacy::display::BitmapData upB;
HXLINE( 341)					if (!(this->has_toggle)) {
HXLINE( 343)						int upB1 = ::Std_obj::_hx_int(W);
HXDLIN( 343)						upB =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,upB1,::Std_obj::_hx_int((H * (int)3)),true,(int)0,null());
            					}
            					else {
HXLINE( 347)						int upB2 = ::Std_obj::_hx_int(W);
HXDLIN( 347)						upB =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,upB2,::Std_obj::_hx_int((H * (int)6)),true,(int)0,null());
            					}
HXLINE( 349)					this->loadGraphicsUpOverDown(upB,null(),null());
            				}
            				else {
HXLINE( 354)					int _hx_tmp3 = ::Std_obj::_hx_int(W);
HXDLIN( 354)					int _hx_tmp4 = ::Std_obj::_hx_int(H);
HXDLIN( 354)					this->loadGraphicSlice9(null(),_hx_tmp3,_hx_tmp4,null(),this->tile,null(),null(),null(),null(),null());
            				}
            			}
            		}
HXLINE( 359)		bool _hx_tmp5;
HXDLIN( 359)		if (hx::IsNotNull( this->label )) {
HXLINE( 359)			_hx_tmp5 = this->autoResizeLabel;
            		}
            		else {
HXLINE( 359)			_hx_tmp5 = false;
            		}
HXDLIN( 359)		if (_hx_tmp5) {
HXLINE( 361)			if (::Std_obj::is(this->label,hx::ClassOf< ::flixel::addons::ui::interfaces::IResizable >())) {
HXLINE( 363)				Float targetW = (W - label_diffx);
HXLINE( 364)				Float targetH = (H - label_diffy);
HXLINE( 365)				::Dynamic ir = this->label;
HXLINE( 366)				::flixel::addons::ui::interfaces::IResizable_obj::resize(ir,targetW,targetH);
            			}
            		}
HXLINE( 370)		this->autoCenterLabel();
HXLINE( 372)		Float diff_w = (this->get_width() - old_width);
HXLINE( 373)		Float diff_h = (this->get_height() - old_height);
HXLINE( 375)		if (hx::IsNotNull( this->resize_point )) {
HXLINE( 376)			Float delta_x = (diff_w * this->resize_point->x);
HXLINE( 377)			Float delta_y = (diff_h * this->resize_point->y);
HXLINE( 378)			{
HXLINE( 378)				 ::flixel::addons::ui::FlxUITypedButton _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 378)				_g->set_x((_g->x - delta_x));
            			}
HXLINE( 379)			{
HXLINE( 379)				 ::flixel::addons::ui::FlxUITypedButton _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 379)				_g1->set_y((_g1->y - delta_y));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUITypedButton_obj,doResize,(void))

 ::openfl::_legacy::display::BitmapData FlxUITypedButton_obj::getBmp( ::Dynamic asset){
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_385_getBmp)
HXDLIN( 385)		return ::flixel::addons::ui::U_obj::getBmp(asset);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITypedButton_obj,getBmp,return )

void FlxUITypedButton_obj::loadGraphicsMultiple(::cpp::VirtualArray assets,::String __o_Key){
::String Key = __o_Key.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_395_loadGraphicsMultiple)
HXLINE( 396)		this->_slice9_assets = null();
HXLINE( 397)		this->_slice9_arrays = null();
HXLINE( 398)		this->resize_ratio = (int)-1;
HXLINE( 400)		::String key = HX_("",00,00,00,00);
HXLINE( 402)		if ((assets->get_length() <= (int)3)) {
HXLINE( 404)			while((assets->get_length() < (int)3)){
HXLINE( 404)				assets->push(null());
            			}
HXLINE( 405)			if (hx::IsNull( assets->__get((int)1) )) {
HXLINE( 405)				assets->set((int)1,assets->__get((int)0));
            			}
HXLINE( 406)			if (hx::IsNull( assets->__get((int)2) )) {
HXLINE( 406)				assets->set((int)2,assets->__get((int)1));
            			}
HXLINE( 407)			key = assets->join(HX_(",",2c,00,00,00));
HXLINE( 408)			if ((Key != HX_("",00,00,00,00))) {
HXLINE( 410)				key = Key;
            			}
HXLINE( 413)			if (hx::IsNotNull( ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,key)) ) )) {
HXLINE( 415)				this->loadGraphicsUpOverDown(key,false,key);
            			}
            			else {
HXLINE( 419)				 ::openfl::_legacy::display::BitmapData pixels = this->getBmp(assets->__get((int)0));
HXDLIN( 419)				 ::openfl::_legacy::display::BitmapData pixels1 = this->getBmp(assets->__get((int)1));
HXDLIN( 419)				 ::openfl::_legacy::display::BitmapData pixels2 = this->assembleButtonFrames(pixels,pixels1,this->getBmp(assets->__get((int)2)));
HXLINE( 420)				this->loadGraphicsUpOverDown(pixels2,false,key);
            			}
            		}
            		else {
HXLINE( 422)			if ((assets->get_length() <= (int)6)) {
HXLINE( 423)				while((assets->get_length() < (int)6)){
HXLINE( 423)					assets->push(null());
            				}
HXLINE( 424)				if (hx::IsNull( assets->__get((int)4) )) {
HXLINE( 424)					assets->set((int)4,assets->__get((int)3));
            				}
HXLINE( 425)				if (hx::IsNull( assets->__get((int)5) )) {
HXLINE( 425)					assets->set((int)5,assets->__get((int)4));
            				}
HXLINE( 426)				key = assets->join(HX_(",",2c,00,00,00));
HXLINE( 427)				if ((Key != HX_("",00,00,00,00))) {
HXLINE( 429)					key = Key;
            				}
HXLINE( 432)				if (hx::IsNotNull( ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,key)) ) )) {
HXLINE( 434)					this->loadGraphicsUpOverDown(key,true,key);
            				}
            				else {
HXLINE( 438)					 ::openfl::_legacy::display::BitmapData pixels_normal = this->getBmp(assets->__get((int)0));
HXDLIN( 438)					 ::openfl::_legacy::display::BitmapData pixels_normal1 = this->getBmp(assets->__get((int)1));
HXDLIN( 438)					 ::openfl::_legacy::display::BitmapData pixels_normal2 = this->assembleButtonFrames(pixels_normal,pixels_normal1,this->getBmp(assets->__get((int)2)));
HXLINE( 439)					 ::openfl::_legacy::display::BitmapData pixels_toggle = this->getBmp(assets->__get((int)3));
HXDLIN( 439)					 ::openfl::_legacy::display::BitmapData pixels_toggle1 = this->getBmp(assets->__get((int)4));
HXDLIN( 439)					 ::openfl::_legacy::display::BitmapData pixels_toggle2 = this->assembleButtonFrames(pixels_toggle,pixels_toggle1,this->getBmp(assets->__get((int)5)));
HXLINE( 440)					 ::openfl::_legacy::display::BitmapData pixels3 = this->combineToggleBitmaps(pixels_normal2,pixels_toggle2);
HXLINE( 441)					this->loadGraphicsUpOverDown(pixels3,true,key);
HXLINE( 442)					pixels_normal2->dispose();
HXLINE( 443)					pixels_toggle2->dispose();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUITypedButton_obj,loadGraphicsMultiple,(void))

void FlxUITypedButton_obj::loadGraphicsUpOverDown( ::Dynamic asset,hx::Null< bool >  __o_for_toggle,::String key){
bool for_toggle = __o_for_toggle.Default(false);
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_455_loadGraphicsUpOverDown)
HXLINE( 456)		this->_slice9_assets = null();
HXLINE( 457)		this->_slice9_arrays = null();
HXLINE( 458)		this->resize_ratio = (int)-1;
HXLINE( 460)		if (for_toggle) {
HXLINE( 461)			this->has_toggle = true;
            		}
HXLINE( 464)		 ::openfl::_legacy::display::BitmapData upB = null();
HXLINE( 465)		 ::openfl::_legacy::display::BitmapData overB = null();
HXLINE( 466)		 ::openfl::_legacy::display::BitmapData downB = null();
HXLINE( 468)		 ::openfl::_legacy::display::BitmapData bd = null();
HXLINE( 470)		if (::Std_obj::is(asset,hx::ClassOf< ::openfl::_legacy::display::BitmapData >())) {
HXLINE( 472)			bd = ( ( ::openfl::_legacy::display::BitmapData)(asset) );
            		}
            		else {
HXLINE( 474)			if (::Std_obj::is(asset,hx::ClassOf< ::String >())) {
HXLINE( 476)				bd = this->getBmp(asset);
            			}
            		}
HXLINE( 479)		upB = this->grabButtonFrame(bd,(int)0,this->has_toggle,(int)0,(int)0,key);
HXLINE( 480)		overB = this->grabButtonFrame(bd,(int)1,this->has_toggle,(int)0,(int)0,key);
HXLINE( 481)		downB = this->grabButtonFrame(bd,(int)2,this->has_toggle,(int)0,(int)0,key);
HXLINE( 483)		 ::Dynamic normalGraphic = key;
HXLINE( 484)		bool _hx_tmp;
HXDLIN( 484)		bool _hx_tmp1;
HXDLIN( 484)		if (hx::IsNotNull( key )) {
HXLINE( 484)			_hx_tmp1 = (key == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 484)			_hx_tmp1 = true;
            		}
HXDLIN( 484)		if (!(_hx_tmp1)) {
HXLINE( 484)			_hx_tmp = (hx::IsNotNull( ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,key)) ) ) == false);
            		}
            		else {
HXLINE( 484)			_hx_tmp = true;
            		}
HXDLIN( 484)		if (_hx_tmp) {
HXLINE( 486)			normalGraphic = this->assembleButtonFrames(upB,overB,downB);
            		}
HXLINE( 489)		if (this->has_toggle) {
HXLINE( 490)			 ::openfl::_legacy::display::BitmapData normalPixels = this->assembleButtonFrames(upB,overB,downB);
HXLINE( 492)			upB = this->grabButtonFrame(bd,(int)3,true,(int)0,(int)0,key);
HXLINE( 493)			overB = this->grabButtonFrame(bd,(int)4,true,(int)0,(int)0,key);
HXLINE( 494)			downB = this->grabButtonFrame(bd,(int)5,true,(int)0,(int)0,key);
HXLINE( 496)			 ::openfl::_legacy::display::BitmapData togglePixels = this->assembleButtonFrames(upB,overB,downB);
HXLINE( 497)			 ::openfl::_legacy::display::BitmapData combinedPixels = this->combineToggleBitmaps(normalPixels,togglePixels);
HXLINE( 499)			normalPixels = ::flixel::util::FlxDestroyUtil_obj::dispose(normalPixels);
HXLINE( 500)			togglePixels = ::flixel::util::FlxDestroyUtil_obj::dispose(togglePixels);
HXLINE( 502)			int _hx_tmp2 = upB->get_width();
HXDLIN( 502)			this->loadGraphic(combinedPixels,true,_hx_tmp2,upB->get_height(),false,key);
            		}
            		else {
HXLINE( 504)			int _hx_tmp3 = upB->get_width();
HXDLIN( 504)			this->loadGraphic(normalGraphic,true,_hx_tmp3,upB->get_height(),false,key);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUITypedButton_obj,loadGraphicsUpOverDown,(void))

void FlxUITypedButton_obj::loadGraphicSlice9(::cpp::VirtualArray assets,hx::Null< int >  __o_W,hx::Null< int >  __o_H,::Array< ::Dynamic> slice9,hx::Null< int >  __o_Tile,hx::Null< Float >  __o_Resize_Ratio,hx::Null< bool >  __o_isToggle,hx::Null< int >  __o_src_w,hx::Null< int >  __o_src_h,::Array< int > frame_indeces){
int W = __o_W.Default(80);
int H = __o_H.Default(20);
int Tile = __o_Tile.Default(0);
Float Resize_Ratio = __o_Resize_Ratio.Default(-1);
bool isToggle = __o_isToggle.Default(false);
int src_w = __o_src_w.Default(0);
int src_h = __o_src_h.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_6bf08eba80b23956_526_loadGraphicSlice9)
HXLINE( 527)		if ((src_w != (int)0)) {
HXLINE( 529)			this->_src_w = src_w;
            		}
HXLINE( 531)		if ((src_h != (int)0)) {
HXLINE( 533)			this->_src_h = src_h;
            		}
HXLINE( 536)		this->tile = Tile;
HXLINE( 538)		this->has_toggle = isToggle;
HXLINE( 540)		this->resize_ratio = Resize_Ratio;
HXLINE( 542)		this->_slice9_assets = assets;
HXLINE( 543)		this->_slice9_arrays = slice9;
HXLINE( 545)		::String key = HX_("",00,00,00,00);
HXLINE( 547)		::Array< ::Dynamic> arr_bmpData = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 548)		::Array< ::Dynamic> arr_flx9 = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 551)		if (hx::IsNull( frame_indeces )) {
HXLINE( 554)			if (this->has_toggle) {
HXLINE( 554)				frame_indeces = ::Array_obj< int >::fromData( _hx_array_data_221567a7_43,6);
            			}
            			else {
HXLINE( 555)				frame_indeces = ::Array_obj< int >::fromData( _hx_array_data_221567a7_44,3);
            			}
            		}
            		else {
HXLINE( 559)			int max_index = (int)2;
HXLINE( 560)			if (this->has_toggle) {
HXLINE( 560)				max_index = (int)5;
            			}
HXLINE( 565)			while(true){
HXLINE( 565)				int frame_indeces1 = frame_indeces->length;
HXDLIN( 565)				if (!((frame_indeces1 < (max_index + (int)1)))) {
HXLINE( 565)					goto _hx_goto_29;
            				}
HXLINE( 567)				frame_indeces->push((frame_indeces->length - (int)1));
            			}
            			_hx_goto_29:;
HXLINE( 571)			{
HXLINE( 571)				int _g1 = (int)0;
HXDLIN( 571)				int _g = frame_indeces->length;
HXDLIN( 571)				while((_g1 < _g)){
HXLINE( 571)					_g1 = (_g1 + (int)1);
HXDLIN( 571)					int i = (_g1 - (int)1);
HXLINE( 573)					if ((frame_indeces->__get(i) > (int)5)) {
HXLINE( 575)						frame_indeces[i] = (int)5;
            					}
            					else {
HXLINE( 577)						if ((frame_indeces->__get(i) < (int)0)) {
HXLINE( 579)							frame_indeces[i] = (int)0;
            						}
            					}
            				}
            			}
            		}
HXLINE( 584)		this->_frame_indeces = frame_indeces;
HXLINE( 586)		if ((W == (int)0)) {
HXLINE( 588)			W = (int)80;
            		}
HXLINE( 590)		if ((H == (int)0)) {
HXLINE( 592)			H = (int)20;
            		}
HXLINE( 595)		 ::flixel::math::FlxPoint pt = ::flixel::addons::ui::U_obj::applyResize(this->resize_ratio,this->resize_ratio_axis,W,H,null());
HXLINE( 596)		W = ::Std_obj::_hx_int(pt->x);
HXLINE( 597)		H = ::Std_obj::_hx_int(pt->y);
HXLINE( 599)		if (hx::IsNull( assets )) {
HXLINE( 601)			 ::openfl::_legacy::display::BitmapData temp;
HXLINE( 604)			if (!(isToggle)) {
HXLINE( 606)				assets = ::cpp::VirtualArray_obj::__new(1)->init(0,HX_("flixel/flixel-ui/img/button.png",76,00,ad,88));
HXLINE( 607)				slice9 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::flixel::util::FlxStringUtil_obj::toIntArray(HX_("6,6,11,11",c0,1f,fa,07)));
HXLINE( 608)				temp = this->getBmp(assets->__get((int)0));
HXLINE( 609)				this->_src_w = ::Std_obj::_hx_int(temp->get_width());
HXLINE( 610)				this->_src_h = ::Std_obj::_hx_int(((Float)temp->get_height() / (Float)(int)3));
            			}
            			else {
HXLINE( 614)				assets = ::cpp::VirtualArray_obj::__new(1)->init(0,HX_("flixel/flixel-ui/img/button_toggle.png",13,ee,c4,a2));
HXLINE( 615)				slice9 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::flixel::util::FlxStringUtil_obj::toIntArray(HX_("6,6,11,11",c0,1f,fa,07)));
HXLINE( 616)				temp = this->getBmp(assets->__get((int)0));
HXLINE( 617)				this->_src_w = ::Std_obj::_hx_int(temp->get_width());
HXLINE( 618)				this->_src_h = ::Std_obj::_hx_int(((Float)temp->get_height() / (Float)(int)6));
            			}
HXLINE( 621)			temp = null();
            		}
HXLINE( 624)		bool _hx_tmp;
HXDLIN( 624)		if (!(this->has_toggle)) {
HXLINE( 624)			_hx_tmp = (assets->get_length() <= (int)3);
            		}
            		else {
HXLINE( 624)			_hx_tmp = false;
            		}
HXDLIN( 624)		if (_hx_tmp) {
HXLINE( 627)			arr_bmpData = ::Array_obj< ::Dynamic>::__new(3)->init(0,null())->init(1,null())->init(2,null());
HXLINE( 628)			arr_flx9 = ::Array_obj< ::Dynamic>::__new(3)->init(0,null())->init(1,null())->init(2,null());
            		}
            		else {
HXLINE( 633)			this->has_toggle = true;
HXLINE( 634)			arr_bmpData = ::Array_obj< ::Dynamic>::__new(6)->init(0,null())->init(1,null())->init(2,null())->init(3,null())->init(4,null())->init(5,null());
HXLINE( 635)			arr_flx9 = ::Array_obj< ::Dynamic>::__new(6)->init(0,null())->init(1,null())->init(2,null())->init(3,null())->init(4,null())->init(5,null());
            		}
HXLINE( 638)		this->_flashRect2->width = W;
HXLINE( 639)		this->_flashRect2->height = H;
HXLINE( 641)		::String key1 = (::Std_obj::string(assets) + HX_("_slice9=",37,88,37,cd));
HXDLIN( 641)		::String key2 = ((key1 + ::Std_obj::string(slice9)) + HX_("_src=",b8,7c,6b,ff));
HXDLIN( 641)		key = (key + (((key2 + this->_src_w) + HX_("x",78,00,00,00)) + this->_src_h));
HXLINE( 643)		::String midKey = key;
HXLINE( 645)		key = (key + (((((HX_("_final=",a6,39,f0,f4) + W) + HX_("x",78,00,00,00)) + H) + HX_("_fi=",9b,06,19,3f)) + ::Std_obj::string(this->_frame_indeces)));
HXLINE( 647)		if ((assets->get_length() == (int)1)) {
HXLINE( 650)			 ::openfl::_legacy::display::BitmapData all = this->getBmp(assets->__get((int)0));
HXLINE( 652)			::String keySuffix = HX_("_all",22,3e,15,3f);
HXLINE( 654)			bool _hx_tmp1;
HXDLIN( 654)			if ((this->_src_w != (int)0)) {
HXLINE( 654)				_hx_tmp1 = (this->_src_h == (int)0);
            			}
            			else {
HXLINE( 654)				_hx_tmp1 = true;
            			}
HXDLIN( 654)			if (_hx_tmp1) {
HXLINE( 656)				HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("Ambiguous situation! If you only provide one asset, you MUST provide src_w and src_h. Otherwise I can't tell if it's a stacked set of frames or a single frame.",64,36,b2,2f),null()));
            			}
HXLINE( 659)			int multiFrame = all->get_height();
HXDLIN( 659)			bool multiFrame1 = (multiFrame > this->_src_h);
HXLINE( 661)			::String keySuffix1;
HXDLIN( 661)			if (multiFrame1) {
HXLINE( 661)				keySuffix1 = HX_("_multiframe",33,24,92,15);
            			}
            			else {
HXLINE( 661)				keySuffix1 = HX_("",00,00,00,00);
            			}
HXDLIN( 661)			keySuffix = (keySuffix + keySuffix1);
HXLINE( 663)			key = (key + keySuffix);
HXLINE( 664)			midKey = (midKey + keySuffix);
HXLINE( 668)			if (hx::IsNotNull( ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,key)) ) )) {
HXLINE( 670)				this->loadGraphic(key,true,W,H,null(),null());
HXLINE( 671)				return;
            			}
HXLINE( 677)			if (multiFrame1) {
HXLINE( 680)				{
HXLINE( 680)					int _g11 = (int)0;
HXDLIN( 680)					int _g2 = arr_bmpData->length;
HXDLIN( 680)					while((_g11 < _g2)){
HXLINE( 680)						_g11 = (_g11 + (int)1);
HXDLIN( 680)						int i1 = (_g11 - (int)1);
HXLINE( 682)						arr_bmpData[i1] = this->grabButtonFrame(all,i1,this->has_toggle,this->_src_w,this->_src_h,midKey);
            					}
            				}
HXLINE( 685)				bool _hx_tmp2;
HXDLIN( 685)				if (hx::IsNotNull( slice9 )) {
HXLINE( 685)					_hx_tmp2 = hx::IsNotEq( slice9->__get((int)0).StaticCast< ::Array< int > >(),::Array_obj< int >::__new(0) );
            				}
            				else {
HXLINE( 685)					_hx_tmp2 = false;
            				}
HXDLIN( 685)				if (_hx_tmp2) {
HXLINE( 690)					{
HXLINE( 690)						int _g12 = (int)0;
HXDLIN( 690)						int _g3 = arr_bmpData->length;
HXDLIN( 690)						while((_g12 < _g3)){
HXLINE( 690)							_g12 = (_g12 + (int)1);
HXDLIN( 690)							int i2 = (_g12 - (int)1);
HXLINE( 692)							 ::openfl::_legacy::geom::Rectangle _hx_tmp3 = this->_flashRect2;
HXDLIN( 692)							int _hx_tmp4 = this->tile;
HXDLIN( 692)							arr_flx9[i2] =  ::flixel::addons::ui::FlxUI9SliceSprite_obj::__alloc( HX_CTX ,(int)0,(int)0,arr_bmpData->__get(i2).StaticCast<  ::openfl::_legacy::display::BitmapData >(),_hx_tmp3,slice9->__get((int)0).StaticCast< ::Array< int > >(),_hx_tmp4,false,((assets->__get((int)0) + HX_(":",3a,00,00,00)) + i2),this->resize_ratio,null(),null(),null(),null());
HXLINE( 693)							arr_flx9->__get(i2).StaticCast<  ::flixel::addons::ui::FlxUISprite >()->set_resize_point(this->resize_point);
            						}
            					}
HXLINE( 697)					{
HXLINE( 697)						int _g13 = (int)0;
HXDLIN( 697)						int _g4 = arr_bmpData->length;
HXDLIN( 697)						while((_g13 < _g4)){
HXLINE( 697)							_g13 = (_g13 + (int)1);
HXDLIN( 697)							int i3 = (_g13 - (int)1);
HXLINE( 699)							arr_bmpData[i3] = arr_flx9->__get(i3).StaticCast<  ::flixel::addons::ui::FlxUISprite >()->get_pixels();
            						}
            					}
HXLINE( 703)					W = arr_bmpData->__get((int)0).StaticCast<  ::openfl::_legacy::display::BitmapData >()->get_width();
HXLINE( 704)					H = arr_bmpData->__get((int)0).StaticCast<  ::openfl::_legacy::display::BitmapData >()->get_height();
            				}
            			}
            			else {
HXLINE( 710)				arr_bmpData[(int)0] = all;
            			}
            		}
            		else {
HXLINE( 719)			if (hx::IsNotNull( ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,key)) ) )) {
HXLINE( 721)				this->loadGraphic(key,true,W,H,null(),null());
HXLINE( 722)				return;
            			}
HXLINE( 729)			if (!(this->has_toggle)) {
HXLINE( 731)				while((assets->get_length() < (int)3)){
HXLINE( 733)					assets->push(HX_("",00,00,00,00));
            				}
            			}
            			else {
HXLINE( 738)				while((assets->get_length() < (int)6)){
HXLINE( 740)					assets->push(HX_("",00,00,00,00));
            				}
            			}
HXLINE( 744)			if (hx::IsNotEq( assets->__get((int)0),HX_("",00,00,00,00) )) {
HXLINE( 746)				bool _hx_tmp5;
HXDLIN( 746)				bool _hx_tmp6;
HXDLIN( 746)				bool _hx_tmp7;
HXDLIN( 746)				if (hx::IsNotNull( slice9 )) {
HXLINE( 746)					_hx_tmp7 = (slice9->length > (int)0);
            				}
            				else {
HXLINE( 746)					_hx_tmp7 = false;
            				}
HXDLIN( 746)				if (_hx_tmp7) {
HXLINE( 746)					_hx_tmp6 = hx::IsNotNull( slice9->__get((int)0).StaticCast< ::Array< int > >() );
            				}
            				else {
HXLINE( 746)					_hx_tmp6 = false;
            				}
HXDLIN( 746)				if (_hx_tmp6) {
HXLINE( 746)					_hx_tmp5 = (slice9->__get((int)0).StaticCast< ::Array< int > >()->length > (int)0);
            				}
            				else {
HXLINE( 746)					_hx_tmp5 = false;
            				}
HXDLIN( 746)				if (_hx_tmp5) {
HXLINE( 754)					while((slice9->length < assets->get_length())){
HXLINE( 756)						slice9->push(null());
            					}
HXLINE( 759)					if (hx::IsNotNull( slice9->__get((int)0).StaticCast< ::Array< int > >() )) {
HXLINE( 761)						 ::openfl::_legacy::geom::Rectangle _hx_tmp8 = this->_flashRect2;
HXDLIN( 761)						arr_flx9[(int)0] =  ::flixel::addons::ui::FlxUI9SliceSprite_obj::__alloc( HX_CTX ,(int)0,(int)0,assets->__get((int)0),_hx_tmp8,slice9->__get((int)0).StaticCast< ::Array< int > >(),this->tile,false,HX_("",00,00,00,00),this->resize_ratio,null(),null(),null(),null());
            					}
            					else {
HXLINE( 765)						arr_flx9[(int)0] =  ::flixel::addons::ui::FlxUISprite_obj::__alloc( HX_CTX ,(int)0,(int)0,assets->__get((int)0));
            					}
HXLINE( 767)					arr_bmpData[(int)0] = arr_flx9->__get((int)0).StaticCast<  ::flixel::addons::ui::FlxUISprite >()->get_pixels();
HXLINE( 769)					{
HXLINE( 769)						int _g14 = (int)1;
HXDLIN( 769)						int _g5 = assets->get_length();
HXDLIN( 769)						while((_g14 < _g5)){
HXLINE( 769)							_g14 = (_g14 + (int)1);
HXDLIN( 769)							int i4 = (_g14 - (int)1);
HXLINE( 771)							if (hx::IsNotEq( assets->__get(i4),HX_("",00,00,00,00) )) {
HXLINE( 773)								if (hx::IsNotNull( slice9->__get(i4).StaticCast< ::Array< int > >() )) {
HXLINE( 775)									 ::openfl::_legacy::geom::Rectangle _hx_tmp9 = this->_flashRect2;
HXDLIN( 775)									arr_flx9[i4] =  ::flixel::addons::ui::FlxUI9SliceSprite_obj::__alloc( HX_CTX ,(int)0,(int)0,assets->__get(i4),_hx_tmp9,slice9->__get(i4).StaticCast< ::Array< int > >(),this->tile,false,HX_("",00,00,00,00),this->resize_ratio,null(),null(),null(),null());
            								}
            								else {
HXLINE( 779)									arr_flx9[i4] =  ::flixel::addons::ui::FlxUISprite_obj::__alloc( HX_CTX ,(int)0,(int)0,assets->__get(i4));
            								}
HXLINE( 781)								arr_bmpData[i4] = arr_flx9->__get(i4).StaticCast<  ::flixel::addons::ui::FlxUISprite >()->get_pixels();
            							}
            						}
            					}
HXLINE( 786)					W = arr_bmpData->__get((int)0).StaticCast<  ::openfl::_legacy::display::BitmapData >()->get_width();
HXLINE( 787)					H = arr_bmpData->__get((int)0).StaticCast<  ::openfl::_legacy::display::BitmapData >()->get_height();
            				}
            				else {
HXLINE( 792)					{
HXLINE( 792)						int _g15 = (int)0;
HXDLIN( 792)						int _g6 = assets->get_length();
HXDLIN( 792)						while((_g15 < _g6)){
HXLINE( 792)							_g15 = (_g15 + (int)1);
HXDLIN( 792)							int i5 = (_g15 - (int)1);
HXLINE( 794)							arr_bmpData[i5] = this->getBmp(assets->__get(i5));
            						}
            					}
HXLINE( 796)					W = arr_bmpData->__get((int)0).StaticCast<  ::openfl::_legacy::display::BitmapData >()->get_width();
HXLINE( 797)					H = arr_bmpData->__get((int)0).StaticCast<  ::openfl::_legacy::display::BitmapData >()->get_height();
            				}
            			}
            			else {
HXLINE( 802)				if ((W == (int)0)) {
HXLINE( 802)					W = (int)80;
            				}
HXLINE( 803)				if ((H == (int)0)) {
HXLINE( 803)					H = (int)20;
            				}
HXLINE( 805)				arr_bmpData[(int)0] =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,W,(H * (int)3),true,(int)0,null());
HXLINE( 807)				this->_no_graphic = true;
            			}
            		}
HXLINE( 813)		 ::openfl::_legacy::display::BitmapData normalPixels = null();
HXLINE( 815)		if (!(this->has_toggle)) {
HXLINE( 817)			normalPixels = this->assembleButtonFrames(arr_bmpData->__get(frame_indeces->__get((int)0)).StaticCast<  ::openfl::_legacy::display::BitmapData >(),arr_bmpData->__get(frame_indeces->__get((int)1)).StaticCast<  ::openfl::_legacy::display::BitmapData >(),arr_bmpData->__get(frame_indeces->__get((int)2)).StaticCast<  ::openfl::_legacy::display::BitmapData >());
HXLINE( 820)			::flixel::FlxG_obj::bitmap->add(normalPixels,true,key);
HXLINE( 821)			this->loadGraphic(key,true,W,H,null(),null());
            		}
            		else {
HXLINE( 825)			 ::openfl::_legacy::display::BitmapData normalPixels1 = this->assembleButtonFrames(arr_bmpData->__get(frame_indeces->__get((int)0)).StaticCast<  ::openfl::_legacy::display::BitmapData >(),arr_bmpData->__get(frame_indeces->__get((int)1)).StaticCast<  ::openfl::_legacy::display::BitmapData >(),arr_bmpData->__get(frame_indeces->__get((int)2)).StaticCast<  ::openfl::_legacy::display::BitmapData >());
HXLINE( 829)			 ::openfl::_legacy::display::BitmapData togglePixels = this->assembleButtonFrames(arr_bmpData->__get(frame_indeces->__get((int)3)).StaticCast<  ::openfl::_legacy::display::BitmapData >(),arr_bmpData->__get(frame_indeces->__get((int)4)).StaticCast<  ::openfl::_legacy::display::BitmapData >(),arr_bmpData->__get(frame_indeces->__get((int)5)).StaticCast<  ::openfl::_legacy::display::BitmapData >());
HXLINE( 833)			 ::openfl::_legacy::display::BitmapData combinedPixels = this->combineToggleBitmaps(normalPixels1,togglePixels);
HXLINE( 836)			normalPixels1 = ::flixel::util::FlxDestroyUtil_obj::dispose(normalPixels1);
HXLINE( 837)			togglePixels = ::flixel::util::FlxDestroyUtil_obj::dispose(togglePixels);
HXLINE( 839)			::flixel::FlxG_obj::bitmap->add(combinedPixels,true,key);
HXLINE( 840)			this->loadGraphic(key,true,W,H,null(),null());
            		}
HXLINE( 844)		{
HXLINE( 844)			int _g16 = (int)0;
HXDLIN( 844)			int _g7 = arr_flx9->length;
HXDLIN( 844)			while((_g16 < _g7)){
HXLINE( 844)				_g16 = (_g16 + (int)1);
HXDLIN( 844)				int i6 = (_g16 - (int)1);
HXLINE( 846)				if (hx::IsNotNull( arr_flx9->__get(i6).StaticCast<  ::flixel::addons::ui::FlxUISprite >() )) {
HXLINE( 848)					arr_flx9->__get(i6).StaticCast<  ::flixel::addons::ui::FlxUISprite >()->destroy();
HXLINE( 849)					arr_flx9[i6] = null();
            				}
            			}
            		}
HXLINE( 852)		while((arr_flx9->length > (int)0)){
HXLINE( 852)			arr_flx9->pop().StaticCast<  ::flixel::addons::ui::FlxUISprite >();
            		}
HXDLIN( 852)		arr_flx9 = null();
HXLINE( 853)		while((arr_bmpData->length > (int)0)){
HXLINE( 853)			arr_bmpData->pop().StaticCast<  ::openfl::_legacy::display::BitmapData >();
            		}
HXDLIN( 853)		arr_bmpData = null();
            	}


HX_DEFINE_DYNAMIC_FUNC10(FlxUITypedButton_obj,loadGraphicSlice9,(void))

void FlxUITypedButton_obj::autoCenterLabel(){
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_861_autoCenterLabel)
HXDLIN( 861)		if (hx::IsNotNull( this->label )) {
HXLINE( 862)			Float offX = (int)0;
HXLINE( 863)			Float offY = (int)0;
HXLINE( 865)			Float offX1 = this->get_width();
HXDLIN( 865)			offX = (offX1 - this->_spriteLabel->get_width());
HXLINE( 867)			if (::Std_obj::is(this->label,hx::ClassOf< ::flixel::addons::ui::FlxUIText >())) {
HXLINE( 868)				 ::flixel::addons::ui::FlxUIText tlabel = ( ( ::flixel::addons::ui::FlxUIText)(this->label) );
HXLINE( 869)				Float offX2 = this->get_width();
HXDLIN( 869)				offX = ((Float)(offX2 - tlabel->get_fieldWidth()) / (Float)(int)2);
HXLINE( 870)				Float offY1 = this->get_height();
HXDLIN( 870)				offY = ((Float)(offY1 - tlabel->get_height()) / (Float)(int)2);
            			}
            			else {
HXLINE( 872)				Float offX3 = this->get_width();
HXDLIN( 872)				offX = ((Float)(offX3 - this->_spriteLabel->get_width()) / (Float)(int)2);
HXLINE( 873)				Float offY2 = this->get_height();
HXDLIN( 873)				offY = ((Float)(offY2 - this->_spriteLabel->get_height()) / (Float)(int)2);
            			}
HXLINE( 876)			this->_centerLabelOffset->set_x(offX);
HXLINE( 877)			this->_centerLabelOffset->set_y(offY);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUITypedButton_obj,autoCenterLabel,(void))

void FlxUITypedButton_obj::setCenterLabelOffset(Float X,Float Y){
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_881_setCenterLabelOffset)
HXLINE( 882)		this->_centerLabelOffset->set_x(X);
HXLINE( 883)		this->_centerLabelOffset->set_y(Y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUITypedButton_obj,setCenterLabelOffset,(void))

 ::flixel::math::FlxPoint FlxUITypedButton_obj::getCenterLabelOffset(){
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_887_getCenterLabelOffset)
HXDLIN( 887)		Float X = this->_centerLabelOffset->x;
HXDLIN( 887)		Float Y = this->_centerLabelOffset->y;
HXDLIN( 887)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 887)		point->_inPool = false;
HXDLIN( 887)		return point;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUITypedButton_obj,getCenterLabelOffset,return )

void FlxUITypedButton_obj::forceStateHandler(::String event){
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_891_forceStateHandler)
HXDLIN( 891)		::String _hx_switch_0 = event;
            		if (  (_hx_switch_0==HX_("click_button",49,90,30,6d)) ){
HXLINE( 895)			this->onUpHandler();
HXDLIN( 895)			goto _hx_goto_48;
            		}
            		if (  (_hx_switch_0==HX_("down_button",6f,2b,68,a1)) ){
HXLINE( 894)			this->onDownHandler();
HXDLIN( 894)			goto _hx_goto_48;
            		}
            		if (  (_hx_switch_0==HX_("out_button",c3,20,d2,fb)) ){
HXLINE( 892)			this->onOutHandler();
HXDLIN( 892)			goto _hx_goto_48;
            		}
            		if (  (_hx_switch_0==HX_("over_button",bd,74,d0,7c)) ){
HXLINE( 893)			this->onOverHandler();
HXDLIN( 893)			goto _hx_goto_48;
            		}
            		_hx_goto_48:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITypedButton_obj,forceStateHandler,(void))

 ::openfl::_legacy::display::BitmapData FlxUITypedButton_obj::grabButtonFrame( ::openfl::_legacy::display::BitmapData all_frames,int button_state,hx::Null< bool >  __o_for_toggle,hx::Null< int >  __o_src_w,hx::Null< int >  __o_src_h,::String key){
bool for_toggle = __o_for_toggle.Default(false);
int src_w = __o_src_w.Default(0);
int src_h = __o_src_h.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_6bf08eba80b23956_916_grabButtonFrame)
HXLINE( 917)		int h = src_h;
HXLINE( 918)		if ((h == (int)0)) {
HXLINE( 920)			if (!(for_toggle)) {
HXLINE( 922)				h = ::Std_obj::_hx_int(((Float)all_frames->get_height() / (Float)(int)3));
            			}
            			else {
HXLINE( 926)				h = ::Std_obj::_hx_int(((Float)all_frames->get_height() / (Float)(int)6));
            			}
            		}
HXLINE( 929)		int w = src_w;
HXLINE( 930)		if ((w == (int)0)) {
HXLINE( 932)			w = all_frames->get_width();
            		}
HXLINE( 935)		this->_flashRect->x = (int)0;
HXLINE( 936)		this->_flashRect->y = (button_state * h);
HXLINE( 937)		this->_flashRect->width = w;
HXLINE( 938)		this->_flashRect->height = h;
HXLINE( 939)		Float _hx_tmp = this->_flashRect->y;
HXDLIN( 939)		if ((_hx_tmp >= all_frames->get_height())) {
HXLINE( 942)			int framesHigh = ::Std_obj::_hx_int(((Float)all_frames->get_height() / (Float)h));
HXLINE( 943)			if ((framesHigh == (int)4)) {
HXLINE( 946)				if ((button_state == (int)4)) {
HXLINE( 949)					this->_flashRect->y = ((int)3 * h);
            				}
            				else {
HXLINE( 951)					if ((button_state == (int)5)) {
HXLINE( 954)						this->_flashRect->y = ((int)2 * h);
            					}
            				}
            			}
            		}
HXLINE( 960)		::String frameKey = (((((((((key + HX_("{x:",fd,bd,5d,00)) + this->_flashRect->x) + HX_("y:",a1,69,00,00)) + this->_flashRect->y) + HX_("w:",e3,67,00,00)) + this->_flashRect->width) + HX_("h:",d2,5a,00,00)) + this->_flashRect->height) + HX_("}",7d,00,00,00));
HXLINE( 961)		if (hx::IsNotNull( frameKey )) {
HXLINE( 963)			if (hx::IsNotNull( ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,frameKey)) ) )) {
HXLINE( 965)				return ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,frameKey)) )->bitmap;
            			}
            		}
HXLINE( 969)		 ::openfl::_legacy::display::BitmapData pixels =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,w,h,null(),null(),null());
HXLINE( 970)		pixels->copyPixels(all_frames,this->_flashRect,this->_flashPointZero,null(),null(),null());
HXLINE( 971)		if (hx::IsNotNull( key )) {
HXLINE( 973)			::flixel::FlxG_obj::bitmap->add(pixels,true,frameKey);
HXLINE( 974)			this->addToCleanup(frameKey);
            		}
HXLINE( 976)		return pixels;
            	}


HX_DEFINE_DYNAMIC_FUNC6(FlxUITypedButton_obj,grabButtonFrame,return )

 ::openfl::_legacy::display::BitmapData FlxUITypedButton_obj::combineToggleBitmaps( ::openfl::_legacy::display::BitmapData normal, ::openfl::_legacy::display::BitmapData toggle){
            	HX_GC_STACKFRAME(&_hx_pos_6bf08eba80b23956_983_combineToggleBitmaps)
HXLINE( 984)		int combined = normal->get_width();
HXDLIN( 984)		int combined1 = normal->get_height();
HXDLIN( 984)		 ::openfl::_legacy::display::BitmapData combined2 =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,combined,(combined1 + toggle->get_height()),null(),null(),null());
HXLINE( 986)		 ::openfl::_legacy::geom::Rectangle _hx_tmp = normal->get_rect();
HXDLIN( 986)		combined2->copyPixels(normal,_hx_tmp,this->_flashPointZero,null(),null(),null());
HXLINE( 987)		this->_flashPoint->x = (int)0;
HXLINE( 988)		this->_flashPoint->y = normal->get_height();
HXLINE( 989)		 ::openfl::_legacy::geom::Rectangle _hx_tmp1 = toggle->get_rect();
HXDLIN( 989)		combined2->copyPixels(toggle,_hx_tmp1,this->_flashPoint,null(),null(),null());
HXLINE( 991)		return combined2;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUITypedButton_obj,combineToggleBitmaps,return )

 ::openfl::_legacy::display::BitmapData FlxUITypedButton_obj::assembleButtonFrames( ::openfl::_legacy::display::BitmapData upB, ::openfl::_legacy::display::BitmapData overB, ::openfl::_legacy::display::BitmapData downB){
            	HX_GC_STACKFRAME(&_hx_pos_6bf08eba80b23956_999_assembleButtonFrames)
HXLINE(1000)		 ::openfl::_legacy::display::BitmapData pixels;
HXLINE(1002)		if (hx::IsNotNull( overB )) {
HXLINE(1003)			if (hx::IsNotNull( downB )) {
HXLINE(1004)				int pixels1 = upB->get_width();
HXDLIN(1004)				pixels =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,pixels1,(upB->get_height() * (int)3),null(),null(),null());
            			}
            			else {
HXLINE(1006)				int pixels2 = upB->get_width();
HXDLIN(1006)				pixels =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,pixels2,(upB->get_height() * (int)2),null(),null(),null());
            			}
            		}
            		else {
HXLINE(1009)			int pixels3 = upB->get_width();
HXDLIN(1009)			pixels =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,pixels3,upB->get_height(),null(),null(),null());
            		}
HXLINE(1012)		 ::openfl::_legacy::geom::Rectangle _hx_tmp = upB->get_rect();
HXDLIN(1012)		pixels->copyPixels(upB,_hx_tmp,this->_flashPointZero,null(),null(),null());
HXLINE(1014)		if (hx::IsNotNull( overB )) {
HXLINE(1015)			this->_flashPoint->x = (int)0;
HXLINE(1016)			this->_flashPoint->y = upB->get_height();
HXLINE(1017)			 ::openfl::_legacy::geom::Rectangle _hx_tmp1 = overB->get_rect();
HXDLIN(1017)			pixels->copyPixels(overB,_hx_tmp1,this->_flashPoint,null(),null(),null());
HXLINE(1018)			if (hx::IsNotNull( downB )) {
HXLINE(1019)				int _hx_tmp2 = upB->get_height();
HXDLIN(1019)				this->_flashPoint->y = (_hx_tmp2 * (int)2);
HXLINE(1020)				 ::openfl::_legacy::geom::Rectangle _hx_tmp3 = downB->get_rect();
HXDLIN(1020)				pixels->copyPixels(downB,_hx_tmp3,this->_flashPoint,null(),null(),null());
            			}
            		}
HXLINE(1024)		return pixels;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUITypedButton_obj,assembleButtonFrames,return )

void FlxUITypedButton_obj::updateButton(){
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_1028_updateButton)
HXDLIN(1028)		if (!(this->skipButtonUpdate)) {
HXLINE(1029)			this->super::updateButton();
            		}
            	}


void FlxUITypedButton_obj::addToCleanup(::String str){
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_1034_addToCleanup)
HXLINE(1035)		if (hx::IsNull( this->_assetsToCleanup )) {
HXLINE(1035)			this->_assetsToCleanup = ::Array_obj< ::String >::__new(0);
            		}
HXLINE(1036)		if ((this->_assetsToCleanup->indexOf(str,null()) == (int)-1)) {
HXLINE(1038)			this->_assetsToCleanup->push(str);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITypedButton_obj,addToCleanup,(void))

void FlxUITypedButton_obj::cleanup(){
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_1043_cleanup)
HXLINE(1044)		if (hx::IsNull( this->_assetsToCleanup )) {
HXLINE(1045)			return;
            		}
HXLINE(1047)		{
HXLINE(1047)			int _g = (int)0;
HXDLIN(1047)			::Array< ::String > _g1 = this->_assetsToCleanup;
HXDLIN(1047)			while((_g < _g1->length)){
HXLINE(1047)				::String key = _g1->__get(_g);
HXDLIN(1047)				_g = (_g + (int)1);
HXLINE(1049)				::flixel::FlxG_obj::bitmap->removeByKey(key);
            			}
            		}
HXLINE(1051)		this->_assetsToCleanup = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUITypedButton_obj,cleanup,(void))

 ::flixel::FlxSprite FlxUITypedButton_obj::fetchAndShowCorrectLabel(){
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_1054_fetchAndShowCorrectLabel)
HXLINE(1055)		if (this->has_toggle) {
HXLINE(1056)			bool _hx_tmp;
HXDLIN(1056)			if (this->toggled) {
HXLINE(1056)				_hx_tmp = hx::IsNotNull( this->toggle_label );
            			}
            			else {
HXLINE(1056)				_hx_tmp = false;
            			}
HXDLIN(1056)			if (_hx_tmp) {
HXLINE(1057)				this->_spriteLabel->set_visible(false);
HXLINE(1058)				this->toggle_label->set_visible(true);
HXLINE(1059)				return this->toggle_label;
            			}
            			else {
HXLINE(1061)				if (hx::IsNotNull( this->toggle_label )) {
HXLINE(1062)					this->toggle_label->set_visible(false);
            				}
HXLINE(1064)				this->_spriteLabel->set_visible(true);
HXLINE(1065)				return ( ( ::flixel::FlxSprite)(this->label) );
            			}
            		}
HXLINE(1068)		return ( ( ::flixel::FlxSprite)(this->label) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUITypedButton_obj,fetchAndShowCorrectLabel,return )

void FlxUITypedButton_obj::onUpHandler(){
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_1072_onUpHandler)
HXLINE(1073)		if (this->has_toggle) {
HXLINE(1074)			this->set_toggled(!(this->toggled));
            		}
HXLINE(1077)		this->super::onUpHandler();
HXLINE(1078)		if (hx::IsNotNull( this->label )) {
HXLINE(1079)			 ::flixel::FlxSprite theLabel = this->fetchAndShowCorrectLabel();
HXLINE(1080)			bool _hx_tmp;
HXDLIN(1080)			if (this->toggled) {
HXLINE(1080)				_hx_tmp = this->up_toggle_visible;
            			}
            			else {
HXLINE(1080)				_hx_tmp = this->up_visible;
            			}
HXDLIN(1080)			theLabel->set_visible(_hx_tmp);
HXLINE(1081)			 ::Dynamic thecol;
HXDLIN(1081)			if (this->toggled) {
HXLINE(1081)				thecol = this->up_toggle_color;
            			}
            			else {
HXLINE(1081)				thecol = this->up_color;
            			}
HXLINE(1082)			if (hx::IsNotNull( thecol )) {
HXLINE(1084)				theLabel->set_color(thecol);
            			}
            		}
HXLINE(1087)		if (this->broadcastToFlxUI) {
HXLINE(1088)			::flixel::addons::ui::FlxUI_obj::event(HX_("click_button",49,90,30,6d),hx::ObjectPtr<OBJ_>(this),null(),this->params);
            		}
            	}


void FlxUITypedButton_obj::onDownHandler(){
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_1093_onDownHandler)
HXLINE(1094)		this->super::onDownHandler();
HXLINE(1095)		if (hx::IsNotNull( this->label )) {
HXLINE(1096)			 ::flixel::FlxSprite theLabel = this->fetchAndShowCorrectLabel();
HXLINE(1097)			bool _hx_tmp;
HXDLIN(1097)			if (this->toggled) {
HXLINE(1097)				_hx_tmp = this->down_toggle_visible;
            			}
            			else {
HXLINE(1097)				_hx_tmp = this->down_visible;
            			}
HXDLIN(1097)			theLabel->set_visible(_hx_tmp);
HXLINE(1098)			 ::Dynamic thecol;
HXDLIN(1098)			if (this->toggled) {
HXLINE(1098)				thecol = this->down_toggle_color;
            			}
            			else {
HXLINE(1098)				thecol = this->down_color;
            			}
HXLINE(1099)			if (hx::IsNotNull( thecol )) {
HXLINE(1101)				theLabel->set_color(thecol);
            			}
            		}
HXLINE(1104)		if (this->broadcastToFlxUI) {
HXLINE(1105)			::flixel::addons::ui::FlxUI_obj::event(HX_("down_button",6f,2b,68,a1),hx::ObjectPtr<OBJ_>(this),null(),this->params);
            		}
            	}


void FlxUITypedButton_obj::onOverHandler(){
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_1110_onOverHandler)
HXLINE(1111)		this->super::onOverHandler();
HXLINE(1112)		this->inputOver->press();
HXLINE(1113)		if (hx::IsNotNull( this->label )) {
HXLINE(1114)			 ::flixel::FlxSprite theLabel = this->fetchAndShowCorrectLabel();
HXLINE(1115)			bool _hx_tmp;
HXDLIN(1115)			if (this->toggled) {
HXLINE(1115)				_hx_tmp = this->over_toggle_visible;
            			}
            			else {
HXLINE(1115)				_hx_tmp = this->over_visible;
            			}
HXDLIN(1115)			theLabel->set_visible(_hx_tmp);
HXLINE(1116)			 ::Dynamic thecol;
HXDLIN(1116)			if (this->toggled) {
HXLINE(1116)				thecol = this->over_toggle_color;
            			}
            			else {
HXLINE(1116)				thecol = this->over_color;
            			}
HXLINE(1117)			if (hx::IsNotNull( thecol )) {
HXLINE(1119)				theLabel->set_color(thecol);
            			}
            		}
HXLINE(1122)		if (this->broadcastToFlxUI) {
HXLINE(1123)			::flixel::addons::ui::FlxUI_obj::event(HX_("over_button",bd,74,d0,7c),hx::ObjectPtr<OBJ_>(this),null(),this->params);
            		}
            	}


void FlxUITypedButton_obj::onOutHandler(){
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_1128_onOutHandler)
HXLINE(1129)		this->super::onOutHandler();
HXLINE(1130)		this->inputOver->release();
HXLINE(1131)		if (hx::IsNotNull( this->label )) {
HXLINE(1132)			 ::flixel::FlxSprite theLabel = this->fetchAndShowCorrectLabel();
HXLINE(1133)			bool _hx_tmp;
HXDLIN(1133)			if (this->toggled) {
HXLINE(1133)				_hx_tmp = this->up_toggle_visible;
            			}
            			else {
HXLINE(1133)				_hx_tmp = this->up_visible;
            			}
HXDLIN(1133)			theLabel->set_visible(_hx_tmp);
HXLINE(1134)			 ::Dynamic thecol;
HXDLIN(1134)			if (this->toggled) {
HXLINE(1134)				thecol = this->up_toggle_color;
            			}
            			else {
HXLINE(1134)				thecol = this->up_color;
            			}
HXLINE(1135)			if (hx::IsNotNull( thecol )) {
HXLINE(1137)				theLabel->set_color(thecol);
            			}
            		}
HXLINE(1140)		if (this->broadcastToFlxUI) {
HXLINE(1141)			::flixel::addons::ui::FlxUI_obj::event(HX_("out_button",c3,20,d2,fb),hx::ObjectPtr<OBJ_>(this),null(),this->params);
            		}
            	}


Float FlxUITypedButton_obj::set_x(Float NewX){
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_1146_set_x)
HXLINE(1147)		this->super::set_x(NewX);
HXLINE(1149)		if (hx::IsNotNull( this->_spriteLabel )) {
HXLINE(1151)			 ::flixel::FlxSprite _hx_tmp = this->_spriteLabel;
HXDLIN(1151)			_hx_tmp->set_x(((this->x + this->_centerLabelOffset->x) + this->labelOffsets->__get(this->status).StaticCast<  ::flixel::math::FlxPoint >()->x));
HXLINE(1153)			if (this->round_labels) {
HXLINE(1154)				 ::flixel::FlxSprite _hx_tmp1 = this->_spriteLabel;
HXDLIN(1154)				_hx_tmp1->set_x(::Std_obj::_hx_int((this->_spriteLabel->x + ((Float)0.5))));
            			}
HXLINE(1156)			bool _hx_tmp2;
HXDLIN(1156)			if (this->has_toggle) {
HXLINE(1156)				_hx_tmp2 = hx::IsNotNull( this->toggle_label );
            			}
            			else {
HXLINE(1156)				_hx_tmp2 = false;
            			}
HXDLIN(1156)			if (_hx_tmp2) {
HXLINE(1157)				this->toggle_label->set_x(this->_spriteLabel->x);
            			}
            		}
HXLINE(1161)		return NewX;
            	}


Float FlxUITypedButton_obj::set_y(Float NewY){
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_1165_set_y)
HXLINE(1166)		this->super::set_y(NewY);
HXLINE(1168)		if (hx::IsNotNull( this->label )) {
HXLINE(1170)			 ::flixel::FlxSprite _hx_tmp = this->_spriteLabel;
HXDLIN(1170)			_hx_tmp->set_y(((this->y + this->_centerLabelOffset->y) + this->labelOffsets->__get(this->status).StaticCast<  ::flixel::math::FlxPoint >()->y));
HXLINE(1172)			if (this->round_labels) {
HXLINE(1173)				 ::flixel::FlxSprite _hx_tmp1 = this->_spriteLabel;
HXDLIN(1173)				_hx_tmp1->set_y(::Std_obj::_hx_int((this->_spriteLabel->y + ((Float)0.5))));
            			}
HXLINE(1175)			bool _hx_tmp2;
HXDLIN(1175)			if (this->has_toggle) {
HXLINE(1175)				_hx_tmp2 = hx::IsNotNull( this->toggle_label );
            			}
            			else {
HXLINE(1175)				_hx_tmp2 = false;
            			}
HXDLIN(1175)			if (_hx_tmp2) {
HXLINE(1176)				this->toggle_label->set_y(this->_spriteLabel->y);
            			}
            		}
HXLINE(1179)		return NewY;
            	}


::String FlxUITypedButton_obj::CLICK_EVENT;

::String FlxUITypedButton_obj::OVER_EVENT;

::String FlxUITypedButton_obj::DOWN_EVENT;

::String FlxUITypedButton_obj::OUT_EVENT;


hx::ObjectPtr< FlxUITypedButton_obj > FlxUITypedButton_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic OnClick) {
	hx::ObjectPtr< FlxUITypedButton_obj > __this = new FlxUITypedButton_obj();
	__this->__construct(__o_X,__o_Y,OnClick);
	return __this;
}

hx::ObjectPtr< FlxUITypedButton_obj > FlxUITypedButton_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic OnClick) {
	FlxUITypedButton_obj *__this = (FlxUITypedButton_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxUITypedButton_obj), true, "flixel.addons.ui.FlxUITypedButton"));
	*(void **)__this = FlxUITypedButton_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,OnClick);
	return __this;
}

FlxUITypedButton_obj::FlxUITypedButton_obj()
{
}

void FlxUITypedButton_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxUITypedButton);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(resize_ratio,"resize_ratio");
	HX_MARK_MEMBER_NAME(resize_ratio_axis,"resize_ratio_axis");
	HX_MARK_MEMBER_NAME(resize_point,"resize_point");
	HX_MARK_MEMBER_NAME(tile,"tile");
	HX_MARK_MEMBER_NAME(has_toggle,"has_toggle");
	HX_MARK_MEMBER_NAME(toggled,"toggled");
	HX_MARK_MEMBER_NAME(broadcastToFlxUI,"broadcastToFlxUI");
	HX_MARK_MEMBER_NAME(inputOver,"inputOver");
	HX_MARK_MEMBER_NAME(up_color,"up_color");
	HX_MARK_MEMBER_NAME(over_color,"over_color");
	HX_MARK_MEMBER_NAME(down_color,"down_color");
	HX_MARK_MEMBER_NAME(up_toggle_color,"up_toggle_color");
	HX_MARK_MEMBER_NAME(over_toggle_color,"over_toggle_color");
	HX_MARK_MEMBER_NAME(down_toggle_color,"down_toggle_color");
	HX_MARK_MEMBER_NAME(up_visible,"up_visible");
	HX_MARK_MEMBER_NAME(over_visible,"over_visible");
	HX_MARK_MEMBER_NAME(down_visible,"down_visible");
	HX_MARK_MEMBER_NAME(up_toggle_visible,"up_toggle_visible");
	HX_MARK_MEMBER_NAME(over_toggle_visible,"over_toggle_visible");
	HX_MARK_MEMBER_NAME(down_toggle_visible,"down_toggle_visible");
	HX_MARK_MEMBER_NAME(toggle_label,"toggle_label");
	HX_MARK_MEMBER_NAME(round_labels,"round_labels");
	HX_MARK_MEMBER_NAME(skipButtonUpdate,"skipButtonUpdate");
	HX_MARK_MEMBER_NAME(params,"params");
	HX_MARK_MEMBER_NAME(autoResizeLabel,"autoResizeLabel");
	HX_MARK_MEMBER_NAME(_autoCleanup,"_autoCleanup");
	HX_MARK_MEMBER_NAME(_assetsToCleanup,"_assetsToCleanup");
	HX_MARK_MEMBER_NAME(_no_graphic,"_no_graphic");
	HX_MARK_MEMBER_NAME(_src_w,"_src_w");
	HX_MARK_MEMBER_NAME(_src_h,"_src_h");
	HX_MARK_MEMBER_NAME(_frame_indeces,"_frame_indeces");
	HX_MARK_MEMBER_NAME(_slice9_arrays,"_slice9_arrays");
	HX_MARK_MEMBER_NAME(_slice9_assets,"_slice9_assets");
	HX_MARK_MEMBER_NAME(_centerLabelOffset,"_centerLabelOffset");
	 ::flixel::ui::FlxTypedButton_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxUITypedButton_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(resize_ratio,"resize_ratio");
	HX_VISIT_MEMBER_NAME(resize_ratio_axis,"resize_ratio_axis");
	HX_VISIT_MEMBER_NAME(resize_point,"resize_point");
	HX_VISIT_MEMBER_NAME(tile,"tile");
	HX_VISIT_MEMBER_NAME(has_toggle,"has_toggle");
	HX_VISIT_MEMBER_NAME(toggled,"toggled");
	HX_VISIT_MEMBER_NAME(broadcastToFlxUI,"broadcastToFlxUI");
	HX_VISIT_MEMBER_NAME(inputOver,"inputOver");
	HX_VISIT_MEMBER_NAME(up_color,"up_color");
	HX_VISIT_MEMBER_NAME(over_color,"over_color");
	HX_VISIT_MEMBER_NAME(down_color,"down_color");
	HX_VISIT_MEMBER_NAME(up_toggle_color,"up_toggle_color");
	HX_VISIT_MEMBER_NAME(over_toggle_color,"over_toggle_color");
	HX_VISIT_MEMBER_NAME(down_toggle_color,"down_toggle_color");
	HX_VISIT_MEMBER_NAME(up_visible,"up_visible");
	HX_VISIT_MEMBER_NAME(over_visible,"over_visible");
	HX_VISIT_MEMBER_NAME(down_visible,"down_visible");
	HX_VISIT_MEMBER_NAME(up_toggle_visible,"up_toggle_visible");
	HX_VISIT_MEMBER_NAME(over_toggle_visible,"over_toggle_visible");
	HX_VISIT_MEMBER_NAME(down_toggle_visible,"down_toggle_visible");
	HX_VISIT_MEMBER_NAME(toggle_label,"toggle_label");
	HX_VISIT_MEMBER_NAME(round_labels,"round_labels");
	HX_VISIT_MEMBER_NAME(skipButtonUpdate,"skipButtonUpdate");
	HX_VISIT_MEMBER_NAME(params,"params");
	HX_VISIT_MEMBER_NAME(autoResizeLabel,"autoResizeLabel");
	HX_VISIT_MEMBER_NAME(_autoCleanup,"_autoCleanup");
	HX_VISIT_MEMBER_NAME(_assetsToCleanup,"_assetsToCleanup");
	HX_VISIT_MEMBER_NAME(_no_graphic,"_no_graphic");
	HX_VISIT_MEMBER_NAME(_src_w,"_src_w");
	HX_VISIT_MEMBER_NAME(_src_h,"_src_h");
	HX_VISIT_MEMBER_NAME(_frame_indeces,"_frame_indeces");
	HX_VISIT_MEMBER_NAME(_slice9_arrays,"_slice9_arrays");
	HX_VISIT_MEMBER_NAME(_slice9_assets,"_slice9_assets");
	HX_VISIT_MEMBER_NAME(_centerLabelOffset,"_centerLabelOffset");
	 ::flixel::ui::FlxTypedButton_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxUITypedButton_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"tile") ) { return hx::Val( tile ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"params") ) { return hx::Val( params ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"resize") ) { return hx::Val( resize_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBmp") ) { return hx::Val( getBmp_dyn() ); }
		if (HX_FIELD_EQ(inName,"_src_w") ) { return hx::Val( _src_w ); }
		if (HX_FIELD_EQ(inName,"_src_h") ) { return hx::Val( _src_h ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"toggled") ) { return hx::Val( toggled ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"cleanup") ) { return hx::Val( cleanup_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"up_color") ) { return hx::Val( up_color ); }
		if (HX_FIELD_EQ(inName,"doResize") ) { return hx::Val( doResize_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"inputOver") ) { return hx::Val( inputOver ); }
		if (HX_FIELD_EQ(inName,"copyStyle") ) { return hx::Val( copyStyle_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"has_toggle") ) { return hx::Val( has_toggle ); }
		if (HX_FIELD_EQ(inName,"mouseIsOut") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_mouseIsOut() ); }
		if (HX_FIELD_EQ(inName,"over_color") ) { return hx::Val( over_color ); }
		if (HX_FIELD_EQ(inName,"down_color") ) { return hx::Val( down_color ); }
		if (HX_FIELD_EQ(inName,"up_visible") ) { return hx::Val( up_visible ); }
		if (HX_FIELD_EQ(inName,"set_params") ) { return hx::Val( set_params_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"set_toggled") ) { return hx::Val( set_toggled_dyn() ); }
		if (HX_FIELD_EQ(inName,"mouseIsOver") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_mouseIsOver() ); }
		if (HX_FIELD_EQ(inName,"set_visible") ) { return hx::Val( set_visible_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyGraphic") ) { return hx::Val( copyGraphic_dyn() ); }
		if (HX_FIELD_EQ(inName,"onUpHandler") ) { return hx::Val( onUpHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"_no_graphic") ) { return hx::Val( _no_graphic ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resize_ratio") ) { return hx::Val( resize_ratio ); }
		if (HX_FIELD_EQ(inName,"resize_point") ) { return hx::Val( resize_point ); }
		if (HX_FIELD_EQ(inName,"over_visible") ) { return hx::Val( over_visible ); }
		if (HX_FIELD_EQ(inName,"down_visible") ) { return hx::Val( down_visible ); }
		if (HX_FIELD_EQ(inName,"toggle_label") ) { return hx::Val( toggle_label ); }
		if (HX_FIELD_EQ(inName,"round_labels") ) { return hx::Val( round_labels ); }
		if (HX_FIELD_EQ(inName,"updateButton") ) { return hx::Val( updateButton_dyn() ); }
		if (HX_FIELD_EQ(inName,"addToCleanup") ) { return hx::Val( addToCleanup_dyn() ); }
		if (HX_FIELD_EQ(inName,"onOutHandler") ) { return hx::Val( onOutHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"_autoCleanup") ) { return hx::Val( _autoCleanup ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"justMousedOut") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_justMousedOut() ); }
		if (HX_FIELD_EQ(inName,"graphicLoaded") ) { return hx::Val( graphicLoaded_dyn() ); }
		if (HX_FIELD_EQ(inName,"onDownHandler") ) { return hx::Val( onDownHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"onOverHandler") ) { return hx::Val( onOverHandler_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"justMousedOver") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_justMousedOver() ); }
		if (HX_FIELD_EQ(inName,"get_mouseIsOut") ) { return hx::Val( get_mouseIsOut_dyn() ); }
		if (HX_FIELD_EQ(inName,"_frame_indeces") ) { return hx::Val( _frame_indeces ); }
		if (HX_FIELD_EQ(inName,"_slice9_arrays") ) { return hx::Val( _slice9_arrays ); }
		if (HX_FIELD_EQ(inName,"_slice9_assets") ) { return hx::Val( _slice9_assets ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_mouseIsOver") ) { return hx::Val( get_mouseIsOver_dyn() ); }
		if (HX_FIELD_EQ(inName,"up_toggle_color") ) { return hx::Val( up_toggle_color ); }
		if (HX_FIELD_EQ(inName,"autoResizeLabel") ) { return hx::Val( autoResizeLabel ); }
		if (HX_FIELD_EQ(inName,"autoCenterLabel") ) { return hx::Val( autoCenterLabel_dyn() ); }
		if (HX_FIELD_EQ(inName,"grabButtonFrame") ) { return hx::Val( grabButtonFrame_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"broadcastToFlxUI") ) { return hx::Val( broadcastToFlxUI ); }
		if (HX_FIELD_EQ(inName,"set_toggle_label") ) { return hx::Val( set_toggle_label_dyn() ); }
		if (HX_FIELD_EQ(inName,"skipButtonUpdate") ) { return hx::Val( skipButtonUpdate ); }
		if (HX_FIELD_EQ(inName,"_assetsToCleanup") ) { return hx::Val( _assetsToCleanup ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"resize_ratio_axis") ) { return hx::Val( resize_ratio_axis ); }
		if (HX_FIELD_EQ(inName,"get_justMousedOut") ) { return hx::Val( get_justMousedOut_dyn() ); }
		if (HX_FIELD_EQ(inName,"over_toggle_color") ) { return hx::Val( over_toggle_color ); }
		if (HX_FIELD_EQ(inName,"down_toggle_color") ) { return hx::Val( down_toggle_color ); }
		if (HX_FIELD_EQ(inName,"up_toggle_visible") ) { return hx::Val( up_toggle_visible ); }
		if (HX_FIELD_EQ(inName,"loadGraphicSlice9") ) { return hx::Val( loadGraphicSlice9_dyn() ); }
		if (HX_FIELD_EQ(inName,"forceStateHandler") ) { return hx::Val( forceStateHandler_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"get_justMousedOver") ) { return hx::Val( get_justMousedOver_dyn() ); }
		if (HX_FIELD_EQ(inName,"setAllLabelOffsets") ) { return hx::Val( setAllLabelOffsets_dyn() ); }
		if (HX_FIELD_EQ(inName,"_centerLabelOffset") ) { return hx::Val( _centerLabelOffset ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"over_toggle_visible") ) { return hx::Val( over_toggle_visible ); }
		if (HX_FIELD_EQ(inName,"down_toggle_visible") ) { return hx::Val( down_toggle_visible ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"set_skipButtonUpdate") ) { return hx::Val( set_skipButtonUpdate_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadGraphicsMultiple") ) { return hx::Val( loadGraphicsMultiple_dyn() ); }
		if (HX_FIELD_EQ(inName,"setCenterLabelOffset") ) { return hx::Val( setCenterLabelOffset_dyn() ); }
		if (HX_FIELD_EQ(inName,"getCenterLabelOffset") ) { return hx::Val( getCenterLabelOffset_dyn() ); }
		if (HX_FIELD_EQ(inName,"combineToggleBitmaps") ) { return hx::Val( combineToggleBitmaps_dyn() ); }
		if (HX_FIELD_EQ(inName,"assembleButtonFrames") ) { return hx::Val( assembleButtonFrames_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"updateStatusAnimation") ) { return hx::Val( updateStatusAnimation_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"loadGraphicsUpOverDown") ) { return hx::Val( loadGraphicsUpOverDown_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"fetchAndShowCorrectLabel") ) { return hx::Val( fetchAndShowCorrectLabel_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxUITypedButton_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tile") ) { tile=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"params") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_params(inValue.Cast< ::cpp::VirtualArray >()) );params=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_src_w") ) { _src_w=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_src_h") ) { _src_h=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"toggled") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_toggled(inValue.Cast< bool >()) );toggled=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"up_color") ) { up_color=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"inputOver") ) { inputOver=inValue.Cast<  ::flixel::input::FlxInput >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"has_toggle") ) { has_toggle=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"over_color") ) { over_color=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"down_color") ) { down_color=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"up_visible") ) { up_visible=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_no_graphic") ) { _no_graphic=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resize_ratio") ) { resize_ratio=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"resize_point") ) { resize_point=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"over_visible") ) { over_visible=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"down_visible") ) { down_visible=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"toggle_label") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_toggle_label(inValue.Cast<  ::flixel::FlxSprite >()) );toggle_label=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"round_labels") ) { round_labels=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_autoCleanup") ) { _autoCleanup=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_frame_indeces") ) { _frame_indeces=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_slice9_arrays") ) { _slice9_arrays=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_slice9_assets") ) { _slice9_assets=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"up_toggle_color") ) { up_toggle_color=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"autoResizeLabel") ) { autoResizeLabel=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"broadcastToFlxUI") ) { broadcastToFlxUI=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skipButtonUpdate") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_skipButtonUpdate(inValue.Cast< bool >()) );skipButtonUpdate=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_assetsToCleanup") ) { _assetsToCleanup=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"resize_ratio_axis") ) { resize_ratio_axis=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"over_toggle_color") ) { over_toggle_color=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"down_toggle_color") ) { down_toggle_color=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"up_toggle_visible") ) { up_toggle_visible=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_centerLabelOffset") ) { _centerLabelOffset=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"over_toggle_visible") ) { over_toggle_visible=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"down_toggle_visible") ) { down_toggle_visible=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxUITypedButton_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("resize_ratio","\x40","\xc5","\x84","\x8f"));
	outFields->push(HX_HCSTRING("resize_ratio_axis","\x40","\x6b","\x72","\x8a"));
	outFields->push(HX_HCSTRING("resize_point","\x85","\x44","\xf0","\x71"));
	outFields->push(HX_HCSTRING("tile","\x2e","\xcb","\xfc","\x4c"));
	outFields->push(HX_HCSTRING("has_toggle","\x19","\x91","\x1d","\xbb"));
	outFields->push(HX_HCSTRING("toggled","\x50","\xe2","\x03","\xcc"));
	outFields->push(HX_HCSTRING("broadcastToFlxUI","\xca","\x32","\x56","\x1a"));
	outFields->push(HX_HCSTRING("inputOver","\x7e","\x4e","\xe3","\x10"));
	outFields->push(HX_HCSTRING("justMousedOver","\xdf","\x00","\x79","\xb4"));
	outFields->push(HX_HCSTRING("mouseIsOver","\x63","\x8a","\xa7","\x5c"));
	outFields->push(HX_HCSTRING("mouseIsOut","\x5f","\xbe","\x1f","\xdf"));
	outFields->push(HX_HCSTRING("justMousedOut","\x63","\xab","\x7d","\x99"));
	outFields->push(HX_HCSTRING("up_color","\x3f","\xd5","\xb5","\x9b"));
	outFields->push(HX_HCSTRING("over_color","\xf8","\x00","\x4a","\xf7"));
	outFields->push(HX_HCSTRING("down_color","\x86","\x26","\xb3","\x4e"));
	outFields->push(HX_HCSTRING("up_toggle_color","\xdc","\x6e","\x0c","\xdd"));
	outFields->push(HX_HCSTRING("over_toggle_color","\x43","\x1c","\x98","\xaa"));
	outFields->push(HX_HCSTRING("down_toggle_color","\x75","\xe4","\xc8","\x06"));
	outFields->push(HX_HCSTRING("up_visible","\x4e","\x8b","\x83","\x08"));
	outFields->push(HX_HCSTRING("over_visible","\x47","\xd7","\x44","\x92"));
	outFields->push(HX_HCSTRING("down_visible","\x55","\xfc","\x6c","\x72"));
	outFields->push(HX_HCSTRING("up_toggle_visible","\x2b","\x86","\xe9","\x3f"));
	outFields->push(HX_HCSTRING("over_toggle_visible","\x52","\x9b","\xc8","\x49"));
	outFields->push(HX_HCSTRING("down_toggle_visible","\x04","\x54","\xe1","\xa9"));
	outFields->push(HX_HCSTRING("toggle_label","\xc9","\xfb","\x1b","\xdd"));
	outFields->push(HX_HCSTRING("round_labels","\x10","\x07","\x1c","\xbd"));
	outFields->push(HX_HCSTRING("skipButtonUpdate","\xba","\x02","\xf2","\x13"));
	outFields->push(HX_HCSTRING("params","\x46","\xfb","\x7a","\xed"));
	outFields->push(HX_HCSTRING("autoResizeLabel","\x31","\x30","\xad","\x1c"));
	outFields->push(HX_HCSTRING("_autoCleanup","\x76","\x5e","\x2f","\xf7"));
	outFields->push(HX_HCSTRING("_assetsToCleanup","\x67","\x75","\xf7","\x5a"));
	outFields->push(HX_HCSTRING("_no_graphic","\x89","\x8a","\xf5","\x96"));
	outFields->push(HX_HCSTRING("_src_w","\x5d","\xc2","\xa1","\x7e"));
	outFields->push(HX_HCSTRING("_src_h","\x4e","\xc2","\xa1","\x7e"));
	outFields->push(HX_HCSTRING("_frame_indeces","\x9a","\xa3","\xe4","\x57"));
	outFields->push(HX_HCSTRING("_slice9_arrays","\xd3","\x49","\x74","\xa4"));
	outFields->push(HX_HCSTRING("_slice9_assets","\x9c","\x19","\x87","\x38"));
	outFields->push(HX_HCSTRING("_centerLabelOffset","\x93","\x75","\xab","\xa3"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxUITypedButton_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(FlxUITypedButton_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsFloat,(int)offsetof(FlxUITypedButton_obj,resize_ratio),HX_HCSTRING("resize_ratio","\x40","\xc5","\x84","\x8f")},
	{hx::fsInt,(int)offsetof(FlxUITypedButton_obj,resize_ratio_axis),HX_HCSTRING("resize_ratio_axis","\x40","\x6b","\x72","\x8a")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxUITypedButton_obj,resize_point),HX_HCSTRING("resize_point","\x85","\x44","\xf0","\x71")},
	{hx::fsInt,(int)offsetof(FlxUITypedButton_obj,tile),HX_HCSTRING("tile","\x2e","\xcb","\xfc","\x4c")},
	{hx::fsBool,(int)offsetof(FlxUITypedButton_obj,has_toggle),HX_HCSTRING("has_toggle","\x19","\x91","\x1d","\xbb")},
	{hx::fsBool,(int)offsetof(FlxUITypedButton_obj,toggled),HX_HCSTRING("toggled","\x50","\xe2","\x03","\xcc")},
	{hx::fsBool,(int)offsetof(FlxUITypedButton_obj,broadcastToFlxUI),HX_HCSTRING("broadcastToFlxUI","\xca","\x32","\x56","\x1a")},
	{hx::fsObject /*::flixel::input::FlxInput*/ ,(int)offsetof(FlxUITypedButton_obj,inputOver),HX_HCSTRING("inputOver","\x7e","\x4e","\xe3","\x10")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxUITypedButton_obj,up_color),HX_HCSTRING("up_color","\x3f","\xd5","\xb5","\x9b")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxUITypedButton_obj,over_color),HX_HCSTRING("over_color","\xf8","\x00","\x4a","\xf7")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxUITypedButton_obj,down_color),HX_HCSTRING("down_color","\x86","\x26","\xb3","\x4e")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxUITypedButton_obj,up_toggle_color),HX_HCSTRING("up_toggle_color","\xdc","\x6e","\x0c","\xdd")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxUITypedButton_obj,over_toggle_color),HX_HCSTRING("over_toggle_color","\x43","\x1c","\x98","\xaa")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxUITypedButton_obj,down_toggle_color),HX_HCSTRING("down_toggle_color","\x75","\xe4","\xc8","\x06")},
	{hx::fsBool,(int)offsetof(FlxUITypedButton_obj,up_visible),HX_HCSTRING("up_visible","\x4e","\x8b","\x83","\x08")},
	{hx::fsBool,(int)offsetof(FlxUITypedButton_obj,over_visible),HX_HCSTRING("over_visible","\x47","\xd7","\x44","\x92")},
	{hx::fsBool,(int)offsetof(FlxUITypedButton_obj,down_visible),HX_HCSTRING("down_visible","\x55","\xfc","\x6c","\x72")},
	{hx::fsBool,(int)offsetof(FlxUITypedButton_obj,up_toggle_visible),HX_HCSTRING("up_toggle_visible","\x2b","\x86","\xe9","\x3f")},
	{hx::fsBool,(int)offsetof(FlxUITypedButton_obj,over_toggle_visible),HX_HCSTRING("over_toggle_visible","\x52","\x9b","\xc8","\x49")},
	{hx::fsBool,(int)offsetof(FlxUITypedButton_obj,down_toggle_visible),HX_HCSTRING("down_toggle_visible","\x04","\x54","\xe1","\xa9")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(FlxUITypedButton_obj,toggle_label),HX_HCSTRING("toggle_label","\xc9","\xfb","\x1b","\xdd")},
	{hx::fsBool,(int)offsetof(FlxUITypedButton_obj,round_labels),HX_HCSTRING("round_labels","\x10","\x07","\x1c","\xbd")},
	{hx::fsBool,(int)offsetof(FlxUITypedButton_obj,skipButtonUpdate),HX_HCSTRING("skipButtonUpdate","\xba","\x02","\xf2","\x13")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(FlxUITypedButton_obj,params),HX_HCSTRING("params","\x46","\xfb","\x7a","\xed")},
	{hx::fsBool,(int)offsetof(FlxUITypedButton_obj,autoResizeLabel),HX_HCSTRING("autoResizeLabel","\x31","\x30","\xad","\x1c")},
	{hx::fsBool,(int)offsetof(FlxUITypedButton_obj,_autoCleanup),HX_HCSTRING("_autoCleanup","\x76","\x5e","\x2f","\xf7")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(FlxUITypedButton_obj,_assetsToCleanup),HX_HCSTRING("_assetsToCleanup","\x67","\x75","\xf7","\x5a")},
	{hx::fsBool,(int)offsetof(FlxUITypedButton_obj,_no_graphic),HX_HCSTRING("_no_graphic","\x89","\x8a","\xf5","\x96")},
	{hx::fsInt,(int)offsetof(FlxUITypedButton_obj,_src_w),HX_HCSTRING("_src_w","\x5d","\xc2","\xa1","\x7e")},
	{hx::fsInt,(int)offsetof(FlxUITypedButton_obj,_src_h),HX_HCSTRING("_src_h","\x4e","\xc2","\xa1","\x7e")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(FlxUITypedButton_obj,_frame_indeces),HX_HCSTRING("_frame_indeces","\x9a","\xa3","\xe4","\x57")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxUITypedButton_obj,_slice9_arrays),HX_HCSTRING("_slice9_arrays","\xd3","\x49","\x74","\xa4")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(FlxUITypedButton_obj,_slice9_assets),HX_HCSTRING("_slice9_assets","\x9c","\x19","\x87","\x38")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxUITypedButton_obj,_centerLabelOffset),HX_HCSTRING("_centerLabelOffset","\x93","\x75","\xab","\xa3")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FlxUITypedButton_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &FlxUITypedButton_obj::CLICK_EVENT,HX_HCSTRING("CLICK_EVENT","\x63","\x89","\xc0","\x0d")},
	{hx::fsString,(void *) &FlxUITypedButton_obj::OVER_EVENT,HX_HCSTRING("OVER_EVENT","\x8f","\x57","\x27","\xe0")},
	{hx::fsString,(void *) &FlxUITypedButton_obj::DOWN_EVENT,HX_HCSTRING("DOWN_EVENT","\x1d","\x7d","\x90","\x37")},
	{hx::fsString,(void *) &FlxUITypedButton_obj::OUT_EVENT,HX_HCSTRING("OUT_EVENT","\x29","\x8a","\xe4","\xaa")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxUITypedButton_obj_sMemberFields[] = {
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("resize_ratio","\x40","\xc5","\x84","\x8f"),
	HX_HCSTRING("resize_ratio_axis","\x40","\x6b","\x72","\x8a"),
	HX_HCSTRING("resize_point","\x85","\x44","\xf0","\x71"),
	HX_HCSTRING("tile","\x2e","\xcb","\xfc","\x4c"),
	HX_HCSTRING("has_toggle","\x19","\x91","\x1d","\xbb"),
	HX_HCSTRING("toggled","\x50","\xe2","\x03","\xcc"),
	HX_HCSTRING("set_toggled","\x73","\x49","\x6b","\x5c"),
	HX_HCSTRING("broadcastToFlxUI","\xca","\x32","\x56","\x1a"),
	HX_HCSTRING("inputOver","\x7e","\x4e","\xe3","\x10"),
	HX_HCSTRING("get_justMousedOver","\xa8","\xe1","\x12","\x50"),
	HX_HCSTRING("get_justMousedOut","\xba","\xb6","\xed","\x9f"),
	HX_HCSTRING("get_mouseIsOver","\xfa","\x41","\x89","\x1d"),
	HX_HCSTRING("get_mouseIsOut","\xa8","\x46","\x15","\x55"),
	HX_HCSTRING("up_color","\x3f","\xd5","\xb5","\x9b"),
	HX_HCSTRING("over_color","\xf8","\x00","\x4a","\xf7"),
	HX_HCSTRING("down_color","\x86","\x26","\xb3","\x4e"),
	HX_HCSTRING("up_toggle_color","\xdc","\x6e","\x0c","\xdd"),
	HX_HCSTRING("over_toggle_color","\x43","\x1c","\x98","\xaa"),
	HX_HCSTRING("down_toggle_color","\x75","\xe4","\xc8","\x06"),
	HX_HCSTRING("up_visible","\x4e","\x8b","\x83","\x08"),
	HX_HCSTRING("over_visible","\x47","\xd7","\x44","\x92"),
	HX_HCSTRING("down_visible","\x55","\xfc","\x6c","\x72"),
	HX_HCSTRING("up_toggle_visible","\x2b","\x86","\xe9","\x3f"),
	HX_HCSTRING("over_toggle_visible","\x52","\x9b","\xc8","\x49"),
	HX_HCSTRING("down_toggle_visible","\x04","\x54","\xe1","\xa9"),
	HX_HCSTRING("toggle_label","\xc9","\xfb","\x1b","\xdd"),
	HX_HCSTRING("set_toggle_label","\xc6","\xd5","\xfc","\x37"),
	HX_HCSTRING("set_visible","\x95","\xdf","\x8b","\x33"),
	HX_HCSTRING("round_labels","\x10","\x07","\x1c","\xbd"),
	HX_HCSTRING("skipButtonUpdate","\xba","\x02","\xf2","\x13"),
	HX_HCSTRING("set_skipButtonUpdate","\x37","\x1f","\x14","\xff"),
	HX_HCSTRING("params","\x46","\xfb","\x7a","\xed"),
	HX_HCSTRING("set_params","\x83","\x09","\x80","\xe1"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("autoResizeLabel","\x31","\x30","\xad","\x1c"),
	HX_HCSTRING("graphicLoaded","\xcd","\x84","\x20","\x16"),
	HX_HCSTRING("copyGraphic","\x73","\xd7","\x1b","\xca"),
	HX_HCSTRING("copyStyle","\x3c","\xc9","\x18","\x0a"),
	HX_HCSTRING("setAllLabelOffsets","\x2b","\x4f","\xfa","\x85"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("updateStatusAnimation","\x69","\x25","\xc1","\x4d"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("resize","\xf4","\x59","\x7b","\x08"),
	HX_HCSTRING("doResize","\xdf","\xdf","\x92","\x9c"),
	HX_HCSTRING("getBmp","\x4f","\xf5","\x19","\xa3"),
	HX_HCSTRING("loadGraphicsMultiple","\x41","\x7c","\x04","\x85"),
	HX_HCSTRING("loadGraphicsUpOverDown","\xc2","\xad","\x54","\x5b"),
	HX_HCSTRING("loadGraphicSlice9","\x69","\x16","\x70","\x91"),
	HX_HCSTRING("autoCenterLabel","\xb0","\xb4","\x79","\xaf"),
	HX_HCSTRING("setCenterLabelOffset","\xd0","\xbe","\xc2","\xc4"),
	HX_HCSTRING("getCenterLabelOffset","\x5c","\x07","\x0b","\xf8"),
	HX_HCSTRING("forceStateHandler","\x44","\x68","\x8f","\x7c"),
	HX_HCSTRING("grabButtonFrame","\x6f","\xbc","\x04","\x74"),
	HX_HCSTRING("combineToggleBitmaps","\x71","\x66","\xeb","\x36"),
	HX_HCSTRING("assembleButtonFrames","\x6a","\xcf","\x53","\x98"),
	HX_HCSTRING("updateButton","\xdb","\x08","\xa4","\xd9"),
	HX_HCSTRING("addToCleanup","\x88","\x65","\x2a","\xda"),
	HX_HCSTRING("cleanup","\x24","\x0c","\x42","\xab"),
	HX_HCSTRING("fetchAndShowCorrectLabel","\xa4","\xe2","\x12","\xed"),
	HX_HCSTRING("onUpHandler","\x90","\xa5","\xd0","\xa3"),
	HX_HCSTRING("onDownHandler","\xa9","\xac","\x21","\xcf"),
	HX_HCSTRING("onOverHandler","\xf7","\xf5","\x89","\xaa"),
	HX_HCSTRING("onOutHandler","\xdb","\x26","\xe5","\x9e"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	HX_HCSTRING("_autoCleanup","\x76","\x5e","\x2f","\xf7"),
	HX_HCSTRING("_assetsToCleanup","\x67","\x75","\xf7","\x5a"),
	HX_HCSTRING("_no_graphic","\x89","\x8a","\xf5","\x96"),
	HX_HCSTRING("_src_w","\x5d","\xc2","\xa1","\x7e"),
	HX_HCSTRING("_src_h","\x4e","\xc2","\xa1","\x7e"),
	HX_HCSTRING("_frame_indeces","\x9a","\xa3","\xe4","\x57"),
	HX_HCSTRING("_slice9_arrays","\xd3","\x49","\x74","\xa4"),
	HX_HCSTRING("_slice9_assets","\x9c","\x19","\x87","\x38"),
	HX_HCSTRING("_centerLabelOffset","\x93","\x75","\xab","\xa3"),
	::String(null()) };

static void FlxUITypedButton_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxUITypedButton_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxUITypedButton_obj::CLICK_EVENT,"CLICK_EVENT");
	HX_MARK_MEMBER_NAME(FlxUITypedButton_obj::OVER_EVENT,"OVER_EVENT");
	HX_MARK_MEMBER_NAME(FlxUITypedButton_obj::DOWN_EVENT,"DOWN_EVENT");
	HX_MARK_MEMBER_NAME(FlxUITypedButton_obj::OUT_EVENT,"OUT_EVENT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxUITypedButton_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxUITypedButton_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxUITypedButton_obj::CLICK_EVENT,"CLICK_EVENT");
	HX_VISIT_MEMBER_NAME(FlxUITypedButton_obj::OVER_EVENT,"OVER_EVENT");
	HX_VISIT_MEMBER_NAME(FlxUITypedButton_obj::DOWN_EVENT,"DOWN_EVENT");
	HX_VISIT_MEMBER_NAME(FlxUITypedButton_obj::OUT_EVENT,"OUT_EVENT");
};

#endif

hx::Class FlxUITypedButton_obj::__mClass;

static ::String FlxUITypedButton_obj_sStaticFields[] = {
	HX_HCSTRING("CLICK_EVENT","\x63","\x89","\xc0","\x0d"),
	HX_HCSTRING("OVER_EVENT","\x8f","\x57","\x27","\xe0"),
	HX_HCSTRING("DOWN_EVENT","\x1d","\x7d","\x90","\x37"),
	HX_HCSTRING("OUT_EVENT","\x29","\x8a","\xe4","\xaa"),
	::String(null())
};

void FlxUITypedButton_obj::__register()
{
	hx::Object *dummy = new FlxUITypedButton_obj;
	FlxUITypedButton_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.ui.FlxUITypedButton","\xa7","\x67","\x15","\x22");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxUITypedButton_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxUITypedButton_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxUITypedButton_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxUITypedButton_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxUITypedButton_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxUITypedButton_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxUITypedButton_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxUITypedButton_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_116_boot)
HXDLIN( 116)		CLICK_EVENT = HX_("click_button",49,90,30,6d);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_117_boot)
HXDLIN( 117)		OVER_EVENT = HX_("over_button",bd,74,d0,7c);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_118_boot)
HXDLIN( 118)		DOWN_EVENT = HX_("down_button",6f,2b,68,a1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6bf08eba80b23956_119_boot)
HXDLIN( 119)		OUT_EVENT = HX_("out_button",c3,20,d2,fb);
            	}
}

} // end namespace flixel
} // end namespace addons
} // end namespace ui
