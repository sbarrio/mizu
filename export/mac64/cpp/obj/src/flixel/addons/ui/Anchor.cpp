// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_Anchor
#include <flixel/addons/ui/Anchor.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_AnchorPoint
#include <flixel/addons/ui/AnchorPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8e2cb63194d68a1b_22_new,"flixel.addons.ui.Anchor","new",0xade40a78,"flixel.addons.ui.Anchor.new","flixel/addons/ui/Anchor.hx",22,0x879e85f7)
HX_LOCAL_STACK_FRAME(_hx_pos_8e2cb63194d68a1b_27_destroy,"flixel.addons.ui.Anchor","destroy",0xe9595312,"flixel.addons.ui.Anchor.destroy","flixel/addons/ui/Anchor.hx",27,0x879e85f7)
HX_LOCAL_STACK_FRAME(_hx_pos_8e2cb63194d68a1b_33_anchorThing,"flixel.addons.ui.Anchor","anchorThing",0xb950c751,"flixel.addons.ui.Anchor.anchorThing","flixel/addons/ui/Anchor.hx",33,0x879e85f7)
HX_LOCAL_STACK_FRAME(_hx_pos_8e2cb63194d68a1b_70_getFlipped,"flixel.addons.ui.Anchor","getFlipped",0xbdefab34,"flixel.addons.ui.Anchor.getFlipped","flixel/addons/ui/Anchor.hx",70,0x879e85f7)
HX_LOCAL_STACK_FRAME(_hx_pos_8e2cb63194d68a1b_99_clone,"flixel.addons.ui.Anchor","clone",0xa6080375,"flixel.addons.ui.Anchor.clone","flixel/addons/ui/Anchor.hx",99,0x879e85f7)
HX_LOCAL_STACK_FRAME(_hx_pos_8e2cb63194d68a1b_103_flipAnchorSide,"flixel.addons.ui.Anchor","flipAnchorSide",0xb2a530a1,"flixel.addons.ui.Anchor.flipAnchorSide","flixel/addons/ui/Anchor.hx",103,0x879e85f7)
HX_LOCAL_STACK_FRAME(_hx_pos_8e2cb63194d68a1b_14_boot,"flixel.addons.ui.Anchor","boot",0x71be1f1a,"flixel.addons.ui.Anchor.boot","flixel/addons/ui/Anchor.hx",14,0x879e85f7)
HX_LOCAL_STACK_FRAME(_hx_pos_8e2cb63194d68a1b_15_boot,"flixel.addons.ui.Anchor","boot",0x71be1f1a,"flixel.addons.ui.Anchor.boot","flixel/addons/ui/Anchor.hx",15,0x879e85f7)
HX_LOCAL_STACK_FRAME(_hx_pos_8e2cb63194d68a1b_16_boot,"flixel.addons.ui.Anchor","boot",0x71be1f1a,"flixel.addons.ui.Anchor.boot","flixel/addons/ui/Anchor.hx",16,0x879e85f7)
HX_LOCAL_STACK_FRAME(_hx_pos_8e2cb63194d68a1b_17_boot,"flixel.addons.ui.Anchor","boot",0x71be1f1a,"flixel.addons.ui.Anchor.boot","flixel/addons/ui/Anchor.hx",17,0x879e85f7)
HX_LOCAL_STACK_FRAME(_hx_pos_8e2cb63194d68a1b_18_boot,"flixel.addons.ui.Anchor","boot",0x71be1f1a,"flixel.addons.ui.Anchor.boot","flixel/addons/ui/Anchor.hx",18,0x879e85f7)
HX_LOCAL_STACK_FRAME(_hx_pos_8e2cb63194d68a1b_19_boot,"flixel.addons.ui.Anchor","boot",0x71be1f1a,"flixel.addons.ui.Anchor.boot","flixel/addons/ui/Anchor.hx",19,0x879e85f7)
namespace flixel{
namespace addons{
namespace ui{

void Anchor_obj::__construct(Float XOff,Float YOff,::String XSide,::String YSide,::String XFlush,::String YFlush){
            	HX_GC_STACKFRAME(&_hx_pos_8e2cb63194d68a1b_22_new)
HXLINE(  23)		this->x =  ::flixel::addons::ui::AnchorPoint_obj::__alloc( HX_CTX ,XOff,XSide,XFlush);
HXLINE(  24)		this->y =  ::flixel::addons::ui::AnchorPoint_obj::__alloc( HX_CTX ,YOff,YSide,YFlush);
            	}

Dynamic Anchor_obj::__CreateEmpty() { return new Anchor_obj; }

void *Anchor_obj::_hx_vtable = 0;

Dynamic Anchor_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Anchor_obj > _hx_result = new Anchor_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool Anchor_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1a4c6a5c;
}

static ::flixel::util::IFlxDestroyable_obj _hx_flixel_addons_ui_Anchor__hx_flixel_util_IFlxDestroyable= {
	( void (hx::Object::*)())&::flixel::addons::ui::Anchor_obj::destroy,
};

void *Anchor_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xd4fe2fcd: return &_hx_flixel_addons_ui_Anchor__hx_flixel_util_IFlxDestroyable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void Anchor_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_8e2cb63194d68a1b_27_destroy)
HXLINE(  28)		this->x = null();
HXLINE(  29)		this->y = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Anchor_obj,destroy,(void))

void Anchor_obj::anchorThing( ::flixel::FlxObject thing, ::flixel::FlxObject destination){
            	HX_STACKFRAME(&_hx_pos_8e2cb63194d68a1b_33_anchorThing)
HXLINE(  34)		Float destX = (int)0;
HXLINE(  35)		Float destY = (int)0;
HXLINE(  37)		::String _g = this->x->side;
HXDLIN(  37)		::String _hx_switch_0 = _g;
            		if (  (_hx_switch_0==HX_("center",d5,25,db,05)) ){
HXLINE(  41)			Float destination1 = destination->x;
HXDLIN(  41)			destX = (destination1 + ((Float)destination->get_width() / (Float)(int)2));
HXDLIN(  41)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE(  39)			destX = destination->x;
HXDLIN(  39)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE(  40)			Float destination2 = destination->x;
HXDLIN(  40)			destX = (destination2 + destination->get_width());
HXDLIN(  40)			goto _hx_goto_2;
            		}
            		/* default */{
HXLINE(  42)			destX = destination->x;
            		}
            		_hx_goto_2:;
HXLINE(  44)		::String _g1 = this->y->side;
HXDLIN(  44)		::String _hx_switch_1 = _g1;
            		if (  (_hx_switch_1==HX_("bottom",eb,e6,78,65)) ){
HXLINE(  47)			Float destination3 = destination->y;
HXDLIN(  47)			destY = (destination3 + destination->get_height());
HXDLIN(  47)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_1==HX_("center",d5,25,db,05)) ){
HXLINE(  48)			Float destination4 = destination->y;
HXDLIN(  48)			destY = (destination4 + ((Float)destination->get_height() / (Float)(int)2));
HXDLIN(  48)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_1==HX_("top",95,66,58,00)) ){
HXLINE(  46)			destY = destination->y;
HXDLIN(  46)			goto _hx_goto_3;
            		}
            		/* default */{
HXLINE(  49)			destY = destination->y;
            		}
            		_hx_goto_3:;
HXLINE(  51)		::String _g2 = this->x->flush;
HXDLIN(  51)		::String _hx_switch_2 = _g2;
            		if (  (_hx_switch_2==HX_("center",d5,25,db,05)) ){
HXLINE(  55)			destX = (destX - ((Float)thing->get_width() / (Float)(int)2));
HXDLIN(  55)			destX = destX;
HXDLIN(  55)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_2==HX_("left",07,08,b0,47)) ){
HXLINE(  53)			destX = destX;
HXDLIN(  53)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_2==HX_("right",dc,0b,64,e9)) ){
HXLINE(  54)			destX = (destX - thing->get_width());
HXDLIN(  54)			goto _hx_goto_4;
            		}
            		/* default */{
HXLINE(  56)			destX = destX;
            		}
            		_hx_goto_4:;
HXLINE(  58)		::String _g3 = this->y->flush;
HXDLIN(  58)		::String _hx_switch_3 = _g3;
            		if (  (_hx_switch_3==HX_("bottom",eb,e6,78,65)) ){
HXLINE(  61)			destY = (destY - thing->get_height());
HXDLIN(  61)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_3==HX_("center",d5,25,db,05)) ){
HXLINE(  62)			destY = (destY - ((Float)thing->get_height() / (Float)(int)2));
HXDLIN(  62)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_3==HX_("top",95,66,58,00)) ){
HXLINE(  60)			destY = destY;
HXDLIN(  60)			goto _hx_goto_5;
            		}
            		/* default */{
HXLINE(  63)			destY = destY;
            		}
            		_hx_goto_5:;
HXLINE(  65)		thing->set_x((destX + this->x->offset));
HXLINE(  66)		thing->set_y((destY + this->y->offset));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Anchor_obj,anchorThing,(void))

 ::flixel::addons::ui::Anchor Anchor_obj::getFlipped(bool FlipX,bool FlipY, ::flixel::addons::ui::Anchor AnchorObject){
            	HX_GC_STACKFRAME(&_hx_pos_8e2cb63194d68a1b_70_getFlipped)
HXLINE(  71)		Float xoff;
HXDLIN(  71)		if (FlipX) {
HXLINE(  71)			xoff = ((int)-1 * this->x->offset);
            		}
            		else {
HXLINE(  71)			xoff = this->x->offset;
            		}
HXLINE(  72)		Float yoff;
HXDLIN(  72)		if (FlipY) {
HXLINE(  72)			yoff = ((int)-1 * this->y->offset);
            		}
            		else {
HXLINE(  72)			yoff = this->y->offset;
            		}
HXLINE(  74)		::String xside;
HXDLIN(  74)		if (FlipX) {
HXLINE(  74)			xside = this->flipAnchorSide(this->x->side);
            		}
            		else {
HXLINE(  74)			xside = this->x->side;
            		}
HXLINE(  75)		::String yside;
HXDLIN(  75)		if (FlipY) {
HXLINE(  75)			yside = this->flipAnchorSide(this->y->side);
            		}
            		else {
HXLINE(  75)			yside = this->y->side;
            		}
HXLINE(  77)		::String xflush;
HXDLIN(  77)		if (FlipX) {
HXLINE(  77)			xflush = this->flipAnchorSide(this->x->flush);
            		}
            		else {
HXLINE(  77)			xflush = this->x->flush;
            		}
HXLINE(  78)		::String yflush;
HXDLIN(  78)		if (FlipY) {
HXLINE(  78)			yflush = this->flipAnchorSide(this->y->flush);
            		}
            		else {
HXLINE(  78)			yflush = this->y->flush;
            		}
HXLINE(  80)		if (hx::IsNull( AnchorObject )) {
HXLINE(  82)			AnchorObject =  ::flixel::addons::ui::Anchor_obj::__alloc( HX_CTX ,xoff,yoff,xside,yside,xflush,yflush);
            		}
            		else {
HXLINE(  86)			AnchorObject->x->offset = xoff;
HXLINE(  87)			AnchorObject->y->offset = yoff;
HXLINE(  88)			AnchorObject->x->side = xside;
HXLINE(  89)			AnchorObject->y->side = yside;
HXLINE(  90)			AnchorObject->x->flush = xflush;
HXLINE(  91)			AnchorObject->y->flush = yflush;
            		}
HXLINE(  94)		return AnchorObject;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Anchor_obj,getFlipped,return )

 ::flixel::addons::ui::Anchor Anchor_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_8e2cb63194d68a1b_99_clone)
HXDLIN(  99)		return  ::flixel::addons::ui::Anchor_obj::__alloc( HX_CTX ,this->x->offset,this->y->offset,this->x->side,this->y->side,this->x->flush,this->y->flush);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Anchor_obj,clone,return )

::String Anchor_obj::flipAnchorSide(::String str){
            	HX_STACKFRAME(&_hx_pos_8e2cb63194d68a1b_103_flipAnchorSide)
HXLINE( 104)		if ((str == HX_("left",07,08,b0,47))) {
HXLINE( 104)			return HX_("right",dc,0b,64,e9);
            		}
HXLINE( 105)		if ((str == HX_("right",dc,0b,64,e9))) {
HXLINE( 105)			return HX_("left",07,08,b0,47);
            		}
HXLINE( 106)		if ((str == HX_("top",95,66,58,00))) {
HXLINE( 106)			return HX_("bottom",eb,e6,78,65);
            		}
HXLINE( 107)		if ((str == HX_("bottom",eb,e6,78,65))) {
HXLINE( 107)			return HX_("top",95,66,58,00);
            		}
HXLINE( 108)		return str;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Anchor_obj,flipAnchorSide,return )

::String Anchor_obj::LEFT;

::String Anchor_obj::RIGHT;

::String Anchor_obj::TOP;

::String Anchor_obj::BOTTOM;

::String Anchor_obj::CENTER;

::String Anchor_obj::UNKNOWN;


hx::ObjectPtr< Anchor_obj > Anchor_obj::__new(Float XOff,Float YOff,::String XSide,::String YSide,::String XFlush,::String YFlush) {
	hx::ObjectPtr< Anchor_obj > __this = new Anchor_obj();
	__this->__construct(XOff,YOff,XSide,YSide,XFlush,YFlush);
	return __this;
}

hx::ObjectPtr< Anchor_obj > Anchor_obj::__alloc(hx::Ctx *_hx_ctx,Float XOff,Float YOff,::String XSide,::String YSide,::String XFlush,::String YFlush) {
	Anchor_obj *__this = (Anchor_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Anchor_obj), true, "flixel.addons.ui.Anchor"));
	*(void **)__this = Anchor_obj::_hx_vtable;
	__this->__construct(XOff,YOff,XSide,YSide,XFlush,YFlush);
	return __this;
}

Anchor_obj::Anchor_obj()
{
}

void Anchor_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Anchor);
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_END_CLASS();
}

void Anchor_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
}

hx::Val Anchor_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getFlipped") ) { return hx::Val( getFlipped_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"anchorThing") ) { return hx::Val( anchorThing_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"flipAnchorSide") ) { return hx::Val( flipAnchorSide_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Anchor_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast<  ::flixel::addons::ui::AnchorPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast<  ::flixel::addons::ui::AnchorPoint >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Anchor_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Anchor_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::addons::ui::AnchorPoint*/ ,(int)offsetof(Anchor_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsObject /*::flixel::addons::ui::AnchorPoint*/ ,(int)offsetof(Anchor_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Anchor_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &Anchor_obj::LEFT,HX_HCSTRING("LEFT","\x07","\xd0","\x70","\x32")},
	{hx::fsString,(void *) &Anchor_obj::RIGHT,HX_HCSTRING("RIGHT","\xbc","\x43","\x52","\x67")},
	{hx::fsString,(void *) &Anchor_obj::TOP,HX_HCSTRING("TOP","\x75","\x02","\x40","\x00")},
	{hx::fsString,(void *) &Anchor_obj::BOTTOM,HX_HCSTRING("BOTTOM","\xeb","\x92","\xfb","\x17")},
	{hx::fsString,(void *) &Anchor_obj::CENTER,HX_HCSTRING("CENTER","\xd5","\xd1","\x5d","\xb8")},
	{hx::fsString,(void *) &Anchor_obj::UNKNOWN,HX_HCSTRING("UNKNOWN","\x6a","\xf7","\x4e","\x61")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Anchor_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("anchorThing","\x39","\xb5","\x54","\x83"),
	HX_HCSTRING("getFlipped","\x4c","\xf2","\xe9","\xce"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("flipAnchorSide","\xb9","\xe3","\x6c","\x0d"),
	::String(null()) };

static void Anchor_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Anchor_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Anchor_obj::LEFT,"LEFT");
	HX_MARK_MEMBER_NAME(Anchor_obj::RIGHT,"RIGHT");
	HX_MARK_MEMBER_NAME(Anchor_obj::TOP,"TOP");
	HX_MARK_MEMBER_NAME(Anchor_obj::BOTTOM,"BOTTOM");
	HX_MARK_MEMBER_NAME(Anchor_obj::CENTER,"CENTER");
	HX_MARK_MEMBER_NAME(Anchor_obj::UNKNOWN,"UNKNOWN");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Anchor_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Anchor_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Anchor_obj::LEFT,"LEFT");
	HX_VISIT_MEMBER_NAME(Anchor_obj::RIGHT,"RIGHT");
	HX_VISIT_MEMBER_NAME(Anchor_obj::TOP,"TOP");
	HX_VISIT_MEMBER_NAME(Anchor_obj::BOTTOM,"BOTTOM");
	HX_VISIT_MEMBER_NAME(Anchor_obj::CENTER,"CENTER");
	HX_VISIT_MEMBER_NAME(Anchor_obj::UNKNOWN,"UNKNOWN");
};

#endif

hx::Class Anchor_obj::__mClass;

static ::String Anchor_obj_sStaticFields[] = {
	HX_HCSTRING("LEFT","\x07","\xd0","\x70","\x32"),
	HX_HCSTRING("RIGHT","\xbc","\x43","\x52","\x67"),
	HX_HCSTRING("TOP","\x75","\x02","\x40","\x00"),
	HX_HCSTRING("BOTTOM","\xeb","\x92","\xfb","\x17"),
	HX_HCSTRING("CENTER","\xd5","\xd1","\x5d","\xb8"),
	HX_HCSTRING("UNKNOWN","\x6a","\xf7","\x4e","\x61"),
	::String(null())
};

void Anchor_obj::__register()
{
	hx::Object *dummy = new Anchor_obj;
	Anchor_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.ui.Anchor","\x86","\xae","\x07","\x1f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Anchor_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Anchor_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Anchor_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Anchor_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Anchor_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Anchor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Anchor_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Anchor_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_8e2cb63194d68a1b_14_boot)
HXDLIN(  14)		LEFT = HX_("left",07,08,b0,47);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8e2cb63194d68a1b_15_boot)
HXDLIN(  15)		RIGHT = HX_("right",dc,0b,64,e9);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8e2cb63194d68a1b_16_boot)
HXDLIN(  16)		TOP = HX_("top",95,66,58,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8e2cb63194d68a1b_17_boot)
HXDLIN(  17)		BOTTOM = HX_("bottom",eb,e6,78,65);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8e2cb63194d68a1b_18_boot)
HXDLIN(  18)		CENTER = HX_("center",d5,25,db,05);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8e2cb63194d68a1b_19_boot)
HXDLIN(  19)		UNKNOWN = HX_("unknown",8a,23,7b,e1);
            	}
}

} // end namespace flixel
} // end namespace addons
} // end namespace ui
