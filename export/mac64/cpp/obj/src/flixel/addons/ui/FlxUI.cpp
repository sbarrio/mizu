// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__List_ListNode
#include <_List/ListNode.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_Anchor
#include <flixel/addons/ui/Anchor.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_BorderDef
#include <flixel/addons/ui/BorderDef.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_ButtonLabelStyle
#include <flixel/addons/ui/ButtonLabelStyle.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_CheckStyle
#include <flixel/addons/ui/CheckStyle.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI
#include <flixel/addons/ui/FlxUI.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI9SliceSprite
#include <flixel/addons/ui/FlxUI9SliceSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIBar
#include <flixel/addons/ui/FlxUIBar.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIButton
#include <flixel/addons/ui/FlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUICheckBox
#include <flixel/addons/ui/FlxUICheckBox.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownHeader
#include <flixel/addons/ui/FlxUIDropDownHeader.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownMenu
#include <flixel/addons/ui/FlxUIDropDownMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIInputText
#include <flixel/addons/ui/FlxUIInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUILine
#include <flixel/addons/ui/FlxUILine.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUINumericStepper
#include <flixel/addons/ui/FlxUINumericStepper.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIRadioGroup
#include <flixel/addons/ui/FlxUIRadioGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIRegion
#include <flixel/addons/ui/FlxUIRegion.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISprite
#include <flixel/addons/ui/FlxUISprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISpriteButton
#include <flixel/addons/ui/FlxUISpriteButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITabMenu
#include <flixel/addons/ui/FlxUITabMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIText
#include <flixel/addons/ui/FlxUIText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITileTest
#include <flixel/addons/ui/FlxUITileTest.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITooltipManager
#include <flixel/addons/ui/FlxUITooltipManager.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITypedButton
#include <flixel/addons/ui/FlxUITypedButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FontDef
#include <flixel/addons/ui/FontDef.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_LineAxis
#include <flixel/addons/ui/LineAxis.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_Rounding
#include <flixel/addons/ui/Rounding.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_StrNameLabel
#include <flixel/addons/ui/StrNameLabel.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_U
#include <flixel/addons/ui/U.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ICursorPointable
#include <flixel/addons/ui/interfaces/ICursorPointable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFireTongue
#include <flixel/addons/ui/interfaces/IFireTongue.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIButton
#include <flixel/addons/ui/interfaces/IFlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ILabeled
#include <flixel/addons/ui/interfaces/ILabeled.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_text__FlxText_FlxTextAlign_Impl_
#include <flixel/text/_FlxText/FlxTextAlign_Impl_.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBar
#include <flixel/ui/FlxBar.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBarFillDirection
#include <flixel/ui/FlxBarFillDirection.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton
#include <flixel/ui/FlxTypedButton.h>
#endif
#ifndef INCLUDED_flixel_util_FlxArrayUtil
#include <flixel/util/FlxArrayUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_xml_Fast
#include <haxe/xml/Fast.h>
#endif
#ifndef INCLUDED_haxe_xml_Printer
#include <haxe/xml/Printer.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_AttribAccess
#include <haxe/xml/_Fast/AttribAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_HasAttribAccess
#include <haxe/xml/_Fast/HasAttribAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_HasNodeAccess
#include <haxe/xml/_Fast/HasNodeAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_NodeAccess
#include <haxe/xml/_Fast/NodeAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_NodeListAccess
#include <haxe/xml/_Fast/NodeListAccess.h>
#endif
#ifndef INCLUDED_openfl__legacy_AssetType
#include <openfl/_legacy/AssetType.h>
#endif
#ifndef INCLUDED_openfl__legacy_Assets
#include <openfl/_legacy/Assets.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Point
#include <openfl/_legacy/geom/Point.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_TextFormat
#include <openfl/_legacy/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_56_new,"flixel.addons.ui.FlxUI","new",0x89fff7c7,"flixel.addons.ui.FlxUI.new","flixel/addons/ui/FlxUI.hx",56,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_70_get_isRoot,"flixel.addons.ui.FlxUI","get_isRoot",0x501fc66e,"flixel.addons.ui.FlxUI.get_isRoot","flixel/addons/ui/FlxUI.hx",70,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_80_get_tongue,"flixel.addons.ui.FlxUI","get_tongue",0x7aee5906,"flixel.addons.ui.FlxUI.get_tongue","flixel/addons/ui/FlxUI.hx",80,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_82_set_tongue,"flixel.addons.ui.FlxUI","set_tongue",0x7e6bf77a,"flixel.addons.ui.FlxUI.set_tongue","flixel/addons/ui/FlxUI.hx",82,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_89_set_focus,"flixel.addons.ui.FlxUI","set_focus",0xbe69d6e2,"flixel.addons.ui.FlxUI.set_focus","flixel/addons/ui/FlxUI.hx",89,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_120__tongueSet,"flixel.addons.ui.FlxUI","_tongueSet",0x62471f78,"flixel.addons.ui.FlxUI._tongueSet","flixel/addons/ui/FlxUI.hx",120,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_260_callEvent,"flixel.addons.ui.FlxUI","callEvent",0x94ea5143,"flixel.addons.ui.FlxUI.callEvent","flixel/addons/ui/FlxUI.hx",260,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_264_getEvent,"flixel.addons.ui.FlxUI","getEvent",0xd6447add,"flixel.addons.ui.FlxUI.getEvent","flixel/addons/ui/FlxUI.hx",264,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_283_getRequest,"flixel.addons.ui.FlxUI","getRequest",0x8a6908d2,"flixel.addons.ui.FlxUI.getRequest","flixel/addons/ui/FlxUI.hx",283,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_334_onFocus,"flixel.addons.ui.FlxUI","onFocus",0x59586520,"flixel.addons.ui.FlxUI.onFocus","flixel/addons/ui/FlxUI.hx",334,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_343_setWidgetSuppression,"flixel.addons.ui.FlxUI","setWidgetSuppression",0x343faf06,"flixel.addons.ui.FlxUI.setWidgetSuppression","flixel/addons/ui/FlxUI.hx",343,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_369_onFocusLost,"flixel.addons.ui.FlxUI","onFocusLost",0xfd524b24,"flixel.addons.ui.FlxUI.onFocusLost","flixel/addons/ui/FlxUI.hx",369,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_385_setSuperIndex,"flixel.addons.ui.FlxUI","setSuperIndex",0x53bc1800,"flixel.addons.ui.FlxUI.setSuperIndex","flixel/addons/ui/FlxUI.hx",385,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_388_update,"flixel.addons.ui.FlxUI","update",0x5c40b902,"flixel.addons.ui.FlxUI.update","flixel/addons/ui/FlxUI.hx",388,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_401_toggleShow,"flixel.addons.ui.FlxUI","toggleShow",0xda8bbe2a,"flixel.addons.ui.FlxUI.toggleShow","flixel/addons/ui/FlxUI.hx",401,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_421_showGroup,"flixel.addons.ui.FlxUI","showGroup",0x5b3f47a9,"flixel.addons.ui.FlxUI.showGroup","flixel/addons/ui/FlxUI.hx",421,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_438_showAsset,"flixel.addons.ui.FlxUI","showAsset",0xe783fe5a,"flixel.addons.ui.FlxUI.showAsset","flixel/addons/ui/FlxUI.hx",438,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_460_removeAsset,"flixel.addons.ui.FlxUI","removeAsset",0xe039ad73,"flixel.addons.ui.FlxUI.removeAsset","flixel/addons/ui/FlxUI.hx",460,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_481_addAsset,"flixel.addons.ui.FlxUI","addAsset",0xa03f3348,"flixel.addons.ui.FlxUI.addAsset","flixel/addons/ui/FlxUI.hx",481,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_518_replaceAsset,"flixel.addons.ui.FlxUI","replaceAsset",0xb0d588d5,"flixel.addons.ui.FlxUI.replaceAsset","flixel/addons/ui/FlxUI.hx",518,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_559_destroy,"flixel.addons.ui.FlxUI","destroy",0xe31793e1,"flixel.addons.ui.FlxUI.destroy","flixel/addons/ui/FlxUI.hx",559,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_617_load,"flixel.addons.ui.FlxUI","load",0x34adecdf,"flixel.addons.ui.FlxUI.load","flixel/addons/ui/FlxUI.hx",617,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_900_unparentXML,"flixel.addons.ui.FlxUI","unparentXML",0xc0cc07bb,"flixel.addons.ui.FlxUI.unparentXML","flixel/addons/ui/FlxUI.hx",900,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_904__loadPointSize,"flixel.addons.ui.FlxUI","_loadPointSize",0x3df8fe65,"flixel.addons.ui.FlxUI._loadPointSize","flixel/addons/ui/FlxUI.hx",904,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_928__loadSub,"flixel.addons.ui.FlxUI","_loadSub",0x43431fb4,"flixel.addons.ui.FlxUI._loadSub","flixel/addons/ui/FlxUI.hx",928,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_995__addTags,"flixel.addons.ui.FlxUI","_addTags",0xc394f454,"flixel.addons.ui.FlxUI._addTags","flixel/addons/ui/FlxUI.hx",995,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1012__loadGlobals,"flixel.addons.ui.FlxUI","_loadGlobals",0xe1eda5e4,"flixel.addons.ui.FlxUI._loadGlobals","flixel/addons/ui/FlxUI.hx",1012,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1031__postLoad,"flixel.addons.ui.FlxUI","_postLoad",0xe07320ac,"flixel.addons.ui.FlxUI._postLoad","flixel/addons/ui/FlxUI.hx",1031,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1067__sendTo,"flixel.addons.ui.FlxUI","_sendTo",0x988d3169,"flixel.addons.ui.FlxUI._sendTo","flixel/addons/ui/FlxUI.hx",1067,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1101_sendToFront,"flixel.addons.ui.FlxUI","sendToFront",0x18eb1f2d,"flixel.addons.ui.FlxUI.sendToFront","flixel/addons/ui/FlxUI.hx",1101,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1113_sendToBack,"flixel.addons.ui.FlxUI","sendToBack",0x0ea31023,"flixel.addons.ui.FlxUI.sendToBack","flixel/addons/ui/FlxUI.hx",1113,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1119_get_currMode,"flixel.addons.ui.FlxUI","get_currMode",0xd78f9337,"flixel.addons.ui.FlxUI.get_currMode","flixel/addons/ui/FlxUI.hx",1119,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1120_set_currMode,"flixel.addons.ui.FlxUI","set_currMode",0xec88b6ab,"flixel.addons.ui.FlxUI.set_currMode","flixel/addons/ui/FlxUI.hx",1120,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1129_setMode,"flixel.addons.ui.FlxUI","setMode",0xcc767b0c,"flixel.addons.ui.FlxUI.setMode","flixel/addons/ui/FlxUI.hx",1129,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1188_showThing,"flixel.addons.ui.FlxUI","showThing",0xd0d41c58,"flixel.addons.ui.FlxUI.showThing","flixel/addons/ui/FlxUI.hx",1188,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1258_getGroup,"flixel.addons.ui.FlxUI","getGroup",0xfa746602,"flixel.addons.ui.FlxUI.getGroup","flixel/addons/ui/FlxUI.hx",1258,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1268_getFlxText,"flixel.addons.ui.FlxUI","getFlxText",0x55e507c2,"flixel.addons.ui.FlxUI.getFlxText","flixel/addons/ui/FlxUI.hx",1268,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1281_getAllAssets,"flixel.addons.ui.FlxUI","getAllAssets",0xc0ca94c7,"flixel.addons.ui.FlxUI.getAllAssets","flixel/addons/ui/FlxUI.hx",1281,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1291_getAssetKeys,"flixel.addons.ui.FlxUI","getAssetKeys",0x52110047,"flixel.addons.ui.FlxUI.getAssetKeys","flixel/addons/ui/FlxUI.hx",1291,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1300_hasAsset,"flixel.addons.ui.FlxUI","hasAsset",0xb33a576f,"flixel.addons.ui.FlxUI.hasAsset","flixel/addons/ui/FlxUI.hx",1300,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1313_getAsset,"flixel.addons.ui.FlxUI","getAsset",0x86b91cb3,"flixel.addons.ui.FlxUI.getAsset","flixel/addons/ui/FlxUI.hx",1313,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1323_getAssetsWithTag,"flixel.addons.ui.FlxUI","getAssetsWithTag",0x2c689774,"flixel.addons.ui.FlxUI.getAssetsWithTag","flixel/addons/ui/FlxUI.hx",1323,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1350_getAssetGroup,"flixel.addons.ui.FlxUI","getAssetGroup",0x37c51d8c,"flixel.addons.ui.FlxUI.getAssetGroup","flixel/addons/ui/FlxUI.hx",1350,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1368_getMode,"flixel.addons.ui.FlxUI","getMode",0xd974ea00,"flixel.addons.ui.FlxUI.getMode","flixel/addons/ui/FlxUI.hx",1368,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1378_getLabelStyleFromDefinition,"flixel.addons.ui.FlxUI","getLabelStyleFromDefinition",0xade61a37,"flixel.addons.ui.FlxUI.getLabelStyleFromDefinition","flixel/addons/ui/FlxUI.hx",1378,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1392_getLabelStyleFromData,"flixel.addons.ui.FlxUI","getLabelStyleFromData",0x7750c7ce,"flixel.addons.ui.FlxUI.getLabelStyleFromData","flixel/addons/ui/FlxUI.hx",1392,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1401_checkVariable,"flixel.addons.ui.FlxUI","checkVariable",0xe5e77d4b,"flixel.addons.ui.FlxUI.checkVariable","flixel/addons/ui/FlxUI.hx",1401,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1415_setVariable,"flixel.addons.ui.FlxUI","setVariable",0x553a4265,"flixel.addons.ui.FlxUI.setVariable","flixel/addons/ui/FlxUI.hx",1415,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1419_getVariable,"flixel.addons.ui.FlxUI","getVariable",0x4acd3b59,"flixel.addons.ui.FlxUI.getVariable","flixel/addons/ui/FlxUI.hx",1419,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1429_getDefinition,"flixel.addons.ui.FlxUI","getDefinition",0xdd003ff0,"flixel.addons.ui.FlxUI.getDefinition","flixel/addons/ui/FlxUI.hx",1429,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1475_screenWidth,"flixel.addons.ui.FlxUI","screenWidth",0x3db46961,"flixel.addons.ui.FlxUI.screenWidth","flixel/addons/ui/FlxUI.hx",1475,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1484_screenHeight,"flixel.addons.ui.FlxUI","screenHeight",0x7677442c,"flixel.addons.ui.FlxUI.screenHeight","flixel/addons/ui/FlxUI.hx",1484,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1526_replaceInGroup,"flixel.addons.ui.FlxUI","replaceInGroup",0xb7beeb3f,"flixel.addons.ui.FlxUI.replaceInGroup","flixel/addons/ui/FlxUI.hx",1526,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1576_applyNodeConditionals,"flixel.addons.ui.FlxUI","applyNodeConditionals",0x57bfbe44,"flixel.addons.ui.FlxUI.applyNodeConditionals","flixel/addons/ui/FlxUI.hx",1576,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1601_applyNodeChanges,"flixel.addons.ui.FlxUI","applyNodeChanges",0x1f7e448c,"flixel.addons.ui.FlxUI.applyNodeChanges","flixel/addons/ui/FlxUI.hx",1601,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1659_loadThing,"flixel.addons.ui.FlxUI","loadThing",0xbda7028f,"flixel.addons.ui.FlxUI.loadThing","flixel/addons/ui/FlxUI.hx",1659,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1663__loadThingGetInfo,"flixel.addons.ui.FlxUI","_loadThingGetInfo",0x7a50a522,"flixel.addons.ui.FlxUI._loadThingGetInfo","flixel/addons/ui/FlxUI.hx",1663,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1701__loadTooltip,"flixel.addons.ui.FlxUI","_loadTooltip",0x38414d37,"flixel.addons.ui.FlxUI._loadTooltip","flixel/addons/ui/FlxUI.hx",1701,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1717__loadTooltipData,"flixel.addons.ui.FlxUI","_loadTooltipData",0x9fb23701,"flixel.addons.ui.FlxUI._loadTooltipData","flixel/addons/ui/FlxUI.hx",1717,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1785__loadTooltipStyle,"flixel.addons.ui.FlxUI","_loadTooltipStyle",0xcbd3807a,"flixel.addons.ui.FlxUI._loadTooltipStyle","flixel/addons/ui/FlxUI.hx",1785,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1810__loadTooltipText,"flixel.addons.ui.FlxUI","_loadTooltipText",0xaa48ad84,"flixel.addons.ui.FlxUI._loadTooltipText","flixel/addons/ui/FlxUI.hx",1810,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1859__loadAnchor,"flixel.addons.ui.FlxUI","_loadAnchor",0xa3f29cc1,"flixel.addons.ui.FlxUI._loadAnchor","flixel/addons/ui/FlxUI.hx",1859,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1873__loadThing,"flixel.addons.ui.FlxUI","_loadThing",0x7ce5f322,"flixel.addons.ui.FlxUI._loadThing","flixel/addons/ui/FlxUI.hx",1873,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1933__loadX,"flixel.addons.ui.FlxUI","_loadX",0x4a11c1ac,"flixel.addons.ui.FlxUI._loadX","flixel/addons/ui/FlxUI.hx",1933,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1938__loadY,"flixel.addons.ui.FlxUI","_loadY",0x4a11c1ad,"flixel.addons.ui.FlxUI._loadY","flixel/addons/ui/FlxUI.hx",1938,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1943__loadScale,"flixel.addons.ui.FlxUI","_loadScale",0xe62b39be,"flixel.addons.ui.FlxUI._loadScale","flixel/addons/ui/FlxUI.hx",1943,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1948__loadScaleX,"flixel.addons.ui.FlxUI","_loadScaleX",0x7fa74cda,"flixel.addons.ui.FlxUI._loadScaleX","flixel/addons/ui/FlxUI.hx",1948,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1953__loadScaleY,"flixel.addons.ui.FlxUI","_loadScaleY",0x7fa74cdb,"flixel.addons.ui.FlxUI._loadScaleY","flixel/addons/ui/FlxUI.hx",1953,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1957__loadWidth,"flixel.addons.ui.FlxUI","_loadWidth",0x37bf213a,"flixel.addons.ui.FlxUI._loadWidth","flixel/addons/ui/FlxUI.hx",1957,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1964__loadHeight,"flixel.addons.ui.FlxUI","_loadHeight",0x45cd6a33,"flixel.addons.ui.FlxUI._loadHeight","flixel/addons/ui/FlxUI.hx",1964,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1971__loadCompass,"flixel.addons.ui.FlxUI","_loadCompass",0x511db9c6,"flixel.addons.ui.FlxUI._loadCompass","flixel/addons/ui/FlxUI.hx",1971,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1989__changeParamsThing,"flixel.addons.ui.FlxUI","_changeParamsThing",0x3feee472,"flixel.addons.ui.FlxUI._changeParamsThing","flixel/addons/ui/FlxUI.hx",1989,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2005__changeThing,"flixel.addons.ui.FlxUI","_changeThing",0x32661218,"flixel.addons.ui.FlxUI._changeThing","flixel/addons/ui/FlxUI.hx",2005,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2069__alignThing,"flixel.addons.ui.FlxUI","_alignThing",0x37322a6f,"flixel.addons.ui.FlxUI._alignThing","flixel/addons/ui/FlxUI.hx",2069,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2157__doAlign,"flixel.addons.ui.FlxUI","_doAlign",0x8f1f33f4,"flixel.addons.ui.FlxUI._doAlign","flixel/addons/ui/FlxUI.hx",2157,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2271__checkFailure,"flixel.addons.ui.FlxUI","_checkFailure",0x7b6fc968,"flixel.addons.ui.FlxUI._checkFailure","flixel/addons/ui/FlxUI.hx",2271,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2335__resizeThing,"flixel.addons.ui.FlxUI","_resizeThing",0x4ba3eb14,"flixel.addons.ui.FlxUI._resizeThing","flixel/addons/ui/FlxUI.hx",2335,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2362__postLoadThing,"flixel.addons.ui.FlxUI","_postLoadThing",0x7251e7a2,"flixel.addons.ui.FlxUI._postLoadThing","flixel/addons/ui/FlxUI.hx",2362,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2479__loadTileTest,"flixel.addons.ui.FlxUI","_loadTileTest",0xb7577bec,"flixel.addons.ui.FlxUI._loadTileTest","flixel/addons/ui/FlxUI.hx",2479,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2521__loadString,"flixel.addons.ui.FlxUI","_loadString",0x54b18b1d,"flixel.addons.ui.FlxUI._loadString","flixel/addons/ui/FlxUI.hx",2521,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2530__loadText,"flixel.addons.ui.FlxUI","_loadText",0x9815c3f9,"flixel.addons.ui.FlxUI._loadText","flixel/addons/ui/FlxUI.hx",2530,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2584__loadInputText,"flixel.addons.ui.FlxUI","_loadInputText",0x30689f0b,"flixel.addons.ui.FlxUI._loadInputText","flixel/addons/ui/FlxUI.hx",2584,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2739__loadRadioGroup,"flixel.addons.ui.FlxUI","_loadRadioGroup",0x22b21c90,"flixel.addons.ui.FlxUI._loadRadioGroup","flixel/addons/ui/FlxUI.hx",2739,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2906__loadCheckBox,"flixel.addons.ui.FlxUI","_loadCheckBox",0xdd35176f,"flixel.addons.ui.FlxUI._loadCheckBox","flixel/addons/ui/FlxUI.hx",2906,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2991__loadDropDownMenu,"flixel.addons.ui.FlxUI","_loadDropDownMenu",0xfcc3a1bc,"flixel.addons.ui.FlxUI._loadDropDownMenu","flixel/addons/ui/FlxUI.hx",2991,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3103__loadTest,"flixel.addons.ui.FlxUI","_loadTest",0x9815bf9e,"flixel.addons.ui.FlxUI._loadTest","flixel/addons/ui/FlxUI.hx",3103,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3152__loadTestSub,"flixel.addons.ui.FlxUI","_loadTestSub",0x8b7ab882,"flixel.addons.ui.FlxUI._loadTestSub","flixel/addons/ui/FlxUI.hx",3152,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3242_parseVarValue,"flixel.addons.ui.FlxUI","parseVarValue",0x5226f084,"flixel.addons.ui.FlxUI.parseVarValue","flixel/addons/ui/FlxUI.hx",3242,0xf354486a)
static const ::String _hx_array_data_e9110855_177[] = {
	HX_("==",60,35,00,00),HX_("=",3d,00,00,00),HX_("!=",fc,1c,00,00),HX_("!==",c1,3f,19,00),HX_("<",3c,00,00,00),HX_(">",3e,00,00,00),HX_("<=",81,34,00,00),HX_(">=",3f,36,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3260__loadLayout,"flixel.addons.ui.FlxUI","_loadLayout",0x9c3a10f6,"flixel.addons.ui.FlxUI._loadLayout","flixel/addons/ui/FlxUI.hx",3260,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3272_addToCleanup,"flixel.addons.ui.FlxUI","addToCleanup",0x71379941,"flixel.addons.ui.FlxUI.addToCleanup","flixel/addons/ui/FlxUI.hx",3272,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3282_addToScaledAssets,"flixel.addons.ui.FlxUI","addToScaledAssets",0xf5176080,"flixel.addons.ui.FlxUI.addToScaledAssets","flixel/addons/ui/FlxUI.hx",3282,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3289_cleanup,"flixel.addons.ui.FlxUI","cleanup",0x69d3730b,"flixel.addons.ui.FlxUI.cleanup","flixel/addons/ui/FlxUI.hx",3289,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3300_createUI,"flixel.addons.ui.FlxUI","createUI",0x2c9d0b89,"flixel.addons.ui.FlxUI.createUI","flixel/addons/ui/FlxUI.hx",3300,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3303__loadTabMenu,"flixel.addons.ui.FlxUI","_loadTabMenu",0x0e83bac8,"flixel.addons.ui.FlxUI._loadTabMenu","flixel/addons/ui/FlxUI.hx",3303,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3428__loadNumericStepper,"flixel.addons.ui.FlxUI","_loadNumericStepper",0x27747c10,"flixel.addons.ui.FlxUI._loadNumericStepper","flixel/addons/ui/FlxUI.hx",3428,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3487_getResizeRatio,"flixel.addons.ui.FlxUI","getResizeRatio",0x06525d7a,"flixel.addons.ui.FlxUI.getResizeRatio","flixel/addons/ui/FlxUI.hx",3487,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3516__loadButton,"flixel.addons.ui.FlxUI","_loadButton",0x1d61c43e,"flixel.addons.ui.FlxUI._loadButton","flixel/addons/ui/FlxUI.hx",3516,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3875__loadRegion,"flixel.addons.ui.FlxUI","_loadRegion",0x440e2340,"flixel.addons.ui.FlxUI._loadRegion","flixel/addons/ui/FlxUI.hx",3875,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3895__load9SliceSprite,"flixel.addons.ui.FlxUI","_load9SliceSprite",0xb0d2f56a,"flixel.addons.ui.FlxUI._load9SliceSprite","flixel/addons/ui/FlxUI.hx",3895,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3976_load9SliceSprite_scaleSub,"flixel.addons.ui.FlxUI","load9SliceSprite_scaleSub",0x6f4e4338,"flixel.addons.ui.FlxUI.load9SliceSprite_scaleSub","flixel/addons/ui/FlxUI.hx",3976,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4013__loadTileRule,"flixel.addons.ui.FlxUI","_loadTileRule",0xb6112c96,"flixel.addons.ui.FlxUI._loadTileRule","flixel/addons/ui/FlxUI.hx",4013,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4025__loadBox,"flixel.addons.ui.FlxUI","_loadBox",0x4336343f,"flixel.addons.ui.FlxUI._loadBox","flixel/addons/ui/FlxUI.hx",4025,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4072__loadLine,"flixel.addons.ui.FlxUI","_loadLine",0x92cf0f40,"flixel.addons.ui.FlxUI._loadLine","flixel/addons/ui/FlxUI.hx",4072,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4113__loadBar,"flixel.addons.ui.FlxUI","_loadBar",0x43362807,"flixel.addons.ui.FlxUI._loadBar","flixel/addons/ui/FlxUI.hx",4113,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4215__loadSprite,"flixel.addons.ui.FlxUI","_loadSprite",0x07173e51,"flixel.addons.ui.FlxUI._loadSprite","flixel/addons/ui/FlxUI.hx",4215,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4294_loadSmooth,"flixel.addons.ui.FlxUI","loadSmooth",0xb318da6d,"flixel.addons.ui.FlxUI.loadSmooth","flixel/addons/ui/FlxUI.hx",4294,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4311_loadScaledSrc,"flixel.addons.ui.FlxUI","loadScaledSrc",0x51d86f8b,"flixel.addons.ui.FlxUI.loadScaledSrc","flixel/addons/ui/FlxUI.hx",4311,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4412_thisWidth,"flixel.addons.ui.FlxUI","thisWidth",0xcbb0796f,"flixel.addons.ui.FlxUI.thisWidth","flixel/addons/ui/FlxUI.hx",4412,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4420_thisHeight,"flixel.addons.ui.FlxUI","thisHeight",0x2509405e,"flixel.addons.ui.FlxUI.thisHeight","flixel/addons/ui/FlxUI.hx",4420,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4427__getAnchorPos,"flixel.addons.ui.FlxUI","_getAnchorPos",0xe6674faf,"flixel.addons.ui.FlxUI._getAnchorPos","flixel/addons/ui/FlxUI.hx",4427,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4462_getRound,"flixel.addons.ui.FlxUI","getRound",0x4de5ab11,"flixel.addons.ui.FlxUI.getRound","flixel/addons/ui/FlxUI.hx",4462,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4478_doRound,"flixel.addons.ui.FlxUI","doRound",0xdf243faa,"flixel.addons.ui.FlxUI.doRound","flixel/addons/ui/FlxUI.hx",4478,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4489_calcMaxMinSize,"flixel.addons.ui.FlxUI","calcMaxMinSize",0x437b661d,"flixel.addons.ui.FlxUI.calcMaxMinSize","flixel/addons/ui/FlxUI.hx",4489,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4578__getDataSize,"flixel.addons.ui.FlxUI","_getDataSize",0xaed2247b,"flixel.addons.ui.FlxUI._getDataSize","flixel/addons/ui/FlxUI.hx",4578,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4656__getOperation,"flixel.addons.ui.FlxUI","_getOperation",0x2685c1b7,"flixel.addons.ui.FlxUI._getOperation","flixel/addons/ui/FlxUI.hx",4656,0xf354486a)
static const ::String _hx_array_data_e9110855_239[] = {
	HX_("+",2b,00,00,00),HX_("-",2d,00,00,00),HX_("*",2a,00,00,00),HX_("/",2f,00,00,00),HX_("^",5e,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4723__doOperation,"flixel.addons.ui.FlxUI","_doOperation",0xf65624d6,"flixel.addons.ui.FlxUI._doOperation","flixel/addons/ui/FlxUI.hx",4723,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4736__getStretch,"flixel.addons.ui.FlxUI","_getStretch",0xd40af795,"flixel.addons.ui.FlxUI._getStretch","flixel/addons/ui/FlxUI.hx",4736,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4775_getAssetProperty,"flixel.addons.ui.FlxUI","getAssetProperty",0xd3eb8c28,"flixel.addons.ui.FlxUI.getAssetProperty","flixel/addons/ui/FlxUI.hx",4775,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4875__loadCursor,"flixel.addons.ui.FlxUI","_loadCursor",0x8269f122,"flixel.addons.ui.FlxUI._loadCursor","flixel/addons/ui/FlxUI.hx",4875,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4903__loadPosition,"flixel.addons.ui.FlxUI","_loadPosition",0xfb522df5,"flixel.addons.ui.FlxUI._loadPosition","flixel/addons/ui/FlxUI.hx",4903,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5007__loadBorder,"flixel.addons.ui.FlxUI","_loadBorder",0xa79baf38,"flixel.addons.ui.FlxUI._loadBorder","flixel/addons/ui/FlxUI.hx",5007,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5019__loadColor,"flixel.addons.ui.FlxUI","_loadColor",0xb7b8dc97,"flixel.addons.ui.FlxUI._loadColor","flixel/addons/ui/FlxUI.hx",5019,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5029__loadFontDef,"flixel.addons.ui.FlxUI","_loadFontDef",0x63d37f6a,"flixel.addons.ui.FlxUI._loadFontDef","flixel/addons/ui/FlxUI.hx",5029,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5037__loadFontFace,"flixel.addons.ui.FlxUI","_loadFontFace",0xf68b5f58,"flixel.addons.ui.FlxUI._loadFontFace","flixel/addons/ui/FlxUI.hx",5037,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5047__onFinishLoad,"flixel.addons.ui.FlxUI","_onFinishLoad",0x23246f1e,"flixel.addons.ui.FlxUI._onFinishLoad","flixel/addons/ui/FlxUI.hx",5047,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5055_getText,"flixel.addons.ui.FlxUI","getText",0xde0de34a,"flixel.addons.ui.FlxUI.getText","flixel/addons/ui/FlxUI.hx",5055,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5068_formatFromCode,"flixel.addons.ui.FlxUI","formatFromCode",0x3be1ae07,"flixel.addons.ui.FlxUI.formatFromCode","flixel/addons/ui/FlxUI.hx",5068,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5135_formatButtonText,"flixel.addons.ui.FlxUI","formatButtonText",0xeca59e0f,"flixel.addons.ui.FlxUI.formatButtonText","flixel/addons/ui/FlxUI.hx",5135,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_141_event,"flixel.addons.ui.FlxUI","event",0xe056d741,"flixel.addons.ui.FlxUI.event","flixel/addons/ui/FlxUI.hx",141,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_159_fontStr,"flixel.addons.ui.FlxUI","fontStr",0x54bbb509,"flixel.addons.ui.FlxUI.fontStr","flixel/addons/ui/FlxUI.hx",159,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_173_fontSize,"flixel.addons.ui.FlxUI","fontSize",0xcf7a6169,"flixel.addons.ui.FlxUI.fontSize","flixel/addons/ui/FlxUI.hx",173,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_188_font,"flixel.addons.ui.FlxUI","font",0x30b6b088,"flixel.addons.ui.FlxUI.font","flixel/addons/ui/FlxUI.hx",188,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_196___getTongue,"flixel.addons.ui.FlxUI","__getTongue",0xfa337e41,"flixel.addons.ui.FlxUI.__getTongue","flixel/addons/ui/FlxUI.hx",196,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_212_forceFocus,"flixel.addons.ui.FlxUI","forceFocus",0x91e0ed66,"flixel.addons.ui.FlxUI.forceFocus","flixel/addons/ui/FlxUI.hx",212,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_224_getLeafUIState,"flixel.addons.ui.FlxUI","getLeafUIState",0xebda1e42,"flixel.addons.ui.FlxUI.getLeafUIState","flixel/addons/ui/FlxUI.hx",224,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_249_request,"flixel.addons.ui.FlxUI","request",0x03164636,"flixel.addons.ui.FlxUI.request","flixel/addons/ui/FlxUI.hx",249,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1456__delta,"flixel.addons.ui.FlxUI","_delta",0xa8496232,"flixel.addons.ui.FlxUI._delta","flixel/addons/ui/FlxUI.hx",1456,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1468__center,"flixel.addons.ui.FlxUI","_center",0x32e39e5b,"flixel.addons.ui.FlxUI._center","flixel/addons/ui/FlxUI.hx",1468,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2671_consolidateData,"flixel.addons.ui.FlxUI","consolidateData",0x9bb7ebba,"flixel.addons.ui.FlxUI.consolidateData","flixel/addons/ui/FlxUI.hx",2671,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3866__loadBitmapRect,"flixel.addons.ui.FlxUI","_loadBitmapRect",0xdc5324ff,"flixel.addons.ui.FlxUI._loadBitmapRect","flixel/addons/ui/FlxUI.hx",3866,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5084_getParams,"flixel.addons.ui.FlxUI","getParams",0xfcb7b323,"flixel.addons.ui.FlxUI.getParams","flixel/addons/ui/FlxUI.hx",5084,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5128_sortParams,"flixel.addons.ui.FlxUI","sortParams",0x40e314bd,"flixel.addons.ui.FlxUI.sortParams","flixel/addons/ui/FlxUI.hx",5128,0xf354486a)
namespace flixel{
namespace addons{
namespace ui{

void FlxUI_obj::__construct( ::haxe::xml::Fast data,::Dynamic ptr, ::flixel::addons::ui::FlxUI superIndex_,::Dynamic tongue_,::String __o_liveFilePath_, ::haxe::ds::StringMap uiVars_){
::String liveFilePath_ = __o_liveFilePath_.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_56_new)
HXLINE(1517)		this->_scaledAssets = ::Array_obj< ::String >::__new(0);
HXLINE(1516)		this->_assetsToCleanUp = ::Array_obj< ::String >::__new(0);
HXLINE(1512)		this->_safe_input_delay_elapsed = ((Float)0.0);
HXLINE(1507)		this->_curr_mode = HX_("",00,00,00,00);
HXLINE(1498)		this->_pointY = ((Float)1);
HXLINE(1497)		this->_pointX = ((Float)1);
HXLINE(1495)		this->_postLoaded = false;
HXLINE( 110)		this->cursorLists = null();
HXLINE( 101)		this->getTextFallback = null();
HXLINE(  64)		this->failed_by = ((Float)0);
HXLINE(  63)		this->failed = false;
HXLINE(  61)		this->safe_input_delay_time = ((Float)0.01);
HXLINE(  60)		this->do_safe_input_delay = true;
HXLINE( 304)		super::__construct(null(),null());
HXLINE( 305)		this->_ptr_tongue = tongue_;
HXLINE( 313)		this->_ptr = ptr;
HXLINE( 314)		if (hx::IsNotNull( superIndex_ )) {
HXLINE( 315)			this->setSuperIndex(superIndex_);
            		}
HXLINE( 319)		if (hx::IsNotNull( uiVars_ )) {
HXLINE( 321)			this->_variable_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 322)			{
HXLINE( 322)				 ::Dynamic key = uiVars_->keys();
HXDLIN( 322)				while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 322)					::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 324)					::Dynamic this1 = this->_variable_index;
HXDLIN( 324)					( ( ::haxe::ds::StringMap)(this1) )->set(key1,( (::String)(uiVars_->get(key1)) ));
            				}
            			}
            		}
HXLINE( 328)		if (hx::IsNotNull( data )) {
HXLINE( 329)			this->load(data);
            		}
            	}

Dynamic FlxUI_obj::__CreateEmpty() { return new FlxUI_obj; }

void *FlxUI_obj::_hx_vtable = 0;

Dynamic FlxUI_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxUI_obj > _hx_result = new FlxUI_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool FlxUI_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x263b73ac) {
		if (inClassId<=(int)0x25a685e0) {
			if (inClassId<=(int)0x0b6ffd77) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
			} else {
				return inClassId==(int)0x25a685e0;
			}
		} else {
			return inClassId==(int)0x263b73ac;
		}
	} else {
		if (inClassId<=(int)0x2e105115) {
			return inClassId==(int)0x282173df || inClassId==(int)0x2e105115;
		} else {
			return inClassId==(int)0x54c34e23;
		}
	}
}

static ::flixel::addons::ui::interfaces::IEventGetter_obj _hx_flixel_addons_ui_FlxUI__hx_flixel_addons_ui_interfaces_IEventGetter= {
	( void (hx::Object::*)(::String,::Dynamic, ::Dynamic,::cpp::VirtualArray))&::flixel::addons::ui::FlxUI_obj::getEvent,
	(  ::Dynamic (hx::Object::*)(::String,::Dynamic, ::Dynamic,::cpp::VirtualArray))&::flixel::addons::ui::FlxUI_obj::getRequest,
};

void *FlxUI_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xdcf9e4f9: return &_hx_flixel_addons_ui_FlxUI__hx_flixel_addons_ui_interfaces_IEventGetter;
	}
	return super::_hx_getInterface(inHash);
}

bool FlxUI_obj::get_isRoot(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_70_get_isRoot)
HXDLIN(  70)		if (hx::IsNotNull( this->_ptr )) {
HXDLIN(  70)			::Dynamic _hx_tmp = this->_ptr;
HXDLIN(  70)			return hx::IsEq( _hx_tmp,::flixel::addons::ui::FlxUI_obj::getLeafUIState() );
            		}
            		else {
HXDLIN(  70)			return false;
            		}
HXDLIN(  70)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,get_isRoot,return )

::Dynamic FlxUI_obj::get_tongue(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_80_get_tongue)
HXDLIN(  80)		return this->_ptr_tongue;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,get_tongue,return )

::Dynamic FlxUI_obj::set_tongue(::Dynamic t){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_82_set_tongue)
HXLINE(  83)		this->_ptr_tongue = t;
HXLINE(  84)		this->_tongueSet(this->group->members,t);
HXLINE(  85)		return this->_ptr_tongue;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,set_tongue,return )

::Dynamic FlxUI_obj::set_focus(::Dynamic widget){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_89_set_focus)
HXLINE(  90)		if (hx::IsNotNull( this->focus )) {
HXLINE(  91)			this->onFocusLost(this->focus);
            		}
HXLINE(  93)		this->focus = widget;
HXLINE(  94)		if (hx::IsNotNull( this->focus )) {
HXLINE(  95)			this->onFocus(this->focus);
            		}
HXLINE(  97)		return widget;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,set_focus,return )

void FlxUI_obj::_tongueSet(::Array< ::Dynamic> list,::Dynamic tongue){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_120__tongueSet)
HXDLIN( 120)		int _g = (int)0;
HXDLIN( 120)		while((_g < list->length)){
HXDLIN( 120)			 ::flixel::FlxSprite fs = list->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 120)			_g = (_g + (int)1);
HXLINE( 121)			if (::Std_obj::is(fs,hx::ClassOf< ::flixel::addons::ui::FlxUIGroup >())) {
HXLINE( 122)				 ::flixel::addons::ui::FlxUIGroup g = hx::TCast<  ::flixel::addons::ui::FlxUIGroup >::cast(fs);
HXLINE( 123)				this->_tongueSet(g->group->members,tongue);
            			}
            			else {
HXLINE( 124)				if (::Std_obj::is(fs,hx::ClassOf< ::flixel::addons::ui::FlxUI >())) {
HXLINE( 125)					 ::flixel::addons::ui::FlxUI fu = hx::TCast<  ::flixel::addons::ui::FlxUI >::cast(fs);
HXLINE( 126)					fu->set_tongue(tongue);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_tongueSet,(void))

void FlxUI_obj::callEvent(::String name,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_260_callEvent)
HXDLIN( 260)		this->getEvent(name,sender,data,params);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,callEvent,(void))

void FlxUI_obj::getEvent(::String name,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_264_getEvent)
HXDLIN( 264)		if (hx::IsNotNull( this->_ptr )) {
HXLINE( 266)			::flixel::addons::ui::interfaces::IEventGetter_obj::getEvent(this->_ptr,name,sender,data,params);
HXLINE( 267)			if ((name == HX_("post_load",a5,55,d0,20))) {
HXLINE( 270)				 ::Dynamic key = ::haxe::IMap_obj::keys(this->_asset_index);
HXDLIN( 270)				while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 270)					::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 272)					::Dynamic thing = ::haxe::IMap_obj::get(this->_asset_index,key1);
HXLINE( 273)					if (::Std_obj::is(thing,hx::ClassOf< ::flixel::addons::ui::FlxUI >())) {
HXLINE( 275)						 ::flixel::addons::ui::FlxUI fui = ( ( ::flixel::addons::ui::FlxUI)(thing) );
HXLINE( 276)						fui->getEvent(HX_("post_load",a5,55,d0,20),sender,data,null());
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,getEvent,(void))

 ::Dynamic FlxUI_obj::getRequest(::String name,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_283_getRequest)
HXLINE( 284)		if (hx::IsNotNull( this->_ptr )) {
HXLINE( 285)			return ::flixel::addons::ui::interfaces::IEventGetter_obj::getRequest(this->_ptr,name,sender,data,params);
            		}
HXLINE( 287)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,getRequest,return )

void FlxUI_obj::onFocus(::Dynamic widget){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_334_onFocus)
HXDLIN( 334)		if (::Std_obj::is(widget,hx::ClassOf< ::flixel::addons::ui::FlxUIDropDownMenu >())) {
HXLINE( 336)			int _g = (int)0;
HXDLIN( 336)			::Array< ::Dynamic> _g1 = this->group->members;
HXDLIN( 336)			while((_g < _g1->length)){
HXLINE( 336)				 ::flixel::FlxSprite asset = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 336)				_g = (_g + (int)1);
HXLINE( 337)				this->setWidgetSuppression(asset,widget,null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,onFocus,(void))

void FlxUI_obj::setWidgetSuppression( ::flixel::FlxSprite asset,::Dynamic butNotThisOne,hx::Null< bool >  __o_suppressed){
bool suppressed = __o_suppressed.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_343_setWidgetSuppression)
HXDLIN( 343)		if (::Std_obj::is(asset,hx::ClassOf< ::flixel::addons::ui::interfaces::IFlxUIClickable >())) {
HXLINE( 344)			bool skip = false;
HXLINE( 345)			if (::Std_obj::is(asset,hx::ClassOf< ::flixel::addons::ui::FlxUIDropDownMenu >())) {
HXLINE( 346)				 ::flixel::addons::ui::FlxUIDropDownMenu ddasset = ( ( ::flixel::addons::ui::FlxUIDropDownMenu)(asset) );
HXLINE( 347)				if (hx::IsEq( ddasset,butNotThisOne )) {
HXLINE( 348)					skip = true;
            				}
            			}
HXLINE( 351)			if (!(skip)) {
HXLINE( 352)				::Dynamic ibtn = asset;
HXLINE( 353)				::flixel::addons::ui::interfaces::IFlxUIClickable_obj::set_skipButtonUpdate(ibtn,suppressed);
            			}
            		}
            		else {
HXLINE( 355)			if (::Std_obj::is(asset,hx::ClassOf< ::flixel::addons::ui::FlxUIGroup >())) {
HXLINE( 356)				 ::flixel::addons::ui::FlxUIGroup g = ( ( ::flixel::addons::ui::FlxUIGroup)(asset) );
HXLINE( 357)				{
HXLINE( 357)					int _g = (int)0;
HXDLIN( 357)					::Array< ::Dynamic> _g1 = g->group->members;
HXDLIN( 357)					while((_g < _g1->length)){
HXLINE( 357)						 ::flixel::FlxSprite groupAsset = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 357)						_g = (_g + (int)1);
HXLINE( 358)						this->setWidgetSuppression(groupAsset,butNotThisOne,suppressed);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,setWidgetSuppression,(void))

void FlxUI_obj::onFocusLost(::Dynamic widget){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_369_onFocusLost)
HXDLIN( 369)		if (::Std_obj::is(widget,hx::ClassOf< ::flixel::addons::ui::FlxUIDropDownMenu >())) {
HXLINE( 373)			int _g = (int)0;
HXDLIN( 373)			::Array< ::Dynamic> _g1 = this->group->members;
HXDLIN( 373)			while((_g < _g1->length)){
HXLINE( 373)				 ::flixel::FlxSprite asset = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 373)				_g = (_g + (int)1);
HXLINE( 374)				this->setWidgetSuppression(asset,null(),false);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,onFocusLost,(void))

void FlxUI_obj::setSuperIndex( ::flixel::addons::ui::FlxUI flxUI){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_385_setSuperIndex)
HXDLIN( 385)		this->_superIndexUI = flxUI;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,setSuperIndex,(void))

void FlxUI_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_388_update)
HXLINE( 389)		if (this->do_safe_input_delay) {
HXLINE( 390)			 ::flixel::addons::ui::FlxUI _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 390)			_hx_tmp->_safe_input_delay_elapsed = (_hx_tmp->_safe_input_delay_elapsed + ::flixel::FlxG_obj::elapsed);
HXLINE( 391)			if ((this->_safe_input_delay_elapsed > this->safe_input_delay_time)) {
HXLINE( 392)				this->do_safe_input_delay = false;
            			}
            			else {
HXLINE( 394)				return;
            			}
            		}
HXLINE( 397)		this->super::update(elapsed);
            	}


bool FlxUI_obj::toggleShow(::String key){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_401_toggleShow)
HXLINE( 402)		::Dynamic thing = this->getAsset(key,false);
HXLINE( 403)		if (hx::IsNull( thing )) {
HXLINE( 405)			 ::flixel::addons::ui::FlxUIGroup group = this->getGroup(key,false);
HXLINE( 406)			if (hx::IsNotNull( group )) {
HXLINE( 408)				group->set_visible(!(group->visible));
HXLINE( 409)				return group->visible;
            			}
            		}
            		else {
HXLINE( 414)			::flixel::IFlxBasic_obj::set_visible(thing,!(( (bool)(thing->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) )));
HXLINE( 415)			return ( (bool)(thing->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) );
            		}
HXLINE( 417)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,toggleShow,return )

void FlxUI_obj::showGroup(::String key,bool Show, ::Dynamic Active){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_421_showGroup)
HXLINE( 422)		 ::flixel::addons::ui::FlxUIGroup group = this->getGroup(key,false);
HXLINE( 423)		if (hx::IsNotNull( group )) {
HXLINE( 425)			group->set_visible(Show);
HXLINE( 426)			if (hx::IsNull( Active )) {
HXLINE( 428)				group->set_active(Show);
            			}
            			else {
HXLINE( 432)				group->set_active(Active);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,showGroup,(void))

void FlxUI_obj::showAsset(::String key,bool Show, ::Dynamic Active){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_438_showAsset)
HXLINE( 439)		::Dynamic asset = this->getAsset(key,false);
HXLINE( 440)		if (hx::IsNotNull( asset )) {
HXLINE( 441)			::flixel::IFlxBasic_obj::set_visible(asset,Show);
HXLINE( 442)			if (hx::IsNull( Active )) {
HXLINE( 444)				::flixel::IFlxBasic_obj::set_active(asset,Show);
            			}
            			else {
HXLINE( 448)				::flixel::IFlxBasic_obj::set_active(asset,Active);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,showAsset,(void))

::Dynamic FlxUI_obj::removeAsset(::String key,hx::Null< bool >  __o_destroy){
bool destroy = __o_destroy.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_460_removeAsset)
HXLINE( 461)		::Dynamic asset = this->getAsset(key,false);
HXLINE( 462)		if (hx::IsNotNull( asset )) {
HXLINE( 463)			this->replaceInGroup(( ( ::flixel::FlxSprite)(asset) ),null(),true);
HXLINE( 464)			this->_asset_index->remove(key);
            		}
HXLINE( 466)		bool _hx_tmp;
HXDLIN( 466)		if (destroy) {
HXLINE( 466)			_hx_tmp = hx::IsNotNull( asset );
            		}
            		else {
HXLINE( 466)			_hx_tmp = false;
            		}
HXDLIN( 466)		if (_hx_tmp) {
HXLINE( 467)			::flixel::IFlxBasic_obj::destroy(asset);
HXLINE( 468)			asset = null();
            		}
HXLINE( 470)		return asset;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,removeAsset,return )

bool FlxUI_obj::addAsset(::Dynamic asset,::String key,::String __o_group_name,hx::Null< bool >  __o_recursive){
::String group_name = __o_group_name.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
bool recursive = __o_recursive.Default(false);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_481_addAsset)
HXLINE( 482)		if (this->_asset_index->exists(key)) {
HXLINE( 484)			if ((key == HX_("screen",6c,3b,5d,47))) {
HXLINE( 486)				 ::flixel::_hx_system::frontEnds::LogFrontEnd _this = ::flixel::FlxG_obj::log;
            			}
            			else {
HXLINE( 490)				 ::flixel::_hx_system::frontEnds::LogFrontEnd _this1 = ::flixel::FlxG_obj::log;
            			}
HXLINE( 492)			return false;
            		}
HXLINE( 495)		 ::flixel::addons::ui::FlxUIGroup g = this->getGroup(group_name,recursive);
HXLINE( 496)		if (hx::IsNotNull( g )) {
HXLINE( 498)			g->add(( ( ::flixel::FlxSprite)(asset) )).StaticCast<  ::flixel::FlxSprite >();
            		}
            		else {
HXLINE( 502)			this->add(( ( ::flixel::FlxSprite)(asset) ));
            		}
HXLINE( 505)		this->_asset_index->set(key,asset);
HXLINE( 507)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,addAsset,return )

::Dynamic FlxUI_obj::replaceAsset(::String key,::Dynamic replace,hx::Null< bool >  __o_center_x,hx::Null< bool >  __o_center_y,hx::Null< bool >  __o_destroy_old){
bool center_x = __o_center_x.Default(true);
bool center_y = __o_center_y.Default(true);
bool destroy_old = __o_destroy_old.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_518_replaceAsset)
HXLINE( 520)		::Dynamic original = this->getAsset(key,false);
HXLINE( 522)		if (hx::IsNotNull( original )) {
HXLINE( 524)			if (!(center_x)) {
HXLINE( 525)				::flixel::IFlxSprite_obj::set_x(replace, ::Dynamic(original->__Field(HX_("x",78,00,00,00),hx::paccDynamic)));
            			}
            			else {
HXLINE( 527)				Float original1 = ( (Float)(original->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 527)				Float _hx_tmp = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(original);
HXDLIN( 527)				::flixel::IFlxSprite_obj::set_x(replace,(original1 + ((Float)(_hx_tmp - ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(replace)) / (Float)(int)2)));
            			}
HXLINE( 529)			if (!(center_y)) {
HXLINE( 530)				::flixel::IFlxSprite_obj::set_y(replace, ::Dynamic(original->__Field(HX_("y",79,00,00,00),hx::paccDynamic)));
            			}
            			else {
HXLINE( 532)				Float original2 = ( (Float)(original->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 532)				Float _hx_tmp1 = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(original);
HXDLIN( 532)				::flixel::IFlxSprite_obj::set_y(replace,(original2 + ((Float)(_hx_tmp1 - ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(replace)) / (Float)(int)2)));
            			}
HXLINE( 536)			this->replaceInGroup(( ( ::flixel::FlxSprite)(original) ),( ( ::flixel::FlxSprite)(replace) ),null());
HXLINE( 539)			this->_asset_index->remove(key);
HXLINE( 542)			this->_asset_index->set(key,replace);
HXLINE( 545)			if (destroy_old) {
HXLINE( 546)				::flixel::IFlxBasic_obj::destroy(original);
HXLINE( 547)				original = null();
            			}
            		}
HXLINE( 551)		return original;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxUI_obj,replaceAsset,return )

void FlxUI_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_559_destroy)
HXLINE( 560)		if (hx::IsNotNull( this->_group_index )) {
HXLINE( 561)			{
HXLINE( 561)				 ::Dynamic key = this->_group_index->keys();
HXDLIN( 561)				while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 561)					::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 562)					this->_group_index->remove(key1);
            				}
            			}
HXLINE( 563)			this->_group_index = null();
            		}
HXLINE( 565)		if (hx::IsNotNull( this->_asset_index )) {
HXLINE( 566)			{
HXLINE( 566)				 ::Dynamic key2 = this->_asset_index->keys();
HXDLIN( 566)				while(( (bool)(key2->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 566)					::String key3 = ( (::String)(key2->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 567)					this->_asset_index->remove(key3);
            				}
            			}
HXLINE( 568)			this->_asset_index = null();
            		}
HXLINE( 570)		if (hx::IsNotNull( this->_tag_index )) {
HXLINE( 571)			{
HXLINE( 571)				 ::Dynamic key4 = this->_tag_index->keys();
HXDLIN( 571)				while(( (bool)(key4->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 571)					::String key5 = ( (::String)(key4->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 572)					::flixel::util::FlxArrayUtil_obj::clearArray(( (::cpp::VirtualArray)(this->_tag_index->get(key5)) ),null());
HXLINE( 573)					this->_tag_index->remove(key5);
            				}
            			}
HXLINE( 574)			this->_tag_index = null();
            		}
HXLINE( 576)		if (hx::IsNotNull( this->_definition_index )) {
HXLINE( 577)			{
HXLINE( 577)				 ::Dynamic key6 = this->_definition_index->keys();
HXDLIN( 577)				while(( (bool)(key6->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 577)					::String key7 = ( (::String)(key6->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 578)					this->_definition_index->remove(key7);
            				}
            			}
HXLINE( 579)			this->_definition_index = null();
            		}
HXLINE( 581)		if (hx::IsNotNull( this->_variable_index )) {
HXLINE( 582)			{
HXLINE( 582)				 ::Dynamic key8 = this->_variable_index->keys();
HXDLIN( 582)				while(( (bool)(key8->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 582)					::String key9 = ( (::String)(key8->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 583)					this->_variable_index->remove(key9);
            				}
            			}
HXLINE( 584)			this->_variable_index = null();
            		}
HXLINE( 586)		if (hx::IsNotNull( this->_mode_index )) {
HXLINE( 587)			{
HXLINE( 587)				 ::Dynamic key10 = this->_mode_index->keys();
HXDLIN( 587)				while(( (bool)(key10->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 587)					::String key11 = ( (::String)(key10->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 588)					this->_mode_index->remove(key11);
            				}
            			}
HXLINE( 589)			this->_mode_index = null();
            		}
HXLINE( 591)		this->_ptr = null();
HXLINE( 592)		this->_superIndexUI = null();
HXLINE( 593)		this->_ptr_tongue = null();
HXLINE( 594)		if (hx::IsNotNull( this->cursorLists )) {
HXLINE( 596)			{
HXLINE( 596)				int _g = (int)0;
HXDLIN( 596)				::Array< ::Dynamic> _g1 = this->cursorLists;
HXDLIN( 596)				while((_g < _g1->length)){
HXLINE( 596)					::Array< ::Dynamic> arr = _g1->__get(_g).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 596)					_g = (_g + (int)1);
HXLINE( 598)					::flixel::util::FlxArrayUtil_obj::clearArray(arr,null());
            				}
            			}
HXLINE( 600)			::flixel::util::FlxArrayUtil_obj::clearArray(this->cursorLists,null());
            		}
HXLINE( 602)		this->cursorLists = null();
HXLINE( 603)		::flixel::util::FlxArrayUtil_obj::clearArray(this->_failure_checks,null());
HXDLIN( 603)		this->_failure_checks = null();
HXLINE( 604)		::flixel::util::FlxArrayUtil_obj::clearArray(this->_assetsToCleanUp,null());
HXDLIN( 604)		this->_assetsToCleanUp = null();
HXLINE( 605)		::flixel::util::FlxArrayUtil_obj::clearArray(this->_scaledAssets,null());
HXDLIN( 605)		this->_scaledAssets = null();
HXLINE( 606)		this->super::destroy();
            	}


void FlxUI_obj::load( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_617_load)
HXLINE( 618)		this->_group_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 619)		this->_asset_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 620)		this->_tag_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 621)		this->_definition_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 622)		if (hx::IsNull( this->_variable_index )) {
HXLINE( 624)			this->_variable_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            		}
HXLINE( 626)		this->_mode_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 628)		if (hx::IsNotNull( data )) {
HXLINE( 630)			if (hx::IsNull( this->_superIndexUI )) {
HXLINE( 633)				 ::flixel::addons::ui::FlxUIRegion screenRegion =  ::flixel::addons::ui::FlxUIRegion_obj::__alloc( HX_CTX ,(int)0,(int)0,::flixel::FlxG_obj::width,::flixel::FlxG_obj::height);
HXLINE( 634)				screenRegion->name = HX_("screen",6c,3b,5d,47);
HXLINE( 635)				this->addAsset(screenRegion,HX_("screen",6c,3b,5d,47),null(),null());
HXLINE( 637)				if (data->hasNode->resolve(HX_("screen_override",bf,10,cc,3e))) {
HXLINE( 639)					if (this->_loadTest(data->node->resolve(HX_("screen_override",bf,10,cc,3e)))) {
HXLINE( 641)						 ::haxe::xml::Fast screenNode = data->node->resolve(HX_("screen_override",bf,10,cc,3e));
HXLINE( 642)						this->_loadPosition(screenNode,screenRegion);
HXLINE( 643)						screenRegion->set_width(this->_loadWidth(screenNode,::flixel::FlxG_obj::width,null(),null()));
HXLINE( 644)						screenRegion->set_height(this->_loadHeight(screenNode,::flixel::FlxG_obj::height,null(),null()));
            					}
            				}
            			}
HXLINE( 650)			this->_data = data;
HXLINE( 653)			if (data->hasNode->resolve(HX_("inject",91,4a,ea,97))) {
HXLINE( 655)				while(data->hasNode->resolve(HX_("inject",91,4a,ea,97))){
HXLINE( 657)					 ::haxe::xml::Fast inj_data = data->node->resolve(HX_("inject",91,4a,ea,97));
HXLINE( 658)					::String inj_name = ::flixel::addons::ui::U_obj::xml_name(inj_data->x);
HXLINE( 659)					 ::Xml payload = ( ( ::Xml)(::flixel::addons::ui::U_obj::xml(inj_name,HX_("xml",d7,6d,5b,00),false,null())) );
HXLINE( 660)					if (hx::IsNotNull( payload )) {
HXLINE( 662)						 ::Xml parent = inj_data->x->parent;
HXLINE( 663)						int i = (int)0;
HXLINE( 664)						{
HXLINE( 664)							int _g = (int)0;
HXDLIN( 664)							::Array< ::Dynamic> _g1 = parent->children;
HXDLIN( 664)							while((_g < _g1->length)){
HXLINE( 664)								 ::Xml child = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN( 664)								_g = (_g + (int)1);
HXLINE( 666)								if (hx::IsEq( child,inj_data->x )) {
HXLINE( 668)									goto _hx_goto_35;
            								}
HXLINE( 670)								i = (i + (int)1);
            							}
            							_hx_goto_35:;
            						}
HXLINE( 673)						if (parent->removeChild(inj_data->x)) {
HXLINE( 675)							int j = (int)0;
HXLINE( 676)							{
HXLINE( 676)								 ::Dynamic e = payload->elements();
HXDLIN( 676)								while(( (bool)(e->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 676)									 ::Xml e1 = ( ( ::Xml)(e->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 678)									parent->insertChild(e1,(i + j));
HXLINE( 679)									j = (j + (int)1);
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 687)			if (data->hasNode->resolve(HX_("include",28,fe,f6,51))) {
HXLINE( 689)				 ::_List::ListNode _g_head = data->nodes->resolve(HX_("include",28,fe,f6,51))->h;
HXDLIN( 689)				while(hx::IsNotNull( _g_head )){
HXLINE( 689)					 ::haxe::xml::Fast val = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN( 689)					_g_head = _g_head->next;
HXDLIN( 689)					 ::haxe::xml::Fast inc_data = val;
HXLINE( 691)					::String inc_name = ::flixel::addons::ui::U_obj::xml_name(inc_data->x);
HXLINE( 693)					 ::haxe::xml::Fast liveFile = null();
HXLINE( 710)					 ::haxe::xml::Fast inc_xml = null();
HXLINE( 711)					if (hx::IsNull( liveFile )) {
HXLINE( 713)						inc_xml = ( ( ::haxe::xml::Fast)(::flixel::addons::ui::U_obj::xml(inc_name,null(),null(),null())) );
            					}
            					else {
HXLINE( 717)						inc_xml = liveFile;
            					}
HXLINE( 720)					if (hx::IsNotNull( inc_xml )) {
HXLINE( 722)						{
HXLINE( 722)							 ::_List::ListNode _g_head1 = inc_xml->nodes->resolve(HX_("definition",93,d5,0d,ec))->h;
HXDLIN( 722)							while(hx::IsNotNull( _g_head1 )){
HXLINE( 722)								 ::haxe::xml::Fast val1 = ( ( ::haxe::xml::Fast)(_g_head1->item) );
HXDLIN( 722)								_g_head1 = _g_head1->next;
HXDLIN( 722)								 ::haxe::xml::Fast def_data = val1;
HXLINE( 725)								::String def_name = (HX_("include:",12,65,27,66) + ::flixel::addons::ui::U_obj::xml_name(def_data->x));
HXLINE( 727)								this->unparentXML(def_data);
HXLINE( 729)								this->_definition_index->set(def_name,def_data);
            							}
            						}
HXLINE( 735)						if (inc_xml->hasNode->resolve(HX_("point_size",50,66,f5,4b))) {
HXLINE( 737)							this->_loadPointSize(inc_xml);
            						}
HXLINE( 740)						if (inc_xml->hasNode->resolve(HX_("default",c1,d8,c3,9b))) {
HXLINE( 742)							 ::_List::ListNode _g_head2 = inc_xml->nodes->resolve(HX_("default",c1,d8,c3,9b))->h;
HXDLIN( 742)							while(hx::IsNotNull( _g_head2 )){
HXLINE( 742)								 ::haxe::xml::Fast val2 = ( ( ::haxe::xml::Fast)(_g_head2->item) );
HXDLIN( 742)								_g_head2 = _g_head2->next;
HXDLIN( 742)								 ::haxe::xml::Fast defaultNode = val2;
HXLINE( 744)								if (this->_loadTest(defaultNode)) {
HXLINE( 746)									::String defaultName = ::flixel::addons::ui::U_obj::xml_name(defaultNode->x);
HXLINE( 748)									this->unparentXML(defaultNode);
HXLINE( 750)									this->_definition_index->set((HX_("default:",59,d0,99,af) + defaultName),defaultNode);
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 760)			if (data->hasNode->resolve(HX_("point_size",50,66,f5,4b))) {
HXLINE( 762)				this->_loadPointSize(data);
            			}
HXLINE( 766)			if (data->hasNode->resolve(HX_("definition",93,d5,0d,ec))) {
HXLINE( 768)				 ::_List::ListNode _g_head3 = data->nodes->resolve(HX_("definition",93,d5,0d,ec))->h;
HXDLIN( 768)				while(hx::IsNotNull( _g_head3 )){
HXLINE( 768)					 ::haxe::xml::Fast val3 = ( ( ::haxe::xml::Fast)(_g_head3->item) );
HXDLIN( 768)					_g_head3 = _g_head3->next;
HXDLIN( 768)					 ::haxe::xml::Fast def_data1 = val3;
HXLINE( 770)					if (this->_loadTest(def_data1)) {
HXLINE( 772)						::String def_name1 = ::flixel::addons::ui::U_obj::xml_name(def_data1->x);
HXLINE( 773)						::String error = HX_("",00,00,00,00);
HXLINE( 774)						if ((def_name1.indexOf(HX_("default:",59,d0,99,af),null()) != (int)-1)) {
HXLINE( 776)							error = HX_("'default:'",a7,c0,54,42);
            						}
HXLINE( 778)						if ((def_name1.indexOf(HX_("include:",12,65,27,66),null()) != (int)-1)) {
HXLINE( 780)							error = HX_("'include:'",ce,4d,a9,47);
            						}
HXLINE( 782)						if ((error != HX_("",00,00,00,00))) {
HXLINE( 784)							 ::flixel::_hx_system::frontEnds::LogFrontEnd _this = ::flixel::FlxG_obj::log;
            						}
            						else {
HXLINE( 788)							this->unparentXML(def_data1);
HXLINE( 790)							this->_definition_index->set(def_name1,def_data1);
            						}
            					}
            				}
            			}
HXLINE( 796)			if (data->hasNode->resolve(HX_("default",c1,d8,c3,9b))) {
HXLINE( 798)				 ::_List::ListNode _g_head4 = data->nodes->resolve(HX_("default",c1,d8,c3,9b))->h;
HXDLIN( 798)				while(hx::IsNotNull( _g_head4 )){
HXLINE( 798)					 ::haxe::xml::Fast val4 = ( ( ::haxe::xml::Fast)(_g_head4->item) );
HXDLIN( 798)					_g_head4 = _g_head4->next;
HXDLIN( 798)					 ::haxe::xml::Fast defaultNode1 = val4;
HXLINE( 800)					if (this->_loadTest(defaultNode1)) {
HXLINE( 802)						::String defaultName1 = ::flixel::addons::ui::U_obj::xml_name(defaultNode1->x);
HXLINE( 804)						this->unparentXML(defaultNode1);
HXLINE( 806)						this->_definition_index->set((HX_("default:",59,d0,99,af) + defaultName1),defaultNode1);
            					}
            				}
            			}
HXLINE( 812)			if (data->hasNode->resolve(HX_("variable",3c,12,0d,69))) {
HXLINE( 814)				 ::_List::ListNode _g_head5 = data->nodes->resolve(HX_("variable",3c,12,0d,69))->h;
HXDLIN( 814)				while(hx::IsNotNull( _g_head5 )){
HXLINE( 814)					 ::haxe::xml::Fast val5 = ( ( ::haxe::xml::Fast)(_g_head5->item) );
HXDLIN( 814)					_g_head5 = _g_head5->next;
HXDLIN( 814)					 ::haxe::xml::Fast var_data = val5;
HXLINE( 816)					if (this->_loadTest(var_data)) {
HXLINE( 818)						::String var_name = ::flixel::addons::ui::U_obj::xml_name(var_data->x);
HXLINE( 819)						::String var_value = ::flixel::addons::ui::U_obj::xml_str(var_data->x,HX_("value",71,7f,b8,31),null(),null());
HXLINE( 820)						if ((var_name != HX_("",00,00,00,00))) {
HXLINE( 822)							this->_variable_index->set(var_name,var_value);
            						}
            					}
            				}
            			}
HXLINE( 829)			if (data->hasNode->resolve(HX_("mode",63,d3,60,48))) {
HXLINE( 831)				 ::_List::ListNode _g_head6 = data->nodes->resolve(HX_("mode",63,d3,60,48))->h;
HXDLIN( 831)				while(hx::IsNotNull( _g_head6 )){
HXLINE( 831)					 ::haxe::xml::Fast val6 = ( ( ::haxe::xml::Fast)(_g_head6->item) );
HXDLIN( 831)					_g_head6 = _g_head6->next;
HXDLIN( 831)					 ::haxe::xml::Fast mode_data = val6;
HXLINE( 833)					if (this->_loadTest(mode_data)) {
HXLINE( 835)						 ::haxe::xml::Fast mode_data2 = this->applyNodeConditionals(mode_data);
HXLINE( 836)						::String mode_name = ::flixel::addons::ui::U_obj::xml_name(mode_data->x);
HXLINE( 839)						this->unparentXML(mode_data2);
HXLINE( 841)						this->_mode_index->set(mode_name,mode_data2);
            					}
            				}
            			}
HXLINE( 847)			if (data->hasNode->resolve(HX_("group",3f,b3,f4,99))) {
HXLINE( 849)				 ::_List::ListNode _g_head7 = data->nodes->resolve(HX_("group",3f,b3,f4,99))->h;
HXDLIN( 849)				while(hx::IsNotNull( _g_head7 )){
HXLINE( 849)					 ::haxe::xml::Fast val7 = ( ( ::haxe::xml::Fast)(_g_head7->item) );
HXDLIN( 849)					_g_head7 = _g_head7->next;
HXDLIN( 849)					 ::haxe::xml::Fast group_data = val7;
HXLINE( 851)					if (this->_loadTest(group_data)) {
HXLINE( 854)						::String name = ::flixel::addons::ui::U_obj::xml_name(group_data->x);
HXLINE( 855)						::String custom = ::flixel::addons::ui::U_obj::xml_str(group_data->x,HX_("custom",b1,87,92,3f),null(),null());
HXLINE( 857)						 ::flixel::addons::ui::FlxUIGroup tempGroup = null();
HXLINE( 860)						if ((custom != HX_("",00,00,00,00))) {
HXLINE( 862)							 ::Dynamic result = ::flixel::addons::ui::interfaces::IEventGetter_obj::getRequest(this->_ptr,HX_("ui_get_group:",2f,b3,b6,b7),hx::ObjectPtr<OBJ_>(this),custom,null());
HXLINE( 863)							bool _hx_tmp;
HXDLIN( 863)							if (hx::IsNotNull( result )) {
HXLINE( 863)								_hx_tmp = ::Std_obj::is(result,hx::ClassOf< ::flixel::addons::ui::FlxUIGroup >());
            							}
            							else {
HXLINE( 863)								_hx_tmp = false;
            							}
HXDLIN( 863)							if (_hx_tmp) {
HXLINE( 865)								tempGroup = ( ( ::flixel::addons::ui::FlxUIGroup)(result) );
            							}
            						}
HXLINE( 869)						if (hx::IsNull( tempGroup )) {
HXLINE( 871)							tempGroup =  ::flixel::addons::ui::FlxUIGroup_obj::__alloc( HX_CTX ,null(),null());
            						}
HXLINE( 874)						tempGroup->name = name;
HXLINE( 875)						this->_group_index->set(name,tempGroup);
HXLINE( 876)						this->add(tempGroup);
            					}
            				}
            			}
HXLINE( 881)			if (hx::IsNotNull( data->x->firstElement() )) {
HXLINE( 884)				 ::Dynamic node = data->x->elements();
HXDLIN( 884)				while(( (bool)(node->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 884)					 ::Xml node1 = ( ( ::Xml)(node->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 886)					this->_loadSub(node1,null());
            				}
            			}
HXLINE( 890)			this->_postLoad(data);
            		}
            		else {
HXLINE( 894)			this->_onFinishLoad();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,load,(void))

 ::haxe::xml::Fast FlxUI_obj::unparentXML( ::haxe::xml::Fast f){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_900_unparentXML)
HXDLIN( 900)		return ::flixel::addons::ui::U_obj::unparentXML(f);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,unparentXML,return )

void FlxUI_obj::_loadPointSize( ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_904__loadPointSize)
HXLINE( 905)		Float ptx = this->_loadWidth(data->node->resolve(HX_("point_size",50,66,f5,4b)),((Float)-1.0),HX_("x",78,00,00,00),null());
HXLINE( 906)		Float pty = this->_loadHeight(data->node->resolve(HX_("point_size",50,66,f5,4b)),((Float)-1.0),HX_("y",79,00,00,00),null());
HXLINE( 909)		bool _hx_tmp;
HXDLIN( 909)		if ((pty < (int)1)) {
HXLINE( 909)			_hx_tmp = (ptx < (int)1);
            		}
            		else {
HXLINE( 909)			_hx_tmp = false;
            		}
HXDLIN( 909)		if (_hx_tmp) {
HXLINE( 911)			pty = this->_loadHeight(data->node->resolve(HX_("point_size",50,66,f5,4b)),(int)-1,HX_("value",71,7f,b8,31),null());
HXLINE( 912)			ptx = pty;
            		}
HXLINE( 916)		if ((pty > (int)0)) {
HXLINE( 918)			this->_pointX = ptx;
            		}
HXLINE( 920)		if ((ptx > (int)0)) {
HXLINE( 922)			this->_pointY = pty;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadPointSize,(void))

void FlxUI_obj::_loadSub( ::Xml node,hx::Null< int >  __o_iteration){
int iteration = __o_iteration.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_928__loadSub)
HXLINE( 929)		if ((node->nodeType != ::Xml_obj::Element)) {
HXLINE( 929)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + node->nodeType));
            		}
HXDLIN( 929)		::String type = node->nodeName;
HXLINE( 930)		type.toLowerCase();
HXLINE( 931)		 ::haxe::xml::Fast obj =  ::haxe::xml::Fast_obj::__alloc( HX_CTX ,node);
HXLINE( 935)		if ((type == HX_("load_if",96,33,eb,08))) {
HXLINE( 937)			if (this->_loadTest(obj)) {
HXLINE( 939)				if (hx::IsNotNull( node->firstElement() )) {
HXLINE( 941)					 ::Dynamic subNode = node->elements();
HXDLIN( 941)					while(( (bool)(subNode->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 941)						 ::Xml subNode1 = ( ( ::Xml)(subNode->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 943)						this->_loadSub(subNode1,(iteration + (int)1));
            					}
            				}
            			}
HXLINE( 948)			return;
            		}
HXLINE( 951)		::String group_name = HX_("",00,00,00,00);
HXLINE( 952)		 ::flixel::addons::ui::FlxUIGroup tempGroup = null();
HXLINE( 954)		::String thing_name = ::flixel::addons::ui::U_obj::xml_name(obj->x);
HXLINE( 956)		if (obj->has->resolve(HX_("group",3f,b3,f4,99))) {
HXLINE( 957)			group_name = obj->att->resolve(HX_("group",3f,b3,f4,99));
HXLINE( 958)			tempGroup = this->getGroup(group_name,null());
            		}
HXLINE( 962)		::Dynamic thing = this->_loadThing(type,obj);
HXLINE( 964)		if (hx::IsNotNull( thing )) {
HXLINE( 965)			this->_loadGlobals(obj,thing);
HXLINE( 967)			bool _hx_tmp;
HXDLIN( 967)			if (hx::IsNotNull( thing_name )) {
HXLINE( 967)				_hx_tmp = (thing_name != HX_("",00,00,00,00));
            			}
            			else {
HXLINE( 967)				_hx_tmp = false;
            			}
HXDLIN( 967)			if (_hx_tmp) {
HXLINE( 968)				this->_asset_index->set(thing_name,thing);
HXLINE( 971)				thing->__SetField(HX_("name",4b,72,ff,48),thing_name,hx::paccDynamic);
HXLINE( 973)				::String thing_tags = ::flixel::addons::ui::U_obj::xml_str(obj->x,HX_("tags",d9,b4,f6,4c),null(),null());
HXLINE( 974)				if ((thing_tags != HX_("",00,00,00,00))) {
HXLINE( 976)					::Array< ::String > tagArr = thing_tags.split(HX_(",",2c,00,00,00));
HXLINE( 977)					this->_addTags(tagArr,thing_name);
            				}
            			}
HXLINE( 981)			this->_loadTooltip(thing,obj);
HXLINE( 983)			if (hx::IsNotNull( tempGroup )) {
HXLINE( 984)				tempGroup->add(( ( ::flixel::FlxSprite)(thing) )).StaticCast<  ::flixel::FlxSprite >();
            			}
            			else {
HXLINE( 986)				this->add(( ( ::flixel::FlxSprite)(thing) ));
            			}
HXLINE( 989)			this->_loadPosition(obj,thing);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadSub,(void))

void FlxUI_obj::_addTags(::Array< ::String > arr,::String thingName){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_995__addTags)
HXDLIN( 995)		int _g = (int)0;
HXDLIN( 995)		while((_g < arr->length)){
HXDLIN( 995)			::String tag = arr->__get(_g);
HXDLIN( 995)			_g = (_g + (int)1);
HXLINE( 997)			::Array< ::String > list = null();
HXLINE( 998)			if (!(this->_tag_index->exists(tag))) {
HXLINE(1000)				this->_tag_index->set(tag,::Array_obj< ::String >::__new(0));
            			}
HXLINE(1002)			list = ( (::Array< ::String >)(this->_tag_index->get(tag)) );
HXLINE(1003)			if ((list->indexOf(thingName,null()) == (int)-1)) {
HXLINE(1005)				list->push(thingName);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_addTags,(void))

void FlxUI_obj::_loadGlobals( ::haxe::xml::Fast data, ::Dynamic thing){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1012__loadGlobals)
HXDLIN(1012)		if (::Std_obj::is(thing,hx::ClassOf< ::flixel::FlxBasic >())) {
HXLINE(1014)			bool isVis = ::flixel::addons::ui::U_obj::xml_bool(data->x,HX_("visible",72,78,24,a3),true);
HXLINE(1015)			bool isActive = ::flixel::addons::ui::U_obj::xml_bool(data->x,HX_("active",c6,41,46,16),true);
HXLINE(1016)			int numID = ::flixel::addons::ui::U_obj::xml_i(data->x,HX_("num_id",74,43,78,a1),null());
HXLINE(1018)			thing->__SetField(HX_("visible",72,78,24,a3),isVis,hx::paccDynamic);
HXLINE(1019)			thing->__SetField(HX_("active",c6,41,46,16),isActive,hx::paccDynamic);
HXLINE(1020)			thing->__SetField(HX_("ID",db,3f,00,00),numID,hx::paccDynamic);
HXLINE(1021)			if (::Std_obj::is(thing,hx::ClassOf< ::flixel::FlxSprite >())) {
HXLINE(1023)				Float alpha = ::flixel::addons::ui::U_obj::xml_f(data->x,HX_("alpha",5e,a7,96,21),((Float)1.0));
HXLINE(1024)				 ::flixel::FlxSprite s = ( ( ::flixel::FlxSprite)(thing) );
HXLINE(1025)				s->set_alpha(alpha);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadGlobals,(void))

void FlxUI_obj::_postLoad( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1031__postLoad)
HXLINE(1032)		this->_postLoaded = true;
HXLINE(1033)		if (hx::IsNotNull( data->x->firstElement() )) {
HXLINE(1035)			 ::Dynamic node = data->x->elements();
HXDLIN(1035)			while(( (bool)(node->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1035)				 ::Xml node1 = ( ( ::Xml)(node->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1037)				if ((node1->nodeType != ::Xml_obj::Element)) {
HXLINE(1037)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + node1->nodeType));
            				}
HXDLIN(1037)				::String _hx_tmp = node1->nodeName.toLowerCase();
HXDLIN(1037)				this->_postLoadThing(_hx_tmp, ::haxe::xml::Fast_obj::__alloc( HX_CTX ,node1));
            			}
            		}
HXLINE(1041)		if (data->hasNode->resolve(HX_("mode",63,d3,60,48))) {
HXLINE(1042)			 ::_List::ListNode _g_head = data->nodes->resolve(HX_("mode",63,d3,60,48))->h;
HXDLIN(1042)			while(hx::IsNotNull( _g_head )){
HXLINE(1042)				 ::haxe::xml::Fast val = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(1042)				_g_head = _g_head->next;
HXDLIN(1042)				 ::haxe::xml::Fast mode_node = val;
HXLINE(1043)				bool is_default = ::flixel::addons::ui::U_obj::xml_bool(mode_node->x,HX_("is_default",2c,88,79,76),null());
HXLINE(1044)				if (is_default) {
HXLINE(1045)					::String mode_name = ::flixel::addons::ui::U_obj::xml_name(mode_node->x);
HXLINE(1046)					this->setMode(mode_name,null());
HXLINE(1047)					goto _hx_goto_55;
            				}
            			}
            			_hx_goto_55:;
            		}
HXLINE(1052)		if (hx::IsNotNull( this->_failure_checks )) {
HXLINE(1053)			{
HXLINE(1053)				int _g = (int)0;
HXDLIN(1053)				::Array< ::Dynamic> _g1 = this->_failure_checks;
HXDLIN(1053)				while((_g < _g1->length)){
HXLINE(1053)					 ::haxe::xml::Fast data1 = _g1->__get(_g).StaticCast<  ::haxe::xml::Fast >();
HXDLIN(1053)					_g = (_g + (int)1);
HXLINE(1054)					if (this->_checkFailure(data1)) {
HXLINE(1055)						this->failed = true;
HXLINE(1056)						goto _hx_goto_56;
            					}
            				}
            				_hx_goto_56:;
            			}
HXLINE(1059)			::flixel::addons::ui::U_obj::clearArraySoft(this->_failure_checks);
HXLINE(1060)			this->_failure_checks = null();
            		}
HXLINE(1063)		this->_onFinishLoad();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_postLoad,(void))

void FlxUI_obj::_sendTo(::Dynamic thing,int dir){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1067__sendTo)
HXLINE(1068)		 ::flixel::addons::ui::FlxUIGroup group = this->getAssetGroup(null(),thing);
HXLINE(1069)		if (hx::IsNull( group )) {
HXLINE(1071)			if ((this->group->members->indexOf(( ( ::flixel::FlxSprite)(thing) ),null()) != (int)-1)) {
HXLINE(1073)				group = hx::ObjectPtr<OBJ_>(this);
            			}
            			else {
HXLINE(1077)				return;
            			}
            		}
HXLINE(1080)		bool _hx_tmp;
HXDLIN(1080)		if ((dir != (int)-1)) {
HXLINE(1080)			_hx_tmp = (dir != (int)1);
            		}
            		else {
HXLINE(1080)			_hx_tmp = false;
            		}
HXDLIN(1080)		if (_hx_tmp) {
HXLINE(1082)			return;
            		}
HXLINE(1085)		group->group->members->remove(( ( ::flixel::FlxSprite)(thing) ));
HXLINE(1087)		switch((int)(dir)){
            			case (int)-1: {
HXLINE(1089)				group->group->members->insert((int)0,( ( ::flixel::FlxSprite)(thing) ));
            			}
            			break;
            			case (int)1: {
HXLINE(1090)				group->group->members->push(( ( ::flixel::FlxSprite)(thing) ));
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_sendTo,(void))

void FlxUI_obj::sendToFront(::String name,hx::Null< bool >  __o_recursive){
bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1101_sendToFront)
HXLINE(1102)		::Dynamic thing = this->getAsset(name,recursive);
HXLINE(1103)		if (hx::IsNotNull( thing )) {
HXLINE(1103)			this->_sendTo(thing,(int)1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,sendToFront,(void))

void FlxUI_obj::sendToBack(::String name,hx::Null< bool >  __o_recursive){
bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1113_sendToBack)
HXLINE(1114)		::Dynamic thing = this->getAsset(name,recursive);
HXLINE(1115)		if (hx::IsNotNull( thing )) {
HXLINE(1115)			this->_sendTo(thing,(int)-1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,sendToBack,(void))

::String FlxUI_obj::get_currMode(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1119_get_currMode)
HXDLIN(1119)		return this->_curr_mode;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,get_currMode,return )

::String FlxUI_obj::set_currMode(::String m){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1120_set_currMode)
HXDLIN(1120)		this->setMode(m,null());
HXDLIN(1120)		return this->_curr_mode;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,set_currMode,return )

void FlxUI_obj::setMode(::String mode_name,::String __o_target_name){
::String target_name = __o_target_name.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1129_setMode)
HXLINE(1130)		if ((this->_curr_mode == mode_name)) {
HXLINE(1132)			return;
            		}
HXLINE(1134)		 ::haxe::xml::Fast mode = this->getMode(mode_name,null());
HXLINE(1135)		this->_curr_mode = mode_name;
HXLINE(1136)		::String name = HX_("",00,00,00,00);
HXLINE(1137)		::Dynamic thing;
HXLINE(1138)		if ((target_name == HX_("",00,00,00,00))) {
HXLINE(1139)			if (hx::IsNotNull( mode )) {
HXLINE(1141)				 ::Xml xml;
HXLINE(1142)				{
HXLINE(1142)					 ::Dynamic node = mode->get_elements();
HXDLIN(1142)					while(( (bool)(node->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1142)						 ::haxe::xml::Fast node1 = ( ( ::haxe::xml::Fast)(node->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1144)						 ::haxe::xml::Fast node2 = this->applyNodeConditionals(node1);
HXLINE(1145)						xml = node2->x;
HXLINE(1147)						if ((xml->nodeType != ::Xml_obj::Element)) {
HXLINE(1147)							HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + xml->nodeType));
            						}
HXDLIN(1147)						::String nodeName = xml->nodeName;
HXLINE(1150)						 ::Dynamic activeStatus;
HXDLIN(1150)						if ((::flixel::addons::ui::U_obj::xml_str(xml,HX_("active",c6,41,46,16),null(),null()) == HX_("",00,00,00,00))) {
HXLINE(1150)							activeStatus = null();
            						}
            						else {
HXLINE(1150)							activeStatus = true;
            						}
HXLINE(1151)						if (hx::IsNotNull( activeStatus )) {
HXLINE(1153)							activeStatus = ::flixel::addons::ui::U_obj::xml_bool(xml,HX_("active",c6,41,46,16),null());
            						}
HXLINE(1156)						if (this->_loadTest(node2)) {
HXLINE(1158)							::String _hx_switch_0 = nodeName;
            							if (  (_hx_switch_0==HX_("align",c5,56,91,21)) ){
HXLINE(1164)								this->_alignThing(node2,null());
HXDLIN(1164)								goto _hx_goto_64;
            							}
            							if (  (_hx_switch_0==HX_("change",70,91,72,b7)) ){
HXLINE(1166)								this->_changeThing(node2);
HXDLIN(1166)								goto _hx_goto_64;
            							}
            							if (  (_hx_switch_0==HX_("hide",c2,34,0e,45)) ){
HXLINE(1162)								this->showThing(::flixel::addons::ui::U_obj::xml_name(xml),false,activeStatus);
HXDLIN(1162)								goto _hx_goto_64;
            							}
            							if (  (_hx_switch_0==HX_("position",a9,a0,fa,ca)) ){
HXLINE(1168)								name = ::flixel::addons::ui::U_obj::xml_name(xml);
HXLINE(1169)								thing = this->getAsset(name,null());
HXLINE(1170)								if (hx::IsNotNull( thing )) {
HXLINE(1171)									this->_loadPosition(node2,thing);
            								}
HXLINE(1167)								goto _hx_goto_64;
            							}
            							if (  (_hx_switch_0==HX_("show",fd,d4,52,4c)) ){
HXLINE(1160)								this->showThing(::flixel::addons::ui::U_obj::xml_name(xml),true,activeStatus);
HXDLIN(1160)								goto _hx_goto_64;
            							}
            							_hx_goto_64:;
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE(1178)			::Dynamic target = this->getAsset(target_name,null());
HXLINE(1179)			bool _hx_tmp;
HXDLIN(1179)			if (hx::IsNotNull( target )) {
HXLINE(1179)				_hx_tmp = ::Std_obj::is(target,hx::ClassOf< ::flixel::addons::ui::FlxUI >());
            			}
            			else {
HXLINE(1179)				_hx_tmp = false;
            			}
HXDLIN(1179)			if (_hx_tmp) {
HXLINE(1180)				 ::flixel::addons::ui::FlxUI targetUI = hx::TCast<  ::flixel::addons::ui::FlxUI >::cast(target);
HXLINE(1181)				targetUI->setMode(mode_name,HX_("",00,00,00,00));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,setMode,(void))

void FlxUI_obj::showThing(::String name,hx::Null< bool >  __o_visibleStatus, ::Dynamic activeStatus){
bool visibleStatus = __o_visibleStatus.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1188_showThing)
HXDLIN(1188)		if ((name.indexOf(HX_(",",2c,00,00,00),null()) != (int)-1)) {
HXLINE(1190)			::Array< ::String > names = name.split(HX_(",",2c,00,00,00));
HXLINE(1191)			{
HXLINE(1191)				int _g = (int)0;
HXDLIN(1191)				while((_g < names->length)){
HXLINE(1191)					::String each_name = names->__get(_g);
HXDLIN(1191)					_g = (_g + (int)1);
HXLINE(1193)					::Dynamic thing = this->getAsset(each_name,null());
HXLINE(1194)					if (hx::IsNotNull( thing )) {
HXLINE(1196)						::flixel::IFlxBasic_obj::set_visible(thing,visibleStatus);
HXLINE(1197)						if (hx::IsNotNull( activeStatus )) {
HXLINE(1199)							::flixel::IFlxBasic_obj::set_active(thing,activeStatus);
            						}
            					}
            					else {
HXLINE(1204)						 ::flixel::addons::ui::FlxUIGroup group = this->getGroup(each_name,null());
HXLINE(1205)						if (hx::IsNotNull( group )) {
HXLINE(1207)							group->set_visible(visibleStatus);
HXLINE(1208)							if (hx::IsNotNull( activeStatus )) {
HXLINE(1210)								group->set_active(activeStatus);
            							}
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE(1218)			if ((name != HX_("*",2a,00,00,00))) {
HXLINE(1220)				::Dynamic thing1 = this->getAsset(name,null());
HXLINE(1221)				if (hx::IsNotNull( thing1 )) {
HXLINE(1223)					::flixel::IFlxBasic_obj::set_visible(thing1,visibleStatus);
HXLINE(1224)					if (hx::IsNotNull( activeStatus )) {
HXLINE(1226)						::flixel::IFlxBasic_obj::set_active(thing1,activeStatus);
            					}
            				}
            				else {
HXLINE(1231)					 ::flixel::addons::ui::FlxUIGroup group1 = this->getGroup(name,null());
HXLINE(1232)					if (hx::IsNotNull( group1 )) {
HXLINE(1234)						group1->set_visible(visibleStatus);
HXLINE(1235)						if (hx::IsNotNull( activeStatus )) {
HXLINE(1237)							group1->set_active(activeStatus);
            						}
            					}
            				}
            			}
            			else {
HXLINE(1244)				 ::Dynamic asset_name = this->_asset_index->keys();
HXDLIN(1244)				while(( (bool)(asset_name->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1244)					::String asset_name1 = ( (::String)(asset_name->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1246)					if ((asset_name1 != HX_("*",2a,00,00,00))) {
HXLINE(1248)						this->showThing(asset_name1,visibleStatus,activeStatus);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,showThing,(void))

 ::flixel::addons::ui::FlxUIGroup FlxUI_obj::getGroup(::String key,hx::Null< bool >  __o_recursive){
bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1258_getGroup)
HXLINE(1259)		 ::flixel::addons::ui::FlxUIGroup tempGroup = this->_group_index->get(key).StaticCast<  ::flixel::addons::ui::FlxUIGroup >();
HXLINE(1260)		bool _hx_tmp;
HXDLIN(1260)		bool _hx_tmp1;
HXDLIN(1260)		if (hx::IsNull( tempGroup )) {
HXLINE(1260)			_hx_tmp1 = recursive;
            		}
            		else {
HXLINE(1260)			_hx_tmp1 = false;
            		}
HXDLIN(1260)		if (_hx_tmp1) {
HXLINE(1260)			_hx_tmp = hx::IsNotNull( this->_superIndexUI );
            		}
            		else {
HXLINE(1260)			_hx_tmp = false;
            		}
HXDLIN(1260)		if (_hx_tmp) {
HXLINE(1262)			return this->_superIndexUI->getGroup(key,recursive);
            		}
HXLINE(1264)		return tempGroup;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getGroup,return )

 ::flixel::text::FlxText FlxUI_obj::getFlxText(::String key,hx::Null< bool >  __o_recursive){
bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1268_getFlxText)
HXLINE(1269)		::Dynamic asset = this->getAsset(key,recursive);
HXLINE(1270)		if (hx::IsNotNull( asset )) {
HXLINE(1272)			if (::Std_obj::is(asset,hx::ClassOf< ::flixel::text::FlxText >())) {
HXLINE(1274)				return hx::TCast<  ::flixel::text::FlxText >::cast(asset);
            			}
            		}
HXLINE(1277)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getFlxText,return )

::Array< ::Dynamic> FlxUI_obj::getAllAssets(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1281_getAllAssets)
HXLINE(1282)		::Array< ::Dynamic> arr = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1283)		{
HXLINE(1283)			 ::Dynamic key = this->_asset_index->keys();
HXDLIN(1283)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1283)				::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1285)				arr->push(this->getAsset(key1,null()));
            			}
            		}
HXLINE(1287)		return arr;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,getAllAssets,return )

::Array< ::String > FlxUI_obj::getAssetKeys(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1291_getAssetKeys)
HXLINE(1292)		::Array< ::String > arr = ::Array_obj< ::String >::__new(0);
HXLINE(1293)		{
HXLINE(1293)			 ::Dynamic key = this->_asset_index->keys();
HXDLIN(1293)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1293)				::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1294)				arr->push(key1);
            			}
            		}
HXLINE(1296)		return arr;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,getAssetKeys,return )

bool FlxUI_obj::hasAsset(::String key,hx::Null< bool >  __o_recursive){
bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1300_hasAsset)
HXLINE(1301)		if (this->_asset_index->exists(key)) {
HXLINE(1303)			return true;
            		}
HXLINE(1305)		bool _hx_tmp;
HXDLIN(1305)		if (recursive) {
HXLINE(1305)			_hx_tmp = hx::IsNotNull( this->_superIndexUI );
            		}
            		else {
HXLINE(1305)			_hx_tmp = false;
            		}
HXDLIN(1305)		if (_hx_tmp) {
HXLINE(1307)			return this->_superIndexUI->hasAsset(key,recursive);
            		}
HXLINE(1309)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,hasAsset,return )

::Dynamic FlxUI_obj::getAsset(::String key,hx::Null< bool >  __o_recursive){
bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1313_getAsset)
HXLINE(1314)		::Dynamic asset = this->_asset_index->get(key);
HXLINE(1315)		bool _hx_tmp;
HXDLIN(1315)		bool _hx_tmp1;
HXDLIN(1315)		if (hx::IsNull( asset )) {
HXLINE(1315)			_hx_tmp1 = recursive;
            		}
            		else {
HXLINE(1315)			_hx_tmp1 = false;
            		}
HXDLIN(1315)		if (_hx_tmp1) {
HXLINE(1315)			_hx_tmp = hx::IsNotNull( this->_superIndexUI );
            		}
            		else {
HXLINE(1315)			_hx_tmp = false;
            		}
HXDLIN(1315)		if (_hx_tmp) {
HXLINE(1317)			return this->_superIndexUI->getAsset(key,recursive);
            		}
HXLINE(1319)		return asset;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getAsset,return )

::Array< ::Dynamic> FlxUI_obj::getAssetsWithTag(::String tag){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1323_getAssetsWithTag)
HXLINE(1324)		if (this->_tag_index->exists(tag)) {
HXLINE(1326)			::Array< ::String > list = ( (::Array< ::String >)(this->_tag_index->get(tag)) );
HXLINE(1327)			bool _hx_tmp;
HXDLIN(1327)			if (hx::IsNotNull( list )) {
HXLINE(1327)				_hx_tmp = (list->length == (int)0);
            			}
            			else {
HXLINE(1327)				_hx_tmp = true;
            			}
HXDLIN(1327)			if (_hx_tmp) {
HXLINE(1327)				return null();
            			}
HXLINE(1328)			::Array< ::Dynamic> arr = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1329)			{
HXLINE(1329)				int _g = (int)0;
HXDLIN(1329)				while((_g < list->length)){
HXLINE(1329)					::String key = list->__get(_g);
HXDLIN(1329)					_g = (_g + (int)1);
HXLINE(1331)					::Dynamic widget = this->getAsset(key,null());
HXLINE(1332)					if (hx::IsNotNull( widget )) {
HXLINE(1334)						arr->push(widget);
            					}
            				}
            			}
HXLINE(1337)			return arr;
            		}
HXLINE(1339)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,getAssetsWithTag,return )

 ::flixel::addons::ui::FlxUIGroup FlxUI_obj::getAssetGroup(::String key,::Dynamic thing){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1350_getAssetGroup)
HXLINE(1351)		bool _hx_tmp;
HXDLIN(1351)		if (hx::IsNull( thing )) {
HXLINE(1351)			if (hx::IsNotNull( key )) {
HXLINE(1351)				_hx_tmp = (key == HX_("",00,00,00,00));
            			}
            			else {
HXLINE(1351)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(1351)			_hx_tmp = false;
            		}
HXDLIN(1351)		if (_hx_tmp) {
HXLINE(1351)			return null();
            		}
HXLINE(1352)		if (hx::IsNull( thing )) {
HXLINE(1352)			thing = this->getAsset(key,null());
            		}
HXLINE(1353)		if (hx::IsNull( thing )) {
HXLINE(1353)			return null();
            		}
HXLINE(1355)		{
HXLINE(1355)			 ::Dynamic key1 = this->_group_index->keys();
HXDLIN(1355)			while(( (bool)(key1->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1355)				::String key2 = ( (::String)(key1->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1357)				 ::flixel::addons::ui::FlxUIGroup g = this->_group_index->get(key2).StaticCast<  ::flixel::addons::ui::FlxUIGroup >();
HXLINE(1358)				if ((g->group->members->indexOf(( ( ::flixel::FlxSprite)(thing) ),null()) != (int)-1)) {
HXLINE(1360)					return g;
            				}
            			}
            		}
HXLINE(1364)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getAssetGroup,return )

 ::haxe::xml::Fast FlxUI_obj::getMode(::String key,hx::Null< bool >  __o_recursive){
bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1368_getMode)
HXLINE(1369)		 ::haxe::xml::Fast mode = this->_mode_index->get(key).StaticCast<  ::haxe::xml::Fast >();
HXLINE(1370)		bool _hx_tmp;
HXDLIN(1370)		bool _hx_tmp1;
HXDLIN(1370)		if (hx::IsNull( mode )) {
HXLINE(1370)			_hx_tmp1 = recursive;
            		}
            		else {
HXLINE(1370)			_hx_tmp1 = false;
            		}
HXDLIN(1370)		if (_hx_tmp1) {
HXLINE(1370)			_hx_tmp = hx::IsNotNull( this->_superIndexUI );
            		}
            		else {
HXLINE(1370)			_hx_tmp = false;
            		}
HXDLIN(1370)		if (_hx_tmp) {
HXLINE(1372)			return this->_superIndexUI->getMode(key,recursive);
            		}
HXLINE(1374)		return mode;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getMode,return )

 ::flixel::addons::ui::ButtonLabelStyle FlxUI_obj::getLabelStyleFromDefinition(::String key,hx::Null< bool >  __o_recursive){
bool recursive = __o_recursive.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1378_getLabelStyleFromDefinition)
HXLINE(1379)		 ::haxe::xml::Fast definition = this->getDefinition(key,recursive);
HXLINE(1380)		if (hx::IsNotNull( definition )) {
HXLINE(1382)			 ::flixel::addons::ui::FontDef fontDef = this->_loadFontDef(definition);
HXLINE(1383)			::String align = ::flixel::addons::ui::U_obj::xml_str(definition->x,HX_("align",c5,56,91,21),null(),null());
HXDLIN(1383)			if ((align == HX_("",00,00,00,00))) {
HXLINE(1383)				align = null();
            			}
HXLINE(1384)			int color = this->_loadColor(definition,null(),null());
HXLINE(1385)			 ::flixel::addons::ui::BorderDef border = this->_loadBorder(definition);
HXLINE(1386)			return  ::flixel::addons::ui::ButtonLabelStyle_obj::__alloc( HX_CTX ,fontDef,align,color,border);
            		}
HXLINE(1388)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getLabelStyleFromDefinition,return )

 ::flixel::addons::ui::ButtonLabelStyle FlxUI_obj::getLabelStyleFromData( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1392_getLabelStyleFromData)
HXLINE(1393)		 ::flixel::addons::ui::FontDef fontDef = this->_loadFontDef(data);
HXLINE(1394)		::String align = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("align",c5,56,91,21),null(),null());
HXDLIN(1394)		if ((align == HX_("",00,00,00,00))) {
HXLINE(1394)			align = null();
            		}
HXLINE(1395)		int color = this->_loadColor(data,null(),null());
HXLINE(1396)		 ::flixel::addons::ui::BorderDef border = this->_loadBorder(data);
HXLINE(1397)		return  ::flixel::addons::ui::ButtonLabelStyle_obj::__alloc( HX_CTX ,fontDef,align,color,border);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,getLabelStyleFromData,return )

bool FlxUI_obj::checkVariable(::String key,::String otherValue,::String type,::String __o__hx_operator,hx::Null< bool >  __o_recursive){
::String _hx_operator = __o__hx_operator.Default(HX_HCSTRING("==","\x60","\x35","\x00","\x00"));
bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1401_checkVariable)
HXLINE(1402)		::String variable = this->getVariable(key,recursive);
HXLINE(1403)		if (hx::IsNotNull( variable )) {
HXLINE(1405)			return ::flixel::addons::ui::U_obj::compareStringVars(variable,otherValue,type,_hx_operator);
            		}
            		else {
HXLINE(1409)			return ::flixel::addons::ui::U_obj::compareStringVars(HX_("",00,00,00,00),otherValue,type,_hx_operator);
            		}
HXLINE(1403)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxUI_obj,checkVariable,return )

void FlxUI_obj::setVariable(::String key,::String value){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1415_setVariable)
HXDLIN(1415)		this->_variable_index->set(key,value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,setVariable,(void))

::String FlxUI_obj::getVariable(::String key,hx::Null< bool >  __o_recursive){
bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1419_getVariable)
HXLINE(1420)		::String variable = ( (::String)(this->_variable_index->get(key)) );
HXLINE(1421)		bool _hx_tmp;
HXDLIN(1421)		bool _hx_tmp1;
HXDLIN(1421)		if (hx::IsNull( variable )) {
HXLINE(1421)			_hx_tmp1 = recursive;
            		}
            		else {
HXLINE(1421)			_hx_tmp1 = false;
            		}
HXDLIN(1421)		if (_hx_tmp1) {
HXLINE(1421)			_hx_tmp = hx::IsNotNull( this->_superIndexUI );
            		}
            		else {
HXLINE(1421)			_hx_tmp = false;
            		}
HXDLIN(1421)		if (_hx_tmp) {
HXLINE(1423)			variable = this->_superIndexUI->getVariable(key,recursive);
            		}
HXLINE(1425)		return variable;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getVariable,return )

 ::haxe::xml::Fast FlxUI_obj::getDefinition(::String key,hx::Null< bool >  __o_recursive){
bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1429_getDefinition)
HXLINE(1430)		 ::haxe::xml::Fast definition = this->_definition_index->get(key).StaticCast<  ::haxe::xml::Fast >();
HXLINE(1431)		bool _hx_tmp;
HXDLIN(1431)		bool _hx_tmp1;
HXDLIN(1431)		if (hx::IsNull( definition )) {
HXLINE(1431)			_hx_tmp1 = recursive;
            		}
            		else {
HXLINE(1431)			_hx_tmp1 = false;
            		}
HXDLIN(1431)		if (_hx_tmp1) {
HXLINE(1431)			_hx_tmp = hx::IsNotNull( this->_superIndexUI );
            		}
            		else {
HXLINE(1431)			_hx_tmp = false;
            		}
HXDLIN(1431)		if (_hx_tmp) {
HXLINE(1433)			definition = this->_superIndexUI->getDefinition(key,recursive);
            		}
HXLINE(1435)		if (hx::IsNull( definition )) {
HXLINE(1437)			if ((key.indexOf(HX_("include:",12,65,27,66),null()) == (int)-1)) {
HXLINE(1441)				definition = this->getDefinition((HX_("include:",12,65,27,66) + key),recursive);
            			}
            		}
HXLINE(1445)		return definition;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getDefinition,return )

int FlxUI_obj::screenWidth(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1475_screenWidth)
HXLINE(1476)		if (this->hasAsset(HX_("screen",6c,3b,5d,47),null())) {
HXLINE(1478)			return ::Std_obj::_hx_int(::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(this->getAsset(HX_("screen",6c,3b,5d,47),null())));
            		}
HXLINE(1480)		return ::flixel::FlxG_obj::width;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,screenWidth,return )

Float FlxUI_obj::screenHeight(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1484_screenHeight)
HXLINE(1485)		if (this->hasAsset(HX_("height",e7,07,4c,02),null())) {
HXLINE(1487)			return ::Std_obj::_hx_int(::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(this->getAsset(HX_("screen",6c,3b,5d,47),null())));
            		}
HXLINE(1489)		return ::flixel::FlxG_obj::height;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,screenHeight,return )

void FlxUI_obj::replaceInGroup( ::flixel::FlxSprite original, ::flixel::FlxSprite replace,hx::Null< bool >  __o_splice){
bool splice = __o_splice.Default(false);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1526_replaceInGroup)
HXLINE(1529)		if (hx::IsNotNull( this->_group_index )) {
HXLINE(1530)			 ::Dynamic key = this->_group_index->keys();
HXDLIN(1530)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1530)				::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1531)				 ::flixel::addons::ui::FlxUIGroup tempGroup = this->_group_index->get(key1).StaticCast<  ::flixel::addons::ui::FlxUIGroup >();
HXLINE(1532)				if (hx::IsNotNull( tempGroup->group->members )) {
HXLINE(1533)					int i = (int)0;
HXLINE(1534)					{
HXLINE(1534)						int _g = (int)0;
HXDLIN(1534)						::Array< ::Dynamic> _g1 = tempGroup->group->members;
HXDLIN(1534)						while((_g < _g1->length)){
HXLINE(1534)							 ::flixel::FlxSprite member = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(1534)							_g = (_g + (int)1);
HXLINE(1535)							if (hx::IsNotNull( member )) {
HXLINE(1536)								if (hx::IsEq( member,original )) {
HXLINE(1537)									tempGroup->group->members->set(i,replace);
HXLINE(1538)									if (hx::IsNull( replace )) {
HXLINE(1539)										if (splice) {
HXLINE(1540)											tempGroup->group->members->splice(i,(int)1);
HXLINE(1541)											i = (i - (int)1);
            										}
            									}
HXLINE(1544)									return;
            								}
HXLINE(1546)								i = (i + (int)1);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1554)		if (hx::IsNotNull( this->group->members )) {
HXLINE(1555)			int i1 = (int)0;
HXLINE(1556)			{
HXLINE(1556)				int _g2 = (int)0;
HXDLIN(1556)				::Array< ::Dynamic> _g11 = this->group->members;
HXDLIN(1556)				while((_g2 < _g11->length)){
HXLINE(1556)					 ::flixel::FlxSprite member1 = _g11->__get(_g2).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(1556)					_g2 = (_g2 + (int)1);
HXLINE(1557)					if (hx::IsNotNull( member1 )) {
HXLINE(1558)						if (hx::IsEq( member1,original )) {
HXLINE(1559)							this->group->members->set(i1,replace);
HXLINE(1560)							if (hx::IsNull( replace )) {
HXLINE(1561)								if (splice) {
HXLINE(1562)									this->group->members->splice(i1,(int)1);
HXLINE(1563)									i1 = (i1 - (int)1);
            								}
            							}
HXLINE(1566)							return;
            						}
            					}
HXLINE(1569)					i1 = (i1 + (int)1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,replaceInGroup,(void))

 ::haxe::xml::Fast FlxUI_obj::applyNodeConditionals( ::haxe::xml::Fast info){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1576_applyNodeConditionals)
HXLINE(1577)		bool _hx_tmp;
HXDLIN(1577)		if (!(info->hasNode->resolve(HX_("locale",9a,74,bf,59)))) {
HXLINE(1577)			_hx_tmp = info->hasNode->resolve(HX_("haxedef",5f,a1,7a,08));
            		}
            		else {
HXLINE(1577)			_hx_tmp = true;
            		}
HXDLIN(1577)		if (_hx_tmp) {
HXLINE(1578)			info =  ::haxe::xml::Fast_obj::__alloc( HX_CTX ,::Xml_obj::parse(::haxe::xml::Printer_obj::print(info->x,null()))->firstElement());
HXLINE(1580)			if (info->hasNode->resolve(HX_("locale",9a,74,bf,59))) {
HXLINE(1581)				info = this->applyNodeChanges(info,HX_("locale",9a,74,bf,59));
            			}
HXLINE(1584)			if (info->hasNode->resolve(HX_("haxedef",5f,a1,7a,08))) {
HXLINE(1585)				info = this->applyNodeChanges(info,HX_("haxedef",5f,a1,7a,08));
            			}
HXLINE(1588)			if (info->hasNode->resolve(HX_("window",f0,93,8c,52))) {
HXLINE(1589)				info = this->applyNodeChanges(info,HX_("window",f0,93,8c,52));
            			}
            		}
HXLINE(1592)		return info;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,applyNodeConditionals,return )

 ::haxe::xml::Fast FlxUI_obj::applyNodeChanges( ::haxe::xml::Fast data,::String nodeName){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1601_applyNodeChanges)
HXLINE(1604)		::String nodeValue = HX_("",00,00,00,00);
HXLINE(1607)		if ((nodeName == HX_("locale",9a,74,bf,59))) {
HXLINE(1608)			if (hx::IsNull( this->_ptr_tongue )) {
HXLINE(1609)				return data;
            			}
HXLINE(1611)			nodeValue = ( (::String)(this->_ptr_tongue->__Field(HX_("locale",9a,74,bf,59),hx::paccDynamic)) ).toLowerCase();
            		}
HXLINE(1615)		bool haxedef = false;
HXLINE(1616)		if ((nodeName == HX_("haxedef",5f,a1,7a,08))) {
HXLINE(1617)			haxedef = true;
            		}
HXLINE(1621)		if ((nodeName == HX_("window",f0,93,8c,52))) {
HXLINE(1622)			nodeValue = ((::flixel::FlxG_obj::width + HX_(",",2c,00,00,00)) + ::flixel::FlxG_obj::height);
            		}
HXLINE(1625)		{
HXLINE(1625)			 ::_List::ListNode _g_head = data->nodes->resolve(nodeName)->h;
HXDLIN(1625)			while(hx::IsNotNull( _g_head )){
HXLINE(1625)				 ::haxe::xml::Fast val = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(1625)				_g_head = _g_head->next;
HXDLIN(1625)				 ::haxe::xml::Fast cNode = val;
HXLINE(1626)				::String cname = ::flixel::addons::ui::U_obj::xml_name(cNode->x);
HXLINE(1628)				if (haxedef) {
HXLINE(1629)					nodeValue = HX_("",00,00,00,00);
HXLINE(1630)					if (::flixel::addons::ui::U_obj::checkHaxedef(cname)) {
HXLINE(1631)						nodeValue = cname;
            					}
            				}
HXLINE(1635)				if ((cname == nodeValue)) {
HXLINE(1636)					if (cNode->hasNode->resolve(HX_("change",70,91,72,b7))) {
HXLINE(1637)						 ::_List::ListNode _g_head1 = cNode->nodes->resolve(HX_("change",70,91,72,b7))->h;
HXDLIN(1637)						while(hx::IsNotNull( _g_head1 )){
HXLINE(1637)							 ::haxe::xml::Fast val1 = ( ( ::haxe::xml::Fast)(_g_head1->item) );
HXDLIN(1637)							_g_head1 = _g_head1->next;
HXDLIN(1637)							 ::haxe::xml::Fast change = val1;
HXLINE(1638)							{
HXLINE(1638)								 ::Dynamic att = change->x->attributes();
HXDLIN(1638)								while(( (bool)(att->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1638)									::String att1 = ( (::String)(att->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1639)									::String value = change->x->get(att1);
HXLINE(1640)									data->x->set(att1,value);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1647)		return data;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,applyNodeChanges,return )

::Dynamic FlxUI_obj::loadThing(::String type, ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1659_loadThing)
HXDLIN(1659)		return this->_loadThing(type,data);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,loadThing,return )

 ::haxe::xml::Fast FlxUI_obj::_loadThingGetInfo( ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1663__loadThingGetInfo)
HXLINE(1664)		 ::Xml _this = data->x;
HXDLIN(1664)		if ((_this->nodeType != ::Xml_obj::Element)) {
HXLINE(1664)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + _this->nodeType));
            		}
HXDLIN(1664)		::String nodeName = _this->nodeName;
HXLINE(1665)		 ::haxe::xml::Fast defaultDef = this->getDefinition((HX_("default:",59,d0,99,af) + nodeName),null());
HXLINE(1670)		 ::haxe::xml::Fast info = null();
HXLINE(1671)		if (hx::IsNotNull( defaultDef )) {
HXLINE(1673)			info = ::flixel::addons::ui::FlxUI_obj::consolidateData(data,defaultDef,true);
            		}
HXLINE(1676)		if (hx::IsNull( info )) {
HXLINE(1678)			info = data;
            		}
HXLINE(1681)		::String use_def = ::flixel::addons::ui::U_obj::xml_str(info->x,HX_("use_def",8d,da,e9,62),true,null());
HXLINE(1682)		 ::haxe::xml::Fast definition = null();
HXLINE(1683)		if ((use_def != HX_("",00,00,00,00))) {
HXLINE(1685)			definition = this->getDefinition(use_def,null());
            		}
HXLINE(1688)		info = ::flixel::addons::ui::FlxUI_obj::consolidateData(info,definition,null());
HXLINE(1689)		info = this->applyNodeConditionals(info);
HXLINE(1691)		if ((this->_loadTest(info) == false)) {
HXLINE(1693)			return null();
            		}
HXLINE(1696)		return info;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadThingGetInfo,return )

void FlxUI_obj::_loadTooltip(::Dynamic thing, ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1701__loadTooltip)
HXDLIN(1701)		if (data->hasNode->resolve(HX_("tooltip",03,ad,8c,6a))) {
HXLINE(1703)			 ::Dynamic tt = this->_loadTooltipData(data->node->resolve(HX_("tooltip",03,ad,8c,6a)));
HXLINE(1704)			::Dynamic state = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXLINE(1706)			if (::Std_obj::is(thing,hx::ClassOf< ::flixel::addons::ui::FlxUICheckBox >())) {
HXLINE(1708)				 ::flixel::addons::ui::FlxUICheckBox check = ( ( ::flixel::addons::ui::FlxUICheckBox)(thing) );
HXLINE(1709)				( ( ::flixel::addons::ui::FlxUITooltipManager)(state->__Field(HX_("tooltips",10,b6,8a,d0),hx::paccDynamic)) )->add(check->button,tt);
            			}
            			else {
HXLINE(1711)				( ( ::flixel::addons::ui::FlxUITooltipManager)(state->__Field(HX_("tooltips",10,b6,8a,d0),hx::paccDynamic)) )->add(( ( ::flixel::FlxObject)(thing) ),tt);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadTooltip,(void))

 ::Dynamic FlxUI_obj::_loadTooltipData( ::haxe::xml::Fast tNode){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1717__loadTooltipData)
HXLINE(1718)		 ::Dynamic tt =  ::Dynamic(hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("style",31,a5,1d,84), ::Dynamic(hx::Anon_obj::Create(18)
            				->setFixed(0,HX_("bodyWidth",04,e0,6a,8a),(int)-1)
            				->setFixed(1,HX_("titleFormat",ef,5a,1a,94),null())
            				->setFixed(2,HX_("autoSizeHorizontal",d4,74,ce,9f),null())
            				->setFixed(3,HX_("bodyOffset",d5,2b,5c,a7),null())
            				->setFixed(4,HX_("bodyBorder",2e,e1,36,ab),null())
            				->setFixed(5,HX_("rightPadding",55,e9,2b,bb),(int)-1)
            				->setFixed(6,HX_("leftPadding",8a,98,10,d0),(int)-1)
            				->setFixed(7,HX_("borderColor",d7,3c,d5,d6),null())
            				->setFixed(8,HX_("titleWidth",4e,c9,47,dc),(int)-1)
            				->setFixed(9,HX_("titleOffset",4b,63,cb,f6),null())
            				->setFixed(10,HX_("titleBorder",a4,18,a6,fa),null())
            				->setFixed(11,HX_("borderSize",cd,ff,ed,06),(int)-1)
            				->setFixed(12,HX_("arrow",c9,79,8f,25),null())
            				->setFixed(13,HX_("background",ee,93,1d,26),null())
            				->setFixed(14,HX_("bottomPadding",26,1e,2d,2b),(int)-1)
            				->setFixed(15,HX_("topPadding",bc,47,4b,3c),(int)-1)
            				->setFixed(16,HX_("bodyFormat",79,23,ab,44),null())
            				->setFixed(17,HX_("autoSizeVertical",66,58,0d,52),null())))
            			->setFixed(1,HX_("title",98,15,3b,10),HX_("",00,00,00,00))
            			->setFixed(2,HX_("body",a2,7a,1b,41),HX_("",00,00,00,00))
            			->setFixed(3,HX_("anchor",75,3a,71,60),null()));
HXLINE(1747)		 ::haxe::xml::Fast defaultDef = this->getDefinition(HX_("default:tooltip",ca,89,56,af),null());
HXLINE(1748)		if (hx::IsNotNull( defaultDef )) {
HXLINE(1750)			tNode = ::flixel::addons::ui::FlxUI_obj::consolidateData(tNode,defaultDef,true);
            		}
HXLINE(1753)		if (tNode->has->resolve(HX_("use_def",8d,da,e9,62))) {
HXLINE(1755)			::String defStr = ::flixel::addons::ui::U_obj::xml_str(tNode->x,HX_("use_def",8d,da,e9,62),true,null());
HXLINE(1756)			 ::haxe::xml::Fast def = this->getDefinition(defStr,null());
HXLINE(1757)			if (hx::IsNotNull( def )) {
HXLINE(1759)				tNode = ::flixel::addons::ui::FlxUI_obj::consolidateData(tNode,def,true);
            			}
            		}
HXLINE(1763)		if (tNode->has->resolve(HX_("text",ad,cc,f9,4c))) {
HXLINE(1765)			this->_loadTooltipText(tNode,HX_("text",ad,cc,f9,4c),tt);
            		}
HXLINE(1768)		if (tNode->hasNode->resolve(HX_("title",98,15,3b,10))) {
HXLINE(1770)			this->_loadTooltipText(tNode->node->resolve(HX_("title",98,15,3b,10)),HX_("text",ad,cc,f9,4c),tt);
            		}
HXLINE(1772)		if (tNode->hasNode->resolve(HX_("body",a2,7a,1b,41))) {
HXLINE(1774)			this->_loadTooltipText(tNode->node->resolve(HX_("body",a2,7a,1b,41)),HX_("text",ad,cc,f9,4c),tt);
            		}
HXLINE(1777)		tt->__SetField(HX_("anchor",75,3a,71,60),this->_loadAnchor(tNode),hx::paccDynamic);
HXLINE(1779)		this->_loadTooltipStyle(tNode,tt);
HXLINE(1781)		return tt;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadTooltipData,return )

void FlxUI_obj::_loadTooltipStyle( ::haxe::xml::Fast node, ::Dynamic tt){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1785__loadTooltipStyle)
HXLINE(1786)		 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("background",ee,93,1d,26),::flixel::addons::ui::U_obj::xml_color(node->x,HX_("background",ee,93,1d,26),null(),null()),hx::paccDynamic);
HXLINE(1787)		 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("borderSize",cd,ff,ed,06),::flixel::addons::ui::U_obj::xml_i(node->x,HX_("border",ec,4c,1a,64),(int)-1),hx::paccDynamic);
HXLINE(1788)		 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("borderColor",d7,3c,d5,d6),::flixel::addons::ui::U_obj::xml_color(node->x,HX_("border_color",90,7e,e8,6e),null(),null()),hx::paccDynamic);
HXLINE(1790)		 ::Dynamic _hx_tmp;
HXDLIN(1790)		if (node->has->resolve(HX_("arrow",c9,79,8f,25))) {
HXLINE(1790)			 ::Xml data = node->x;
HXDLIN(1790)			::String str = HX_("",00,00,00,00);
HXDLIN(1790)			if (hx::IsNotNull( data->get(HX_("arrow",c9,79,8f,25)) )) {
HXLINE(1790)				str = data->get(HX_("arrow",c9,79,8f,25));
HXDLIN(1790)				bool _hx_tmp1;
HXDLIN(1790)				if ((str != HX_("",00,00,00,00))) {
HXLINE(1790)					_hx_tmp1 = hx::IsNull( str );
            				}
            				else {
HXLINE(1790)					_hx_tmp1 = true;
            				}
HXDLIN(1790)				if (_hx_tmp1) {
HXLINE(1790)					str = HX_("",00,00,00,00);
            				}
            				else {
HXLINE(1790)					str = ::flixel::addons::ui::U_obj::gfx(str,null(),null(),null(),null(),null());
HXDLIN(1790)					try {
            						HX_STACK_CATCHABLE(::String, 0);
HXLINE(1790)						if (!(::openfl::_legacy::Assets_obj::exists(str,::openfl::_legacy::AssetType_obj::IMAGE_dyn()))) {
HXLINE(1790)							HX_STACK_DO_THROW(((HX_("couldn't load bmp \"",73,a2,6e,30) + HX_("arrow",c9,79,8f,25)) + HX_("\"",22,00,00,00)));
            						}
            					}
            					catch( ::Dynamic _hx_e){
            						if (_hx_e.IsClass< ::String >() ){
            							HX_STACK_BEGIN_CATCH
            							::String msg = _hx_e;
HXLINE(1790)							 ::flixel::_hx_system::frontEnds::LogFrontEnd _this = ::flixel::FlxG_obj::log;
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            			}
HXDLIN(1790)			_hx_tmp = str;
            		}
            		else {
HXLINE(1790)			_hx_tmp = null();
            		}
HXDLIN(1790)		 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("arrow",c9,79,8f,25),_hx_tmp,hx::paccDynamic);
HXLINE(1792)		 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("autoSizeHorizontal",d4,74,ce,9f),::flixel::addons::ui::U_obj::xml_bool(node->x,HX_("auto_size_horizontal",d2,fe,ab,ff),true),hx::paccDynamic);
HXLINE(1793)		 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("autoSizeVertical",66,58,0d,52),::flixel::addons::ui::U_obj::xml_bool(node->x,HX_("auto_size_vertical",e4,c6,93,30),true),hx::paccDynamic);
HXLINE(1795)		int padAll = ::Std_obj::_hx_int(this->_loadHeight(node,(int)-1,HX_("pad_all",f5,34,29,cd),null()));
HXLINE(1796)		if ((padAll != (int)-1)) {
HXLINE(1798)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("leftPadding",8a,98,10,d0),( ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("rightPadding",55,e9,2b,bb),( ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("topPadding",bc,47,4b,3c),( ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("bottomPadding",26,1e,2d,2b),padAll,hx::paccDynamic)),hx::paccDynamic)),hx::paccDynamic)),hx::paccDynamic);
            		}
            		else {
HXLINE(1802)			Float _hx_tmp2 = this->_loadWidth(node,(int)0,HX_("pad_left",b3,25,25,be),null());
HXDLIN(1802)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("leftPadding",8a,98,10,d0),::Std_obj::_hx_int(_hx_tmp2),hx::paccDynamic);
HXLINE(1803)			Float _hx_tmp3 = this->_loadWidth(node,(int)0,HX_("pad_right",b0,e4,68,19),null());
HXDLIN(1803)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("rightPadding",55,e9,2b,bb),::Std_obj::_hx_int(_hx_tmp3),hx::paccDynamic);
HXLINE(1804)			Float _hx_tmp4 = this->_loadHeight(node,(int)0,HX_("pad_top",69,a2,37,cd),null());
HXDLIN(1804)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("topPadding",bc,47,4b,3c),::Std_obj::_hx_int(_hx_tmp4),hx::paccDynamic);
HXLINE(1805)			Float _hx_tmp5 = this->_loadHeight(node,(int)0,HX_("pad_bottom",97,c7,b1,39),null());
HXDLIN(1805)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("bottomPadding",26,1e,2d,2b),::Std_obj::_hx_int(_hx_tmp5),hx::paccDynamic);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadTooltipStyle,(void))

void FlxUI_obj::_loadTooltipText( ::haxe::xml::Fast node,::String fieldName, ::Dynamic tt){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1810__loadTooltipText)
HXLINE(1811)		::String nodeName = node->get_name();
HXLINE(1812)		::String text = this->_loadString(node,fieldName);
HXLINE(1814)		Float offset = this->_loadWidth(node,(int)0,HX_("x",78,00,00,00),null());
HXDLIN(1814)		 ::flixel::math::FlxPoint offset1 =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,offset,this->_loadHeight(node,(int)0,HX_("y",79,00,00,00),null()));
HXLINE(1816)		if (node->has->resolve(HX_("use_def",8d,da,e9,62))) {
HXLINE(1818)			::String use_def = ::flixel::addons::ui::U_obj::xml_str(node->x,HX_("use_def",8d,da,e9,62),true,null());
HXLINE(1819)			 ::haxe::xml::Fast the_def = this->getDefinition(use_def,null());
HXLINE(1820)			if (hx::IsNotNull( the_def )) {
HXLINE(1822)				node = ::flixel::addons::ui::FlxUI_obj::consolidateData(node,the_def,null());
            			}
            		}
HXLINE(1826)		 ::flixel::addons::ui::BorderDef border = this->_loadBorder(node);
HXLINE(1827)		 ::flixel::addons::ui::FontDef format = this->_loadFontDef(node);
HXLINE(1828)		 ::Dynamic color = ::flixel::addons::ui::U_obj::xml_color(node->x,HX_("color",63,71,5c,4a),true,(int)-16777216);
HXLINE(1829)		format->format->color = color;
HXLINE(1831)		int W = ::Std_obj::_hx_int(this->_loadWidth(node,(int)-1,HX_("width",06,b6,62,ca),null()));
HXLINE(1833)		::String _hx_switch_0 = nodeName;
            		if (  (_hx_switch_0==HX_("body",a2,7a,1b,41)) ){
HXLINE(1845)			if ((text != HX_("",00,00,00,00))) {
HXLINE(1847)				tt->__SetField(HX_("body",a2,7a,1b,41),text,hx::paccDynamic);
            			}
HXLINE(1849)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("bodyOffset",d5,2b,5c,a7),offset1,hx::paccDynamic);
HXLINE(1850)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("bodyFormat",79,23,ab,44),format,hx::paccDynamic);
HXLINE(1851)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("bodyWidth",04,e0,6a,8a),W,hx::paccDynamic);
HXLINE(1852)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("bodyBorder",2e,e1,36,ab),border,hx::paccDynamic);
HXLINE(1844)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("title",98,15,3b,10)) ||  (_hx_switch_0==HX_("tooltip",03,ad,8c,6a)) ){
HXLINE(1836)			if ((text != HX_("",00,00,00,00))) {
HXLINE(1838)				tt->__SetField(HX_("title",98,15,3b,10),text,hx::paccDynamic);
            			}
HXLINE(1840)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("titleOffset",4b,63,cb,f6),offset1,hx::paccDynamic);
HXLINE(1841)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("titleFormat",ef,5a,1a,94),format,hx::paccDynamic);
HXLINE(1842)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("titleWidth",4e,c9,47,dc),W,hx::paccDynamic);
HXLINE(1843)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("titleBorder",a4,18,a6,fa),border,hx::paccDynamic);
HXLINE(1835)			goto _hx_goto_104;
            		}
            		/* default */{
            		}
            		_hx_goto_104:;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_loadTooltipText,(void))

 ::flixel::addons::ui::Anchor FlxUI_obj::_loadAnchor( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1859__loadAnchor)
HXLINE(1860)		Float xOff = this->_loadWidth(data,(int)0,HX_("x",78,00,00,00),null());
HXLINE(1861)		Float yOff = this->_loadHeight(data,(int)0,HX_("y",79,00,00,00),null());
HXLINE(1862)		if (data->hasNode->resolve(HX_("anchor",75,3a,71,60))) {
HXLINE(1864)			::String xSide = ::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("anchor",75,3a,71,60))->x,HX_("x",78,00,00,00),true,HX_("right",dc,0b,64,e9));
HXLINE(1865)			::String ySide = ::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("anchor",75,3a,71,60))->x,HX_("y",79,00,00,00),true,HX_("top",95,66,58,00));
HXLINE(1866)			::String xFlush = ::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("anchor",75,3a,71,60))->x,HX_("x-flush",ef,49,ba,7e),true,HX_("left",07,08,b0,47));
HXLINE(1867)			::String yFlush = ::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("anchor",75,3a,71,60))->x,HX_("y-flush",b0,c0,4f,a8),true,HX_("top",95,66,58,00));
HXLINE(1868)			return  ::flixel::addons::ui::Anchor_obj::__alloc( HX_CTX ,xOff,yOff,xSide,ySide,xFlush,yFlush);
            		}
HXLINE(1870)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadAnchor,return )

::Dynamic FlxUI_obj::_loadThing(::String type, ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1873__loadThing)
HXLINE(1875)		 ::haxe::xml::Fast info = this->_loadThingGetInfo(data);
HXLINE(1876)		if (hx::IsNull( info )) {
HXLINE(1878)			return null();
            		}
HXLINE(1881)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("align",c5,56,91,21)) ){
HXLINE(1907)			this->_alignThing(info,true);
HXLINE(1908)			return null();
HXLINE(1907)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("bar",d3,b1,4a,00)) ){
HXLINE(1888)			return this->_loadBar(info);
HXDLIN(1888)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("box",0b,be,4a,00)) ){
HXLINE(1886)			return this->_loadBox(info);
HXDLIN(1886)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("button",f2,61,e0,d9)) ){
HXLINE(1892)			return this->_loadButton(info,null(),null(),null());
HXDLIN(1892)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("button_toggle",81,71,c8,4e)) ){
HXLINE(1893)			return this->_loadButton(info,true,true,null());
HXDLIN(1893)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("change",70,91,72,b7)) ){
HXLINE(1912)			this->_changeThing(info);
HXLINE(1913)			return null();
HXLINE(1911)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("checkbox",43,d2,f5,ac)) ){
HXLINE(1900)			return this->_loadCheckBox(info);
HXDLIN(1900)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("failure",4a,70,fa,16)) ){
HXLINE(1903)			if (hx::IsNull( this->_failure_checks )) {
HXLINE(1903)				this->_failure_checks = ::Array_obj< ::Dynamic>::__new();
            			}
HXLINE(1904)			this->unparentXML(info);
HXLINE(1905)			this->_failure_checks->push(info);
HXLINE(1906)			return null();
HXLINE(1903)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("input_text",42,40,18,eb)) ){
HXLINE(1890)			return this->_loadInputText(info);
HXDLIN(1890)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("line",f4,17,b3,47)) ){
HXLINE(1885)			return this->_loadLine(info);
HXDLIN(1885)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("default",c1,d8,c3,9b)) ||  (_hx_switch_0==HX_("group",3f,b3,f4,99)) ||  (_hx_switch_0==HX_("include",28,fe,f6,51)) ||  (_hx_switch_0==HX_("inject",91,4a,ea,97)) ||  (_hx_switch_0==HX_("load_if",96,33,eb,08)) ||  (_hx_switch_0==HX_("mode",63,d3,60,48)) ){
HXLINE(1910)			return null();
HXDLIN(1910)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("chrome",7a,f9,af,c2)) ||  (_hx_switch_0==HX_("nine_slice",45,82,57,9b)) ||  (_hx_switch_0==HX_("nine_slice_sprite",ff,6d,22,c8)) ||  (_hx_switch_0==HX_("nineslice",e0,29,78,d8)) ||  (_hx_switch_0==HX_("nineslicesprite",e5,ad,da,98)) ){
HXLINE(1883)			return this->_load9SliceSprite(info,null());
HXDLIN(1883)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("num_stepper",d8,f2,7c,cd)) ||  (_hx_switch_0==HX_("numeric_stepper",5f,56,dc,30)) ||  (_hx_switch_0==HX_("numstepper",8b,1b,2f,e4)) ){
HXLINE(1891)			return this->_loadNumericStepper(info,null());
HXDLIN(1891)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("position",a9,a0,fa,ca)) ){
HXLINE(1915)			this->name = ::flixel::addons::ui::U_obj::xml_name(info->x);
HXLINE(1916)			::Dynamic thing = this->getAsset(this->name,null());
HXLINE(1917)			if (hx::IsNotNull( thing )) {
HXLINE(1918)				this->_loadPosition(info,thing);
            			}
HXLINE(1920)			return null();
HXLINE(1914)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("dropdown",11,74,2f,fd)) ||  (_hx_switch_0==HX_("dropdown_menu",cd,8f,c7,05)) ||  (_hx_switch_0==HX_("pulldown",a7,ca,a0,a7)) ||  (_hx_switch_0==HX_("pulldown_menu",77,99,46,8c)) ){
HXLINE(1898)			return this->_loadDropDownMenu(info);
HXDLIN(1898)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("radio_group",bb,79,eb,b8)) ){
HXLINE(1901)			return this->_loadRadioGroup(info);
HXDLIN(1901)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("region",f4,c0,8c,00)) ){
HXLINE(1882)			return this->_loadRegion(info);
HXDLIN(1882)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("sprite",05,dc,95,c3)) ){
HXLINE(1887)			return this->_loadSprite(info);
HXDLIN(1887)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("tab_menu",09,73,e1,d6)) ){
HXLINE(1895)			return this->_loadTabMenu(info);
HXDLIN(1895)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("text",ad,cc,f9,4c)) ){
HXLINE(1889)			return this->_loadText(info);
HXDLIN(1889)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("tile_test",43,d2,38,f8)) ){
HXLINE(1884)			return this->_loadTileTest(info);
HXDLIN(1884)			goto _hx_goto_107;
            		}
            		if (  (_hx_switch_0==HX_("layout",aa,ae,b8,58)) ||  (_hx_switch_0==HX_("ui",54,66,00,00)) ){
HXLINE(1902)			return this->_loadLayout(info);
HXDLIN(1902)			goto _hx_goto_107;
            		}
            		/* default */{
HXLINE(1924)			::Dynamic result = this->_ptr;
HXDLIN(1924)			::Dynamic result1 = ::flixel::addons::ui::interfaces::IEventGetter_obj::getRequest(result,(HX_("ui_get:",ef,47,3b,f4) + type),hx::ObjectPtr<OBJ_>(this),info,::cpp::VirtualArray_obj::__new(1)->init(0,data));
HXLINE(1925)			return result1;
            		}
            		_hx_goto_107:;
HXLINE(1881)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadThing,return )

Float FlxUI_obj::_loadX( ::haxe::xml::Fast data,hx::Null< Float >  __o_default_){
Float default_ = __o_default_.Default(0);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1933__loadX)
HXDLIN(1933)		return this->_loadWidth(data,default_,HX_("x",78,00,00,00),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadX,return )

Float FlxUI_obj::_loadY( ::haxe::xml::Fast data,hx::Null< Float >  __o_default_){
Float default_ = __o_default_.Default(0);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1938__loadY)
HXDLIN(1938)		return this->_loadHeight(data,default_,HX_("y",79,00,00,00),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadY,return )

Float FlxUI_obj::_loadScale( ::haxe::xml::Fast data,hx::Null< Float >  __o_default_,::String __o_str){
Float default_ = __o_default_.Default(((Float)1.0));
::String str = __o_str.Default(HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"));
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1943__loadScale)
HXDLIN(1943)		return this->_loadHeight(data,default_,str,HX_("none",b8,12,0a,49));
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_loadScale,return )

Float FlxUI_obj::_loadScaleX( ::haxe::xml::Fast data,hx::Null< Float >  __o_default_){
Float default_ = __o_default_.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1948__loadScaleX)
HXDLIN(1948)		return this->_loadWidth(data,default_,HX_("scale_x",43,58,07,65),HX_("none",b8,12,0a,49));
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadScaleX,return )

Float FlxUI_obj::_loadScaleY( ::haxe::xml::Fast data,hx::Null< Float >  __o_default_){
Float default_ = __o_default_.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1953__loadScaleY)
HXDLIN(1953)		return this->_loadHeight(data,default_,HX_("scale_y",44,58,07,65),HX_("none",b8,12,0a,49));
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadScaleY,return )

Float FlxUI_obj::_loadWidth( ::haxe::xml::Fast data,hx::Null< Float >  __o_default_,::String __o_str,::String __o_defaultRound){
Float default_ = __o_default_.Default(10);
::String str = __o_str.Default(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
::String defaultRound = __o_defaultRound.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1957__loadWidth)
HXLINE(1958)		 ::Xml data1 = data->x;
HXDLIN(1958)		::String ws = ::flixel::addons::ui::U_obj::xml_str(data1,str,true,::Std_obj::string(default_));
HXLINE(1959)		 ::flixel::addons::ui::Rounding round = this->getRound(data,defaultRound);
HXLINE(1960)		return this->doRound(this->_getDataSize(HX_("w",77,00,00,00),ws,default_),round);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,_loadWidth,return )

Float FlxUI_obj::_loadHeight( ::haxe::xml::Fast data,hx::Null< Float >  __o_default_,::String __o_str,::String __o_defaultRound){
Float default_ = __o_default_.Default(10);
::String str = __o_str.Default(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
::String defaultRound = __o_defaultRound.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1964__loadHeight)
HXLINE(1965)		 ::Xml data1 = data->x;
HXDLIN(1965)		::String hs = ::flixel::addons::ui::U_obj::xml_str(data1,str,true,::Std_obj::string(default_));
HXLINE(1966)		 ::flixel::addons::ui::Rounding round = this->getRound(data,defaultRound);
HXLINE(1967)		return this->doRound(this->_getDataSize(HX_("h",68,00,00,00),hs,default_),round);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,_loadHeight,return )

 ::flixel::math::FlxPoint FlxUI_obj::_loadCompass( ::haxe::xml::Fast data,::String __o_str){
::String str = __o_str.Default(HX_HCSTRING("resize_point","\x85","\x44","\xf0","\x71"));
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1971__loadCompass)
HXLINE(1972)		::String cs = ::flixel::addons::ui::U_obj::xml_str(data->x,str,true,HX_("nw",49,60,00,00));
HXLINE(1973)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN(1973)		point->_inPool = false;
HXDLIN(1973)		 ::flixel::math::FlxPoint fp = point;
HXLINE(1974)		::String _hx_switch_0 = cs;
            		if (  (_hx_switch_0==HX_("c",63,00,00,00)) ||  (_hx_switch_0==HX_("center",d5,25,db,05)) ||  (_hx_switch_0==HX_("m",6d,00,00,00)) ||  (_hx_switch_0==HX_("mid",88,11,53,00)) ){
HXLINE(1983)			fp->set_x(((Float)0.5));
HXDLIN(1983)			fp->set_y(((Float)0.5));
HXDLIN(1983)			goto _hx_goto_116;
            		}
            		if (  (_hx_switch_0==HX_("ll",80,5e,00,00)) ||  (_hx_switch_0==HX_("sw",a4,64,00,00)) ){
HXLINE(1981)			fp->set_x((int)0);
HXDLIN(1981)			fp->set_y((int)1);
HXDLIN(1981)			goto _hx_goto_116;
            		}
            		if (  (_hx_switch_0==HX_("n",6e,00,00,00)) ||  (_hx_switch_0==HX_("u",75,00,00,00)) ){
HXLINE(1976)			fp->set_x(((Float)0.5));
HXDLIN(1976)			fp->set_y((int)0);
HXDLIN(1976)			goto _hx_goto_116;
            		}
            		if (  (_hx_switch_0==HX_("nw",49,60,00,00)) ||  (_hx_switch_0==HX_("ul",57,66,00,00)) ){
HXLINE(1975)			fp->set_x((int)0);
HXDLIN(1975)			fp->set_y((int)0);
HXDLIN(1975)			goto _hx_goto_116;
            		}
            		if (  (_hx_switch_0==HX_("e",65,00,00,00)) ||  (_hx_switch_0==HX_("r",72,00,00,00)) ){
HXLINE(1978)			fp->set_x((int)1);
HXDLIN(1978)			fp->set_y(((Float)0.5));
HXDLIN(1978)			goto _hx_goto_116;
            		}
            		if (  (_hx_switch_0==HX_("s",73,00,00,00)) ){
HXLINE(1980)			fp->set_x(((Float)0.5));
HXDLIN(1980)			fp->set_y((int)1);
HXDLIN(1980)			goto _hx_goto_116;
            		}
            		if (  (_hx_switch_0==HX_("lr",86,5e,00,00)) ||  (_hx_switch_0==HX_("se",92,64,00,00)) ){
HXLINE(1979)			fp->set_x((int)1);
HXDLIN(1979)			fp->set_y((int)1);
HXDLIN(1979)			goto _hx_goto_116;
            		}
            		if (  (_hx_switch_0==HX_("ne",37,60,00,00)) ||  (_hx_switch_0==HX_("ur",5d,66,00,00)) ){
HXLINE(1977)			fp->set_x((int)1);
HXDLIN(1977)			fp->set_y((int)0);
HXDLIN(1977)			goto _hx_goto_116;
            		}
            		if (  (_hx_switch_0==HX_("w",77,00,00,00)) ){
HXLINE(1982)			fp->set_x(((Float)0.5));
HXDLIN(1982)			fp->set_y((int)0);
HXDLIN(1982)			goto _hx_goto_116;
            		}
            		_hx_goto_116:;
HXLINE(1985)		return fp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadCompass,return )

void FlxUI_obj::_changeParamsThing( ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1989__changeParamsThing)
HXLINE(1990)		::String name = ::flixel::addons::ui::U_obj::xml_name(data->x);
HXLINE(1991)		::Dynamic thing = this->getAsset(name,null());
HXLINE(1992)		if (hx::IsNull( thing )) {
HXLINE(1993)			return;
            		}
HXLINE(1996)		if (!(::Std_obj::is(thing,hx::ClassOf< ::flixel::addons::ui::interfaces::IHasParams >()))) {
HXLINE(1997)			return;
            		}
HXLINE(2000)		::Dynamic ihp = thing;
HXLINE(2001)		::cpp::VirtualArray params = null();
HXDLIN(2001)		if (data->hasNode->resolve(HX_("param",8d,80,55,bd))) {
HXLINE(2001)			params = ::cpp::VirtualArray_obj::__new();
HXDLIN(2001)			{
HXLINE(2001)				 ::_List::ListNode _g_head = data->nodes->resolve(HX_("param",8d,80,55,bd))->h;
HXDLIN(2001)				while(hx::IsNotNull( _g_head )){
HXLINE(2001)					 ::haxe::xml::Fast val = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(2001)					_g_head = _g_head->next;
HXDLIN(2001)					 ::haxe::xml::Fast param = val;
HXDLIN(2001)					bool _hx_tmp;
HXDLIN(2001)					if (param->has->resolve(HX_("type",ba,f2,08,4d))) {
HXLINE(2001)						_hx_tmp = param->has->resolve(HX_("value",71,7f,b8,31));
            					}
            					else {
HXLINE(2001)						_hx_tmp = false;
            					}
HXDLIN(2001)					if (_hx_tmp) {
HXLINE(2001)						::String type = param->att->resolve(HX_("type",ba,f2,08,4d));
HXDLIN(2001)						type = type.toLowerCase();
HXDLIN(2001)						::String valueStr = param->att->resolve(HX_("value",71,7f,b8,31));
HXDLIN(2001)						 ::Dynamic value = valueStr;
HXDLIN(2001)						int sort = ::flixel::addons::ui::U_obj::xml_i(param->x,HX_("sort",5e,27,58,4c),(int)-1);
HXDLIN(2001)						::String _hx_switch_0 = type;
            						if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_0==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(2001)							::String str = ::String(valueStr);
HXDLIN(2001)							str = str.toLowerCase();
HXDLIN(2001)							bool _hx_tmp1;
HXDLIN(2001)							if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(2001)								_hx_tmp1 = (str == HX_("1",31,00,00,00));
            							}
            							else {
HXLINE(2001)								_hx_tmp1 = true;
            							}
HXDLIN(2001)							if (_hx_tmp1) {
HXLINE(2001)								value = true;
            							}
            							else {
HXLINE(2001)								value = false;
            							}
HXDLIN(2001)							goto _hx_goto_119;
            						}
            						if (  (_hx_switch_0==HX_("color",63,71,5c,4a)) ||  (_hx_switch_0==HX_("hex",db,42,4f,00)) ){
HXLINE(2001)							 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(2001)							if (hx::IsNull( return_val )) {
HXLINE(2001)								HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            							}
HXDLIN(2001)							value = return_val;
HXDLIN(2001)							goto _hx_goto_119;
            						}
            						if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE(2001)							value = ::Std_obj::parseFloat(valueStr);
HXDLIN(2001)							goto _hx_goto_119;
            						}
            						if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ){
HXLINE(2001)							value = ::Std_obj::parseInt(valueStr);
HXDLIN(2001)							goto _hx_goto_119;
            						}
            						if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE(2001)							value = ::String(valueStr);
HXDLIN(2001)							goto _hx_goto_119;
            						}
            						_hx_goto_119:;
HXDLIN(2001)						params->push( ::Dynamic(hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("value",71,7f,b8,31),value)
            							->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            					}
            				}
            			}
HXDLIN(2001)			params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(2001)			{
HXLINE(2001)				int _g1 = (int)0;
HXDLIN(2001)				int _g = params->get_length();
HXDLIN(2001)				while((_g1 < _g)){
HXLINE(2001)					_g1 = (_g1 + (int)1);
HXDLIN(2001)					int i = (_g1 - (int)1);
HXDLIN(2001)					params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)));
            				}
            			}
            		}
HXDLIN(2001)		::flixel::addons::ui::interfaces::IHasParams_obj::set_params(ihp,params);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_changeParamsThing,(void))

void FlxUI_obj::_changeThing( ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2005__changeThing)
HXLINE(2006)		::String name = ::flixel::addons::ui::U_obj::xml_name(data->x);
HXLINE(2007)		::Dynamic thing = this->getAsset(name,null());
HXLINE(2008)		if (hx::IsNull( thing )) {
HXLINE(2010)			return;
            		}
HXLINE(2013)		Float new_width = (int)-1;
HXLINE(2014)		Float new_height = (int)-1;
HXLINE(2016)		::String context = HX_("",00,00,00,00);
HXLINE(2017)		::String code = HX_("",00,00,00,00);
HXLINE(2019)		{
HXLINE(2019)			 ::Dynamic attribute = data->x->attributes();
HXDLIN(2019)			while(( (bool)(attribute->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(2019)				::String attribute1 = ( (::String)(attribute->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(2021)				::String _hx_switch_0 = attribute1;
            				if (  (_hx_switch_0==HX_("height",e7,07,4c,02)) ){
HXLINE(2041)					new_height = this->_loadHeight(data,null(),null(),null());
HXDLIN(2041)					goto _hx_goto_123;
            				}
            				if (  (_hx_switch_0==HX_("label",f4,0d,af,6f)) ){
HXLINE(2031)					::String label = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("label",f4,0d,af,6f),null(),null());
HXLINE(2032)					context = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(2033)					code = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(2034)					label = this->getText(label,context,true,code);
HXLINE(2035)					if (::Std_obj::is(thing,hx::ClassOf< ::flixel::addons::ui::interfaces::ILabeled >())) {
HXLINE(2037)						::Dynamic b = thing;
HXLINE(2038)						::flixel::addons::ui::interfaces::ILabeled_obj::getLabel(b)->set_text(label);
            					}
HXLINE(2031)					goto _hx_goto_123;
            				}
            				if (  (_hx_switch_0==HX_("text",ad,cc,f9,4c)) ){
HXLINE(2023)					if (::Std_obj::is(thing,hx::ClassOf< ::flixel::addons::ui::FlxUIText >())) {
HXLINE(2025)						::String text = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("text",ad,cc,f9,4c),null(),null());
HXLINE(2026)						context = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(2027)						 ::flixel::addons::ui::FlxUIText t = ( ( ::flixel::addons::ui::FlxUIText)(thing) );
HXLINE(2028)						code = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(2029)						t->set_text(this->getText(text,context,true,code));
            					}
HXLINE(2023)					goto _hx_goto_123;
            				}
            				if (  (_hx_switch_0==HX_("width",06,b6,62,ca)) ){
HXLINE(2040)					new_width = this->_loadWidth(data,null(),null(),null());
HXDLIN(2040)					goto _hx_goto_123;
            				}
            				_hx_goto_123:;
            			}
            		}
HXLINE(2044)		if (::Std_obj::is(thing,hx::ClassOf< ::flixel::addons::ui::interfaces::IResizable >())) {
HXLINE(2046)			::Dynamic ir = thing;
HXLINE(2047)			bool _hx_tmp;
HXDLIN(2047)			if ((new_width == (int)-1)) {
HXLINE(2047)				_hx_tmp = (new_height != (int)-1);
            			}
            			else {
HXLINE(2047)				_hx_tmp = true;
            			}
HXDLIN(2047)			if (_hx_tmp) {
HXLINE(2049)				if ((new_width == (int)-1)) {
HXLINE(2049)					new_width = ::flixel::addons::ui::interfaces::IResizable_obj::get_width(ir);
            				}
HXLINE(2050)				if ((new_height == (int)-1)) {
HXLINE(2050)					new_height = ::flixel::addons::ui::interfaces::IResizable_obj::get_height(ir);
            				}
HXLINE(2051)				::flixel::addons::ui::interfaces::IResizable_obj::resize(ir,new_width,new_height);
            			}
            		}
HXLINE(2055)		if (data->hasNode->resolve(HX_("param",8d,80,55,bd))) {
HXLINE(2057)			if (::Std_obj::is(thing,hx::ClassOf< ::flixel::addons::ui::interfaces::IHasParams >())) {
HXLINE(2059)				::Dynamic ihp = thing;
HXLINE(2060)				::cpp::VirtualArray params = null();
HXDLIN(2060)				if (data->hasNode->resolve(HX_("param",8d,80,55,bd))) {
HXLINE(2060)					params = ::cpp::VirtualArray_obj::__new();
HXDLIN(2060)					{
HXLINE(2060)						 ::_List::ListNode _g_head = data->nodes->resolve(HX_("param",8d,80,55,bd))->h;
HXDLIN(2060)						while(hx::IsNotNull( _g_head )){
HXLINE(2060)							 ::haxe::xml::Fast val = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(2060)							_g_head = _g_head->next;
HXDLIN(2060)							 ::haxe::xml::Fast param = val;
HXDLIN(2060)							bool _hx_tmp1;
HXDLIN(2060)							if (param->has->resolve(HX_("type",ba,f2,08,4d))) {
HXLINE(2060)								_hx_tmp1 = param->has->resolve(HX_("value",71,7f,b8,31));
            							}
            							else {
HXLINE(2060)								_hx_tmp1 = false;
            							}
HXDLIN(2060)							if (_hx_tmp1) {
HXLINE(2060)								::String type = param->att->resolve(HX_("type",ba,f2,08,4d));
HXDLIN(2060)								type = type.toLowerCase();
HXDLIN(2060)								::String valueStr = param->att->resolve(HX_("value",71,7f,b8,31));
HXDLIN(2060)								 ::Dynamic value = valueStr;
HXDLIN(2060)								int sort = ::flixel::addons::ui::U_obj::xml_i(param->x,HX_("sort",5e,27,58,4c),(int)-1);
HXDLIN(2060)								::String _hx_switch_1 = type;
            								if (  (_hx_switch_1==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_1==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(2060)									::String str = ::String(valueStr);
HXDLIN(2060)									str = str.toLowerCase();
HXDLIN(2060)									bool _hx_tmp2;
HXDLIN(2060)									if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(2060)										_hx_tmp2 = (str == HX_("1",31,00,00,00));
            									}
            									else {
HXLINE(2060)										_hx_tmp2 = true;
            									}
HXDLIN(2060)									if (_hx_tmp2) {
HXLINE(2060)										value = true;
            									}
            									else {
HXLINE(2060)										value = false;
            									}
HXDLIN(2060)									goto _hx_goto_125;
            								}
            								if (  (_hx_switch_1==HX_("color",63,71,5c,4a)) ||  (_hx_switch_1==HX_("hex",db,42,4f,00)) ){
HXLINE(2060)									 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(2060)									if (hx::IsNull( return_val )) {
HXLINE(2060)										HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            									}
HXDLIN(2060)									value = return_val;
HXDLIN(2060)									goto _hx_goto_125;
            								}
            								if (  (_hx_switch_1==HX_("float",9c,c5,96,02)) ){
HXLINE(2060)									value = ::Std_obj::parseFloat(valueStr);
HXDLIN(2060)									goto _hx_goto_125;
            								}
            								if (  (_hx_switch_1==HX_("int",ef,0c,50,00)) ){
HXLINE(2060)									value = ::Std_obj::parseInt(valueStr);
HXDLIN(2060)									goto _hx_goto_125;
            								}
            								if (  (_hx_switch_1==HX_("string",d1,28,30,11)) ){
HXLINE(2060)									value = ::String(valueStr);
HXDLIN(2060)									goto _hx_goto_125;
            								}
            								_hx_goto_125:;
HXDLIN(2060)								params->push( ::Dynamic(hx::Anon_obj::Create(2)
            									->setFixed(0,HX_("value",71,7f,b8,31),value)
            									->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            							}
            						}
            					}
HXDLIN(2060)					params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(2060)					{
HXLINE(2060)						int _g1 = (int)0;
HXDLIN(2060)						int _g = params->get_length();
HXDLIN(2060)						while((_g1 < _g)){
HXLINE(2060)							_g1 = (_g1 + (int)1);
HXDLIN(2060)							int i = (_g1 - (int)1);
HXDLIN(2060)							params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)));
            						}
            					}
            				}
HXDLIN(2060)				::flixel::addons::ui::interfaces::IHasParams_obj::set_params(ihp,params);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_changeThing,(void))

void FlxUI_obj::_alignThing( ::haxe::xml::Fast data,hx::Null< bool >  __o_suppressError){
bool suppressError = __o_suppressError.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2069__alignThing)
HXDLIN(2069)		if (data->hasNode->resolve(HX_("objects",d4,68,4f,82))) {
HXLINE(2071)			 ::_List::ListNode _g_head = data->nodes->resolve(HX_("objects",d4,68,4f,82))->h;
HXDLIN(2071)			while(hx::IsNotNull( _g_head )){
HXLINE(2071)				 ::haxe::xml::Fast val = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(2071)				_g_head = _g_head->next;
HXDLIN(2071)				 ::haxe::xml::Fast objectNode = val;
HXLINE(2073)				::Array< ::String > objects = ::flixel::addons::ui::U_obj::xml_str(objectNode->x,HX_("value",71,7f,b8,31),true,HX_("",00,00,00,00)).split(HX_(",",2c,00,00,00));
HXLINE(2075)				::String axis = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("axis",a1,1c,79,40),true,null());
HXLINE(2076)				bool _hx_tmp;
HXDLIN(2076)				if ((axis != HX_("horizontal",e4,fc,c3,15))) {
HXLINE(2076)					_hx_tmp = (axis != HX_("vertical",76,bc,15,6a));
            				}
            				else {
HXLINE(2076)					_hx_tmp = false;
            				}
HXDLIN(2076)				if (_hx_tmp) {
HXLINE(2078)					HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("FlxUI._alignThing(): axis must be \"horizontal\" or \"vertical\"!",a0,ea,67,82),null()));
            				}
HXLINE(2082)				Float spacing = (int)-1;
HXLINE(2083)				if ((axis == HX_("horizontal",e4,fc,c3,15))) {
HXLINE(2085)					spacing = this->_getDataSize(HX_("w",77,00,00,00),::flixel::addons::ui::U_obj::xml_str(data->x,HX_("spacing",83,33,bb,91),true,null()),(int)-1);
            				}
            				else {
HXLINE(2089)					spacing = this->_getDataSize(HX_("h",68,00,00,00),::flixel::addons::ui::U_obj::xml_str(data->x,HX_("spacing",83,33,bb,91),true,null()),(int)-1);
            				}
HXLINE(2092)				bool resize = ::flixel::addons::ui::U_obj::xml_bool(data->x,HX_("resize",f4,59,7b,08),null());
HXLINE(2094)				bool grow = ::flixel::addons::ui::U_obj::xml_bool(data->x,HX_("grow",13,dc,6b,44),true);
HXLINE(2095)				bool shrink = ::flixel::addons::ui::U_obj::xml_bool(data->x,HX_("shrink",c9,32,61,28),true);
HXLINE(2097)				 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)-1,(int)-1);
HXDLIN(2097)				point->_inPool = false;
HXDLIN(2097)				 ::flixel::math::FlxPoint bounds = point;
HXLINE(2099)				::String boundsError = HX_("",00,00,00,00);
HXLINE(2101)				if (data->hasNode->resolve(HX_("bounds",75,86,1d,66))) {
HXLINE(2103)					if ((axis == HX_("horizontal",e4,fc,c3,15))) {
HXLINE(2104)						bounds->set_x(this->_getDataSize(HX_("w",77,00,00,00),::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("bounds",75,86,1d,66))->x,HX_("left",07,08,b0,47),null(),null()),(int)-1));
HXLINE(2105)						bounds->set_y(this->_getDataSize(HX_("w",77,00,00,00),::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("bounds",75,86,1d,66))->x,HX_("right",dc,0b,64,e9),null(),null()),(int)-1));
            					}
            					else {
HXLINE(2106)						if ((axis == HX_("vertical",76,bc,15,6a))) {
HXLINE(2107)							bounds->set_x(this->_getDataSize(HX_("h",68,00,00,00),::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("bounds",75,86,1d,66))->x,HX_("top",95,66,58,00),null(),null()),(int)-1));
HXLINE(2108)							bounds->set_y(this->_getDataSize(HX_("h",68,00,00,00),::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("bounds",75,86,1d,66))->x,HX_("bottom",eb,e6,78,65),null(),null()),(int)-1));
            						}
            					}
            				}
HXLINE(2112)				bool _hx_tmp1;
HXDLIN(2112)				if ((bounds->x != (int)-1)) {
HXLINE(2112)					_hx_tmp1 = (bounds->y != (int)-1);
            				}
            				else {
HXLINE(2112)					_hx_tmp1 = false;
            				}
HXDLIN(2112)				if (_hx_tmp1) {
HXLINE(2114)					if ((bounds->y <= bounds->x)) {
HXLINE(2116)						boundsError = ((((HX_("bounds max must be > bounds min! (max=",4c,8b,2f,26) + bounds->y) + HX_(" min=",8b,de,2e,b5)) + bounds->x) + HX_(")",29,00,00,00));
            					}
            				}
            				else {
HXLINE(2121)					boundsError = HX_("missing bound!",9d,f7,06,0b);
            				}
HXLINE(2124)				if ((boundsError == HX_("",00,00,00,00))) {
HXLINE(2126)					this->_doAlign(objects,axis,spacing,resize,bounds,grow,shrink);
            				}
HXLINE(2129)				bool _hx_tmp2;
HXDLIN(2129)				bool _hx_tmp3;
HXDLIN(2129)				if (!(data->hasNode->resolve(HX_("anchor",75,3a,71,60)))) {
HXLINE(2129)					_hx_tmp3 = data->has->resolve(HX_("x",78,00,00,00));
            				}
            				else {
HXLINE(2129)					_hx_tmp3 = true;
            				}
HXDLIN(2129)				if (!(_hx_tmp3)) {
HXLINE(2129)					_hx_tmp2 = data->has->resolve(HX_("y",79,00,00,00));
            				}
            				else {
HXLINE(2129)					_hx_tmp2 = true;
            				}
HXDLIN(2129)				if (_hx_tmp2) {
HXLINE(2131)					int _g = (int)0;
HXDLIN(2131)					while((_g < objects->length)){
HXLINE(2131)						::String object = objects->__get(_g);
HXDLIN(2131)						_g = (_g + (int)1);
HXLINE(2133)						::Dynamic thing = this->getAsset(object,null());
HXLINE(2134)						this->_loadPosition(data,thing);
            					}
            				}
            				else {
HXLINE(2139)					if ((boundsError != HX_("",00,00,00,00))) {
HXLINE(2141)						if (!(suppressError)) {
HXLINE(2143)							 ::flixel::_hx_system::frontEnds::LogFrontEnd _this = ::flixel::FlxG_obj::log;
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE(2151)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("FlxUI._alignThing(): <objects> node not found!",e9,2b,f0,7a),null()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_alignThing,(void))

void FlxUI_obj::_doAlign(::Array< ::String > objects,::String axis,Float spacing,bool resize, ::flixel::math::FlxPoint bounds,hx::Null< bool >  __o_allowGrow,hx::Null< bool >  __o_allowShrink){
bool allowGrow = __o_allowGrow.Default(true);
bool allowShrink = __o_allowShrink.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2157__doAlign)
HXLINE(2158)		Float total_spacing = (int)0;
HXLINE(2159)		Float total_size = (int)0;
HXLINE(2161)		Float bound_range = (bounds->y - bounds->x);
HXLINE(2163)		Float spaces = (objects->length - (int)1);
HXLINE(2164)		Float space_size = (int)0;
HXLINE(2165)		Float object_size = (int)0;
HXLINE(2167)		::String size_prop = HX_("width",06,b6,62,ca);
HXLINE(2168)		::String pos_prop = HX_("x",78,00,00,00);
HXLINE(2169)		if ((axis == HX_("vertical",76,bc,15,6a))) {
HXLINE(2171)			size_prop = HX_("height",e7,07,4c,02);
HXLINE(2172)			pos_prop = HX_("y",79,00,00,00);
            		}
HXLINE(2176)		{
HXLINE(2176)			int _g = (int)0;
HXDLIN(2176)			while((_g < objects->length)){
HXLINE(2176)				::String nameStr = objects->__get(_g);
HXDLIN(2176)				_g = (_g + (int)1);
HXLINE(2178)				::Dynamic widget = this->getAsset(nameStr,null());
HXLINE(2179)				if (hx::IsNotNull( widget )) {
HXLINE(2181)					Float theval = (int)0;
HXLINE(2182)					::String _hx_switch_0 = size_prop;
            					if (  (_hx_switch_0==HX_("height",e7,07,4c,02)) ){
HXLINE(2184)						theval = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(widget);
HXDLIN(2184)						goto _hx_goto_132;
            					}
            					if (  (_hx_switch_0==HX_("width",06,b6,62,ca)) ){
HXLINE(2183)						theval = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(widget);
HXDLIN(2183)						goto _hx_goto_132;
            					}
            					_hx_goto_132:;
HXLINE(2187)					total_size = (total_size + theval);
            				}
            			}
            		}
HXLINE(2191)		if ((resize == false)) {
HXLINE(2193)			total_spacing = (bound_range - total_size);
HXLINE(2194)			space_size = ((Float)total_spacing / (Float)spaces);
            		}
            		else {
HXLINE(2198)			space_size = spacing;
HXLINE(2199)			total_spacing = (spacing * spaces);
HXLINE(2200)			object_size = ((Float)(bound_range - total_spacing) / (Float)objects->length);
            		}
HXLINE(2203)		object_size = ::Std_obj::_hx_int(object_size);
HXLINE(2204)		space_size = ::Std_obj::_hx_int(space_size);
HXLINE(2206)		Float last_pos = bounds->x;
HXLINE(2207)		{
HXLINE(2207)			int _g1 = (int)0;
HXDLIN(2207)			while((_g1 < objects->length)){
HXLINE(2207)				::String nameStr1 = objects->__get(_g1);
HXDLIN(2207)				_g1 = (_g1 + (int)1);
HXLINE(2209)				::Dynamic widget1 = this->getAsset(nameStr1,null());
HXLINE(2210)				if (hx::IsNotNull( widget1 )) {
HXLINE(2211)					Float pos = last_pos;
HXLINE(2212)					if (!(resize)) {
HXLINE(2214)						::String _hx_switch_1 = size_prop;
            						if (  (_hx_switch_1==HX_("height",e7,07,4c,02)) ){
HXLINE(2217)							object_size = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(widget1);
HXDLIN(2217)							goto _hx_goto_134;
            						}
            						if (  (_hx_switch_1==HX_("width",06,b6,62,ca)) ){
HXLINE(2216)							object_size = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(widget1);
HXDLIN(2216)							goto _hx_goto_134;
            						}
            						_hx_goto_134:;
            					}
            					else {
HXLINE(2223)						if (::Std_obj::is(widget1,hx::ClassOf< ::flixel::addons::ui::interfaces::IResizable >())) {
HXLINE(2225)							bool allow = true;
HXLINE(2226)							::Dynamic widgetr = widget1;
HXLINE(2227)							if ((axis == HX_("vertical",76,bc,15,6a))) {
HXLINE(2229)								if ((object_size > ::flixel::addons::ui::interfaces::IResizable_obj::get_width(widgetr))) {
HXLINE(2231)									allow = allowGrow;
            								}
            								else {
HXLINE(2233)									if ((object_size < ::flixel::addons::ui::interfaces::IResizable_obj::get_width(widgetr))) {
HXLINE(2235)										allow = allowShrink;
            									}
            								}
HXLINE(2237)								if (allow) {
HXLINE(2239)									::flixel::addons::ui::interfaces::IResizable_obj::resize(widgetr,::flixel::addons::ui::interfaces::IResizable_obj::get_width(widgetr),object_size);
            								}
            							}
            							else {
HXLINE(2242)								if ((axis == HX_("horizontal",e4,fc,c3,15))) {
HXLINE(2244)									if ((object_size > ::flixel::addons::ui::interfaces::IResizable_obj::get_height(widgetr))) {
HXLINE(2246)										allow = allowGrow;
            									}
            									else {
HXLINE(2248)										if ((object_size < ::flixel::addons::ui::interfaces::IResizable_obj::get_height(widgetr))) {
HXLINE(2250)											allow = allowShrink;
            										}
            									}
HXLINE(2252)									if (allow) {
HXLINE(2254)										::flixel::addons::ui::interfaces::IResizable_obj::resize(widgetr,object_size,::flixel::addons::ui::interfaces::IResizable_obj::get_height(widgetr));
            									}
            								}
            							}
            						}
            					}
HXLINE(2260)					last_pos = ((pos + object_size) + space_size);
HXLINE(2262)					::String _hx_switch_2 = pos_prop;
            					if (  (_hx_switch_2==HX_("x",78,00,00,00)) ){
HXLINE(2264)						::flixel::IFlxSprite_obj::set_x(widget1,pos);
HXDLIN(2264)						goto _hx_goto_135;
            					}
            					if (  (_hx_switch_2==HX_("y",79,00,00,00)) ){
HXLINE(2265)						::flixel::IFlxSprite_obj::set_y(widget1,pos);
HXDLIN(2265)						goto _hx_goto_135;
            					}
            					_hx_goto_135:;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC7(FlxUI_obj,_doAlign,(void))

bool FlxUI_obj::_checkFailure( ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2271__checkFailure)
HXLINE(2272)		::String target = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("target",51,f3,ec,86),true,null());
HXLINE(2273)		::String property = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("property",55,48,38,ac),true,null());
HXLINE(2274)		::String compare = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("compare",a5,18,69,83),true,null());
HXLINE(2275)		::String value = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("value",71,7f,b8,31),true,null());
HXLINE(2277)		::Dynamic thing = this->getAsset(target,null());
HXLINE(2279)		if (hx::IsNull( thing )) {
HXLINE(2280)			return false;
            		}
HXLINE(2283)		Float prop_f = (int)0;
HXLINE(2284)		Float val_f = (int)0;
HXLINE(2286)		Float p = ::flixel::addons::ui::U_obj::perc_to_float(value);
HXLINE(2288)		::String _hx_switch_0 = property;
            		if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("height",e7,07,4c,02)) ){
HXLINE(2290)			prop_f = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(thing);
HXDLIN(2290)			goto _hx_goto_137;
            		}
            		if (  (_hx_switch_0==HX_("w",77,00,00,00)) ||  (_hx_switch_0==HX_("width",06,b6,62,ca)) ){
HXLINE(2289)			prop_f = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(thing);
HXDLIN(2289)			goto _hx_goto_137;
            		}
            		_hx_goto_137:;
HXLINE(2293)		if (::Math_obj::isNaN(p)) {
HXLINE(2294)			if (::flixel::addons::ui::U_obj::isStrNum(value)) {
HXLINE(2295)				val_f = ::Std_obj::parseFloat(value);
            			}
            			else {
HXLINE(2297)				return false;
            			}
            		}
            		else {
HXLINE(2300)			::String _hx_switch_1 = property;
            			if (  (_hx_switch_1==HX_("h",68,00,00,00)) ||  (_hx_switch_1==HX_("height",e7,07,4c,02)) ){
HXLINE(2302)				val_f = (p * this->screenHeight());
HXDLIN(2302)				goto _hx_goto_138;
            			}
            			if (  (_hx_switch_1==HX_("w",77,00,00,00)) ||  (_hx_switch_1==HX_("width",06,b6,62,ca)) ){
HXLINE(2301)				val_f = (p * this->screenWidth());
HXDLIN(2301)				goto _hx_goto_138;
            			}
            			_hx_goto_138:;
            		}
HXLINE(2306)		bool return_val = false;
HXLINE(2308)		::String _hx_switch_2 = compare;
            		if (  (_hx_switch_2==HX_("<",3c,00,00,00)) ){
HXLINE(2309)			if ((prop_f < val_f)) {
HXLINE(2310)				this->failed_by = (val_f - prop_f);
HXLINE(2311)				return_val = true;
            			}
HXLINE(2309)			goto _hx_goto_139;
            		}
            		if (  (_hx_switch_2==HX_("<=",81,34,00,00)) ){
HXLINE(2321)			if ((prop_f <= val_f)) {
HXLINE(2322)				this->failed_by = (val_f - prop_f);
HXLINE(2323)				return_val = true;
            			}
HXLINE(2321)			goto _hx_goto_139;
            		}
            		if (  (_hx_switch_2==HX_("=",3d,00,00,00)) ||  (_hx_switch_2==HX_("==",60,35,00,00)) ){
HXLINE(2317)			if ((prop_f == val_f)) {
HXLINE(2318)				this->failed_by = ::Math_obj::abs((prop_f - val_f));
HXLINE(2319)				return_val = true;
            			}
HXLINE(2317)			goto _hx_goto_139;
            		}
            		if (  (_hx_switch_2==HX_(">",3e,00,00,00)) ){
HXLINE(2313)			if ((prop_f > val_f)) {
HXLINE(2314)				this->failed_by = (prop_f - val_f);
HXLINE(2315)				return_val = true;
            			}
HXLINE(2313)			goto _hx_goto_139;
            		}
            		if (  (_hx_switch_2==HX_(">=",3f,36,00,00)) ){
HXLINE(2325)			if ((prop_f >= val_f)) {
HXLINE(2326)				this->failed_by = (prop_f - val_f);
HXLINE(2327)				return_val = true;
            			}
HXLINE(2325)			goto _hx_goto_139;
            		}
            		_hx_goto_139:;
HXLINE(2331)		return return_val;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_checkFailure,return )

void FlxUI_obj::_resizeThing(::Dynamic fo_r, ::Dynamic bounds){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2335__resizeThing)
HXLINE(2336)		bool do_resize = false;
HXLINE(2337)		Float ww = ::flixel::addons::ui::interfaces::IResizable_obj::get_width(fo_r);
HXLINE(2338)		Float hh = ::flixel::addons::ui::interfaces::IResizable_obj::get_height(fo_r);
HXLINE(2340)		if ((ww < ( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),hx::paccDynamic)) ))) {
HXLINE(2341)			do_resize = true;
HXLINE(2342)			ww = ( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),hx::paccDynamic)) );
            		}
            		else {
HXLINE(2343)			if ((ww > ( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),hx::paccDynamic)) ))) {
HXLINE(2344)				do_resize = true;
HXLINE(2345)				ww = ( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),hx::paccDynamic)) );
            			}
            		}
HXLINE(2348)		if ((hh < ( (Float)(bounds->__Field(HX_("min_height",34,3e,29,69),hx::paccDynamic)) ))) {
HXLINE(2349)			do_resize = true;
HXLINE(2350)			hh = ( (Float)(bounds->__Field(HX_("min_height",34,3e,29,69),hx::paccDynamic)) );
            		}
            		else {
HXLINE(2351)			if ((hh > ( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) ))) {
HXLINE(2352)				do_resize = true;
HXLINE(2353)				hh = ( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) );
            			}
            		}
HXLINE(2356)		if (do_resize) {
HXLINE(2357)			::flixel::addons::ui::interfaces::IResizable_obj::resize(fo_r,ww,hh);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_resizeThing,(void))

void FlxUI_obj::_postLoadThing(::String type, ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2362__postLoadThing)
HXLINE(2363)		if ((type == HX_("load_if",96,33,eb,08))) {
HXLINE(2365)			if (this->_loadTest(data)) {
HXLINE(2367)				if (hx::IsNotNull( data->x->firstElement() )) {
HXLINE(2369)					 ::Dynamic subNode = data->x->elements();
HXDLIN(2369)					while(( (bool)(subNode->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(2369)						 ::Xml subNode1 = ( ( ::Xml)(subNode->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(2371)						if ((subNode1->nodeType != ::Xml_obj::Element)) {
HXLINE(2371)							HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + subNode1->nodeType));
            						}
HXDLIN(2371)						::String nodeType = subNode1->nodeName.toLowerCase();
HXLINE(2372)						this->_postLoadThing(nodeType, ::haxe::xml::Fast_obj::__alloc( HX_CTX ,subNode1));
            					}
            				}
            			}
HXLINE(2376)			return;
            		}
HXLINE(2379)		if ((this->_loadTest(data) == false)) {
HXLINE(2381)			return;
            		}
HXLINE(2384)		::String name = ::flixel::addons::ui::U_obj::xml_name(data->x);
HXLINE(2386)		::Dynamic thing = this->getAsset(name,null());
HXLINE(2387)		bool isGroup = (type == HX_("group",3f,b3,f4,99));
HXLINE(2388)		if (isGroup) {
HXLINE(2390)			thing = this->getGroup(name,null());
            		}
HXLINE(2393)		if ((type == HX_("align",c5,56,91,21))) {
HXLINE(2394)			this->_alignThing(data,null());
            		}
HXLINE(2397)		if ((type == HX_("change",70,91,72,b7))) {
HXLINE(2398)			this->_changeThing(data);
            		}
HXLINE(2401)		if ((type == HX_("position",a9,a0,fa,ca))) {
HXLINE(2402)			this->_loadPosition(data,thing);
HXLINE(2403)			return;
            		}
HXLINE(2406)		if ((type == HX_("cursor",d6,8e,e8,3e))) {
HXLINE(2407)			this->_loadCursor(data);
            		}
HXLINE(2410)		bool _hx_tmp;
HXDLIN(2410)		if (hx::IsNull( thing )) {
HXLINE(2410)			_hx_tmp = !(isGroup);
            		}
            		else {
HXLINE(2410)			_hx_tmp = false;
            		}
HXDLIN(2410)		if (_hx_tmp) {
HXLINE(2411)			return;
            		}
HXLINE(2414)		if (!(isGroup)) {
HXLINE(2416)			::String use_def = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("use_def",8d,da,e9,62),true,null());
HXLINE(2417)			 ::haxe::xml::Fast definition = null();
HXLINE(2418)			if ((use_def != HX_("",00,00,00,00))) {
HXLINE(2419)				definition = this->getDefinition(use_def,null());
            			}
HXLINE(2422)			if (::Std_obj::is(thing,hx::ClassOf< ::flixel::addons::ui::interfaces::IResizable >())) {
HXLINE(2424)				 ::Dynamic ww = this->_getDataSize(HX_("w",77,00,00,00),::flixel::addons::ui::U_obj::xml_str(data->x,HX_("width",06,b6,62,ca),null(),null()),null());
HXLINE(2425)				 ::Dynamic hh = this->_getDataSize(HX_("h",68,00,00,00),::flixel::addons::ui::U_obj::xml_str(data->x,HX_("height",e7,07,4c,02),null(),null()),null());
HXLINE(2426)				bool _hx_tmp1;
HXDLIN(2426)				if (hx::IsNotEq( ww,(int)0 )) {
HXLINE(2426)					_hx_tmp1 = hx::IsEq( ww,::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(thing) );
            				}
            				else {
HXLINE(2426)					_hx_tmp1 = true;
            				}
HXDLIN(2426)				if (_hx_tmp1) {
HXLINE(2428)					ww = null();
            				}
HXLINE(2430)				bool _hx_tmp2;
HXDLIN(2430)				if (hx::IsNotEq( hh,(int)0 )) {
HXLINE(2430)					_hx_tmp2 = hx::IsEq( hh,::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(thing) );
            				}
            				else {
HXLINE(2430)					_hx_tmp2 = true;
            				}
HXDLIN(2430)				if (_hx_tmp2) {
HXLINE(2432)					hh = null();
            				}
HXLINE(2435)				 ::Dynamic bounds = this->calcMaxMinSize(data,null(),null());
HXLINE(2437)				if (hx::IsNotNull( bounds )) {
HXLINE(2439)					if (hx::IsNotNull( ww )) {
HXLINE(2440)						if (hx::IsLess( ww,( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),hx::paccDynamic)) ) )) {
HXLINE(2440)							ww = bounds->__Field(HX_("min_width",59,88,fd,ea),hx::paccDynamic);
            						}
HXLINE(2441)						if (hx::IsGreater( ww,( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),hx::paccDynamic)) ) )) {
HXLINE(2441)							ww = bounds->__Field(HX_("max_width",eb,9a,40,c1),hx::paccDynamic);
            						}
HXLINE(2442)						bounds->__SetField(HX_("min_width",59,88,fd,ea),(bounds->__SetField(HX_("max_width",eb,9a,40,c1),ww,hx::paccDynamic)),hx::paccDynamic);
            					}
HXLINE(2444)					if (hx::IsNotNull( hh )) {
HXLINE(2445)						if (hx::IsLess( hh,( (Float)(bounds->__Field(HX_("min_height",34,3e,29,69),hx::paccDynamic)) ) )) {
HXLINE(2445)							hh = bounds->__Field(HX_("min_height",34,3e,29,69),hx::paccDynamic);
            						}
HXLINE(2446)						if (hx::IsGreater( hh,( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) ) )) {
HXLINE(2446)							hh = bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic);
            						}
HXLINE(2447)						bounds->__SetField(HX_("min_height",34,3e,29,69),(bounds->__SetField(HX_("max_height",62,6b,96,0d),hh,hx::paccDynamic)),hx::paccDynamic);
            					}
HXLINE(2450)					this->_resizeThing(thing,bounds);
            				}
            			}
HXLINE(2454)			{
HXLINE(2454)				Float Y = -(( (Float)(thing->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ));
HXDLIN(2454)				{
HXLINE(2454)					::Dynamic _g = thing;
HXDLIN(2454)					::flixel::IFlxSprite_obj::set_x(_g,(( (Float)(_g->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) + -(( (Float)(thing->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ))));
            				}
HXDLIN(2454)				{
HXLINE(2454)					::Dynamic _g1 = thing;
HXDLIN(2454)					::flixel::IFlxSprite_obj::set_y(_g1,(( (Float)(_g1->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) + Y));
            				}
            			}
HXLINE(2455)			this->_loadPosition(data,thing);
            		}
HXLINE(2458)		::String send_to = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("send_to",52,6b,a5,a8),true,HX_("",00,00,00,00));
HXLINE(2459)		if ((send_to != HX_("",00,00,00,00))) {
HXLINE(2461)			::String _hx_switch_0 = send_to;
            			if (  (_hx_switch_0==HX_("back",27,da,10,41)) ||  (_hx_switch_0==HX_("bottom",eb,e6,78,65)) ){
HXLINE(2463)				this->_sendTo(thing,(int)-1);
HXDLIN(2463)				goto _hx_goto_143;
            			}
            			if (  (_hx_switch_0==HX_("front",a9,18,8e,06)) ||  (_hx_switch_0==HX_("top",95,66,58,00)) ){
HXLINE(2464)				this->_sendTo(thing,(int)1);
HXDLIN(2464)				goto _hx_goto_143;
            			}
            			_hx_goto_143:;
            		}
HXLINE(2468)		bool _hx_tmp3;
HXDLIN(2468)		if (!(isGroup)) {
HXLINE(2468)			_hx_tmp3 = ::Std_obj::is(thing,hx::ClassOf< ::flixel::addons::ui::FlxUI >());
            		}
            		else {
HXLINE(2468)			_hx_tmp3 = false;
            		}
HXDLIN(2468)		if (_hx_tmp3) {
HXLINE(2470)			 ::flixel::addons::ui::FlxUI fui_thing = ( ( ::flixel::addons::ui::FlxUI)(thing) );
HXLINE(2471)			if ((fui_thing->_postLoaded == false)) {
HXLINE(2473)				fui_thing->getEvent(HX_("post_load",a5,55,d0,20),hx::ObjectPtr<OBJ_>(this),null(),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_postLoadThing,(void))

 ::flixel::addons::ui::FlxUITileTest FlxUI_obj::_loadTileTest( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2479__loadTileTest)
HXLINE(2480)		int tiles_w = ::flixel::addons::ui::U_obj::xml_i(data->x,HX_("tiles_w",fd,7b,93,45),(int)2);
HXLINE(2481)		int tiles_h = ::flixel::addons::ui::U_obj::xml_i(data->x,HX_("tiles_h",ee,7b,93,45),(int)2);
HXLINE(2482)		Float w = this->_loadWidth(data,null(),null(),null());
HXLINE(2483)		Float h = this->_loadHeight(data,null(),null(),null());
HXLINE(2485)		 ::Dynamic bounds = this->calcMaxMinSize(data,null(),null());
HXLINE(2488)		if ((w < ( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),hx::paccDynamic)) ))) {
HXLINE(2488)			w = ( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),hx::paccDynamic)) );
            		}
HXLINE(2489)		if ((h < ( (Float)(bounds->__Field(HX_("min_height",34,3e,29,69),hx::paccDynamic)) ))) {
HXLINE(2489)			h = ( (Float)(bounds->__Field(HX_("min_height",34,3e,29,69),hx::paccDynamic)) );
            		}
HXLINE(2491)		int tileWidth = ::Std_obj::_hx_int(((Float)w / (Float)tiles_w));
HXLINE(2492)		int tileHeight = ::Std_obj::_hx_int(((Float)h / (Float)tiles_h));
HXLINE(2494)		if ((tileWidth < tileHeight)) {
HXLINE(2494)			tileHeight = tileWidth;
            		}
            		else {
HXLINE(2495)			if ((tileHeight < tileWidth)) {
HXLINE(2495)				tileWidth = tileHeight;
            			}
            		}
HXLINE(2497)		Float totalw = (tileWidth * tiles_w);
HXLINE(2498)		Float totalh = (tileHeight * tiles_h);
HXLINE(2500)		if ((totalw > ( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),hx::paccDynamic)) ))) {
HXLINE(2500)			tileWidth = ::Std_obj::_hx_int(((Float)( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),hx::paccDynamic)) ) / (Float)tiles_w));
            		}
HXLINE(2501)		if ((totalh > ( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) ))) {
HXLINE(2501)			tileHeight = ::Std_obj::_hx_int(((Float)( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) ) / (Float)tiles_h));
            		}
HXLINE(2503)		if ((tileWidth < tileHeight)) {
HXLINE(2503)			tileHeight = tileWidth;
            		}
            		else {
HXLINE(2504)			if ((tileHeight < tileWidth)) {
HXLINE(2504)				tileWidth = tileHeight;
            			}
            		}
HXLINE(2506)		if ((tileWidth < (int)2)) {
HXLINE(2506)			tileWidth = (int)2;
            		}
HXLINE(2507)		if ((tileHeight < (int)2)) {
HXLINE(2507)			tileHeight = (int)2;
            		}
HXLINE(2509)		int color1 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(::flixel::addons::ui::U_obj::xml_str(data->x,HX_("color1",6e,c5,86,c6),true,HX_("0x808080",30,ad,e5,63)));
HXLINE(2510)		int color2 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(::flixel::addons::ui::U_obj::xml_str(data->x,HX_("color2",6f,c5,86,c6),true,HX_("0xc4c4c4",5b,de,47,ff)));
HXLINE(2512)		int baseTileSize = ::flixel::addons::ui::U_obj::xml_i(data->x,HX_("base_tile_size",c4,2d,3d,a8),(int)-1);
HXLINE(2513)		bool floorToEven = ::flixel::addons::ui::U_obj::xml_bool(data->x,HX_("floor_to_even",eb,3e,ec,20),false);
HXLINE(2515)		 ::flixel::addons::ui::FlxUITileTest ftt =  ::flixel::addons::ui::FlxUITileTest_obj::__alloc( HX_CTX ,(int)0,(int)0,tileWidth,tileHeight,tiles_w,tiles_h,color1,color2,floorToEven);
HXLINE(2516)		ftt->baseTileSize = baseTileSize;
HXLINE(2517)		return ftt;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadTileTest,return )

::String FlxUI_obj::_loadString( ::haxe::xml::Fast data,::String attributeName){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2521__loadString)
HXLINE(2522)		::String string = ::flixel::addons::ui::U_obj::xml_str(data->x,attributeName,null(),null());
HXLINE(2523)		::String context = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(2524)		::String code = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(2525)		string = this->getText(string,context,true,code);
HXLINE(2526)		return string;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadString,return )

::Dynamic FlxUI_obj::_loadText( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2530__loadText)
HXLINE(2531)		::String text = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("text",ad,cc,f9,4c),null(),null());
HXLINE(2532)		::String context = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(2533)		::String code = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(2534)		text = this->getText(text,context,true,code);
HXLINE(2536)		int W = ::Std_obj::_hx_int(this->_loadWidth(data,(int)100,null(),null()));
HXLINE(2537)		int H = ::Std_obj::_hx_int(this->_loadHeight(data,(int)-1,null(),null()));
HXLINE(2539)		::String the_font = this->_loadFontFace(data);
HXLINE(2541)		bool input = ::flixel::addons::ui::U_obj::xml_bool(data->x,HX_("input",0a,c4,1d,be),null());
HXLINE(2542)		if (input) {
HXLINE(2544)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("FlxUI._loadText(): <text> with input has been deprecated. Use <input_text> instead.",96,71,67,6a),null()));
            		}
HXLINE(2547)		::String align = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("align",c5,56,91,21),null(),null());
HXDLIN(2547)		if ((align == HX_("",00,00,00,00))) {
HXLINE(2547)			align = null();
            		}
HXLINE(2548)		int size = ::Std_obj::_hx_int(this->_loadHeight(data,(int)8,HX_("size",c1,a0,53,4c),HX_("floor",cc,d1,96,02)));
HXLINE(2550)		int color = this->_loadColor(data,null(),null());
HXLINE(2552)		 ::flixel::addons::ui::BorderDef border = this->_loadBorder(data);
HXLINE(2554)		::Dynamic ft;
HXLINE(2555)		 ::flixel::addons::ui::FlxUIText ftu =  ::flixel::addons::ui::FlxUIText_obj::__alloc( HX_CTX ,(int)0,(int)0,W,text,size,null());
HXLINE(2556)		ftu->setFormat(the_font,size,color,align,null(),null(),null());
HXLINE(2557)		border->apply(ftu);
HXLINE(2558)		ftu->drawFrame(null());
HXLINE(2559)		ft = ftu;
HXLINE(2561)		if (data->hasNode->resolve(HX_("param",8d,80,55,bd))) {
HXLINE(2562)			::cpp::VirtualArray params = null();
HXDLIN(2562)			if (data->hasNode->resolve(HX_("param",8d,80,55,bd))) {
HXLINE(2562)				params = ::cpp::VirtualArray_obj::__new();
HXDLIN(2562)				{
HXLINE(2562)					 ::_List::ListNode _g_head = data->nodes->resolve(HX_("param",8d,80,55,bd))->h;
HXDLIN(2562)					while(hx::IsNotNull( _g_head )){
HXLINE(2562)						 ::haxe::xml::Fast val = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(2562)						_g_head = _g_head->next;
HXDLIN(2562)						 ::haxe::xml::Fast param = val;
HXDLIN(2562)						bool _hx_tmp;
HXDLIN(2562)						if (param->has->resolve(HX_("type",ba,f2,08,4d))) {
HXLINE(2562)							_hx_tmp = param->has->resolve(HX_("value",71,7f,b8,31));
            						}
            						else {
HXLINE(2562)							_hx_tmp = false;
            						}
HXDLIN(2562)						if (_hx_tmp) {
HXLINE(2562)							::String type = param->att->resolve(HX_("type",ba,f2,08,4d));
HXDLIN(2562)							type = type.toLowerCase();
HXDLIN(2562)							::String valueStr = param->att->resolve(HX_("value",71,7f,b8,31));
HXDLIN(2562)							 ::Dynamic value = valueStr;
HXDLIN(2562)							int sort = ::flixel::addons::ui::U_obj::xml_i(param->x,HX_("sort",5e,27,58,4c),(int)-1);
HXDLIN(2562)							::String _hx_switch_0 = type;
            							if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_0==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(2562)								::String str = ::String(valueStr);
HXDLIN(2562)								str = str.toLowerCase();
HXDLIN(2562)								bool _hx_tmp1;
HXDLIN(2562)								if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(2562)									_hx_tmp1 = (str == HX_("1",31,00,00,00));
            								}
            								else {
HXLINE(2562)									_hx_tmp1 = true;
            								}
HXDLIN(2562)								if (_hx_tmp1) {
HXLINE(2562)									value = true;
            								}
            								else {
HXLINE(2562)									value = false;
            								}
HXDLIN(2562)								goto _hx_goto_148;
            							}
            							if (  (_hx_switch_0==HX_("color",63,71,5c,4a)) ||  (_hx_switch_0==HX_("hex",db,42,4f,00)) ){
HXLINE(2562)								 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(2562)								if (hx::IsNull( return_val )) {
HXLINE(2562)									HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            								}
HXDLIN(2562)								value = return_val;
HXDLIN(2562)								goto _hx_goto_148;
            							}
            							if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE(2562)								value = ::Std_obj::parseFloat(valueStr);
HXDLIN(2562)								goto _hx_goto_148;
            							}
            							if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ){
HXLINE(2562)								value = ::Std_obj::parseInt(valueStr);
HXDLIN(2562)								goto _hx_goto_148;
            							}
            							if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE(2562)								value = ::String(valueStr);
HXDLIN(2562)								goto _hx_goto_148;
            							}
            							_hx_goto_148:;
HXDLIN(2562)							params->push( ::Dynamic(hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("value",71,7f,b8,31),value)
            								->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            						}
            					}
            				}
HXDLIN(2562)				params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(2562)				{
HXLINE(2562)					int _g1 = (int)0;
HXDLIN(2562)					int _g = params->get_length();
HXDLIN(2562)					while((_g1 < _g)){
HXLINE(2562)						_g1 = (_g1 + (int)1);
HXDLIN(2562)						int i = (_g1 - (int)1);
HXDLIN(2562)						params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)));
            					}
            				}
            			}
HXDLIN(2562)			::cpp::VirtualArray params1 = params;
HXLINE(2563)			::Dynamic ihp = ft;
HXLINE(2564)			::flixel::addons::ui::interfaces::IHasParams_obj::set_params(ihp,params1);
            		}
HXLINE(2567)		bool _hx_tmp2;
HXDLIN(2567)		if ((H > (int)0)) {
HXLINE(2567)			_hx_tmp2 = (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(ft) != H);
            		}
            		else {
HXLINE(2567)			_hx_tmp2 = false;
            		}
HXDLIN(2567)		if (_hx_tmp2) {
HXLINE(2569)			if (::Std_obj::is(ft,hx::ClassOf< ::flixel::addons::ui::interfaces::IResizable >())) {
HXLINE(2571)				::Dynamic r = ft;
HXLINE(2572)				::flixel::addons::ui::interfaces::IResizable_obj::resize(r,::flixel::addons::ui::interfaces::IResizable_obj::get_width(r),H);
            			}
            		}
HXLINE(2577)		ftu->set_text(HX_(" ",20,00,00,00));
HXLINE(2578)		ftu->set_text(text);
HXLINE(2580)		return ft;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadText,return )

::Dynamic FlxUI_obj::_loadInputText( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2584__loadInputText)
HXLINE(2585)		::String text = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("text",ad,cc,f9,4c),null(),null());
HXLINE(2586)		::String context = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(2587)		::String code = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(2588)		text = this->getText(text,context,true,code);
HXLINE(2590)		int W = ::Std_obj::_hx_int(this->_loadWidth(data,(int)100,null(),null()));
HXLINE(2591)		int H = ::Std_obj::_hx_int(this->_loadHeight(data,(int)-1,null(),null()));
HXLINE(2593)		::String the_font = this->_loadFontFace(data);
HXLINE(2595)		::String align = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("align",c5,56,91,21),null(),null());
HXDLIN(2595)		if ((align == HX_("",00,00,00,00))) {
HXLINE(2595)			align = null();
            		}
HXLINE(2596)		int size = ::Std_obj::_hx_int(this->_loadHeight(data,(int)8,HX_("size",c1,a0,53,4c),null()));
HXLINE(2597)		int color = this->_loadColor(data,null(),null());
HXLINE(2599)		 ::flixel::addons::ui::BorderDef border = this->_loadBorder(data);
HXLINE(2601)		::String str = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("background",ee,93,1d,26),true,HX_("0x00000000",48,5a,d7,68));
HXDLIN(2601)		 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(str);
HXDLIN(2601)		if (hx::IsNull( return_val )) {
HXLINE(2601)			return_val = (int)0;
            		}
HXDLIN(2601)		int backgroundColor = return_val;
HXLINE(2602)		bool passwordMode = ::flixel::addons::ui::U_obj::xml_bool(data->x,HX_("password_mode",47,aa,e5,09),null());
HXLINE(2604)		::Dynamic ft;
HXLINE(2605)		 ::flixel::addons::ui::FlxUIInputText fti =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,(int)0,(int)0,W,text,size,color,backgroundColor,null());
HXLINE(2606)		fti->set_passwordMode(passwordMode);
HXLINE(2608)		::String force_case = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("force_case",c4,b4,72,f8),true,HX_("",00,00,00,00));
HXLINE(2609)		int forceCase;
HXLINE(2610)		::String _hx_switch_0 = force_case;
            		if (  (_hx_switch_0==HX_("lower",01,fa,ff,78)) ||  (_hx_switch_0==HX_("lower_case",ee,5c,fc,1d)) ||  (_hx_switch_0==HX_("lowercase",31,ad,a5,66)) ){
HXLINE(2613)			forceCase = (int)2;
HXDLIN(2613)			goto _hx_goto_151;
            		}
            		if (  (_hx_switch_0==HX_("l",6c,00,00,00)) ||  (_hx_switch_0==HX_("u",75,00,00,00)) ){
HXLINE(2615)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("FlxUI._loadInputText(): 1 letter values have been deprecated (force_case attribute).",30,f9,74,27),null()));
HXDLIN(2615)			goto _hx_goto_151;
            		}
            		if (  (_hx_switch_0==HX_("upper",62,19,3f,a8)) ||  (_hx_switch_0==HX_("upper_case",ed,dd,2a,23)) ||  (_hx_switch_0==HX_("uppercase",12,91,3e,e7)) ){
HXLINE(2612)			forceCase = (int)1;
HXDLIN(2612)			goto _hx_goto_151;
            		}
            		/* default */{
HXLINE(2616)			forceCase = (int)0;
            		}
            		_hx_goto_151:;
HXLINE(2619)		::String filter = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("filter",b8,1f,35,85),true,HX_("",00,00,00,00));
HXLINE(2620)		int filterMode;
HXLINE(2621)		while((filter.indexOf(HX_("_",5f,00,00,00),null()) != (int)-1)){
HXLINE(2623)			filter = ::StringTools_obj::replace(filter,HX_("_",5f,00,00,00),HX_("",00,00,00,00));
            		}
HXLINE(2626)		::String _hx_switch_1 = filter;
            		if (  (_hx_switch_1==HX_("a",61,00,00,00)) ||  (_hx_switch_1==HX_("an",ed,54,00,00)) ||  (_hx_switch_1==HX_("n",6e,00,00,00)) ){
HXLINE(2632)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("FlxUI._loadInputText(): 1 letter values have been deprecated (filter attribute).",a4,a0,22,50),null()));
HXDLIN(2632)			goto _hx_goto_153;
            		}
            		if (  (_hx_switch_1==HX_("alpha",5e,a7,96,21)) ||  (_hx_switch_1==HX_("onlyalpha",72,fa,2c,18)) ){
HXLINE(2628)			filterMode = (int)1;
HXDLIN(2628)			goto _hx_goto_153;
            		}
            		if (  (_hx_switch_1==HX_("alphanum",a8,a5,41,21)) ||  (_hx_switch_1==HX_("alphanumeric",2f,03,e3,71)) ||  (_hx_switch_1==HX_("onlyalphanumeric",9b,fa,fd,ec)) ){
HXLINE(2630)			filterMode = (int)3;
HXDLIN(2630)			goto _hx_goto_153;
            		}
            		if (  (_hx_switch_1==HX_("num",46,de,53,00)) ||  (_hx_switch_1==HX_("numeric",cd,e2,c0,ab)) ||  (_hx_switch_1==HX_("onlynumeric",e1,22,e1,32)) ){
HXLINE(2629)			filterMode = (int)2;
HXDLIN(2629)			goto _hx_goto_153;
            		}
            		/* default */{
HXLINE(2633)			filterMode = (int)0;
            		}
            		_hx_goto_153:;
HXLINE(2636)		fti->setFormat(the_font,size,color,align,null(),null(),null());
HXLINE(2637)		fti->set_forceCase(forceCase);
HXLINE(2638)		fti->set_filterMode(filterMode);
HXLINE(2639)		border->apply(fti);
HXLINE(2640)		fti->drawFrame(null());
HXLINE(2641)		ft = fti;
HXLINE(2643)		if (data->hasNode->resolve(HX_("param",8d,80,55,bd))) {
HXLINE(2645)			::cpp::VirtualArray params = null();
HXDLIN(2645)			if (data->hasNode->resolve(HX_("param",8d,80,55,bd))) {
HXLINE(2645)				params = ::cpp::VirtualArray_obj::__new();
HXDLIN(2645)				{
HXLINE(2645)					 ::_List::ListNode _g_head = data->nodes->resolve(HX_("param",8d,80,55,bd))->h;
HXDLIN(2645)					while(hx::IsNotNull( _g_head )){
HXLINE(2645)						 ::haxe::xml::Fast val = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(2645)						_g_head = _g_head->next;
HXDLIN(2645)						 ::haxe::xml::Fast param = val;
HXDLIN(2645)						bool _hx_tmp;
HXDLIN(2645)						if (param->has->resolve(HX_("type",ba,f2,08,4d))) {
HXLINE(2645)							_hx_tmp = param->has->resolve(HX_("value",71,7f,b8,31));
            						}
            						else {
HXLINE(2645)							_hx_tmp = false;
            						}
HXDLIN(2645)						if (_hx_tmp) {
HXLINE(2645)							::String type = param->att->resolve(HX_("type",ba,f2,08,4d));
HXDLIN(2645)							type = type.toLowerCase();
HXDLIN(2645)							::String valueStr = param->att->resolve(HX_("value",71,7f,b8,31));
HXDLIN(2645)							 ::Dynamic value = valueStr;
HXDLIN(2645)							int sort = ::flixel::addons::ui::U_obj::xml_i(param->x,HX_("sort",5e,27,58,4c),(int)-1);
HXDLIN(2645)							::String _hx_switch_2 = type;
            							if (  (_hx_switch_2==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_2==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(2645)								::String str1 = ::String(valueStr);
HXDLIN(2645)								str1 = str1.toLowerCase();
HXDLIN(2645)								bool _hx_tmp1;
HXDLIN(2645)								if ((str1 != HX_("true",4e,a7,03,4d))) {
HXLINE(2645)									_hx_tmp1 = (str1 == HX_("1",31,00,00,00));
            								}
            								else {
HXLINE(2645)									_hx_tmp1 = true;
            								}
HXDLIN(2645)								if (_hx_tmp1) {
HXLINE(2645)									value = true;
            								}
            								else {
HXLINE(2645)									value = false;
            								}
HXDLIN(2645)								goto _hx_goto_155;
            							}
            							if (  (_hx_switch_2==HX_("color",63,71,5c,4a)) ||  (_hx_switch_2==HX_("hex",db,42,4f,00)) ){
HXLINE(2645)								 ::Dynamic return_val1 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(2645)								if (hx::IsNull( return_val1 )) {
HXLINE(2645)									HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            								}
HXDLIN(2645)								value = return_val1;
HXDLIN(2645)								goto _hx_goto_155;
            							}
            							if (  (_hx_switch_2==HX_("float",9c,c5,96,02)) ){
HXLINE(2645)								value = ::Std_obj::parseFloat(valueStr);
HXDLIN(2645)								goto _hx_goto_155;
            							}
            							if (  (_hx_switch_2==HX_("int",ef,0c,50,00)) ){
HXLINE(2645)								value = ::Std_obj::parseInt(valueStr);
HXDLIN(2645)								goto _hx_goto_155;
            							}
            							if (  (_hx_switch_2==HX_("string",d1,28,30,11)) ){
HXLINE(2645)								value = ::String(valueStr);
HXDLIN(2645)								goto _hx_goto_155;
            							}
            							_hx_goto_155:;
HXDLIN(2645)							params->push( ::Dynamic(hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("value",71,7f,b8,31),value)
            								->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            						}
            					}
            				}
HXDLIN(2645)				params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(2645)				{
HXLINE(2645)					int _g1 = (int)0;
HXDLIN(2645)					int _g = params->get_length();
HXDLIN(2645)					while((_g1 < _g)){
HXLINE(2645)						_g1 = (_g1 + (int)1);
HXDLIN(2645)						int i = (_g1 - (int)1);
HXDLIN(2645)						params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)));
            					}
            				}
            			}
HXDLIN(2645)			::cpp::VirtualArray params1 = params;
HXLINE(2646)			::Dynamic ihp = ft;
HXLINE(2647)			::flixel::addons::ui::interfaces::IHasParams_obj::set_params(ihp,params1);
            		}
HXLINE(2650)		bool _hx_tmp2;
HXDLIN(2650)		if ((H > (int)0)) {
HXLINE(2650)			_hx_tmp2 = (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(ft) != H);
            		}
            		else {
HXLINE(2650)			_hx_tmp2 = false;
            		}
HXDLIN(2650)		if (_hx_tmp2) {
HXLINE(2652)			if (::Std_obj::is(ft,hx::ClassOf< ::flixel::addons::ui::interfaces::IResizable >())) {
HXLINE(2654)				::Dynamic r = ft;
HXLINE(2655)				::flixel::addons::ui::interfaces::IResizable_obj::resize(r,::flixel::addons::ui::interfaces::IResizable_obj::get_width(r),H);
            			}
            		}
HXLINE(2659)		return ft;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadInputText,return )

 ::flixel::addons::ui::FlxUIRadioGroup FlxUI_obj::_loadRadioGroup( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2739__loadRadioGroup)
HXLINE(2740)		 ::flixel::addons::ui::FlxUIRadioGroup frg = null();
HXLINE(2742)		::String dot_src = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("dot_src",ee,a6,9d,a9),true,null());
HXLINE(2743)		::String radio_src = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("radio_src",60,96,16,fe),true,null());
HXLINE(2745)		::Array< ::String > labels = ::Array_obj< ::String >::__new();
HXLINE(2746)		::Array< ::String > names = ::Array_obj< ::String >::__new();
HXLINE(2748)		int W = this->_loadWidth(data,(int)11,HX_("radio_width",82,7c,59,e9),null());
HXLINE(2749)		int H = this->_loadHeight(data,(int)11,HX_("radio_height",eb,ed,42,fb),null());
HXLINE(2751)		int scrollH = this->_loadHeight(data,(int)0,HX_("height",e7,07,4c,02),null());
HXLINE(2752)		int scrollW = this->_loadHeight(data,(int)0,HX_("width",06,b6,62,ca),null());
HXLINE(2754)		int labelW = this->_loadWidth(data,(int)100,HX_("label_width",3b,fa,b5,dc),null());
HXLINE(2756)		{
HXLINE(2756)			 ::_List::ListNode _g_head = data->nodes->resolve(HX_("radio",fb,10,18,e4))->h;
HXDLIN(2756)			while(hx::IsNotNull( _g_head )){
HXLINE(2756)				 ::haxe::xml::Fast val = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(2756)				_g_head = _g_head->next;
HXDLIN(2756)				 ::haxe::xml::Fast radioNode = val;
HXLINE(2758)				::String name = ::flixel::addons::ui::U_obj::xml_name(radioNode->x);
HXLINE(2759)				::String label = ::flixel::addons::ui::U_obj::xml_str(radioNode->x,HX_("label",f4,0d,af,6f),null(),null());
HXLINE(2761)				::String context = ::flixel::addons::ui::U_obj::xml_str(radioNode->x,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(2762)				::String code = ::flixel::addons::ui::U_obj::xml_str(radioNode->x,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(2763)				label = this->getText(label,context,true,code);
HXLINE(2765)				names->push(name);
HXLINE(2766)				labels->push(label);
            			}
            		}
HXLINE(2769)		names->reverse();
HXLINE(2770)		labels->reverse();
HXLINE(2772)		Float y_space = this->_loadHeight(data,(int)25,HX_("y_space",40,f5,f2,24),null());
HXLINE(2774)		::cpp::VirtualArray params = null();
HXDLIN(2774)		if (data->hasNode->resolve(HX_("param",8d,80,55,bd))) {
HXLINE(2774)			params = ::cpp::VirtualArray_obj::__new();
HXDLIN(2774)			{
HXLINE(2774)				 ::_List::ListNode _g_head1 = data->nodes->resolve(HX_("param",8d,80,55,bd))->h;
HXDLIN(2774)				while(hx::IsNotNull( _g_head1 )){
HXLINE(2774)					 ::haxe::xml::Fast val1 = ( ( ::haxe::xml::Fast)(_g_head1->item) );
HXDLIN(2774)					_g_head1 = _g_head1->next;
HXDLIN(2774)					 ::haxe::xml::Fast param = val1;
HXDLIN(2774)					bool _hx_tmp;
HXDLIN(2774)					if (param->has->resolve(HX_("type",ba,f2,08,4d))) {
HXLINE(2774)						_hx_tmp = param->has->resolve(HX_("value",71,7f,b8,31));
            					}
            					else {
HXLINE(2774)						_hx_tmp = false;
            					}
HXDLIN(2774)					if (_hx_tmp) {
HXLINE(2774)						::String type = param->att->resolve(HX_("type",ba,f2,08,4d));
HXDLIN(2774)						type = type.toLowerCase();
HXDLIN(2774)						::String valueStr = param->att->resolve(HX_("value",71,7f,b8,31));
HXDLIN(2774)						 ::Dynamic value = valueStr;
HXDLIN(2774)						int sort = ::flixel::addons::ui::U_obj::xml_i(param->x,HX_("sort",5e,27,58,4c),(int)-1);
HXDLIN(2774)						::String _hx_switch_0 = type;
            						if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_0==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(2774)							::String str = ::String(valueStr);
HXDLIN(2774)							str = str.toLowerCase();
HXDLIN(2774)							bool _hx_tmp1;
HXDLIN(2774)							if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(2774)								_hx_tmp1 = (str == HX_("1",31,00,00,00));
            							}
            							else {
HXLINE(2774)								_hx_tmp1 = true;
            							}
HXDLIN(2774)							if (_hx_tmp1) {
HXLINE(2774)								value = true;
            							}
            							else {
HXLINE(2774)								value = false;
            							}
HXDLIN(2774)							goto _hx_goto_160;
            						}
            						if (  (_hx_switch_0==HX_("color",63,71,5c,4a)) ||  (_hx_switch_0==HX_("hex",db,42,4f,00)) ){
HXLINE(2774)							 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(2774)							if (hx::IsNull( return_val )) {
HXLINE(2774)								HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            							}
HXDLIN(2774)							value = return_val;
HXDLIN(2774)							goto _hx_goto_160;
            						}
            						if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE(2774)							value = ::Std_obj::parseFloat(valueStr);
HXDLIN(2774)							goto _hx_goto_160;
            						}
            						if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ){
HXLINE(2774)							value = ::Std_obj::parseInt(valueStr);
HXDLIN(2774)							goto _hx_goto_160;
            						}
            						if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE(2774)							value = ::String(valueStr);
HXDLIN(2774)							goto _hx_goto_160;
            						}
            						_hx_goto_160:;
HXDLIN(2774)						params->push( ::Dynamic(hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("value",71,7f,b8,31),value)
            							->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            					}
            				}
            			}
HXDLIN(2774)			params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(2774)			{
HXLINE(2774)				int _g1 = (int)0;
HXDLIN(2774)				int _g = params->get_length();
HXDLIN(2774)				while((_g1 < _g)){
HXLINE(2774)					_g1 = (_g1 + (int)1);
HXDLIN(2774)					int i = (_g1 - (int)1);
HXDLIN(2774)					params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)));
            				}
            			}
            		}
HXDLIN(2774)		::cpp::VirtualArray params1 = params;
HXLINE(2783)		 ::Dynamic radio_asset = null();
HXLINE(2784)		if ((radio_src != HX_("",00,00,00,00))) {
HXLINE(2786)			radio_asset = ::flixel::addons::ui::U_obj::gfx(radio_src,null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(2788)			if (data->hasNode->resolve(HX_("box",0b,be,4a,00))) {
HXLINE(2791)				if ((::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("box",0b,be,4a,00))->x,HX_("slice9",a7,03,04,70),null(),null()) != HX_("",00,00,00,00))) {
HXLINE(2794)					radio_asset = this->_load9SliceSprite(data->node->resolve(HX_("box",0b,be,4a,00)),null());
            				}
            				else {
HXLINE(2799)					radio_asset = this->_loadSprite(data->node->resolve(HX_("box",0b,be,4a,00)));
            				}
            			}
            		}
HXLINE(2803)		 ::Dynamic dot_asset = null();
HXLINE(2804)		if ((dot_src != HX_("",00,00,00,00))) {
HXLINE(2806)			dot_asset = ::flixel::addons::ui::U_obj::gfx(dot_src,null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(2808)			if (data->hasNode->resolve(HX_("dot",89,42,4c,00))) {
HXLINE(2811)				if ((::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("dot",89,42,4c,00))->x,HX_("slice9",a7,03,04,70),null(),null()) != HX_("",00,00,00,00))) {
HXLINE(2814)					dot_asset = this->_load9SliceSprite(data->node->resolve(HX_("dot",89,42,4c,00)),null());
            				}
            				else {
HXLINE(2819)					dot_asset = this->_loadSprite(data->node->resolve(HX_("dot",89,42,4c,00)));
            				}
            			}
            		}
HXLINE(2826)		 ::flixel::math::FlxPoint prevOffset = null();
HXLINE(2827)		 ::flixel::math::FlxPoint nextOffset = null();
HXLINE(2829)		if (data->hasNode->resolve(HX_("button",f2,61,e0,d9))) {
HXLINE(2831)			 ::_List::ListNode _g_head2 = data->nodes->resolve(HX_("button",f2,61,e0,d9))->h;
HXDLIN(2831)			while(hx::IsNotNull( _g_head2 )){
HXLINE(2831)				 ::haxe::xml::Fast val2 = ( ( ::haxe::xml::Fast)(_g_head2->item) );
HXDLIN(2831)				_g_head2 = _g_head2->next;
HXDLIN(2831)				 ::haxe::xml::Fast btnNode = val2;
HXLINE(2833)				::String name1 = ::flixel::addons::ui::U_obj::xml_name(btnNode->x);
HXLINE(2834)				bool _hx_tmp2;
HXDLIN(2834)				if ((name1 != HX_("previous",37,bc,b0,23))) {
HXLINE(2834)					_hx_tmp2 = (name1 == HX_("prev",f3,be,5e,4a));
            				}
            				else {
HXLINE(2834)					_hx_tmp2 = true;
            				}
HXDLIN(2834)				if (_hx_tmp2) {
HXLINE(2836)					Float X = ::flixel::addons::ui::U_obj::xml_f(btnNode->x,HX_("x",78,00,00,00),null());
HXDLIN(2836)					Float Y = ::flixel::addons::ui::U_obj::xml_f(btnNode->x,HX_("y",79,00,00,00),null());
HXDLIN(2836)					 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN(2836)					point->_inPool = false;
HXDLIN(2836)					prevOffset = point;
            				}
            				else {
HXLINE(2838)					if ((name1 == HX_("next",f3,84,02,49))) {
HXLINE(2840)						Float X1 = ::flixel::addons::ui::U_obj::xml_f(btnNode->x,HX_("x",78,00,00,00),null());
HXDLIN(2840)						Float Y1 = ::flixel::addons::ui::U_obj::xml_f(btnNode->x,HX_("y",79,00,00,00),null());
HXDLIN(2840)						 ::flixel::math::FlxPoint point1 = ::flixel::math::FlxPoint_obj::_pool->get()->set(X1,Y1);
HXDLIN(2840)						point1->_inPool = false;
HXDLIN(2840)						nextOffset = point1;
            					}
            				}
            			}
            		}
HXLINE(2845)		frg =  ::flixel::addons::ui::FlxUIRadioGroup_obj::__alloc( HX_CTX ,(int)0,(int)0,names,labels,null(),y_space,W,H,labelW,null(),prevOffset,nextOffset,null(),null());
HXLINE(2846)		frg->set_params(params1);
HXLINE(2848)		bool _hx_tmp3;
HXDLIN(2848)		if (hx::IsNotEq( radio_asset,HX_("",00,00,00,00) )) {
HXLINE(2848)			_hx_tmp3 = hx::IsNotNull( radio_asset );
            		}
            		else {
HXLINE(2848)			_hx_tmp3 = false;
            		}
HXDLIN(2848)		if (_hx_tmp3) {
HXLINE(2850)			frg->loadGraphics(radio_asset,dot_asset);
            		}
HXLINE(2853)		int text_x = ::Std_obj::_hx_int(this->_loadWidth(data,(int)0,HX_("text_x",26,65,88,d8),null()));
HXLINE(2854)		int text_y = ::Std_obj::_hx_int(this->_loadHeight(data,(int)0,HX_("text_y",27,65,88,d8),null()));
HXLINE(2856)		::Array< ::Dynamic> radios = frg->getRadios();
HXLINE(2857)		int i1 = (int)0;
HXLINE(2858)		bool styleSet = false;
HXLINE(2860)		 ::Dynamic radioList = data->x->elementsNamed(HX_("radio",fb,10,18,e4));
HXLINE(2861)		 ::Xml radioNode1 = null();
HXLINE(2863)		{
HXLINE(2863)			int _g11 = (int)0;
HXDLIN(2863)			int _g2 = radios->length;
HXDLIN(2863)			while((_g11 < _g2)){
HXLINE(2863)				_g11 = (_g11 + (int)1);
HXDLIN(2863)				int k = (_g11 - (int)1);
HXLINE(2865)				 ::flixel::addons::ui::FlxUICheckBox fo = radios->__get(((radios->length - (int)1) - k)).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >();
HXLINE(2866)				if (( (bool)(radioList->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )) {
HXLINE(2866)					radioNode1 = ( ( ::Xml)(radioList->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
            				}
            				else {
HXLINE(2866)					radioNode1 = null();
            				}
HXLINE(2867)				if (hx::IsNotNull( fo )) {
HXLINE(2869)					if (::Std_obj::is(fo,hx::ClassOf< ::flixel::addons::ui::FlxUICheckBox >())) {
HXLINE(2871)						 ::flixel::addons::ui::FlxUICheckBox fc = fo;
HXLINE(2872)						 ::flixel::text::FlxText t = this->formatButtonText(data,fc);
HXLINE(2873)						bool _hx_tmp4;
HXDLIN(2873)						if (hx::IsNotNull( t )) {
HXLINE(2873)							_hx_tmp4 = (styleSet == false);
            						}
            						else {
HXLINE(2873)							_hx_tmp4 = false;
            						}
HXDLIN(2873)						if (_hx_tmp4) {
HXLINE(2875)							 ::flixel::addons::ui::FontDef fd = ::flixel::addons::ui::FontDef_obj::copyFromFlxText(t);
HXLINE(2876)							 ::flixel::addons::ui::BorderDef bd =  ::flixel::addons::ui::BorderDef_obj::__alloc( HX_CTX ,t->borderStyle,t->borderColor,t->borderSize,t->borderQuality);
HXLINE(2877)							::String _hx_tmp5 = ::flixel::text::_FlxText::FlxTextAlign_Impl__obj::fromOpenFL(t->_defaultFormat->align);
HXDLIN(2877)							frg->set_activeStyle( ::flixel::addons::ui::CheckStyle_obj::__alloc( HX_CTX ,(int)16777215,fd,_hx_tmp5,t->color,bd));
HXLINE(2878)							styleSet = true;
            						}
HXLINE(2880)						fc->set_textX(text_x);
HXLINE(2881)						fc->set_textY(text_y);
HXLINE(2882)						i1 = (i1 + (int)1);
HXLINE(2883)						if (hx::IsNotNull( radioNode1 )) {
HXLINE(2885)							this->_loadTooltip(fc, ::haxe::xml::Fast_obj::__alloc( HX_CTX ,radioNode1));
            						}
            					}
            				}
            			}
            		}
HXLINE(2891)		if ((scrollW != (int)0)) {
HXLINE(2893)			frg->fixedSize = true;
HXLINE(2894)			frg->set_width(scrollW);
            		}
HXLINE(2896)		if ((scrollH != (int)0)) {
HXLINE(2898)			frg->fixedSize = true;
HXLINE(2899)			frg->set_height(scrollH);
            		}
HXLINE(2902)		return frg;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadRadioGroup,return )

 ::flixel::addons::ui::FlxUICheckBox FlxUI_obj::_loadCheckBox( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2906__loadCheckBox)
HXLINE(2907)		 ::flixel::addons::ui::FlxUICheckBox fc = null();
HXLINE(2909)		::String label = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("label",f4,0d,af,6f),null(),null());
HXLINE(2910)		::String context = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(2911)		::String code = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(2913)		bool checked = ::flixel::addons::ui::U_obj::xml_bool(data->x,HX_("checked",27,b3,24,13),false);
HXLINE(2915)		label = this->getText(label,context,true,code);
HXLINE(2917)		int labelW = this->_loadWidth(data,(int)100,HX_("label_width",3b,fa,b5,dc),null());
HXLINE(2919)		::String check_src = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("check_src",ad,88,29,a8),true,null());
HXLINE(2920)		::String box_src = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("box_src",70,0b,0d,a4),true,null());
HXLINE(2922)		::cpp::VirtualArray params = null();
HXDLIN(2922)		if (data->hasNode->resolve(HX_("param",8d,80,55,bd))) {
HXLINE(2922)			params = ::cpp::VirtualArray_obj::__new();
HXDLIN(2922)			{
HXLINE(2922)				 ::_List::ListNode _g_head = data->nodes->resolve(HX_("param",8d,80,55,bd))->h;
HXDLIN(2922)				while(hx::IsNotNull( _g_head )){
HXLINE(2922)					 ::haxe::xml::Fast val = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(2922)					_g_head = _g_head->next;
HXDLIN(2922)					 ::haxe::xml::Fast param = val;
HXDLIN(2922)					bool _hx_tmp;
HXDLIN(2922)					if (param->has->resolve(HX_("type",ba,f2,08,4d))) {
HXLINE(2922)						_hx_tmp = param->has->resolve(HX_("value",71,7f,b8,31));
            					}
            					else {
HXLINE(2922)						_hx_tmp = false;
            					}
HXDLIN(2922)					if (_hx_tmp) {
HXLINE(2922)						::String type = param->att->resolve(HX_("type",ba,f2,08,4d));
HXDLIN(2922)						type = type.toLowerCase();
HXDLIN(2922)						::String valueStr = param->att->resolve(HX_("value",71,7f,b8,31));
HXDLIN(2922)						 ::Dynamic value = valueStr;
HXDLIN(2922)						int sort = ::flixel::addons::ui::U_obj::xml_i(param->x,HX_("sort",5e,27,58,4c),(int)-1);
HXDLIN(2922)						::String _hx_switch_0 = type;
            						if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_0==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(2922)							::String str = ::String(valueStr);
HXDLIN(2922)							str = str.toLowerCase();
HXDLIN(2922)							bool _hx_tmp1;
HXDLIN(2922)							if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(2922)								_hx_tmp1 = (str == HX_("1",31,00,00,00));
            							}
            							else {
HXLINE(2922)								_hx_tmp1 = true;
            							}
HXDLIN(2922)							if (_hx_tmp1) {
HXLINE(2922)								value = true;
            							}
            							else {
HXLINE(2922)								value = false;
            							}
HXDLIN(2922)							goto _hx_goto_166;
            						}
            						if (  (_hx_switch_0==HX_("color",63,71,5c,4a)) ||  (_hx_switch_0==HX_("hex",db,42,4f,00)) ){
HXLINE(2922)							 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(2922)							if (hx::IsNull( return_val )) {
HXLINE(2922)								HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            							}
HXDLIN(2922)							value = return_val;
HXDLIN(2922)							goto _hx_goto_166;
            						}
            						if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE(2922)							value = ::Std_obj::parseFloat(valueStr);
HXDLIN(2922)							goto _hx_goto_166;
            						}
            						if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ){
HXLINE(2922)							value = ::Std_obj::parseInt(valueStr);
HXDLIN(2922)							goto _hx_goto_166;
            						}
            						if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE(2922)							value = ::String(valueStr);
HXDLIN(2922)							goto _hx_goto_166;
            						}
            						_hx_goto_166:;
HXDLIN(2922)						params->push( ::Dynamic(hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("value",71,7f,b8,31),value)
            							->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            					}
            				}
            			}
HXDLIN(2922)			params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(2922)			{
HXLINE(2922)				int _g1 = (int)0;
HXDLIN(2922)				int _g = params->get_length();
HXDLIN(2922)				while((_g1 < _g)){
HXLINE(2922)					_g1 = (_g1 + (int)1);
HXDLIN(2922)					int i = (_g1 - (int)1);
HXDLIN(2922)					params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)));
            				}
            			}
            		}
HXDLIN(2922)		::cpp::VirtualArray params1 = params;
HXLINE(2924)		 ::Dynamic box_asset = null();
HXLINE(2925)		 ::Dynamic check_asset = null();
HXLINE(2933)		if ((box_src != HX_("",00,00,00,00))) {
HXLINE(2936)			box_asset = ::flixel::addons::ui::U_obj::gfx(box_src,null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(2938)			if (data->hasNode->resolve(HX_("box",0b,be,4a,00))) {
HXLINE(2941)				if ((::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("box",0b,be,4a,00))->x,HX_("slice9",a7,03,04,70),null(),null()) != HX_("",00,00,00,00))) {
HXLINE(2944)					box_asset = this->_load9SliceSprite(data->node->resolve(HX_("box",0b,be,4a,00)),null());
            				}
            				else {
HXLINE(2949)					box_asset = this->_loadSprite(data->node->resolve(HX_("box",0b,be,4a,00)));
            				}
            			}
            		}
HXLINE(2953)		if ((check_src != HX_("",00,00,00,00))) {
HXLINE(2956)			check_asset = ::flixel::addons::ui::U_obj::gfx(check_src,null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(2958)			if (data->hasNode->resolve(HX_("check",c8,98,b6,45))) {
HXLINE(2961)				if ((::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("check",c8,98,b6,45))->x,HX_("slice9",a7,03,04,70),null(),null()) != HX_("",00,00,00,00))) {
HXLINE(2964)					check_asset = this->_load9SliceSprite(data->node->resolve(HX_("check",c8,98,b6,45)),null());
            				}
            				else {
HXLINE(2969)					check_asset = this->_loadSprite(data->node->resolve(HX_("check",c8,98,b6,45)));
            				}
            			}
            		}
HXLINE(2973)		fc =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,(int)0,(int)0,box_asset,check_asset,label,labelW,params1,null());
HXLINE(2974)		this->formatButtonText(data,fc);
HXLINE(2976)		int text_x = ::Std_obj::_hx_int(this->_loadWidth(data,(int)0,HX_("text_x",26,65,88,d8),null()));
HXLINE(2977)		int text_y = ::Std_obj::_hx_int(this->_loadHeight(data,(int)0,HX_("text_y",27,65,88,d8),null()));
HXLINE(2979)		fc->set_textX(text_x);
HXLINE(2980)		fc->set_textY(text_y);
HXLINE(2982)		fc->set_text(label);
HXLINE(2984)		fc->set_checked(checked);
HXLINE(2986)		return fc;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadCheckBox,return )

 ::flixel::addons::ui::FlxUIDropDownMenu FlxUI_obj::_loadDropDownMenu( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2991__loadDropDownMenu)
HXLINE(3015)		 ::flixel::addons::ui::FlxUIDropDownMenu fud = null();
HXLINE(3017)		::String label = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("label",f4,0d,af,6f),null(),null());
HXLINE(3018)		::String context = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(3019)		::String code = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(3020)		label = this->getText(label,context,true,code);
HXLINE(3022)		::String back_def = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("back_def",6d,f8,3d,17),true,null());
HXLINE(3023)		::String panel_def = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("panel_def",ca,cb,5d,a4),true,null());
HXLINE(3024)		::String button_def = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("button_def",b8,c1,34,be),true,null());
HXLINE(3025)		::String label_def = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("label_def",ba,96,96,65),true,null());
HXLINE(3027)		 ::flixel::FlxSprite back_asset = null();
HXLINE(3028)		 ::flixel::addons::ui::FlxUI9SliceSprite panel_asset = null();
HXLINE(3029)		 ::flixel::addons::ui::FlxUISpriteButton button_asset = null();
HXLINE(3030)		 ::flixel::addons::ui::FlxUIText label_asset = null();
HXLINE(3032)		if ((back_def != HX_("",00,00,00,00))) {
HXLINE(3033)			back_asset = this->_loadSprite(this->getDefinition(back_def,null()));
            		}
HXLINE(3036)		if ((panel_def != HX_("",00,00,00,00))) {
HXLINE(3037)			panel_asset = this->_load9SliceSprite(this->getDefinition(panel_def,null()),null());
            		}
HXLINE(3040)		if ((button_def != HX_("",00,00,00,00))) {
HXLINE(3041)			try {
            				HX_STACK_CATCHABLE( ::openfl::errors::Error, 0);
HXLINE(3042)				button_asset = ( ( ::flixel::addons::ui::FlxUISpriteButton)(this->_loadButton(this->getDefinition(button_def,null()),false,false,null())) );
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::openfl::errors::Error >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::openfl::errors::Error e = _hx_e;
HXLINE(3044)					 ::flixel::_hx_system::frontEnds::LogFrontEnd _this = ::flixel::FlxG_obj::log;
HXLINE(3045)					button_asset = null();
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
HXLINE(3049)		if ((label_def != HX_("",00,00,00,00))) {
HXLINE(3050)			try {
            				HX_STACK_CATCHABLE( ::openfl::errors::Error, 0);
HXLINE(3051)				label_asset = ( ( ::flixel::addons::ui::FlxUIText)(this->_loadText(this->getDefinition(label_def,null()))) );
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::openfl::errors::Error >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::openfl::errors::Error e1 = _hx_e;
HXLINE(3053)					 ::flixel::_hx_system::frontEnds::LogFrontEnd _this1 = ::flixel::FlxG_obj::log;
HXLINE(3054)					label_asset = null();
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE(3056)			bool _hx_tmp;
HXDLIN(3056)			if (hx::IsNotNull( label_asset )) {
HXLINE(3056)				_hx_tmp = (label != HX_("",00,00,00,00));
            			}
            			else {
HXLINE(3056)				_hx_tmp = false;
            			}
HXDLIN(3056)			if (_hx_tmp) {
HXLINE(3057)				label_asset->set_text(label);
            			}
            		}
HXLINE(3061)		::Array< ::Dynamic> asset_list = null();
HXLINE(3062)		::Array< ::Dynamic> data_list = null();
HXLINE(3064)		if (data->hasNode->resolve(HX_("data",2a,56,63,42))) {
HXLINE(3065)			 ::_List::ListNode _g_head = data->nodes->resolve(HX_("data",2a,56,63,42))->h;
HXDLIN(3065)			while(hx::IsNotNull( _g_head )){
HXLINE(3065)				 ::haxe::xml::Fast val = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(3065)				_g_head = _g_head->next;
HXDLIN(3065)				 ::haxe::xml::Fast dataNode = val;
HXLINE(3066)				if (hx::IsNull( data_list )) {
HXLINE(3067)					data_list = ::Array_obj< ::Dynamic>::__new();
            				}
HXLINE(3069)				::String namel = ::flixel::addons::ui::U_obj::xml_str(dataNode->x,HX_("name",4b,72,ff,48),true,null());
HXDLIN(3069)				 ::flixel::addons::ui::StrNameLabel namel1 =  ::flixel::addons::ui::StrNameLabel_obj::__alloc( HX_CTX ,namel,::flixel::addons::ui::U_obj::xml_str(dataNode->x,HX_("label",f4,0d,af,6f),null(),null()));
HXLINE(3070)				data_list->push(namel1);
            			}
            		}
            		else {
HXLINE(3072)			if (data->hasNode->resolve(HX_("asset",f0,69,39,26))) {
HXLINE(3073)				 ::_List::ListNode _g_head1 = data->nodes->resolve(HX_("asset",f0,69,39,26))->h;
HXDLIN(3073)				while(hx::IsNotNull( _g_head1 )){
HXLINE(3073)					 ::haxe::xml::Fast val1 = ( ( ::haxe::xml::Fast)(_g_head1->item) );
HXDLIN(3073)					_g_head1 = _g_head1->next;
HXDLIN(3073)					 ::haxe::xml::Fast assetNode = val1;
HXLINE(3074)					if (hx::IsNull( asset_list )) {
HXLINE(3075)						asset_list = ::Array_obj< ::Dynamic>::__new();
            					}
HXLINE(3077)					::String def_name = ::flixel::addons::ui::U_obj::xml_str(assetNode->x,HX_("def",c5,39,4c,00),true,null());
HXLINE(3078)					::String name = ::flixel::addons::ui::U_obj::xml_name(assetNode->x);
HXLINE(3079)					 ::flixel::addons::ui::FlxUIButton asset = null();
HXLINE(3081)					try {
            						HX_STACK_CATCHABLE( ::openfl::errors::Error, 0);
HXLINE(3082)						asset = ( ( ::flixel::addons::ui::FlxUIButton)(this->_loadButton(this->getDefinition(def_name,null()),false,null(),null())) );
            					}
            					catch( ::Dynamic _hx_e){
            						if (_hx_e.IsClass<  ::openfl::errors::Error >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::openfl::errors::Error e2 = _hx_e;
HXLINE(3084)							 ::flixel::_hx_system::frontEnds::LogFrontEnd _this2 = ::flixel::FlxG_obj::log;
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
HXLINE(3087)					if (hx::IsNotNull( asset )) {
HXLINE(3088)						asset->name = name;
HXLINE(3089)						if (hx::IsNull( asset_list )) {
HXLINE(3090)							asset_list = ::Array_obj< ::Dynamic>::__new();
            						}
HXLINE(3092)						asset_list->push(asset);
            					}
            				}
            			}
            		}
HXLINE(3097)		 ::flixel::addons::ui::FlxUIDropDownHeader header =  ::flixel::addons::ui::FlxUIDropDownHeader_obj::__alloc( HX_CTX ,(int)120,back_asset,label_asset,button_asset);
HXLINE(3098)		fud =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,(int)0,(int)0,data_list,null(),header,panel_asset,asset_list,null());
HXLINE(3100)		return fud;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadDropDownMenu,return )

bool FlxUI_obj::_loadTest( ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3103__loadTest)
HXLINE(3104)		bool result = true;
HXLINE(3107)		if ((data->get_name() == HX_("load_if",96,33,eb,08))) {
HXLINE(3109)			result = this->_loadTestSub(data);
HXLINE(3110)			if ((result == false)) {
HXLINE(3112)				return false;
            			}
            		}
HXLINE(3117)		if (data->hasNode->resolve(HX_("load_if",96,33,eb,08))) {
HXLINE(3136)			 ::_List::ListNode _g_head = data->nodes->resolve(HX_("load_if",96,33,eb,08))->h;
HXDLIN(3136)			while(hx::IsNotNull( _g_head )){
HXLINE(3136)				 ::haxe::xml::Fast val = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(3136)				_g_head = _g_head->next;
HXDLIN(3136)				 ::haxe::xml::Fast node = val;
HXLINE(3138)				 ::Xml _this = node->x;
HXDLIN(3138)				bool _hx_tmp;
HXDLIN(3138)				if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE(3138)					_hx_tmp = (_this->nodeType != ::Xml_obj::Element);
            				}
            				else {
HXLINE(3138)					_hx_tmp = false;
            				}
HXDLIN(3138)				if (_hx_tmp) {
HXLINE(3138)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + _this->nodeType));
            				}
HXDLIN(3138)				if (hx::IsNull( _this->children->__get((int)0).StaticCast<  ::Xml >() )) {
HXLINE(3140)					result = this->_loadTestSub(node);
HXLINE(3141)					if ((result == false)) {
HXLINE(3143)						return false;
            					}
            				}
            			}
            		}
HXLINE(3148)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadTest,return )

bool FlxUI_obj::_loadTestSub( ::haxe::xml::Fast node){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3152__loadTestSub)
HXLINE(3153)		bool matchValue = ::flixel::addons::ui::U_obj::xml_bool(node->x,HX_("is",ea,5b,00,00),true);
HXLINE(3154)		bool match = matchValue;
HXLINE(3157)		Float aspect_ratio = ::flixel::addons::ui::U_obj::xml_f(node->x,HX_("aspect_ratio",24,04,8d,fd),(int)-1);
HXLINE(3158)		if ((aspect_ratio != (int)-1)) {
HXLINE(3159)			match = true;
HXLINE(3160)			Float screen_ratio = hx::TCast< Float >::cast(::flixel::FlxG_obj::width);
HXDLIN(3160)			Float screen_ratio1 = ((Float)screen_ratio / (Float)hx::TCast< Float >::cast(::flixel::FlxG_obj::height));
HXLINE(3161)			Float diff = ::Math_obj::abs((screen_ratio1 - aspect_ratio));
HXLINE(3162)			if (node->has->resolve(HX_("tolerance",0d,3d,7c,33))) {
HXLINE(3164)				Float tolerance = ::flixel::addons::ui::U_obj::xml_f(node->x,HX_("tolerance",0d,3d,7c,33),((Float)0.1));
HXLINE(3165)				if ((diff > tolerance)) {
HXLINE(3166)					match = false;
            				}
            			}
            			else {
HXLINE(3169)				bool _hx_tmp;
HXDLIN(3169)				if (!(node->has->resolve(HX_("tolerance_plus",0c,af,15,a0)))) {
HXLINE(3169)					_hx_tmp = node->has->resolve(HX_("tolerance_minus",7e,cc,ae,b6));
            				}
            				else {
HXLINE(3169)					_hx_tmp = true;
            				}
HXDLIN(3169)				if (_hx_tmp) {
HXLINE(3171)					Float tolerance_minus = ::flixel::addons::ui::U_obj::xml_f(node->x,HX_("tolerance_minus",7e,cc,ae,b6),(int)-1);
HXLINE(3172)					Float tolerance_plus = ::flixel::addons::ui::U_obj::xml_f(node->x,HX_("tolerance_plus",0c,af,15,a0),(int)-1);
HXLINE(3173)					bool _hx_tmp1;
HXDLIN(3173)					if ((screen_ratio1 > aspect_ratio)) {
HXLINE(3173)						_hx_tmp1 = (tolerance_plus != (int)-1);
            					}
            					else {
HXLINE(3173)						_hx_tmp1 = false;
            					}
HXDLIN(3173)					if (_hx_tmp1) {
HXLINE(3175)						if ((diff > tolerance_plus)) {
HXLINE(3177)							match = false;
            						}
            					}
HXLINE(3180)					bool _hx_tmp2;
HXDLIN(3180)					if ((screen_ratio1 < aspect_ratio)) {
HXLINE(3180)						_hx_tmp2 = (tolerance_minus != (int)-1);
            					}
            					else {
HXLINE(3180)						_hx_tmp2 = false;
            					}
HXDLIN(3180)					if (_hx_tmp2) {
HXLINE(3182)						if ((diff > tolerance_minus)) {
HXLINE(3184)							match = false;
            						}
            					}
            				}
            			}
HXLINE(3188)			if ((match != matchValue)) {
HXLINE(3189)				return false;
            			}
            		}
HXLINE(3194)		 ::flixel::math::FlxPoint resolution = ::flixel::addons::ui::U_obj::xml_pt(node->x,HX_("resolution",2c,35,49,6d),null());
HXLINE(3195)		if (hx::IsNotNull( resolution )) {
HXLINE(3197)			match = true;
HXLINE(3198)			 ::flixel::math::FlxPoint toleranceRes = ::flixel::addons::ui::U_obj::xml_pt(node->x,HX_("tolerance",0d,3d,7c,33),null());
HXLINE(3199)			if (hx::IsNull( toleranceRes )) {
HXLINE(3199)				toleranceRes =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,(int)0,(int)0);
            			}
HXLINE(3200)			Float diffX = ::Math_obj::abs((resolution->x - ::flixel::FlxG_obj::width));
HXLINE(3201)			Float diffY = ::Math_obj::abs((resolution->y - ::flixel::FlxG_obj::height));
HXLINE(3202)			bool _hx_tmp3;
HXDLIN(3202)			if (!((diffX > toleranceRes->x))) {
HXLINE(3202)				_hx_tmp3 = (diffY > toleranceRes->y);
            			}
            			else {
HXLINE(3202)				_hx_tmp3 = true;
            			}
HXDLIN(3202)			if (_hx_tmp3) {
HXLINE(3204)				match = false;
            			}
HXLINE(3206)			if ((match != matchValue)) {
HXLINE(3207)				return false;
            			}
            		}
HXLINE(3212)		::String haxeDef = ::flixel::addons::ui::U_obj::xml_str(node->x,HX_("haxedef",5f,a1,7a,08),true,HX_("",00,00,00,00));
HXLINE(3213)		bool haxeVal = ::flixel::addons::ui::U_obj::xml_bool(node->x,HX_("value",71,7f,b8,31),true);
HXLINE(3215)		if ((haxeDef != HX_("",00,00,00,00))) {
HXLINE(3216)			match = true;
HXLINE(3217)			bool defValue = ::flixel::addons::ui::U_obj::checkHaxedef(haxeDef);
HXLINE(3218)			match = (defValue == haxeVal);
HXLINE(3219)			if ((match != matchValue)) {
HXLINE(3220)				return false;
            			}
            		}
HXLINE(3225)		::String variable = ::flixel::addons::ui::U_obj::xml_str(node->x,HX_("variable",3c,12,0d,69),false,HX_("",00,00,00,00));
HXLINE(3226)		::String variableType = ::flixel::addons::ui::U_obj::xml_str(node->x,HX_("type",ba,f2,08,4d),true,HX_("string",d1,28,30,11));
HXLINE(3227)		if ((variable != HX_("",00,00,00,00))) {
HXLINE(3229)			match = true;
HXLINE(3230)			 ::Dynamic varData = this->parseVarValue(variable);
HXLINE(3231)			if (hx::IsNotNull( varData )) {
HXLINE(3233)				match = this->checkVariable(( (::String)(varData->__Field(HX_("variable",3c,12,0d,69),hx::paccDynamic)) ),( (::String)(varData->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) ),variableType,( (::String)(varData->__Field(HX_("operator",a4,1b,73,44),hx::paccDynamic)) ),null());
            			}
HXLINE(3235)			if ((match != matchValue)) {
HXLINE(3236)				return false;
            			}
            		}
HXLINE(3239)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadTestSub,return )

 ::Dynamic FlxUI_obj::parseVarValue(::String varString){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3242_parseVarValue)
HXLINE(3243)		::Array< ::String > arr = ::Array_obj< ::String >::fromData( _hx_array_data_e9110855_177,8);
HXLINE(3244)		::Array< ::String > temp;
HXLINE(3245)		{
HXLINE(3245)			int _g = (int)0;
HXDLIN(3245)			while((_g < arr->length)){
HXLINE(3245)				::String op = arr->__get(_g);
HXDLIN(3245)				_g = (_g + (int)1);
HXLINE(3247)				if ((varString.indexOf(op,null()) != (int)-1)) {
HXLINE(3249)					temp = varString.split(op);
HXLINE(3250)					bool _hx_tmp;
HXDLIN(3250)					if (hx::IsNotNull( temp )) {
HXLINE(3250)						_hx_tmp = (temp->length == (int)2);
            					}
            					else {
HXLINE(3250)						_hx_tmp = false;
            					}
HXDLIN(3250)					if (_hx_tmp) {
HXLINE(3252)						return  ::Dynamic(hx::Anon_obj::Create(3)
            							->setFixed(0,HX_("value",71,7f,b8,31),temp->__get((int)1))
            							->setFixed(1,HX_("operator",a4,1b,73,44),op)
            							->setFixed(2,HX_("variable",3c,12,0d,69),temp->__get((int)0)));
            					}
            				}
            			}
            		}
HXLINE(3256)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,parseVarValue,return )

 ::flixel::addons::ui::FlxUI FlxUI_obj::_loadLayout( ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3260__loadLayout)
HXLINE(3261)		::String name = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("name",4b,72,ff,48),true,null());
HXLINE(3262)		Float X = this->_loadWidth(data,(int)0,HX_("x",78,00,00,00),null());
HXLINE(3263)		Float Y = this->_loadHeight(data,(int)0,HX_("y",79,00,00,00),null());
HXLINE(3264)		 ::flixel::addons::ui::FlxUI _ui = this->createUI(data);
HXLINE(3265)		_ui->set_x(X);
HXLINE(3266)		_ui->set_y(Y);
HXLINE(3267)		_ui->name = name;
HXLINE(3268)		return _ui;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadLayout,return )

void FlxUI_obj::addToCleanup(::String str){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3272_addToCleanup)
HXLINE(3273)		if (hx::IsNull( this->_assetsToCleanUp )) {
HXLINE(3273)			return;
            		}
HXLINE(3274)		if ((this->_assetsToCleanUp->indexOf(str,null()) == (int)-1)) {
HXLINE(3276)			this->_assetsToCleanUp->push(str);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,addToCleanup,(void))

void FlxUI_obj::addToScaledAssets(::String str){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3282_addToScaledAssets)
HXDLIN(3282)		bool _hx_tmp;
HXDLIN(3282)		if (hx::IsNotNull( this->_scaledAssets )) {
HXDLIN(3282)			_hx_tmp = (this->_scaledAssets->indexOf(str,null()) == (int)-1);
            		}
            		else {
HXDLIN(3282)			_hx_tmp = false;
            		}
HXDLIN(3282)		if (_hx_tmp) {
HXLINE(3284)			this->_scaledAssets->push(str);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,addToScaledAssets,(void))

void FlxUI_obj::cleanup(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3289_cleanup)
HXLINE(3290)		{
HXLINE(3290)			int _g = (int)0;
HXDLIN(3290)			::Array< ::String > _g1 = this->_assetsToCleanUp;
HXDLIN(3290)			while((_g < _g1->length)){
HXLINE(3290)				::String key = _g1->__get(_g);
HXDLIN(3290)				_g = (_g + (int)1);
HXLINE(3292)				::flixel::FlxG_obj::bitmap->removeByKey(key);
            			}
            		}
HXLINE(3294)		this->_assetsToCleanUp = null();
HXLINE(3295)		this->_scaledAssets = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,cleanup,(void))

 ::flixel::addons::ui::FlxUI FlxUI_obj::createUI( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3300_createUI)
HXDLIN(3300)		return  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,data,hx::ObjectPtr<OBJ_>(this),hx::ObjectPtr<OBJ_>(this),this->_ptr_tongue,this->liveFilePath,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,createUI,return )

 ::flixel::addons::ui::FlxUITabMenu FlxUI_obj::_loadTabMenu( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3303__loadTabMenu)
HXLINE(3305)		::String back_def_str = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("back_def",6d,f8,3d,17),null(),null());
HXLINE(3306)		 ::haxe::xml::Fast back_def = this->getDefinition(back_def_str,null());
HXLINE(3307)		if (hx::IsNull( back_def )) {
HXLINE(3308)			back_def = data;
            		}
HXLINE(3310)		back_def = ::flixel::addons::ui::FlxUI_obj::consolidateData(back_def,data,null());
HXLINE(3312)		::String back_type = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("back_type",12,07,9e,49),true,HX_("chrome",7a,f9,af,c2));
HXLINE(3314)		 ::flixel::FlxSprite backSprite;
HXDLIN(3314)		::String _hx_switch_0 = back_type;
            		if (  (_hx_switch_0==HX_("region",f4,c0,8c,00)) ){
HXLINE(3314)			backSprite =  ::flixel::addons::ui::FlxUIRegion_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXDLIN(3314)			goto _hx_goto_184;
            		}
            		if (  (_hx_switch_0==HX_("sprite",05,dc,95,c3)) ){
HXLINE(3314)			backSprite = this->_loadSprite(back_def);
HXDLIN(3314)			goto _hx_goto_184;
            		}
            		/* default */{
HXLINE(3314)			backSprite = this->_load9SliceSprite(back_def,HX_("tab_menu",09,73,e1,d6));
            		}
            		_hx_goto_184:;
HXLINE(3321)		 ::haxe::xml::Fast tab_def = null();
HXLINE(3323)		bool stretch_tabs = ::flixel::addons::ui::U_obj::xml_bool(data->x,HX_("stretch_tabs",38,9c,fc,5c),false);
HXLINE(3325)		::String stackToggled = HX_("front",a9,18,8e,06);
HXLINE(3326)		::String stackUntoggled = HX_("back",27,da,10,41);
HXLINE(3328)		if (data->hasNode->resolve(HX_("stacking",9a,62,b6,99))) {
HXLINE(3329)			stackToggled = ::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("stacking",9a,62,b6,99))->x,HX_("toggled",50,e2,03,cc),true,HX_("front",a9,18,8e,06));
HXLINE(3330)			stackUntoggled = ::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("stacking",9a,62,b6,99))->x,HX_("untoggled",17,e9,05,c8),true,HX_("back",27,da,10,41));
            		}
HXLINE(3333)		::String tab_spacing_str = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("spacing",83,33,bb,91),true,HX_("",00,00,00,00));
HXLINE(3334)		 ::Dynamic tab_spacing = null();
HXLINE(3335)		if ((tab_spacing_str != HX_("",00,00,00,00))) {
HXLINE(3336)			tab_spacing = this->_loadWidth(data,(int)0,HX_("spacing",83,33,bb,91),null());
            		}
HXLINE(3340)		Float tab_x = this->_loadWidth(data,(int)0,HX_("tab_x",ce,ac,e3,0a),null());
HXLINE(3341)		Float tab_y = this->_loadHeight(data,(int)0,HX_("tab_y",cf,ac,e3,0a),null());
HXLINE(3342)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(tab_x,tab_y);
HXDLIN(3342)		point->_inPool = false;
HXDLIN(3342)		 ::flixel::math::FlxPoint tab_offset = point;
HXLINE(3344)		::String tab_def_str = HX_("",00,00,00,00);
HXLINE(3346)		if (data->hasNode->resolve(HX_("tab",55,5a,58,00))) {
HXLINE(3347)			{
HXLINE(3347)				 ::_List::ListNode _g_head = data->nodes->resolve(HX_("tab",55,5a,58,00))->h;
HXDLIN(3347)				while(hx::IsNotNull( _g_head )){
HXLINE(3347)					 ::haxe::xml::Fast val = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(3347)					_g_head = _g_head->next;
HXDLIN(3347)					 ::haxe::xml::Fast tabNode = val;
HXLINE(3348)					::String temp = ::flixel::addons::ui::U_obj::xml_str(tabNode->x,HX_("use_def",8d,da,e9,62),null(),null());
HXLINE(3349)					if ((temp != HX_("",00,00,00,00))) {
HXLINE(3350)						tab_def_str = temp;
            					}
            				}
            			}
HXLINE(3353)			if ((tab_def_str != HX_("",00,00,00,00))) {
HXLINE(3354)				tab_def = this->getDefinition(tab_def_str,null());
            			}
            			else {
HXLINE(3356)				tab_def = data->node->resolve(HX_("tab",55,5a,58,00));
            			}
            		}
HXLINE(3360)		::Array< ::Dynamic> list_tabs = ::Array_obj< ::Dynamic>::__new();
HXLINE(3362)		::String name = HX_("",00,00,00,00);
HXLINE(3364)		if (data->hasNode->resolve(HX_("tab",55,5a,58,00))) {
HXLINE(3365)			 ::_List::ListNode _g_head1 = data->nodes->resolve(HX_("tab",55,5a,58,00))->h;
HXDLIN(3365)			while(hx::IsNotNull( _g_head1 )){
HXLINE(3365)				 ::haxe::xml::Fast val1 = ( ( ::haxe::xml::Fast)(_g_head1->item) );
HXDLIN(3365)				_g_head1 = _g_head1->next;
HXDLIN(3365)				 ::haxe::xml::Fast tab_node = val1;
HXLINE(3366)				name = ::flixel::addons::ui::U_obj::xml_name(tab_node->x);
HXLINE(3368)				if ((name != HX_("",00,00,00,00))) {
HXLINE(3369)					::String label = ::flixel::addons::ui::U_obj::xml_str(tab_node->x,HX_("label",f4,0d,af,6f),null(),null());
HXLINE(3370)					::String context = ::flixel::addons::ui::U_obj::xml_str(tab_node->x,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(3371)					::String code = ::flixel::addons::ui::U_obj::xml_str(tab_node->x,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(3372)					label = this->getText(label,context,true,code);
HXLINE(3374)					label = this->getText(label,context,true,code);
HXLINE(3376)					 ::haxe::xml::Fast tab_info = ::flixel::addons::ui::FlxUI_obj::consolidateData(tab_node,tab_def,null());
HXLINE(3377)					::Dynamic tab = this->_loadButton(tab_info,true,true,HX_("tab_menu",09,73,e1,d6));
HXLINE(3378)					tab->__SetField(HX_("name",4b,72,ff,48),name,hx::paccDynamic);
HXLINE(3379)					list_tabs->push(tab);
HXLINE(3380)					this->_loadTooltip(tab,tab_info);
            				}
            			}
            		}
HXLINE(3385)		if ((list_tabs->length > (int)0)) {
HXLINE(3386)			bool _hx_tmp;
HXDLIN(3386)			if (hx::IsNotNull( tab_def )) {
HXLINE(3386)				_hx_tmp = !(tab_def->hasNode->resolve(HX_("text",ad,cc,f9,4c)));
            			}
            			else {
HXLINE(3386)				_hx_tmp = true;
            			}
HXDLIN(3386)			if (_hx_tmp) {
HXLINE(3387)				int _g = (int)0;
HXDLIN(3387)				while((_g < list_tabs->length)){
HXLINE(3387)					::Dynamic t = list_tabs->__get(_g);
HXDLIN(3387)					_g = (_g + (int)1);
HXLINE(3388)					if (::Std_obj::is(t,hx::ClassOf< ::flixel::addons::ui::FlxUITypedButton >())) {
HXLINE(3390)						 ::flixel::addons::ui::FlxUITypedButton tb = ( ( ::flixel::addons::ui::FlxUITypedButton)(t) );
HXLINE(3391)						( ( ::flixel::FlxSprite)(tb->label) )->set_color((int)16777215);
HXLINE(3392)						if (::Std_obj::is(tb->label,hx::ClassOf< ::flixel::addons::ui::FlxUIText >())) {
HXLINE(3394)							 ::flixel::addons::ui::FlxUIText labelText = ( ( ::flixel::addons::ui::FlxUIText)(tb->label) );
HXLINE(3395)							{
HXLINE(3395)								labelText->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN(3395)								labelText->set_borderColor((int)0);
HXDLIN(3395)								labelText->set_borderSize((int)1);
HXDLIN(3395)								labelText->set_borderQuality((int)1);
            							}
            						}
            					}
            				}
            			}
HXLINE(3401)			bool _hx_tmp1;
HXDLIN(3401)			if (hx::IsNotNull( tab_def )) {
HXLINE(3401)				_hx_tmp1 = !(tab_def->has->resolve(HX_("width",06,b6,62,ca)));
            			}
            			else {
HXLINE(3401)				_hx_tmp1 = true;
            			}
HXDLIN(3401)			if (_hx_tmp1) {
HXLINE(3402)				stretch_tabs = true;
            			}
            		}
HXLINE(3407)		::Array< ::String > tab_stacking = ::Array_obj< ::String >::__new(2)->init(0,stackToggled)->init(1,stackUntoggled);
HXLINE(3409)		 ::flixel::addons::ui::FlxUITabMenu fg =  ::flixel::addons::ui::FlxUITabMenu_obj::__alloc( HX_CTX ,backSprite,list_tabs,null(),tab_offset,stretch_tabs,tab_spacing,tab_stacking);
HXLINE(3411)		if (data->hasNode->resolve(HX_("group",3f,b3,f4,99))) {
HXLINE(3412)			 ::_List::ListNode _g_head2 = data->nodes->resolve(HX_("group",3f,b3,f4,99))->h;
HXDLIN(3412)			while(hx::IsNotNull( _g_head2 )){
HXLINE(3412)				 ::haxe::xml::Fast val2 = ( ( ::haxe::xml::Fast)(_g_head2->item) );
HXDLIN(3412)				_g_head2 = _g_head2->next;
HXDLIN(3412)				 ::haxe::xml::Fast group_node = val2;
HXLINE(3413)				name = ::flixel::addons::ui::U_obj::xml_name(group_node->x);
HXLINE(3414)				 ::flixel::addons::ui::FlxUI _ui =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,group_node,fg,hx::ObjectPtr<OBJ_>(this),this->_ptr_tongue,null(),null());
HXLINE(3415)				bool _hx_tmp2;
HXDLIN(3415)				if (hx::IsNotNull( list_tabs )) {
HXLINE(3415)					_hx_tmp2 = (list_tabs->length > (int)0);
            				}
            				else {
HXLINE(3415)					_hx_tmp2 = false;
            				}
HXDLIN(3415)				if (_hx_tmp2) {
HXLINE(3416)					 ::flixel::addons::ui::FlxUI _g1 = _ui;
HXDLIN(3416)					Float _g2 = _g1->y;
HXDLIN(3416)					_g1->set_y((_g2 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(list_tabs->__get((int)0))));
            				}
HXLINE(3418)				_ui->name = name;
HXLINE(3419)				fg->addGroup(_ui);
            			}
            		}
HXLINE(3425)		return fg;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadTabMenu,return )

::Dynamic FlxUI_obj::_loadNumericStepper( ::haxe::xml::Fast data,hx::Null< bool >  __o_setCallback){
bool setCallback = __o_setCallback.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3428__loadNumericStepper)
HXLINE(3440)		Float stepSize = ::flixel::addons::ui::U_obj::xml_f(data->x,HX_("step",4c,e7,5b,4c),(int)1);
HXLINE(3441)		Float defaultValue = ::flixel::addons::ui::U_obj::xml_f(data->x,HX_("value",71,7f,b8,31),(int)0);
HXLINE(3442)		Float min = ::flixel::addons::ui::U_obj::xml_f(data->x,HX_("min",92,11,53,00),(int)0);
HXLINE(3443)		Float max = ::flixel::addons::ui::U_obj::xml_f(data->x,HX_("max",a4,0a,53,00),(int)10);
HXLINE(3444)		int decimals = ::flixel::addons::ui::U_obj::xml_i(data->x,HX_("decimals",c2,4a,6a,12),(int)0);
HXLINE(3445)		bool percent = ::flixel::addons::ui::U_obj::xml_bool(data->x,HX_("percent",c5,aa,da,78),null());
HXLINE(3446)		::String stack = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("stack",48,67,0b,84),true,HX_("",00,00,00,00));
HXLINE(3447)		if ((stack == HX_("",00,00,00,00))) {
HXLINE(3448)			stack = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("stacking",9a,62,b6,99),true,HX_("",00,00,00,00));
            		}
HXLINE(3450)		stack = stack.toLowerCase();
HXLINE(3451)		int stacking;
HXLINE(3453)		::String _hx_switch_0 = stack;
            		if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("horizontal",e4,fc,c3,15)) ||  (_hx_switch_0==HX_("horz",8f,ce,12,45)) ){
HXLINE(3455)			stacking = (int)1;
HXDLIN(3455)			goto _hx_goto_190;
            		}
            		if (  (_hx_switch_0==HX_("v",76,00,00,00)) ||  (_hx_switch_0==HX_("vert",b1,34,4c,4e)) ||  (_hx_switch_0==HX_("vertical",76,bc,15,6a)) ){
HXLINE(3457)			stacking = (int)0;
HXDLIN(3457)			goto _hx_goto_190;
            		}
            		/* default */{
HXLINE(3459)			stacking = (int)1;
            		}
            		_hx_goto_190:;
HXLINE(3462)		 ::flixel::text::FlxText theText = null();
HXLINE(3463)		 ::flixel::addons::ui::FlxUITypedButton buttPlus = null();
HXLINE(3464)		 ::flixel::addons::ui::FlxUITypedButton buttMinus = null();
HXLINE(3466)		if (data->hasNode->resolve(HX_("text",ad,cc,f9,4c))) {
HXLINE(3467)			theText = ( ( ::flixel::text::FlxText)(this->_loadThing(HX_("text",ad,cc,f9,4c),data->node->resolve(HX_("text",ad,cc,f9,4c)))) );
            		}
HXLINE(3469)		if (data->hasNode->resolve(HX_("plus",5a,3f,5a,4a))) {
HXLINE(3470)			buttPlus = ( ( ::flixel::addons::ui::FlxUITypedButton)(this->_loadThing(HX_("button",f2,61,e0,d9),data->node->resolve(HX_("plus",5a,3f,5a,4a)))) );
            		}
HXLINE(3472)		if (data->hasNode->resolve(HX_("minus",70,80,68,08))) {
HXLINE(3473)			buttMinus = ( ( ::flixel::addons::ui::FlxUITypedButton)(this->_loadThing(HX_("button",f2,61,e0,d9),data->node->resolve(HX_("minus",70,80,68,08)))) );
            		}
HXLINE(3476)		 ::flixel::addons::ui::FlxUINumericStepper ns =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,(int)0,(int)0,stepSize,defaultValue,min,max,decimals,stacking,theText,buttPlus,buttMinus,percent);
HXLINE(3478)		if (setCallback) {
HXLINE(3479)			::cpp::VirtualArray params = null();
HXDLIN(3479)			if (data->hasNode->resolve(HX_("param",8d,80,55,bd))) {
HXLINE(3479)				params = ::cpp::VirtualArray_obj::__new();
HXDLIN(3479)				{
HXLINE(3479)					 ::_List::ListNode _g_head = data->nodes->resolve(HX_("param",8d,80,55,bd))->h;
HXDLIN(3479)					while(hx::IsNotNull( _g_head )){
HXLINE(3479)						 ::haxe::xml::Fast val = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(3479)						_g_head = _g_head->next;
HXDLIN(3479)						 ::haxe::xml::Fast param = val;
HXDLIN(3479)						bool _hx_tmp;
HXDLIN(3479)						if (param->has->resolve(HX_("type",ba,f2,08,4d))) {
HXLINE(3479)							_hx_tmp = param->has->resolve(HX_("value",71,7f,b8,31));
            						}
            						else {
HXLINE(3479)							_hx_tmp = false;
            						}
HXDLIN(3479)						if (_hx_tmp) {
HXLINE(3479)							::String type = param->att->resolve(HX_("type",ba,f2,08,4d));
HXDLIN(3479)							type = type.toLowerCase();
HXDLIN(3479)							::String valueStr = param->att->resolve(HX_("value",71,7f,b8,31));
HXDLIN(3479)							 ::Dynamic value = valueStr;
HXDLIN(3479)							int sort = ::flixel::addons::ui::U_obj::xml_i(param->x,HX_("sort",5e,27,58,4c),(int)-1);
HXDLIN(3479)							::String _hx_switch_1 = type;
            							if (  (_hx_switch_1==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_1==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(3479)								::String str = ::String(valueStr);
HXDLIN(3479)								str = str.toLowerCase();
HXDLIN(3479)								bool _hx_tmp1;
HXDLIN(3479)								if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(3479)									_hx_tmp1 = (str == HX_("1",31,00,00,00));
            								}
            								else {
HXLINE(3479)									_hx_tmp1 = true;
            								}
HXDLIN(3479)								if (_hx_tmp1) {
HXLINE(3479)									value = true;
            								}
            								else {
HXLINE(3479)									value = false;
            								}
HXDLIN(3479)								goto _hx_goto_192;
            							}
            							if (  (_hx_switch_1==HX_("color",63,71,5c,4a)) ||  (_hx_switch_1==HX_("hex",db,42,4f,00)) ){
HXLINE(3479)								 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(3479)								if (hx::IsNull( return_val )) {
HXLINE(3479)									HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            								}
HXDLIN(3479)								value = return_val;
HXDLIN(3479)								goto _hx_goto_192;
            							}
            							if (  (_hx_switch_1==HX_("float",9c,c5,96,02)) ){
HXLINE(3479)								value = ::Std_obj::parseFloat(valueStr);
HXDLIN(3479)								goto _hx_goto_192;
            							}
            							if (  (_hx_switch_1==HX_("int",ef,0c,50,00)) ){
HXLINE(3479)								value = ::Std_obj::parseInt(valueStr);
HXDLIN(3479)								goto _hx_goto_192;
            							}
            							if (  (_hx_switch_1==HX_("string",d1,28,30,11)) ){
HXLINE(3479)								value = ::String(valueStr);
HXDLIN(3479)								goto _hx_goto_192;
            							}
            							_hx_goto_192:;
HXDLIN(3479)							params->push( ::Dynamic(hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("value",71,7f,b8,31),value)
            								->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            						}
            					}
            				}
HXDLIN(3479)				params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(3479)				{
HXLINE(3479)					int _g1 = (int)0;
HXDLIN(3479)					int _g = params->get_length();
HXDLIN(3479)					while((_g1 < _g)){
HXLINE(3479)						_g1 = (_g1 + (int)1);
HXDLIN(3479)						int i = (_g1 - (int)1);
HXDLIN(3479)						params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)));
            					}
            				}
            			}
HXDLIN(3479)			::cpp::VirtualArray params1 = params;
HXLINE(3480)			ns->set_params(params1);
            		}
HXLINE(3483)		return ns;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadNumericStepper,return )

 ::flixel::math::FlxPoint FlxUI_obj::getResizeRatio( ::haxe::xml::Fast data,hx::Null< int >  __o_defaultAxis){
int defaultAxis = __o_defaultAxis.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3487_getResizeRatio)
HXLINE(3488)		::String str = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("resize_ratio_x",79,e8,30,0e),true,null());
HXLINE(3489)		if ((str == HX_("",00,00,00,00))) {
HXLINE(3491)			str = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("resize_ratio_y",7a,e8,30,0e),true,null());
HXLINE(3492)			if ((str == HX_("",00,00,00,00))) {
HXLINE(3495)				Float resize_ratio = ::flixel::addons::ui::U_obj::xml_f(data->x,HX_("resize_ratio",40,c5,84,8f),(int)-1);
HXLINE(3496)				return  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,resize_ratio,defaultAxis);
            			}
            			else {
HXLINE(3501)				return  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,::Std_obj::parseFloat(str),(int)1);
            			}
            		}
            		else {
HXLINE(3507)			return  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,::Std_obj::parseFloat(str),(int)0);
            		}
HXLINE(3489)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getResizeRatio,return )

::Dynamic FlxUI_obj::_loadButton( ::haxe::xml::Fast data,hx::Null< bool >  __o_setCallback,hx::Null< bool >  __o_isToggle,::String __o_load_code){
bool setCallback = __o_setCallback.Default(true);
bool isToggle = __o_isToggle.Default(false);
::String load_code = __o_load_code.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3516__loadButton)
HXLINE(3517)		::Dynamic fb = null();
HXLINE(3518)		int color = this->_loadColor(data,null(),null());
HXLINE(3519)		Float resize_ratio = ::flixel::addons::ui::U_obj::xml_f(data->x,HX_("resize_ratio",40,c5,84,8f),(int)-1);
HXLINE(3520)		 ::flixel::math::FlxPoint resize_point = this->_loadCompass(data,HX_("resize_point",85,44,f0,71));
HXLINE(3521)		bool resize_label = ::flixel::addons::ui::U_obj::xml_bool(data->x,HX_("resize_label",29,9e,0f,1b),false);
HXLINE(3523)		::String label = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("label",f4,0d,af,6f),null(),null());
HXLINE(3525)		 ::flixel::addons::ui::FlxUISprite sprite = null();
HXLINE(3526)		 ::flixel::addons::ui::FlxUISprite toggleSprite = null();
HXLINE(3527)		if (data->hasNode->resolve(HX_("sprite",05,dc,95,c3))) {
HXLINE(3529)			 ::_List::ListNode _g_head = data->nodes->resolve(HX_("sprite",05,dc,95,c3))->h;
HXDLIN(3529)			while(hx::IsNotNull( _g_head )){
HXLINE(3529)				 ::haxe::xml::Fast val = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(3529)				_g_head = _g_head->next;
HXDLIN(3529)				 ::haxe::xml::Fast spriteNode = val;
HXLINE(3531)				bool forToggle;
HXDLIN(3531)				if (isToggle) {
HXLINE(3531)					forToggle = ::flixel::addons::ui::U_obj::xml_bool(spriteNode->x,HX_("toggle",94,bf,43,8f),null());
            				}
            				else {
HXLINE(3531)					forToggle = false;
            				}
HXLINE(3532)				if (forToggle) {
HXLINE(3534)					toggleSprite = ( ( ::flixel::addons::ui::FlxUISprite)(this->_loadThing(HX_("sprite",05,dc,95,c3),spriteNode)) );
            				}
            				else {
HXLINE(3538)					sprite = ( ( ::flixel::addons::ui::FlxUISprite)(this->_loadThing(HX_("sprite",05,dc,95,c3),spriteNode)) );
            				}
            			}
            		}
HXLINE(3543)		::String context = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(3544)		::String code = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(3546)		label = this->getText(label,context,true,code);
HXLINE(3548)		int W = ::Std_obj::_hx_int(this->_loadWidth(data,(int)0,HX_("width",06,b6,62,ca),null()));
HXLINE(3549)		int H = ::Std_obj::_hx_int(this->_loadHeight(data,(int)0,HX_("height",e7,07,4c,02),null()));
HXLINE(3551)		::cpp::VirtualArray params = null();
HXDLIN(3551)		if (data->hasNode->resolve(HX_("param",8d,80,55,bd))) {
HXLINE(3551)			params = ::cpp::VirtualArray_obj::__new();
HXDLIN(3551)			{
HXLINE(3551)				 ::_List::ListNode _g_head1 = data->nodes->resolve(HX_("param",8d,80,55,bd))->h;
HXDLIN(3551)				while(hx::IsNotNull( _g_head1 )){
HXLINE(3551)					 ::haxe::xml::Fast val1 = ( ( ::haxe::xml::Fast)(_g_head1->item) );
HXDLIN(3551)					_g_head1 = _g_head1->next;
HXDLIN(3551)					 ::haxe::xml::Fast param = val1;
HXDLIN(3551)					bool _hx_tmp;
HXDLIN(3551)					if (param->has->resolve(HX_("type",ba,f2,08,4d))) {
HXLINE(3551)						_hx_tmp = param->has->resolve(HX_("value",71,7f,b8,31));
            					}
            					else {
HXLINE(3551)						_hx_tmp = false;
            					}
HXDLIN(3551)					if (_hx_tmp) {
HXLINE(3551)						::String type = param->att->resolve(HX_("type",ba,f2,08,4d));
HXDLIN(3551)						type = type.toLowerCase();
HXDLIN(3551)						::String valueStr = param->att->resolve(HX_("value",71,7f,b8,31));
HXDLIN(3551)						 ::Dynamic value = valueStr;
HXDLIN(3551)						int sort = ::flixel::addons::ui::U_obj::xml_i(param->x,HX_("sort",5e,27,58,4c),(int)-1);
HXDLIN(3551)						::String _hx_switch_0 = type;
            						if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_0==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(3551)							::String str = ::String(valueStr);
HXDLIN(3551)							str = str.toLowerCase();
HXDLIN(3551)							bool _hx_tmp1;
HXDLIN(3551)							if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(3551)								_hx_tmp1 = (str == HX_("1",31,00,00,00));
            							}
            							else {
HXLINE(3551)								_hx_tmp1 = true;
            							}
HXDLIN(3551)							if (_hx_tmp1) {
HXLINE(3551)								value = true;
            							}
            							else {
HXLINE(3551)								value = false;
            							}
HXDLIN(3551)							goto _hx_goto_198;
            						}
            						if (  (_hx_switch_0==HX_("color",63,71,5c,4a)) ||  (_hx_switch_0==HX_("hex",db,42,4f,00)) ){
HXLINE(3551)							 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(3551)							if (hx::IsNull( return_val )) {
HXLINE(3551)								HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            							}
HXDLIN(3551)							value = return_val;
HXDLIN(3551)							goto _hx_goto_198;
            						}
            						if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE(3551)							value = ::Std_obj::parseFloat(valueStr);
HXDLIN(3551)							goto _hx_goto_198;
            						}
            						if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ){
HXLINE(3551)							value = ::Std_obj::parseInt(valueStr);
HXDLIN(3551)							goto _hx_goto_198;
            						}
            						if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE(3551)							value = ::String(valueStr);
HXDLIN(3551)							goto _hx_goto_198;
            						}
            						_hx_goto_198:;
HXDLIN(3551)						params->push( ::Dynamic(hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("value",71,7f,b8,31),value)
            							->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            					}
            				}
            			}
HXDLIN(3551)			params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(3551)			{
HXLINE(3551)				int _g1 = (int)0;
HXDLIN(3551)				int _g = params->get_length();
HXDLIN(3551)				while((_g1 < _g)){
HXLINE(3551)					_g1 = (_g1 + (int)1);
HXDLIN(3551)					int i = (_g1 - (int)1);
HXDLIN(3551)					params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)));
            				}
            			}
            		}
HXDLIN(3551)		::cpp::VirtualArray params1 = params;
HXLINE(3553)		if (hx::IsNull( sprite )) {
HXLINE(3555)			bool useDefaultGraphic = (data->hasNode->resolve(HX_("graphic",a8,5a,07,74)) == false);
HXLINE(3556)			fb =  ::flixel::addons::ui::FlxUIButton_obj::__alloc( HX_CTX ,(int)0,(int)0,label,null(),useDefaultGraphic,false,color);
HXLINE(3557)			 ::flixel::addons::ui::FlxUIButton fuib = ( ( ::flixel::addons::ui::FlxUIButton)(fb) );
HXLINE(3558)			fuib->_autoCleanup = false;
            		}
            		else {
HXLINE(3562)			 ::flixel::group::FlxTypedSpriteGroup tempGroup = null();
HXLINE(3563)			if ((label != HX_("",00,00,00,00))) {
HXLINE(3567)				 ::flixel::addons::ui::FlxUIText labelTxt =  ::flixel::addons::ui::FlxUIText_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)80,label,(int)8,null());
HXLINE(3569)				labelTxt->setFormat(null(),(int)8,(int)3355443,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(3571)				tempGroup =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(3573)				tempGroup->add(sprite).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3574)				tempGroup->add(labelTxt).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3576)				fb =  ::flixel::addons::ui::FlxUISpriteButton_obj::__alloc( HX_CTX ,(int)0,(int)0,tempGroup,null());
            			}
            			else {
HXLINE(3580)				fb =  ::flixel::addons::ui::FlxUISpriteButton_obj::__alloc( HX_CTX ,(int)0,(int)0,sprite,null());
            			}
            		}
HXLINE(3583)		fb->__SetField(HX_("resize_ratio",40,c5,84,8f),resize_ratio,hx::paccDynamic);
HXLINE(3584)		fb->__SetField(HX_("resize_point",85,44,f0,71),resize_point,hx::paccDynamic);
HXLINE(3585)		fb->__SetField(HX_("autoResizeLabel",31,30,ad,1c),resize_label,hx::paccDynamic);
HXLINE(3587)		if (setCallback) {
HXLINE(3589)			::flixel::addons::ui::interfaces::IHasParams_obj::set_params(fb,params1);
            		}
HXLINE(3594)		if (data->hasNode->resolve(HX_("graphic",a8,5a,07,74))) {
HXLINE(3596)			bool blank = ::flixel::addons::ui::U_obj::xml_bool(data->node->resolve(HX_("graphic",a8,5a,07,74))->x,HX_("blank",54,df,f1,b4),null());
HXLINE(3598)			if (blank) {
HXLINE(3604)				::flixel::addons::ui::interfaces::IFlxUIButton_obj::loadGraphicSlice9(fb,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("",00,00,00,00))->init(1,HX_("",00,00,00,00))->init(2,HX_("",00,00,00,00)),W,H,null(),(int)0,resize_ratio,null(),null(),null(),null());
            			}
            			else {
HXLINE(3609)				::cpp::VirtualArray graphic_names = null();
HXLINE(3610)				::Array< ::Dynamic> slice9_names = null();
HXLINE(3611)				::Array< int > frames = null();
HXLINE(3613)				if (isToggle) {
HXLINE(3614)					graphic_names = ::cpp::VirtualArray_obj::__new(6)->init(0,HX_("",00,00,00,00))->init(1,HX_("",00,00,00,00))->init(2,HX_("",00,00,00,00))->init(3,HX_("",00,00,00,00))->init(4,HX_("",00,00,00,00))->init(5,HX_("",00,00,00,00));
HXLINE(3615)					slice9_names = ::Array_obj< ::Dynamic>::__new(6)->init(0,null())->init(1,null())->init(2,null())->init(3,null())->init(4,null())->init(5,null());
            				}
            				else {
HXLINE(3617)					graphic_names = ::cpp::VirtualArray_obj::__new(3)->init(0,HX_("",00,00,00,00))->init(1,HX_("",00,00,00,00))->init(2,HX_("",00,00,00,00));
HXLINE(3618)					slice9_names = ::Array_obj< ::Dynamic>::__new(3)->init(0,null())->init(1,null())->init(2,null());
            				}
HXLINE(3622)				int src_w = ::flixel::addons::ui::U_obj::xml_i(data->node->resolve(HX_("graphic",a8,5a,07,74))->x,HX_("src_w",1c,7b,ba,82),(int)0);
HXLINE(3623)				int src_h = ::flixel::addons::ui::U_obj::xml_i(data->node->resolve(HX_("graphic",a8,5a,07,74))->x,HX_("src_h",0d,7b,ba,82),(int)0);
HXLINE(3624)				::String tileStr = ::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("graphic",a8,5a,07,74))->x,HX_("tile",2e,cb,fc,4c),true,HX_("",00,00,00,00));
HXDLIN(3624)				int tile = (int)0;
HXDLIN(3624)				::String _hx_switch_1 = tileStr;
            				if (  (_hx_switch_1==HX_("h",68,00,00,00)) ||  (_hx_switch_1==HX_("horizontal",e4,fc,c3,15)) ){
HXLINE(3624)					tile = (int)16;
HXDLIN(3624)					goto _hx_goto_200;
            				}
            				if (  (_hx_switch_1==HX_("v",76,00,00,00)) ||  (_hx_switch_1==HX_("vertical",76,bc,15,6a)) ){
HXLINE(3624)					tile = (int)1;
HXDLIN(3624)					goto _hx_goto_200;
            				}
            				if (  (_hx_switch_1==HX_("all",21,f9,49,00)) ||  (_hx_switch_1==HX_("both",81,88,1b,41)) ||  (_hx_switch_1==HX_("hv",0e,5b,00,00)) ||  (_hx_switch_1==HX_("true",4e,a7,03,4d)) ||  (_hx_switch_1==HX_("vh",32,67,00,00)) ){
HXLINE(3624)					tile = (int)17;
HXDLIN(3624)					goto _hx_goto_200;
            				}
            				_hx_goto_200:;
HXDLIN(3624)				int tile1 = tile;
HXLINE(3627)				::String frame_str = ::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("graphic",a8,5a,07,74))->x,HX_("frames",a6,af,85,ac),true,null());
HXLINE(3628)				if ((frame_str != HX_("",00,00,00,00))) {
HXLINE(3629)					frames = ::Array_obj< int >::__new();
HXLINE(3630)					::Array< ::String > arr = frame_str.split(HX_(",",2c,00,00,00));
HXLINE(3631)					{
HXLINE(3631)						int _g2 = (int)0;
HXDLIN(3631)						while((_g2 < arr->length)){
HXLINE(3631)							::String numstr = arr->__get(_g2);
HXDLIN(3631)							_g2 = (_g2 + (int)1);
HXLINE(3632)							frames->push(::Std_obj::parseInt(numstr));
            						}
            					}
            				}
HXLINE(3636)				{
HXLINE(3636)					 ::_List::ListNode _g_head2 = data->nodes->resolve(HX_("graphic",a8,5a,07,74))->h;
HXDLIN(3636)					while(hx::IsNotNull( _g_head2 )){
HXLINE(3636)						 ::haxe::xml::Fast val2 = ( ( ::haxe::xml::Fast)(_g_head2->item) );
HXDLIN(3636)						_g_head2 = _g_head2->next;
HXDLIN(3636)						 ::haxe::xml::Fast graphicNode = val2;
HXLINE(3637)						::String graphic_name = ::flixel::addons::ui::U_obj::xml_name(graphicNode->x);
HXLINE(3638)						::String image = ::flixel::addons::ui::U_obj::xml_str(graphicNode->x,HX_("image",5b,1f,69,bd),null(),null());
HXLINE(3639)						::Array< int > slice9 = ::flixel::util::FlxStringUtil_obj::toIntArray(::flixel::addons::ui::U_obj::xml_str(graphicNode->x,HX_("slice9",a7,03,04,70),null(),null()));
HXLINE(3640)						::String tileStr1 = ::flixel::addons::ui::U_obj::xml_str(graphicNode->x,HX_("tile",2e,cb,fc,4c),true,HX_("",00,00,00,00));
HXDLIN(3640)						int tile2 = (int)0;
HXDLIN(3640)						::String _hx_switch_2 = tileStr1;
            						if (  (_hx_switch_2==HX_("h",68,00,00,00)) ||  (_hx_switch_2==HX_("horizontal",e4,fc,c3,15)) ){
HXLINE(3640)							tile2 = (int)16;
HXDLIN(3640)							goto _hx_goto_203;
            						}
            						if (  (_hx_switch_2==HX_("v",76,00,00,00)) ||  (_hx_switch_2==HX_("vertical",76,bc,15,6a)) ){
HXLINE(3640)							tile2 = (int)1;
HXDLIN(3640)							goto _hx_goto_203;
            						}
            						if (  (_hx_switch_2==HX_("all",21,f9,49,00)) ||  (_hx_switch_2==HX_("both",81,88,1b,41)) ||  (_hx_switch_2==HX_("hv",0e,5b,00,00)) ||  (_hx_switch_2==HX_("true",4e,a7,03,4d)) ||  (_hx_switch_2==HX_("vh",32,67,00,00)) ){
HXLINE(3640)							tile2 = (int)17;
HXDLIN(3640)							goto _hx_goto_203;
            						}
            						_hx_goto_203:;
HXDLIN(3640)						tile1 = tile2;
HXLINE(3642)						bool toggleState = ::flixel::addons::ui::U_obj::xml_bool(graphicNode->x,HX_("toggle",94,bf,43,8f),null());
HXLINE(3643)						if (toggleState) {
HXLINE(3643)							toggleState = isToggle;
            						}
            						else {
HXLINE(3643)							toggleState = false;
            						}
HXLINE(3645)						::String igfx = ::flixel::addons::ui::U_obj::gfx(image,null(),null(),null(),null(),null());
HXLINE(3647)						::String _hx_switch_3 = graphic_name;
            						if (  (_hx_switch_3==HX_("all",21,f9,49,00)) ){
HXLINE(3697)							int tilesTall;
HXDLIN(3697)							if (isToggle) {
HXLINE(3697)								tilesTall = (int)6;
            							}
            							else {
HXLINE(3697)								tilesTall = (int)3;
            							}
HXLINE(3699)							 ::openfl::_legacy::display::BitmapData temp = null();
HXLINE(3702)							if ((src_h != (int)0)) {
HXLINE(3704)								 ::openfl::_legacy::display::BitmapData temp1 = ::flixel::addons::ui::U_obj::getBmp(igfx);
HXLINE(3705)								tilesTall = ::Std_obj::_hx_int(((Float)temp1->get_height() / (Float)src_h));
            							}
HXLINE(3708)							if ((image != HX_("",00,00,00,00))) {
HXLINE(3709)								graphic_names = ::cpp::VirtualArray_obj::__new(1)->init(0,this->loadScaledSrc(graphicNode,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),(int)1,tilesTall));
            							}
HXLINE(3712)							slice9_names = ::Array_obj< ::Dynamic>::__new(1)->init(0,this->load9SliceSprite_scaleSub(slice9,graphicNode,( (::String)(graphic_names->__get((int)0)) ),HX_("image",5b,1f,69,bd)));
HXLINE(3715)							temp = ::flixel::addons::ui::U_obj::getBmp(graphic_names->__get((int)0));
HXLINE(3716)							src_w = temp->get_width();
HXLINE(3717)							src_h = ::Std_obj::_hx_int(((Float)temp->get_height() / (Float)tilesTall));
HXLINE(3696)							goto _hx_goto_204;
            						}
            						if (  (_hx_switch_3==HX_("active",c6,41,46,16)) ||  (_hx_switch_3==HX_("highlight",34,56,00,ed)) ||  (_hx_switch_3==HX_("hilight",35,b2,2d,55)) ||  (_hx_switch_3==HX_("hover",bc,e5,64,2b)) ||  (_hx_switch_3==HX_("over",54,91,b8,49)) ){
HXLINE(3665)							if ((image != HX_("",00,00,00,00))) {
HXLINE(3666)								if (!(toggleState)) {
HXLINE(3667)									graphic_names->set((int)1,this->loadScaledSrc(graphicNode,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),null(),null()));
            								}
            								else {
HXLINE(3669)									graphic_names->set((int)4,this->loadScaledSrc(graphicNode,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),null(),null()));
            								}
            							}
HXLINE(3672)							if (!(toggleState)) {
HXLINE(3674)								slice9_names[(int)1] = this->load9SliceSprite_scaleSub(slice9,graphicNode,( (::String)(graphic_names->__get((int)1)) ),HX_("image",5b,1f,69,bd));
            							}
            							else {
HXLINE(3678)								slice9_names[(int)4] = this->load9SliceSprite_scaleSub(slice9,graphicNode,( (::String)(graphic_names->__get((int)4)) ),HX_("image",5b,1f,69,bd));
            							}
HXLINE(3664)							goto _hx_goto_204;
            						}
            						if (  (_hx_switch_3==HX_("down",62,f8,6d,42)) ||  (_hx_switch_3==HX_("pressed",a2,d2,e6,39)) ||  (_hx_switch_3==HX_("pushed",b9,14,2d,72)) ){
HXLINE(3681)							if ((image != HX_("",00,00,00,00))) {
HXLINE(3682)								if (!(toggleState)) {
HXLINE(3683)									graphic_names->set((int)2,this->loadScaledSrc(graphicNode,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),null(),null()));
            								}
            								else {
HXLINE(3685)									graphic_names->set((int)5,this->loadScaledSrc(graphicNode,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),null(),null()));
            								}
            							}
HXLINE(3688)							if (!(toggleState)) {
HXLINE(3690)								slice9_names[(int)2] = this->load9SliceSprite_scaleSub(slice9,graphicNode,( (::String)(graphic_names->__get((int)2)) ),HX_("image",5b,1f,69,bd));
            							}
            							else {
HXLINE(3694)								slice9_names[(int)5] = this->load9SliceSprite_scaleSub(slice9,graphicNode,( (::String)(graphic_names->__get((int)5)) ),HX_("image",5b,1f,69,bd));
            							}
HXLINE(3680)							goto _hx_goto_204;
            						}
            						if (  (_hx_switch_3==HX_("",00,00,00,00)) ||  (_hx_switch_3==HX_("inactive",6b,17,30,6a)) ||  (_hx_switch_3==HX_("normal",27,72,69,30)) ||  (_hx_switch_3==HX_("up",5b,66,00,00)) ){
HXLINE(3649)							if ((image != HX_("",00,00,00,00))) {
HXLINE(3650)								if (!(toggleState)) {
HXLINE(3651)									graphic_names->set((int)0,this->loadScaledSrc(graphicNode,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),null(),null()));
            								}
            								else {
HXLINE(3653)									graphic_names->set((int)3,this->loadScaledSrc(graphicNode,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),null(),null()));
            								}
            							}
HXLINE(3656)							if (!(toggleState)) {
HXLINE(3658)								slice9_names[(int)0] = this->load9SliceSprite_scaleSub(slice9,graphicNode,( (::String)(graphic_names->__get((int)0)) ),HX_("image",5b,1f,69,bd));
            							}
            							else {
HXLINE(3662)								slice9_names[(int)3] = this->load9SliceSprite_scaleSub(slice9,graphicNode,( (::String)(graphic_names->__get((int)3)) ),HX_("image",5b,1f,69,bd));
            							}
HXLINE(3648)							goto _hx_goto_204;
            						}
            						_hx_goto_204:;
HXLINE(3720)						if (hx::IsNotEq( graphic_names->__get((int)0),HX_("",00,00,00,00) )) {
HXLINE(3721)							if ((graphic_names->get_length() >= (int)3)) {
HXLINE(3722)								if (hx::IsEq( graphic_names->__get((int)1),HX_("",00,00,00,00) )) {
HXLINE(3723)									graphic_names->set((int)1,graphic_names->__get((int)0));
            								}
HXLINE(3725)								if (hx::IsEq( graphic_names->__get((int)2),HX_("",00,00,00,00) )) {
HXLINE(3726)									graphic_names->set((int)2,graphic_names->__get((int)1));
            								}
HXLINE(3728)								if ((graphic_names->get_length() >= (int)6)) {
HXLINE(3729)									if (hx::IsEq( graphic_names->__get((int)3),HX_("",00,00,00,00) )) {
HXLINE(3730)										graphic_names->set((int)3,graphic_names->__get((int)0));
            									}
HXLINE(3732)									if (hx::IsEq( graphic_names->__get((int)4),HX_("",00,00,00,00) )) {
HXLINE(3733)										graphic_names->set((int)4,graphic_names->__get((int)1));
            									}
HXLINE(3735)									if (hx::IsEq( graphic_names->__get((int)5),HX_("",00,00,00,00) )) {
HXLINE(3736)										graphic_names->set((int)5,graphic_names->__get((int)2));
            									}
            								}
            							}
            						}
            					}
            				}
HXLINE(3744)				::flixel::addons::ui::interfaces::IFlxUIButton_obj::loadGraphicSlice9(fb,graphic_names,W,H,slice9_names,tile1,resize_ratio,isToggle,src_w,src_h,frames);
            			}
            		}
            		else {
HXLINE(3747)			if ((load_code == HX_("tab_menu",09,73,e1,d6))) {
HXLINE(3749)				::cpp::VirtualArray graphic_names1 = ::cpp::VirtualArray_obj::__new(6)->init(0,HX_("flixel/flixel-ui/img/tab_back.png",d5,c5,cd,aa))->init(1,HX_("flixel/flixel-ui/img/tab_back.png",d5,c5,cd,aa))->init(2,HX_("flixel/flixel-ui/img/tab_back.png",d5,c5,cd,aa))->init(3,HX_("flixel/flixel-ui/img/tab.png",27,2e,82,04))->init(4,HX_("flixel/flixel-ui/img/tab.png",27,2e,82,04))->init(5,HX_("flixel/flixel-ui/img/tab.png",27,2e,82,04));
HXLINE(3750)				::Array< int > slice9_tab = ::flixel::util::FlxStringUtil_obj::toIntArray(HX_("6,6,11,11",c0,1f,fa,07));
HXLINE(3751)				::Array< ::Dynamic> slice9_names1 = ::Array_obj< ::Dynamic>::__new(6)->init(0,slice9_tab)->init(1,slice9_tab)->init(2,slice9_tab)->init(3,slice9_tab)->init(4,slice9_tab)->init(5,slice9_tab);
HXLINE(3754)				if (::Std_obj::is(fb,hx::ClassOf< ::flixel::addons::ui::FlxUIButton >())) {
HXLINE(3755)					 ::flixel::addons::ui::FlxUIButton fbui = ( ( ::flixel::addons::ui::FlxUIButton)(fb) );
HXLINE(3756)					fbui->loadGraphicSlice9(graphic_names1,W,H,slice9_names1,(int)0,resize_ratio,isToggle,null(),null(),null());
            				}
            				else {
HXLINE(3757)					if (::Std_obj::is(fb,hx::ClassOf< ::flixel::addons::ui::FlxUISpriteButton >())) {
HXLINE(3758)						 ::flixel::addons::ui::FlxUISpriteButton fbuis = ( ( ::flixel::addons::ui::FlxUISpriteButton)(fb) );
HXLINE(3759)						fbuis->loadGraphicSlice9(graphic_names1,W,H,slice9_names1,(int)0,resize_ratio,isToggle,null(),null(),null());
            					}
            					else {
HXLINE(3761)						::flixel::addons::ui::interfaces::IFlxUIButton_obj::loadGraphicSlice9(fb,graphic_names1,W,H,slice9_names1,(int)0,resize_ratio,isToggle,null(),null(),null());
            					}
            				}
            			}
            			else {
HXLINE(3765)				if ((W <= (int)0)) {
HXLINE(3765)					W = (int)80;
            				}
HXLINE(3766)				if ((H <= (int)0)) {
HXLINE(3766)					H = (int)20;
            				}
HXLINE(3767)				::flixel::addons::ui::interfaces::IFlxUIButton_obj::loadGraphicSlice9(fb,null(),W,H,null(),(int)0,resize_ratio,isToggle,null(),null(),null());
            			}
            		}
HXLINE(3773)		if (hx::IsNull( sprite )) {
HXLINE(3775)			bool _hx_tmp2;
HXDLIN(3775)			if (hx::IsNotNull( data )) {
HXLINE(3775)				_hx_tmp2 = data->hasNode->resolve(HX_("text",ad,cc,f9,4c));
            			}
            			else {
HXLINE(3775)				_hx_tmp2 = false;
            			}
HXDLIN(3775)			if (_hx_tmp2) {
HXLINE(3776)				this->formatButtonText(data,fb);
            			}
            			else {
HXLINE(3778)				if ((load_code == HX_("tab_menu",09,73,e1,d6))) {
HXLINE(3779)					fb->__SetField(HX_("up_color",3f,d5,b5,9b),(int)16777215,hx::paccDynamic);
HXLINE(3780)					fb->__SetField(HX_("down_color",86,26,b3,4e),(int)16777215,hx::paccDynamic);
HXLINE(3781)					fb->__SetField(HX_("over_color",f8,00,4a,f7),(int)16777215,hx::paccDynamic);
HXLINE(3782)					fb->__SetField(HX_("up_toggle_color",dc,6e,0c,dd),(int)16777215,hx::paccDynamic);
HXLINE(3783)					fb->__SetField(HX_("down_toggle_color",75,e4,c8,06),(int)16777215,hx::paccDynamic);
HXLINE(3784)					fb->__SetField(HX_("over_toggle_color",43,1c,98,aa),(int)16777215,hx::paccDynamic);
            				}
            				else {
HXLINE(3789)					::flixel::addons::ui::interfaces::IFlxUIButton_obj::autoCenterLabel(fb);
            				}
            			}
            		}
            		else {
HXLINE(3793)			::flixel::addons::ui::interfaces::IFlxUIButton_obj::autoCenterLabel(fb);
            		}
HXLINE(3796)		bool _hx_tmp3;
HXDLIN(3796)		if (hx::IsNotNull( sprite )) {
HXLINE(3796)			_hx_tmp3 = (label != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(3796)			_hx_tmp3 = false;
            		}
HXDLIN(3796)		if (_hx_tmp3) {
HXLINE(3797)			bool _hx_tmp4;
HXDLIN(3797)			if (hx::IsNotNull( data )) {
HXLINE(3797)				_hx_tmp4 = data->hasNode->resolve(HX_("text",ad,cc,f9,4c));
            			}
            			else {
HXLINE(3797)				_hx_tmp4 = false;
            			}
HXDLIN(3797)			if (_hx_tmp4) {
HXLINE(3798)				this->formatButtonText(data,fb);
            			}
            		}
HXLINE(3802)		int text_x = (int)0;
HXLINE(3803)		int text_y = (int)0;
HXLINE(3804)		if (hx::IsNotNull( data->x->get(HX_("text_x",26,65,88,d8)) )) {
HXLINE(3805)			text_x = ::Std_obj::_hx_int(this->_loadWidth(data,(int)0,HX_("text_x",26,65,88,d8),null()));
            		}
            		else {
HXLINE(3806)			if (hx::IsNotNull( data->x->get(HX_("label_x",2d,c6,05,04)) )) {
HXLINE(3807)				text_x = ::Std_obj::_hx_int(this->_loadWidth(data,(int)0,HX_("label_x",2d,c6,05,04),null()));
            			}
            		}
HXLINE(3809)		if (hx::IsNotNull( data->x->get(HX_("text_y",27,65,88,d8)) )) {
HXLINE(3810)			text_y = ::Std_obj::_hx_int(this->_loadHeight(data,(int)0,HX_("text_y",27,65,88,d8),null()));
            		}
            		else {
HXLINE(3811)			if (hx::IsNotNull( data->x->get(HX_("label_y",2e,c6,05,04)) )) {
HXLINE(3812)				text_y = ::Std_obj::_hx_int(this->_loadHeight(data,(int)0,HX_("label_y",2e,c6,05,04),null()));
            			}
            		}
HXLINE(3815)		if (::Std_obj::is(fb,hx::ClassOf< ::flixel::addons::ui::FlxUISpriteButton >())) {
HXLINE(3817)			 ::flixel::addons::ui::FlxUISpriteButton fbs = ( ( ::flixel::addons::ui::FlxUISpriteButton)(fb) );
HXLINE(3818)			if (::Std_obj::is(fbs->label,hx::ClassOf< ::flixel::group::FlxTypedSpriteGroup >())) {
HXLINE(3819)				 ::flixel::group::FlxTypedSpriteGroup g = ( ( ::flixel::group::FlxTypedSpriteGroup)(fbs->label) );
HXLINE(3820)				{
HXLINE(3820)					int _g3 = (int)0;
HXDLIN(3820)					::Array< ::Dynamic> _g11 = g->group->members;
HXDLIN(3820)					while((_g3 < _g11->length)){
HXLINE(3820)						 ::flixel::FlxSprite sprite1 = _g11->__get(_g3).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(3820)						_g3 = (_g3 + (int)1);
HXLINE(3822)						if (::Std_obj::is(sprite1,hx::ClassOf< ::flixel::addons::ui::FlxUIText >())) {
HXLINE(3825)							{
HXLINE(3825)								 ::flixel::math::FlxPoint _g21 = sprite1->offset;
HXDLIN(3825)								_g21->set_x((_g21->x - text_x));
            							}
HXLINE(3826)							{
HXLINE(3826)								 ::flixel::math::FlxPoint _g22 = sprite1->offset;
HXDLIN(3826)								_g22->set_y((_g22->y - text_y));
            							}
HXLINE(3827)							goto _hx_goto_205;
            						}
            					}
            					_hx_goto_205:;
            				}
            			}
            			else {
HXLINE(3831)				{
HXLINE(3831)					 ::flixel::math::FlxPoint _g4 = ( ( ::flixel::FlxSprite)(fbs->label) )->offset;
HXDLIN(3831)					_g4->set_x((_g4->x - text_x));
            				}
HXLINE(3832)				{
HXLINE(3832)					 ::flixel::math::FlxPoint _g5 = ( ( ::flixel::FlxSprite)(fbs->label) )->offset;
HXDLIN(3832)					_g5->set_y((_g5->y - text_y));
            				}
HXLINE(3833)				if (hx::IsNotNull( toggleSprite )) {
HXLINE(3834)					{
HXLINE(3834)						 ::flixel::math::FlxPoint _g6 = toggleSprite->offset;
HXDLIN(3834)						_g6->set_x((_g6->x - text_x));
            					}
HXLINE(3835)					{
HXLINE(3835)						 ::flixel::math::FlxPoint _g7 = toggleSprite->offset;
HXDLIN(3835)						_g7->set_y((_g7->y - text_y));
            					}
            				}
            			}
            		}
            		else {
HXLINE(3841)			 ::flixel::addons::ui::FlxUIButton fbu = ( ( ::flixel::addons::ui::FlxUIButton)(fb) );
HXLINE(3843)			{
HXLINE(3843)				 ::flixel::math::FlxPoint _g8 = ( ( ::flixel::FlxSprite)(fbu->label) )->offset;
HXDLIN(3843)				_g8->set_x((_g8->x - text_x));
            			}
HXLINE(3844)			{
HXLINE(3844)				 ::flixel::math::FlxPoint _g9 = ( ( ::flixel::FlxSprite)(fbu->label) )->offset;
HXDLIN(3844)				_g9->set_y((_g9->y - text_y));
            			}
            		}
HXLINE(3847)		bool _hx_tmp5;
HXDLIN(3847)		if (hx::IsNotNull( sprite )) {
HXLINE(3847)			_hx_tmp5 = hx::IsNotNull( toggleSprite );
            		}
            		else {
HXLINE(3847)			_hx_tmp5 = false;
            		}
HXDLIN(3847)		if (_hx_tmp5) {
HXLINE(3848)			::flixel::addons::ui::interfaces::IFlxUIButton_obj::set_toggle_label(fb,toggleSprite);
            		}
HXLINE(3851)		if (::Std_obj::is(fb,hx::ClassOf< ::flixel::addons::ui::FlxUITypedButton >())) {
HXLINE(3853)			 ::flixel::addons::ui::FlxUITypedButton fuitb = ( ( ::flixel::addons::ui::FlxUITypedButton)(fb) );
HXLINE(3854)			if (hx::IsNotNull( fuitb->_assetsToCleanup )) {
HXLINE(3856)				int _g10 = (int)0;
HXDLIN(3856)				::Array< ::String > _g12 = fuitb->_assetsToCleanup;
HXDLIN(3856)				while((_g10 < _g12->length)){
HXLINE(3856)					::String key = _g12->__get(_g10);
HXDLIN(3856)					_g10 = (_g10 + (int)1);
HXLINE(3858)					this->addToCleanup(key);
            				}
            			}
            		}
HXLINE(3863)		return fb;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,_loadButton,return )

 ::flixel::addons::ui::FlxUIRegion FlxUI_obj::_loadRegion( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3875__loadRegion)
HXLINE(3876)		 ::Dynamic bounds = this->calcMaxMinSize(data,null(),null());
HXLINE(3878)		int w = ::Std_obj::_hx_int(this->_loadWidth(data,null(),null(),null()));
HXLINE(3879)		int h = ::Std_obj::_hx_int(this->_loadHeight(data,null(),null(),null()));
HXLINE(3881)		if (hx::IsNotNull( bounds )) {
HXLINE(3883)			 ::openfl::_legacy::geom::Point pt = ::flixel::addons::ui::U_obj::conformToBounds( ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,w,h),bounds);
HXLINE(3884)			w = ::Std_obj::_hx_int(pt->x);
HXLINE(3885)			h = ::Std_obj::_hx_int(pt->y);
            		}
HXLINE(3888)		bool vis = ::flixel::addons::ui::U_obj::xml_bool(data->x,HX_("visible",72,78,24,a3),true);
HXLINE(3889)		 ::flixel::addons::ui::FlxUIRegion reg =  ::flixel::addons::ui::FlxUIRegion_obj::__alloc( HX_CTX ,(int)0,(int)0,w,h);
HXLINE(3890)		reg->set_visible(vis);
HXLINE(3891)		return reg;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadRegion,return )

 ::flixel::addons::ui::FlxUI9SliceSprite FlxUI_obj::_load9SliceSprite( ::haxe::xml::Fast data,::String __o_load_code){
::String load_code = __o_load_code.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3895__load9SliceSprite)
HXLINE(3896)		::String src = HX_("",00,00,00,00);
HXLINE(3897)		 ::flixel::addons::ui::FlxUI9SliceSprite f9s = null();
HXLINE(3899)		 ::flixel::math::FlxPoint resize = this->getResizeRatio(data,null());
HXLINE(3900)		int color = this->_loadColor(data,null(),null());
HXLINE(3901)		Float resize_ratio = resize->x;
HXLINE(3902)		 ::flixel::math::FlxPoint resize_point = this->_loadCompass(data,HX_("resize_point",85,44,f0,71));
HXLINE(3903)		int resize_ratio_axis = ::Std_obj::_hx_int(resize->y);
HXLINE(3905)		 ::Dynamic bounds = this->calcMaxMinSize(data,null(),null());
HXLINE(3908)		 ::Xml data1 = data->x;
HXDLIN(3908)		::String str = HX_("",00,00,00,00);
HXDLIN(3908)		if (hx::IsNotNull( data1->get(HX_("src",e4,a6,57,00)) )) {
HXLINE(3908)			str = data1->get(HX_("src",e4,a6,57,00));
HXDLIN(3908)			bool src1;
HXDLIN(3908)			if ((str != HX_("",00,00,00,00))) {
HXLINE(3908)				src1 = hx::IsNull( str );
            			}
            			else {
HXLINE(3908)				src1 = true;
            			}
HXDLIN(3908)			if (src1) {
HXLINE(3908)				str = HX_("",00,00,00,00);
            			}
            			else {
HXLINE(3908)				str = ::flixel::addons::ui::U_obj::gfx(str,null(),null(),null(),null(),null());
HXDLIN(3908)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE(3908)					if (!(::openfl::_legacy::Assets_obj::exists(str,::openfl::_legacy::AssetType_obj::IMAGE_dyn()))) {
HXLINE(3908)						HX_STACK_DO_THROW(((HX_("couldn't load bmp \"",73,a2,6e,30) + HX_("src",e4,a6,57,00)) + HX_("\"",22,00,00,00)));
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String msg = _hx_e;
HXLINE(3908)						 ::flixel::_hx_system::frontEnds::LogFrontEnd _this = ::flixel::FlxG_obj::log;
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
HXDLIN(3908)		src = str;
HXLINE(3910)		bool hasScaledSrc = data->hasNode->resolve(HX_("scale_src",6f,c7,bc,37));
HXLINE(3911)		if (hasScaledSrc) {
HXLINE(3915)			::String origSrc = src;
HXLINE(3917)			src = this->loadScaledSrc(data,HX_("src",e4,a6,57,00),HX_("scale_src",6f,c7,bc,37),null(),null());
HXLINE(3919)			if ((src != origSrc)) {
HXLINE(3921)				this->addToCleanup(origSrc);
            			}
            		}
HXLINE(3925)		if ((src == HX_("",00,00,00,00))) {
HXLINE(3925)			src = null();
            		}
HXLINE(3927)		if (hx::IsNull( src )) {
HXLINE(3929)			if ((load_code == HX_("tab_menu",09,73,e1,d6))) {
HXLINE(3931)				src = HX_("flixel/flixel-ui/img/chrome_flat.png",30,cf,0a,80);
            			}
            		}
HXLINE(3935)		int rect_w = ::Std_obj::_hx_int(this->_loadWidth(data,null(),null(),null()));
HXLINE(3936)		int rect_h = ::Std_obj::_hx_int(this->_loadHeight(data,null(),null(),null()));
HXLINE(3938)		if (hx::IsNotNull( bounds )) {
HXLINE(3940)			if ((rect_w < ( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),hx::paccDynamic)) ))) {
HXLINE(3940)				rect_w = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),hx::paccDynamic)) ));
            			}
            			else {
HXLINE(3941)				if ((rect_w > ( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),hx::paccDynamic)) ))) {
HXLINE(3941)					rect_w = ( (int)(bounds->__Field(HX_("max_width",eb,9a,40,c1),hx::paccDynamic)) );
            				}
            			}
HXLINE(3943)			if ((rect_h < ( (Float)(bounds->__Field(HX_("min_height",34,3e,29,69),hx::paccDynamic)) ))) {
HXLINE(3943)				rect_h = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("min_height",34,3e,29,69),hx::paccDynamic)) ));
            			}
            			else {
HXLINE(3944)				if ((rect_h > ( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) ))) {
HXLINE(3944)					rect_h = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) ));
            				}
            			}
            		}
HXLINE(3946)		bool _hx_tmp;
HXDLIN(3946)		if ((rect_w != (int)0)) {
HXLINE(3946)			_hx_tmp = (rect_h == (int)0);
            		}
            		else {
HXLINE(3946)			_hx_tmp = true;
            		}
HXDLIN(3946)		if (_hx_tmp) {
HXLINE(3948)			return null();
            		}
HXLINE(3951)		 ::openfl::_legacy::geom::Rectangle rc =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,rect_w,rect_h);
HXLINE(3953)		::Array< int > slice9 = ::flixel::util::FlxStringUtil_obj::toIntArray(::flixel::addons::ui::U_obj::xml_str(data->x,HX_("slice9",a7,03,04,70),null(),null()));
HXLINE(3955)		::String srcId = HX_("",00,00,00,00);
HXLINE(3956)		 ::Dynamic srcGraphic = src;
HXLINE(3958)		if (hasScaledSrc) {
HXLINE(3960)			slice9 = this->load9SliceSprite_scaleSub(slice9,data,src,null());
HXLINE(3962)			srcId = src;
HXLINE(3963)			srcGraphic = ::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,src);
            		}
HXLINE(3966)		bool smooth = ::flixel::addons::ui::U_obj::xml_bool(data->x,HX_("smooth",2e,08,6b,07),false);
HXLINE(3968)		::String tileStr = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("tile",2e,cb,fc,4c),true,HX_("",00,00,00,00));
HXDLIN(3968)		int tile = (int)0;
HXDLIN(3968)		::String _hx_switch_0 = tileStr;
            		if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("horizontal",e4,fc,c3,15)) ){
HXLINE(3968)			tile = (int)16;
HXDLIN(3968)			goto _hx_goto_209;
            		}
            		if (  (_hx_switch_0==HX_("v",76,00,00,00)) ||  (_hx_switch_0==HX_("vertical",76,bc,15,6a)) ){
HXLINE(3968)			tile = (int)1;
HXDLIN(3968)			goto _hx_goto_209;
            		}
            		if (  (_hx_switch_0==HX_("all",21,f9,49,00)) ||  (_hx_switch_0==HX_("both",81,88,1b,41)) ||  (_hx_switch_0==HX_("hv",0e,5b,00,00)) ||  (_hx_switch_0==HX_("true",4e,a7,03,4d)) ||  (_hx_switch_0==HX_("vh",32,67,00,00)) ){
HXLINE(3968)			tile = (int)17;
HXDLIN(3968)			goto _hx_goto_209;
            		}
            		_hx_goto_209:;
HXDLIN(3968)		int tile1 = tile;
HXLINE(3970)		f9s =  ::flixel::addons::ui::FlxUI9SliceSprite_obj::__alloc( HX_CTX ,(int)0,(int)0,srcGraphic,rc,slice9,tile1,smooth,srcId,resize_ratio,resize_point,resize_ratio_axis,false,color);
HXLINE(3972)		return f9s;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_load9SliceSprite,return )

::Array< int > FlxUI_obj::load9SliceSprite_scaleSub(::Array< int > slice9, ::haxe::xml::Fast data,::String src,::String __o_srcString){
::String srcString = __o_srcString.Default(HX_HCSTRING("src","\xe4","\xa6","\x57","\x00"));
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3976_load9SliceSprite_scaleSub)
HXLINE(3978)		 ::Xml data1 = data->x;
HXDLIN(3978)		::String str = HX_("",00,00,00,00);
HXDLIN(3978)		if (hx::IsNotNull( data1->get(srcString) )) {
HXLINE(3978)			str = data1->get(srcString);
HXDLIN(3978)			bool _hx_tmp;
HXDLIN(3978)			if ((str != HX_("",00,00,00,00))) {
HXLINE(3978)				_hx_tmp = hx::IsNull( str );
            			}
            			else {
HXLINE(3978)				_hx_tmp = true;
            			}
HXDLIN(3978)			if (_hx_tmp) {
HXLINE(3978)				str = HX_("",00,00,00,00);
            			}
            			else {
HXLINE(3978)				str = ::flixel::addons::ui::U_obj::gfx(str,null(),null(),null(),null(),null());
HXDLIN(3978)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE(3978)					if (!(::openfl::_legacy::Assets_obj::exists(str,::openfl::_legacy::AssetType_obj::IMAGE_dyn()))) {
HXLINE(3978)						HX_STACK_DO_THROW(((HX_("couldn't load bmp \"",73,a2,6e,30) + srcString) + HX_("\"",22,00,00,00)));
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String msg = _hx_e;
HXLINE(3978)						 ::flixel::_hx_system::frontEnds::LogFrontEnd _this = ::flixel::FlxG_obj::log;
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
HXDLIN(3978)		::String origSrc = str;
HXLINE(3980)		if ((src == origSrc)) {
HXLINE(3980)			return slice9;
            		}
HXLINE(3982)		 ::openfl::_legacy::display::BitmapData srcAsset;
HXDLIN(3982)		if (hx::IsNotNull( ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,src)) ) )) {
HXLINE(3982)			srcAsset = ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,src)) )->bitmap;
            		}
            		else {
HXLINE(3982)			srcAsset = null();
            		}
HXLINE(3984)		if (hx::IsNull( srcAsset )) {
HXLINE(3984)			srcAsset = ::openfl::_legacy::Assets_obj::getBitmapData(origSrc,null());
            		}
HXLINE(3986)		 ::openfl::_legacy::display::BitmapData origAsset = ::openfl::_legacy::Assets_obj::getBitmapData(origSrc,false);
HXLINE(3987)		int srcScaleFactorX = srcAsset->get_width();
HXDLIN(3987)		Float srcScaleFactorX1 = ((Float)srcScaleFactorX / (Float)origAsset->get_width());
HXLINE(3988)		int srcScaleFactorY = srcAsset->get_height();
HXDLIN(3988)		Float srcScaleFactorY1 = ((Float)srcScaleFactorY / (Float)origAsset->get_height());
HXLINE(3990)		bool _hx_tmp1;
HXDLIN(3990)		if ((::Math_obj::abs((((Float)1.0) - srcScaleFactorX1)) <= ((Float)0.001))) {
HXLINE(3990)			_hx_tmp1 = (::Math_obj::abs((((Float)1.0) - srcScaleFactorY1)) <= ((Float)0.001));
            		}
            		else {
HXLINE(3990)			_hx_tmp1 = false;
            		}
HXDLIN(3990)		if (_hx_tmp1) {
HXLINE(3992)			return slice9;
            		}
HXLINE(3995)		if (hx::IsNotNull( slice9 )) {
HXLINE(3998)			slice9[(int)0] = ::Std_obj::_hx_int((slice9->__get((int)0) * srcScaleFactorX1));
HXLINE(3999)			slice9[(int)1] = ::Std_obj::_hx_int((slice9->__get((int)1) * srcScaleFactorY1));
HXLINE(4001)			int widthDiff = origAsset->get_width();
HXDLIN(4001)			int widthDiff1 = (widthDiff - slice9->__get((int)2));
HXLINE(4002)			int heightDiff = origAsset->get_height();
HXDLIN(4002)			int heightDiff1 = (heightDiff - slice9->__get((int)3));
HXLINE(4004)			widthDiff1 = ::Std_obj::_hx_int((widthDiff1 * srcScaleFactorX1));
HXLINE(4005)			heightDiff1 = ::Std_obj::_hx_int((heightDiff1 * srcScaleFactorY1));
HXLINE(4007)			slice9[(int)2] = ::Std_obj::_hx_int((srcAsset->get_width() - widthDiff1));
HXLINE(4008)			slice9[(int)3] = ::Std_obj::_hx_int((srcAsset->get_height() - heightDiff1));
            		}
HXLINE(4010)		return slice9;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,load9SliceSprite_scaleSub,return )

int FlxUI_obj::_loadTileRule( ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4013__loadTileRule)
HXLINE(4014)		::String tileStr = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("tile",2e,cb,fc,4c),true,HX_("",00,00,00,00));
HXLINE(4015)		int tile = (int)0;
HXLINE(4016)		::String _hx_switch_0 = tileStr;
            		if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("horizontal",e4,fc,c3,15)) ){
HXLINE(4018)			tile = (int)16;
HXDLIN(4018)			goto _hx_goto_212;
            		}
            		if (  (_hx_switch_0==HX_("v",76,00,00,00)) ||  (_hx_switch_0==HX_("vertical",76,bc,15,6a)) ){
HXLINE(4019)			tile = (int)1;
HXDLIN(4019)			goto _hx_goto_212;
            		}
            		if (  (_hx_switch_0==HX_("all",21,f9,49,00)) ||  (_hx_switch_0==HX_("both",81,88,1b,41)) ||  (_hx_switch_0==HX_("hv",0e,5b,00,00)) ||  (_hx_switch_0==HX_("true",4e,a7,03,4d)) ||  (_hx_switch_0==HX_("vh",32,67,00,00)) ){
HXLINE(4017)			tile = (int)17;
HXDLIN(4017)			goto _hx_goto_212;
            		}
            		_hx_goto_212:;
HXLINE(4021)		return tile;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadTileRule,return )

 ::flixel::addons::ui::FlxUISprite FlxUI_obj::_loadBox( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4025__loadBox)
HXLINE(4026)		 ::flixel::addons::ui::FlxUISprite fs = null();
HXLINE(4028)		int thickness = ::Std_obj::_hx_int(this->_loadWidth(data,(int)1,HX_("thickness",74,f1,66,5a),null()));
HXLINE(4030)		 ::Dynamic bounds = this->calcMaxMinSize(data,null(),null());
HXLINE(4033)		if (hx::IsNull( bounds )) {
HXLINE(4034)			bounds =  ::Dynamic(hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("max_width",eb,9a,40,c1),::Math_obj::POSITIVE_INFINITY)
            				->setFixed(1,HX_("min_width",59,88,fd,ea),::Math_obj::NEGATIVE_INFINITY)
            				->setFixed(2,HX_("max_height",62,6b,96,0d),::Math_obj::POSITIVE_INFINITY)
            				->setFixed(3,HX_("min_height",34,3e,29,69),::Math_obj::NEGATIVE_INFINITY));
            		}
HXLINE(4037)		int W = ::Std_obj::_hx_int(this->_loadWidth(data,null(),null(),null()));
HXLINE(4038)		int H = ::Std_obj::_hx_int(this->_loadHeight(data,null(),null(),null()));
HXLINE(4040)		if (hx::IsNotNull( bounds )) {
HXLINE(4042)			if ((W < ( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),hx::paccDynamic)) ))) {
HXLINE(4042)				W = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4043)				if ((W > ( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),hx::paccDynamic)) ))) {
HXLINE(4043)					W = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),hx::paccDynamic)) ));
            				}
            			}
HXLINE(4044)			if ((H < ( (Float)(bounds->__Field(HX_("min_height",34,3e,29,69),hx::paccDynamic)) ))) {
HXLINE(4044)				H = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4045)				if ((H > ( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) ))) {
HXLINE(4045)					H = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) ));
            				}
            			}
            		}
HXLINE(4048)		::String cstr = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("color",63,71,5c,4a),true,HX_("0xff000000",88,79,02,3f));
HXLINE(4049)		int C = (int)0;
HXLINE(4050)		if ((cstr != HX_("",00,00,00,00))) {
HXLINE(4052)			 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(cstr);
HXDLIN(4052)			if (hx::IsNull( return_val )) {
HXLINE(4052)				HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + cstr));
            			}
HXDLIN(4052)			C = return_val;
            		}
HXLINE(4054)		fs =  ::flixel::addons::ui::FlxUISprite_obj::__alloc( HX_CTX ,(int)0,(int)0,null());
HXLINE(4055)		::String key = ((((((W + HX_("x",78,00,00,00)) + H) + HX_(":",3a,00,00,00)) + C) + HX_(":",3a,00,00,00)) + thickness);
HXLINE(4057)		if (hx::IsNotNull( ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,key)) ) )) {
HXLINE(4059)			fs->loadGraphic(key,null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(4063)			fs->makeGraphic(W,H,C,false,key);
HXLINE(4064)			 ::openfl::_legacy::geom::Rectangle r =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,thickness,thickness,(W - (thickness * (int)2)),(H - (thickness * (int)2)));
HXLINE(4065)			fs->graphic->bitmap->fillRect(r,(int)0);
            		}
HXLINE(4068)		return fs;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadBox,return )

 ::flixel::addons::ui::FlxUILine FlxUI_obj::_loadLine( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4072__loadLine)
HXLINE(4073)		::String axis = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("axis",a1,1c,79,40),true,HX_("horizontal",e4,fc,c3,15));
HXLINE(4074)		int thickness = ::Std_obj::_hx_int(this->_loadWidth(data,(int)-1,HX_("thickness",74,f1,66,5a),null()));
HXLINE(4076)		 ::Dynamic bounds = this->calcMaxMinSize(data,null(),null());
HXLINE(4079)		if (hx::IsNull( bounds )) {
HXLINE(4080)			bounds =  ::Dynamic(hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("max_width",eb,9a,40,c1),::Math_obj::POSITIVE_INFINITY)
            				->setFixed(1,HX_("min_width",59,88,fd,ea),(int)1)
            				->setFixed(2,HX_("max_height",62,6b,96,0d),::Math_obj::POSITIVE_INFINITY)
            				->setFixed(3,HX_("min_height",34,3e,29,69),(int)1));
            		}
HXLINE(4082)		::String _hx_switch_0 = axis;
            		if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("horizontal",e4,fc,c3,15)) ||  (_hx_switch_0==HX_("horz",8f,ce,12,45)) ){
HXLINE(4083)			bounds->__SetField(HX_("max_height",62,6b,96,0d),thickness,hx::paccDynamic);
HXDLIN(4083)			bounds->__SetField(HX_("min_height",34,3e,29,69),thickness,hx::paccDynamic);
HXDLIN(4083)			goto _hx_goto_215;
            		}
            		if (  (_hx_switch_0==HX_("v",76,00,00,00)) ||  (_hx_switch_0==HX_("vert",b1,34,4c,4e)) ||  (_hx_switch_0==HX_("vertical",76,bc,15,6a)) ){
HXLINE(4084)			bounds->__SetField(HX_("max_width",eb,9a,40,c1),thickness,hx::paccDynamic);
HXDLIN(4084)			bounds->__SetField(HX_("min_width",59,88,fd,ea),thickness,hx::paccDynamic);
HXDLIN(4084)			goto _hx_goto_215;
            		}
            		_hx_goto_215:;
HXLINE(4087)		int W = ::Std_obj::_hx_int(this->_loadWidth(data,null(),null(),null()));
HXLINE(4088)		int H = ::Std_obj::_hx_int(this->_loadHeight(data,null(),null(),null()));
HXLINE(4090)		if (hx::IsNotNull( bounds )) {
HXLINE(4091)			if ((W < ( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),hx::paccDynamic)) ))) {
HXLINE(4091)				W = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4092)				if ((W > ( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),hx::paccDynamic)) ))) {
HXLINE(4092)					W = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),hx::paccDynamic)) ));
            				}
            			}
HXLINE(4093)			if ((H < ( (Float)(bounds->__Field(HX_("min_height",34,3e,29,69),hx::paccDynamic)) ))) {
HXLINE(4093)				H = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4094)				if ((H > ( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) ))) {
HXLINE(4094)					H = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) ));
            				}
            			}
            		}
HXLINE(4097)		::String cstr = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("color",63,71,5c,4a),true,HX_("0xff000000",88,79,02,3f));
HXLINE(4098)		int C = (int)0;
HXLINE(4099)		if ((cstr != HX_("",00,00,00,00))) {
HXLINE(4100)			 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(cstr);
HXDLIN(4100)			if (hx::IsNull( return_val )) {
HXLINE(4100)				HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + cstr));
            			}
HXDLIN(4100)			C = return_val;
            		}
HXLINE(4103)		 ::flixel::addons::ui::LineAxis lineAxis;
HXDLIN(4103)		if ((axis == HX_("horizontal",e4,fc,c3,15))) {
HXLINE(4103)			lineAxis = ::flixel::addons::ui::LineAxis_obj::HORIZONTAL_dyn();
            		}
            		else {
HXLINE(4103)			lineAxis = ::flixel::addons::ui::LineAxis_obj::VERTICAL_dyn();
            		}
HXLINE(4104)		Float lineLength;
HXDLIN(4104)		if (hx::IsEq( lineAxis,::flixel::addons::ui::LineAxis_obj::HORIZONTAL_dyn() )) {
HXLINE(4104)			lineLength = W;
            		}
            		else {
HXLINE(4104)			lineLength = H;
            		}
HXLINE(4105)		Float lineThickness;
HXDLIN(4105)		if ((thickness != (int)-1)) {
HXLINE(4105)			lineThickness = thickness;
            		}
            		else {
HXLINE(4105)			if (hx::IsEq( lineAxis,::flixel::addons::ui::LineAxis_obj::HORIZONTAL_dyn() )) {
HXLINE(4105)				lineThickness = H;
            			}
            			else {
HXLINE(4105)				lineThickness = W;
            			}
            		}
HXLINE(4107)		 ::flixel::addons::ui::FlxUILine fl =  ::flixel::addons::ui::FlxUILine_obj::__alloc( HX_CTX ,(int)0,(int)0,lineAxis,lineLength,lineThickness,C);
HXLINE(4109)		return fl;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadLine,return )

 ::flixel::addons::ui::FlxUIBar FlxUI_obj::_loadBar( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4113__loadBar)
HXLINE(4114)		 ::flixel::addons::ui::FlxUIBar fb = null();
HXLINE(4116)		 ::Dynamic style =  ::Dynamic(hx::Anon_obj::Create(9)
            			->setFixed(0,HX_("emptyColors",1d,5c,af,8e),null())
            			->setFixed(1,HX_("filledColor",61,28,7c,97),null())
            			->setFixed(2,HX_("chunkSize",ce,cd,77,9f),null())
            			->setFixed(3,HX_("emptyImgSrc",0e,0d,a3,ca),HX_("",00,00,00,00))
            			->setFixed(4,HX_("emptyColor",96,47,af,ca),null())
            			->setFixed(5,HX_("borderColor",d7,3c,d5,d6),null())
            			->setFixed(6,HX_("filledColors",f2,2c,27,f5),null())
            			->setFixed(7,HX_("gradRotation",2c,47,cd,fb),null())
            			->setFixed(8,HX_("filledImgSrc",e3,dd,1a,31),HX_("",00,00,00,00)));
HXLINE(4131)		int W = ::Std_obj::_hx_int(this->_loadWidth(data,(int)-1,null(),null()));
HXLINE(4132)		int H = ::Std_obj::_hx_int(this->_loadHeight(data,(int)-1,null(),null()));
HXLINE(4134)		::String direction = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("fill_direction",43,0e,7d,b3),true,null());
HXLINE(4135)		 ::flixel::ui::FlxBarFillDirection fillDir = ::flixel::ui::FlxBarFillDirection_obj::TOP_TO_BOTTOM_dyn();
HXLINE(4137)		::String _hx_switch_0 = direction;
            		if (  (_hx_switch_0==HX_("bottom_to_top",a5,98,d9,85)) ){
HXLINE(4142)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::BOTTOM_TO_TOP_dyn();
HXDLIN(4142)			goto _hx_goto_217;
            		}
            		if (  (_hx_switch_0==HX_("horizontal_inside_out",46,c6,92,00)) ){
HXLINE(4143)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::HORIZONTAL_INSIDE_OUT_dyn();
HXDLIN(4143)			goto _hx_goto_217;
            		}
            		if (  (_hx_switch_0==HX_("horizontal_outside_in",ba,dc,41,90)) ){
HXLINE(4144)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::HORIZONTAL_OUTSIDE_IN_dyn();
HXDLIN(4144)			goto _hx_goto_217;
            		}
            		if (  (_hx_switch_0==HX_("left_to_right",50,bd,a3,f7)) ){
HXLINE(4139)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::LEFT_TO_RIGHT_dyn();
HXDLIN(4139)			goto _hx_goto_217;
            		}
            		if (  (_hx_switch_0==HX_("right_to_left",e8,a1,2d,02)) ){
HXLINE(4140)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::RIGHT_TO_LEFT_dyn();
HXDLIN(4140)			goto _hx_goto_217;
            		}
            		if (  (_hx_switch_0==HX_("top_to_bottom",05,d7,5d,10)) ){
HXLINE(4141)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::TOP_TO_BOTTOM_dyn();
HXDLIN(4141)			goto _hx_goto_217;
            		}
            		if (  (_hx_switch_0==HX_("vertical_inside_out",f4,eb,d7,2d)) ){
HXLINE(4145)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::VERTICAL_INSIDE_OUT_dyn();
HXDLIN(4145)			goto _hx_goto_217;
            		}
            		if (  (_hx_switch_0==HX_("vertical_outside_in",68,02,87,bd)) ){
HXLINE(4146)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::VERTICAL_OUTSIDE_IN_dyn();
HXDLIN(4146)			goto _hx_goto_217;
            		}
            		/* default */{
HXLINE(4147)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::LEFT_TO_RIGHT_dyn();
            		}
            		_hx_goto_217:;
HXLINE(4150)		::String parentRefStr = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("parent_ref",7e,00,5b,f3),true,null());
HXLINE(4151)		::Dynamic parentRef;
HXDLIN(4151)		if ((parentRefStr != HX_("",00,00,00,00))) {
HXLINE(4151)			parentRef = this->getAsset(parentRefStr,null());
            		}
            		else {
HXLINE(4151)			parentRef = null();
            		}
HXLINE(4152)		::String variableName = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("variable",3c,12,0d,69),null(),null());
HXLINE(4154)		Float value = ::flixel::addons::ui::U_obj::xml_f(data->x,HX_("value",71,7f,b8,31),(int)-1);
HXLINE(4156)		Float min = ::flixel::addons::ui::U_obj::xml_f(data->x,HX_("min",92,11,53,00),(int)0);
HXLINE(4157)		Float max = ::flixel::addons::ui::U_obj::xml_f(data->x,HX_("max",a4,0a,53,00),(int)100);
HXLINE(4159)		if ((value == (int)-1)) {
HXLINE(4161)			value = max;
            		}
HXLINE(4164)		style->__SetField(HX_("borderColor",d7,3c,d5,d6),::flixel::addons::ui::U_obj::xml_color(data->x,HX_("border_color",90,7e,e8,6e),null(),null()),hx::paccDynamic);
HXLINE(4165)		bool showBorder = hx::IsNotNull( style->__Field(HX_("borderColor",d7,3c,d5,d6),hx::paccDynamic) );
HXLINE(4167)		style->__SetField(HX_("filledColor",61,28,7c,97),::flixel::addons::ui::U_obj::xml_color(data->x,HX_("filled_color",c6,ab,4f,40),null(),null()),hx::paccDynamic);
HXLINE(4168)		if (hx::IsNull( style->__Field(HX_("filledColor",61,28,7c,97),hx::paccDynamic) )) {
HXLINE(4170)			style->__SetField(HX_("filledColor",61,28,7c,97),::flixel::addons::ui::U_obj::xml_color(data->x,HX_("color",63,71,5c,4a),null(),null()),hx::paccDynamic);
            		}
HXLINE(4173)		style->__SetField(HX_("emptyColor",96,47,af,ca),::flixel::addons::ui::U_obj::xml_color(data->x,HX_("empty_color",f1,da,d7,d9),null(),null()),hx::paccDynamic);
HXLINE(4175)		style->__SetField(HX_("filledColors",f2,2c,27,f5),::flixel::addons::ui::U_obj::xml_colorArray(data->x,HX_("filled_colors",ed,a1,66,05),null()),hx::paccDynamic);
HXLINE(4176)		style->__SetField(HX_("emptyColors",1d,5c,af,8e),::flixel::addons::ui::U_obj::xml_colorArray(data->x,HX_("empty_colors",62,b8,07,c3),null()),hx::paccDynamic);
HXLINE(4177)		if (hx::IsNull( ( (::Array< int >)(style->__Field(HX_("filledColors",f2,2c,27,f5),hx::paccDynamic)) ) )) {
HXLINE(4179)			style->__SetField(HX_("filledColors",f2,2c,27,f5),::flixel::addons::ui::U_obj::xml_colorArray(data->x,HX_("colors",b0,c5,86,c6),null()),hx::paccDynamic);
            		}
HXLINE(4182)		style->__SetField(HX_("filledImgSrc",e3,dd,1a,31),this->loadScaledSrc(data,HX_("src_filled",dd,dc,1c,63),null(),null(),null()),hx::paccDynamic);
HXLINE(4183)		style->__SetField(HX_("emptyImgSrc",0e,0d,a3,ca),this->loadScaledSrc(data,HX_("src_empty",b2,6b,77,bb),null(),null(),null()),hx::paccDynamic);
HXLINE(4184)		if ((( (::String)(style->__Field(HX_("filledImgSrc",e3,dd,1a,31),hx::paccDynamic)) ) == HX_("",00,00,00,00))) {
HXLINE(4186)			style->__SetField(HX_("filledImgSrc",e3,dd,1a,31),this->loadScaledSrc(data,HX_("src",e4,a6,57,00),null(),null(),null()),hx::paccDynamic);
            		}
HXLINE(4189)		style->__SetField(HX_("chunkSize",ce,cd,77,9f),::flixel::addons::ui::U_obj::xml_i(data->x,HX_("chunk_size",13,8b,ba,d8),(int)1),hx::paccDynamic);
HXLINE(4190)		style->__SetField(HX_("gradRotation",2c,47,cd,fb),::flixel::addons::ui::U_obj::xml_i(data->x,HX_("rotation",3e,3d,86,08),(int)90),hx::paccDynamic);
HXLINE(4192)		bool _hx_tmp;
HXDLIN(4192)		bool _hx_tmp1;
HXDLIN(4192)		if ((( (::String)(style->__Field(HX_("filledImgSrc",e3,dd,1a,31),hx::paccDynamic)) ) == HX_("",00,00,00,00))) {
HXLINE(4192)			_hx_tmp1 = hx::IsNull( style->__Field(HX_("filledColor",61,28,7c,97),hx::paccDynamic) );
            		}
            		else {
HXLINE(4192)			_hx_tmp1 = false;
            		}
HXDLIN(4192)		if (_hx_tmp1) {
HXLINE(4192)			_hx_tmp = hx::IsNull( ( (::Array< int >)(style->__Field(HX_("filledColors",f2,2c,27,f5),hx::paccDynamic)) ) );
            		}
            		else {
HXLINE(4192)			_hx_tmp = false;
            		}
HXDLIN(4192)		if (_hx_tmp) {
HXLINE(4194)			style->__SetField(HX_("filledColor",61,28,7c,97),(int)-65536,hx::paccDynamic);
            		}
HXLINE(4197)		bool _hx_tmp2;
HXDLIN(4197)		if ((W == (int)-1)) {
HXLINE(4197)			_hx_tmp2 = (H == (int)-1);
            		}
            		else {
HXLINE(4197)			_hx_tmp2 = false;
            		}
HXDLIN(4197)		if (_hx_tmp2) {
HXLINE(4199)			fb =  ::flixel::addons::ui::FlxUIBar_obj::__alloc( HX_CTX ,(int)0,(int)0,fillDir,(int)100,(int)10,parentRef,variableName,min,max,showBorder);
            		}
            		else {
HXLINE(4203)			fb =  ::flixel::addons::ui::FlxUIBar_obj::__alloc( HX_CTX ,(int)0,(int)0,fillDir,W,H,parentRef,variableName,min,max,showBorder);
            		}
HXLINE(4206)		fb->set_style(style);
HXLINE(4207)		fb->resize(fb->barWidth,fb->barHeight);
HXLINE(4209)		fb->set_value(value);
HXLINE(4211)		return fb;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadBar,return )

 ::flixel::addons::ui::FlxUISprite FlxUI_obj::_loadSprite( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4215__loadSprite)
HXLINE(4216)		::String src = HX_("",00,00,00,00);
HXLINE(4217)		 ::flixel::addons::ui::FlxUISprite fs = null();
HXLINE(4219)		src = this->loadScaledSrc(data,null(),null(),null(),null());
HXLINE(4221)		 ::Dynamic bounds = this->calcMaxMinSize(data,null(),null());
HXLINE(4224)		 ::flixel::math::FlxPoint resize = this->getResizeRatio(data,(int)-1);
HXLINE(4226)		Float resize_ratio = resize->x;
HXLINE(4227)		int resize_ratio_axis = ::Std_obj::_hx_int(resize->y);
HXLINE(4228)		 ::flixel::math::FlxPoint resize_point = this->_loadCompass(data,HX_("resize_point",85,44,f0,71));
HXLINE(4230)		int W = ::Std_obj::_hx_int(this->_loadWidth(data,(int)-1,null(),null()));
HXLINE(4231)		int H = ::Std_obj::_hx_int(this->_loadHeight(data,(int)-1,null(),null()));
HXLINE(4233)		if (hx::IsNotNull( bounds )) {
HXLINE(4235)			if ((W < ( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),hx::paccDynamic)) ))) {
HXLINE(4235)				W = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4236)				if ((W > ( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),hx::paccDynamic)) ))) {
HXLINE(4236)					W = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),hx::paccDynamic)) ));
            				}
            			}
HXLINE(4237)			if ((H < ( (Float)(bounds->__Field(HX_("min_height",34,3e,29,69),hx::paccDynamic)) ))) {
HXLINE(4237)				H = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4238)				if ((H > ( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) ))) {
HXLINE(4238)					H = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) ));
            				}
            			}
            		}
HXLINE(4241)		if ((src != HX_("",00,00,00,00))) {
HXLINE(4243)			bool _hx_tmp;
HXDLIN(4243)			if ((W == (int)-1)) {
HXLINE(4243)				_hx_tmp = (H == (int)-1);
            			}
            			else {
HXLINE(4243)				_hx_tmp = false;
            			}
HXDLIN(4243)			if (_hx_tmp) {
HXLINE(4245)				fs =  ::flixel::addons::ui::FlxUISprite_obj::__alloc( HX_CTX ,(int)0,(int)0,src);
            			}
            			else {
HXLINE(4250)				bool _hx_tmp1;
HXDLIN(4250)				if ((resize_ratio != (int)-1)) {
HXLINE(4250)					if ((W != (int)-1)) {
HXLINE(4250)						_hx_tmp1 = (H == (int)-1);
            					}
            					else {
HXLINE(4250)						_hx_tmp1 = true;
            					}
            				}
            				else {
HXLINE(4250)					_hx_tmp1 = false;
            				}
HXDLIN(4250)				if (_hx_tmp1) {
HXLINE(4253)					if ((resize_ratio_axis == (int)-1)) {
HXLINE(4255)						if ((W == (int)-1)) {
HXLINE(4255)							resize_ratio_axis = (int)0;
            						}
HXLINE(4256)						if ((H == (int)-1)) {
HXLINE(4256)							resize_ratio_axis = (int)1;
            						}
            					}
HXLINE(4260)					if ((resize_ratio_axis == (int)1)) {
HXLINE(4262)						H = (W * ((Float)(int)1 / (Float)resize_ratio));
            					}
            					else {
HXLINE(4264)						if ((resize_ratio_axis == (int)0)) {
HXLINE(4266)							W = (H * ((Float)(int)1 / (Float)resize_ratio));
            						}
            					}
            				}
HXLINE(4270)				bool smooth = this->loadSmooth(data,true);
HXLINE(4271)				fs =  ::flixel::addons::ui::FlxUISprite_obj::__alloc( HX_CTX ,(int)0,(int)0,::flixel::addons::ui::U_obj::loadScaledImage(src,W,H,smooth));
            			}
            		}
            		else {
HXLINE(4276)			::String cstr = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("color",63,71,5c,4a),null(),null());
HXLINE(4277)			int C = (int)0;
HXLINE(4278)			if ((cstr != HX_("",00,00,00,00))) {
HXLINE(4280)				 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(cstr);
HXDLIN(4280)				if (hx::IsNull( return_val )) {
HXLINE(4280)					HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + cstr));
            				}
HXDLIN(4280)				C = return_val;
            			}
HXLINE(4282)			fs =  ::flixel::addons::ui::FlxUISprite_obj::__alloc( HX_CTX ,(int)0,(int)0,null());
HXLINE(4283)			fs->makeGraphic(W,H,C,null(),null());
            		}
HXLINE(4286)		fs->set_resize_point(resize_point);
HXLINE(4287)		fs->set_resize_ratio(resize_ratio);
HXLINE(4288)		fs->resize_ratio_axis = resize_ratio_axis;
HXLINE(4290)		return fs;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadSprite,return )

bool FlxUI_obj::loadSmooth( ::haxe::xml::Fast scaleNode,bool defaultValue){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4294_loadSmooth)
HXLINE(4295)		::String defaultStr;
HXDLIN(4295)		if (defaultValue) {
HXLINE(4295)			defaultStr = HX_("true",4e,a7,03,4d);
            		}
            		else {
HXLINE(4295)			defaultStr = HX_("false",a3,35,4f,fb);
            		}
HXLINE(4296)		::String smoothStr = ::flixel::addons::ui::U_obj::xml_str(scaleNode->x,HX_("smooth",2e,08,6b,07),true,defaultStr);
HXLINE(4297)		if ((smoothStr == HX_("",00,00,00,00))) {
HXLINE(4299)			smoothStr = ::flixel::addons::ui::U_obj::xml_str(scaleNode->x,HX_("antialias",ae,d6,e9,75),true,defaultStr);
            		}
HXLINE(4301)		return ::flixel::addons::ui::U_obj::boolify(smoothStr);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,loadSmooth,return )

::String FlxUI_obj::loadScaledSrc( ::haxe::xml::Fast data,::String __o_attName,::String __o_scaleName,hx::Null< int >  __o_tilesWide,hx::Null< int >  __o_tilesTall){
::String attName = __o_attName.Default(HX_HCSTRING("src","\xe4","\xa6","\x57","\x00"));
::String scaleName = __o_scaleName.Default(HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"));
int tilesWide = __o_tilesWide.Default(1);
int tilesTall = __o_tilesTall.Default(1);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4311_loadScaledSrc)
HXLINE(4312)		::String src = ::flixel::addons::ui::U_obj::xml_str(data->x,attName,null(),null());
HXLINE(4313)		if (data->hasNode->resolve(scaleName)) {
HXLINE(4315)			 ::_List::ListNode _g_head = data->nodes->resolve(scaleName)->h;
HXDLIN(4315)			while(hx::IsNotNull( _g_head )){
HXLINE(4315)				 ::haxe::xml::Fast val = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(4315)				_g_head = _g_head->next;
HXDLIN(4315)				 ::haxe::xml::Fast scaleNode = val;
HXLINE(4317)				Float ratio = ::flixel::addons::ui::U_obj::xml_f(scaleNode->x,HX_("screen_ratio",b8,10,95,88),(int)-1);
HXLINE(4318)				Float tolerance = ::flixel::addons::ui::U_obj::xml_f(scaleNode->x,HX_("tolerance",0d,3d,7c,33),((Float)0.1));
HXLINE(4319)				Float actualRatio = ((Float)::flixel::FlxG_obj::width / (Float)::flixel::FlxG_obj::height);
HXLINE(4322)				bool _hx_tmp;
HXDLIN(4322)				if (!((ratio < (int)0))) {
HXLINE(4322)					if ((ratio > (int)0)) {
HXLINE(4322)						_hx_tmp = (::Math_obj::abs((ratio - actualRatio)) <= tolerance);
            					}
            					else {
HXLINE(4322)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE(4322)					_hx_tmp = true;
            				}
HXDLIN(4322)				if (_hx_tmp) {
HXLINE(4324)					::String suffix = ::flixel::addons::ui::U_obj::xml_str(scaleNode->x,HX_("suffix",d1,e2,a5,9c),null(),null());
HXLINE(4325)					::String srcSuffix = (src + suffix);
HXLINE(4326)					 ::openfl::_legacy::display::BitmapData testAsset = null();
HXLINE(4327)					Float scale_ = (int)-1;
HXLINE(4328)					bool smooth = this->loadSmooth(scaleNode,true);
HXLINE(4330)					Float to_height = this->_loadHeight(scaleNode,(int)-1,HX_("to_height",6b,29,06,d3),null());
HXLINE(4332)					if ((to_height != (int)-1)) {
HXLINE(4334)						 ::openfl::_legacy::display::BitmapData testAsset1 = ::flixel::addons::ui::U_obj::getBmp(::flixel::addons::ui::U_obj::gfx(src,null(),null(),null(),null(),null()));
HXLINE(4335)						if (hx::IsNotNull( testAsset1 )) {
HXLINE(4337)							scale_ = ((Float)to_height / (Float)testAsset1->get_height());
            						}
            					}
            					else {
HXLINE(4342)						scale_ = this->_loadScale(scaleNode,(int)-1,null());
HXLINE(4343)						if ((scale_ == (int)-1)) {
HXLINE(4345)							scale_ = this->_loadScale(scaleNode,(int)-1,HX_("value",71,7f,b8,31));
            						}
            					}
HXLINE(4349)					Float scale_x;
HXDLIN(4349)					if ((scale_ != (int)-1)) {
HXLINE(4349)						scale_x = scale_;
            					}
            					else {
HXLINE(4349)						scale_x = this->_loadScaleX(scaleNode,(int)-1);
            					}
HXLINE(4350)					Float scale_y;
HXDLIN(4350)					if ((scale_ != (int)-1)) {
HXLINE(4350)						scale_y = scale_;
            					}
            					else {
HXLINE(4350)						scale_y = this->_loadScaleY(scaleNode,(int)-1);
            					}
HXLINE(4352)					Float sw = (int)0;
HXLINE(4353)					Float sh = (int)0;
HXLINE(4355)					bool _hx_tmp1;
HXDLIN(4355)					if ((scale_x > (int)0)) {
HXLINE(4355)						_hx_tmp1 = (scale_y > (int)0);
            					}
            					else {
HXLINE(4355)						_hx_tmp1 = false;
            					}
HXDLIN(4355)					if (_hx_tmp1) {
HXLINE(4357)						if ((scale_x <= (int)0)) {
HXLINE(4357)							scale_x = ((Float)1.0);
            						}
HXLINE(4358)						if ((scale_y <= (int)0)) {
HXLINE(4358)							scale_y = ((Float)1.0);
            						}
HXLINE(4360)						sw = this->_loadWidth(scaleNode,(int)-1,null(),null());
HXLINE(4361)						sh = this->_loadHeight(scaleNode,(int)-1,null(),null());
HXLINE(4363)						bool _hx_tmp2;
HXDLIN(4363)						if ((sw != (int)-1)) {
HXLINE(4363)							_hx_tmp2 = (sh == (int)-1);
            						}
            						else {
HXLINE(4363)							_hx_tmp2 = true;
            						}
HXDLIN(4363)						if (_hx_tmp2) {
HXLINE(4365)							testAsset = ::openfl::_legacy::Assets_obj::getBitmapData(::flixel::addons::ui::U_obj::gfx(src,null(),null(),null(),null(),null()),null());
HXLINE(4366)							sw = testAsset->get_width();
HXLINE(4367)							sh = testAsset->get_height();
            						}
HXLINE(4370)						sw = (sw * scale_x);
HXLINE(4371)						sh = (sh * scale_y);
            					}
            					else {
HXLINE(4376)						sw = this->_loadWidth(scaleNode,(int)-1,null(),null());
HXLINE(4377)						sh = this->_loadHeight(scaleNode,(int)-1,null(),null());
            					}
HXLINE(4380)					bool _hx_tmp3;
HXDLIN(4380)					if ((sw != (int)0)) {
HXLINE(4380)						_hx_tmp3 = (sh != (int)0);
            					}
            					else {
HXLINE(4380)						_hx_tmp3 = false;
            					}
HXDLIN(4380)					if (_hx_tmp3) {
HXLINE(4382)						bool _hx_tmp4;
HXDLIN(4382)						if ((tilesTall <= (int)1)) {
HXLINE(4382)							_hx_tmp4 = (tilesWide > (int)1);
            						}
            						else {
HXLINE(4382)							_hx_tmp4 = true;
            						}
HXDLIN(4382)						if (_hx_tmp4) {
HXLINE(4384)							testAsset = ::openfl::_legacy::Assets_obj::getBitmapData(::flixel::addons::ui::U_obj::gfx(src,null(),null(),null(),null(),null()),null());
HXLINE(4385)							::String str = ::flixel::addons::ui::U_obj::gfx(srcSuffix,null(),null(),null(),null(),null());
HXDLIN(4385)							int str1 = ::Std_obj::_hx_int(((Float)testAsset->get_width() / (Float)tilesWide));
HXDLIN(4385)							int str2 = ::Std_obj::_hx_int(((Float)testAsset->get_height() / (Float)tilesTall));
HXDLIN(4385)							int str3 = ::Std_obj::_hx_int(sw);
HXDLIN(4385)							::String str4 = ::flixel::addons::ui::U_obj::scaleAndStoreTileset(str,scale_y,str1,str2,str3,::Std_obj::_hx_int(((Float)sh / (Float)tilesTall)),smooth);
HXLINE(4386)							this->addToScaledAssets(str4);
HXLINE(4387)							return str4;
            						}
            						else {
HXLINE(4391)							::String str5 = ::flixel::addons::ui::U_obj::loadScaledImage(srcSuffix,sw,sh,smooth);
HXLINE(4392)							this->addToScaledAssets(str5);
HXLINE(4393)							return str5;
            						}
            					}
HXLINE(4396)					goto _hx_goto_221;
            				}
            			}
            			_hx_goto_221:;
            		}
HXLINE(4400)		 ::Xml data1 = data->x;
HXDLIN(4400)		::String str6 = HX_("",00,00,00,00);
HXDLIN(4400)		if (hx::IsNotNull( data1->get(attName) )) {
HXLINE(4400)			str6 = data1->get(attName);
HXDLIN(4400)			bool _hx_tmp5;
HXDLIN(4400)			if ((str6 != HX_("",00,00,00,00))) {
HXLINE(4400)				_hx_tmp5 = hx::IsNull( str6 );
            			}
            			else {
HXLINE(4400)				_hx_tmp5 = true;
            			}
HXDLIN(4400)			if (_hx_tmp5) {
HXLINE(4400)				str6 = HX_("",00,00,00,00);
            			}
            			else {
HXLINE(4400)				str6 = ::flixel::addons::ui::U_obj::gfx(str6,null(),null(),null(),null(),null());
HXDLIN(4400)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE(4400)					if (!(::openfl::_legacy::Assets_obj::exists(str6,::openfl::_legacy::AssetType_obj::IMAGE_dyn()))) {
HXLINE(4400)						HX_STACK_DO_THROW(((HX_("couldn't load bmp \"",73,a2,6e,30) + attName) + HX_("\"",22,00,00,00)));
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String msg = _hx_e;
HXLINE(4400)						 ::flixel::_hx_system::frontEnds::LogFrontEnd _this = ::flixel::FlxG_obj::log;
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
HXDLIN(4400)		return str6;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxUI_obj,loadScaledSrc,return )

int FlxUI_obj::thisWidth(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4412_thisWidth)
HXDLIN(4412)		return ::flixel::FlxG_obj::width;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,thisWidth,return )

int FlxUI_obj::thisHeight(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4420_thisHeight)
HXDLIN(4420)		return ::flixel::FlxG_obj::height;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,thisHeight,return )

Float FlxUI_obj::_getAnchorPos(::Dynamic thing,::String axis,::String str){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4427__getAnchorPos)
HXLINE(4428)		::String _hx_switch_0 = str;
            		if (  (_hx_switch_0==HX_("",00,00,00,00)) ){
HXLINE(4430)			return (int)0;
HXDLIN(4430)			goto _hx_goto_225;
            		}
            		if (  (_hx_switch_0==HX_("bottom",eb,e6,78,65)) ||  (_hx_switch_0==HX_("down",62,f8,6d,42)) ){
HXLINE(4437)			return this->screenHeight();
HXDLIN(4437)			goto _hx_goto_225;
            		}
            		if (  (_hx_switch_0==HX_("center",d5,25,db,05)) ){
HXLINE(4434)			if ((axis == HX_("x",78,00,00,00))) {
HXLINE(4434)				return ((Float)this->screenWidth() / (Float)(int)2);
            			}
            			else {
HXLINE(4435)				if ((axis == HX_("y",79,00,00,00))) {
HXLINE(4435)					return ((Float)this->screenHeight() / (Float)(int)2);
            				}
            			}
HXLINE(4434)			goto _hx_goto_225;
            		}
            		if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE(4431)			return (int)0;
HXDLIN(4431)			goto _hx_goto_225;
            		}
            		if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE(4432)			return this->screenWidth();
HXDLIN(4432)			goto _hx_goto_225;
            		}
            		if (  (_hx_switch_0==HX_("top",95,66,58,00)) ||  (_hx_switch_0==HX_("up",5b,66,00,00)) ){
HXLINE(4436)			return (int)0;
HXDLIN(4436)			goto _hx_goto_225;
            		}
            		/* default */{
HXLINE(4439)			Float perc = ::flixel::addons::ui::U_obj::perc_to_float(str);
HXLINE(4440)			if (!(::Math_obj::isNaN(perc))) {
HXLINE(4441)				if ((axis == HX_("x",78,00,00,00))) {
HXLINE(4442)					return (perc * this->screenWidth());
            				}
            				else {
HXLINE(4443)					if ((axis == HX_("y",79,00,00,00))) {
HXLINE(4444)						return (perc * this->screenHeight());
            					}
            				}
            			}
            			else {
HXLINE(4447)				 ::EReg r =  ::EReg_obj::__alloc( HX_CTX ,HX_("[\\w]+\\.[\\w]+",ee,da,86,47),HX_("",00,00,00,00));
HXLINE(4449)				if (r->match(str)) {
HXLINE(4450)					::String wh = HX_("",00,00,00,00);
HXLINE(4451)					if ((axis == HX_("x",78,00,00,00))) {
HXLINE(4451)						wh = HX_("w",77,00,00,00);
            					}
HXLINE(4452)					if ((axis == HX_("y",79,00,00,00))) {
HXLINE(4452)						wh = HX_("h",68,00,00,00);
            					}
HXLINE(4453)					Float assetValue = this->_getStretch((int)1,wh,str);
HXLINE(4454)					return assetValue;
            				}
            			}
            		}
            		_hx_goto_225:;
HXLINE(4458)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_getAnchorPos,return )

 ::flixel::addons::ui::Rounding FlxUI_obj::getRound( ::haxe::xml::Fast node,::String __o_defaultStr){
::String defaultStr = __o_defaultStr.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4462_getRound)
HXLINE(4463)		::String roundStr = ::flixel::addons::ui::U_obj::xml_str(node->x,HX_("round",4e,f8,65,ed),true,defaultStr);
HXLINE(4464)		::String _hx_switch_0 = roundStr;
            		if (  (_hx_switch_0==HX_("-1",64,27,00,00)) ||  (_hx_switch_0==HX_("down",62,f8,6d,42)) ||  (_hx_switch_0==HX_("floor",cc,d1,96,02)) ){
HXLINE(4467)			return ::flixel::addons::ui::Rounding_obj::Floor_dyn();
HXDLIN(4467)			goto _hx_goto_227;
            		}
            		if (  (_hx_switch_0==HX_("1",31,00,00,00)) ||  (_hx_switch_0==HX_("ceil",05,1f,bd,41)) ||  (_hx_switch_0==HX_("ceiling",fd,5e,9e,33)) ||  (_hx_switch_0==HX_("up",5b,66,00,00)) ){
HXLINE(4469)			return ::flixel::addons::ui::Rounding_obj::Ceil_dyn();
HXDLIN(4469)			goto _hx_goto_227;
            		}
            		if (  (_hx_switch_0==HX_("0",30,00,00,00)) ||  (_hx_switch_0==HX_("round",4e,f8,65,ed)) ||  (_hx_switch_0==HX_("true",4e,a7,03,4d)) ){
HXLINE(4471)			return ::flixel::addons::ui::Rounding_obj::Round_dyn();
HXDLIN(4471)			goto _hx_goto_227;
            		}
            		_hx_goto_227:;
HXLINE(4473)		return ::flixel::addons::ui::Rounding_obj::None_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getRound,return )

Float FlxUI_obj::doRound(Float f, ::flixel::addons::ui::Rounding round){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4478_doRound)
HXDLIN(4478)		switch((int)(_hx_getEnumValueIndex(round))){
            			case (int)0: {
HXLINE(4481)				return ::Math_obj::floor(f);
            			}
            			break;
            			case (int)1: {
HXLINE(4483)				return ::Math_obj::ceil(f);
            			}
            			break;
            			case (int)2: {
HXLINE(4482)				return ::Math_obj::round(f);
            			}
            			break;
            			case (int)3: {
HXLINE(4480)				return f;
            			}
            			break;
            		}
HXLINE(4478)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,doRound,return )

 ::Dynamic FlxUI_obj::calcMaxMinSize( ::haxe::xml::Fast data, ::Dynamic width, ::Dynamic height){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4489_calcMaxMinSize)
HXLINE(4490)		Float min_w = (int)0;
HXLINE(4491)		Float min_h = (int)0;
HXLINE(4492)		Float max_w = ::Math_obj::POSITIVE_INFINITY;
HXLINE(4493)		Float max_h = ::Math_obj::POSITIVE_INFINITY;
HXLINE(4494)		Float temp_min_w = (int)0;
HXLINE(4495)		Float temp_min_h = (int)0;
HXLINE(4496)		Float temp_max_w = ::Math_obj::POSITIVE_INFINITY;
HXLINE(4497)		Float temp_max_h = ::Math_obj::POSITIVE_INFINITY;
HXLINE(4499)		 ::flixel::addons::ui::Rounding round = ::flixel::addons::ui::Rounding_obj::None_dyn();
HXLINE(4501)		if (data->hasNode->resolve(HX_("exact_size",81,45,3f,e0))) {
HXLINE(4503)			 ::_List::ListNode _g_head = data->nodes->resolve(HX_("exact_size",81,45,3f,e0))->h;
HXDLIN(4503)			while(hx::IsNotNull( _g_head )){
HXLINE(4503)				 ::haxe::xml::Fast val = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(4503)				_g_head = _g_head->next;
HXDLIN(4503)				 ::haxe::xml::Fast exactNode = val;
HXLINE(4505)				::String exact_w_str = ::flixel::addons::ui::U_obj::xml_str(exactNode->x,HX_("width",06,b6,62,ca),null(),null());
HXLINE(4506)				::String exact_h_str = ::flixel::addons::ui::U_obj::xml_str(exactNode->x,HX_("height",e7,07,4c,02),null(),null());
HXLINE(4508)				round = this->getRound(exactNode,null());
HXLINE(4509)				min_w = this->doRound(this->_getDataSize(HX_("w",77,00,00,00),exact_w_str,(int)0),round);
HXLINE(4510)				min_h = this->doRound(this->_getDataSize(HX_("h",68,00,00,00),exact_h_str,(int)0),round);
HXLINE(4511)				max_w = this->doRound(min_w,round);
HXLINE(4512)				max_h = this->doRound(min_h,round);
            			}
            		}
            		else {
HXLINE(4515)			if (data->hasNode->resolve(HX_("min_size",ce,b9,6e,63))) {
HXLINE(4517)				 ::_List::ListNode _g_head1 = data->nodes->resolve(HX_("min_size",ce,b9,6e,63))->h;
HXDLIN(4517)				while(hx::IsNotNull( _g_head1 )){
HXLINE(4517)					 ::haxe::xml::Fast val1 = ( ( ::haxe::xml::Fast)(_g_head1->item) );
HXDLIN(4517)					_g_head1 = _g_head1->next;
HXDLIN(4517)					 ::haxe::xml::Fast minNode = val1;
HXLINE(4519)					::String min_w_str = ::flixel::addons::ui::U_obj::xml_str(minNode->x,HX_("width",06,b6,62,ca),null(),null());
HXLINE(4520)					::String min_h_str = ::flixel::addons::ui::U_obj::xml_str(minNode->x,HX_("height",e7,07,4c,02),null(),null());
HXLINE(4521)					round = this->getRound(minNode,null());
HXLINE(4522)					temp_min_w = this->doRound(this->_getDataSize(HX_("w",77,00,00,00),min_w_str,(int)0),round);
HXLINE(4523)					temp_min_h = this->doRound(this->_getDataSize(HX_("h",68,00,00,00),min_h_str,(int)0),round);
HXLINE(4524)					if ((temp_min_w > min_w)) {
HXLINE(4526)						min_w = temp_min_w;
            					}
HXLINE(4528)					if ((temp_min_h > min_h)) {
HXLINE(4530)						min_h = temp_min_h;
            					}
            				}
            			}
            			else {
HXLINE(4534)				if (data->hasNode->resolve(HX_("max_size",7c,9f,54,16))) {
HXLINE(4536)					 ::_List::ListNode _g_head2 = data->nodes->resolve(HX_("max_size",7c,9f,54,16))->h;
HXDLIN(4536)					while(hx::IsNotNull( _g_head2 )){
HXLINE(4536)						 ::haxe::xml::Fast val2 = ( ( ::haxe::xml::Fast)(_g_head2->item) );
HXDLIN(4536)						_g_head2 = _g_head2->next;
HXDLIN(4536)						 ::haxe::xml::Fast maxNode = val2;
HXLINE(4538)						::String max_w_str = ::flixel::addons::ui::U_obj::xml_str(maxNode->x,HX_("width",06,b6,62,ca),null(),null());
HXLINE(4539)						::String max_h_str = ::flixel::addons::ui::U_obj::xml_str(maxNode->x,HX_("height",e7,07,4c,02),null(),null());
HXLINE(4540)						round = this->getRound(maxNode,null());
HXLINE(4541)						temp_max_w = this->doRound(this->_getDataSize(HX_("w",77,00,00,00),max_w_str,::Math_obj::POSITIVE_INFINITY),round);
HXLINE(4542)						temp_max_h = this->doRound(this->_getDataSize(HX_("h",68,00,00,00),max_h_str,::Math_obj::POSITIVE_INFINITY),round);
HXLINE(4543)						if ((temp_max_w < max_w)) {
HXLINE(4545)							max_w = temp_max_w;
            						}
HXLINE(4547)						if ((temp_max_h < max_h)) {
HXLINE(4549)							max_h = temp_max_h;
            						}
            					}
            				}
            				else {
HXLINE(4555)					return null();
            				}
            			}
            		}
HXLINE(4558)		if (hx::IsNotNull( width )) {
HXLINE(4560)			if (hx::IsGreater( width,min_w )) {
HXLINE(4560)				min_w = width;
            			}
HXLINE(4561)			if (hx::IsLess( width,max_w )) {
HXLINE(4561)				max_w = width;
            			}
            		}
HXLINE(4563)		if (hx::IsNotNull( height )) {
HXLINE(4565)			if (hx::IsGreater( height,min_h )) {
HXLINE(4565)				min_h = height;
            			}
HXLINE(4566)			if (hx::IsLess( height,max_h )) {
HXLINE(4566)				max_h = height;
            			}
            		}
HXLINE(4571)		if ((max_w <= (int)0)) {
HXLINE(4571)			max_w = ::Math_obj::POSITIVE_INFINITY;
            		}
HXLINE(4572)		if ((max_h <= (int)0)) {
HXLINE(4572)			max_h = ::Math_obj::POSITIVE_INFINITY;
            		}
HXLINE(4574)		return  ::Dynamic(hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("max_width",eb,9a,40,c1),max_w)
            			->setFixed(1,HX_("min_width",59,88,fd,ea),min_w)
            			->setFixed(2,HX_("max_height",62,6b,96,0d),max_h)
            			->setFixed(3,HX_("min_height",34,3e,29,69),min_h));
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,calcMaxMinSize,return )

Float FlxUI_obj::_getDataSize(::String target,::String str,hx::Null< Float >  __o_default_){
Float default_ = __o_default_.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4578__getDataSize)
HXLINE(4579)		if (::flixel::addons::ui::U_obj::isStrNum(str)) {
HXLINE(4581)			return ::Std_obj::parseFloat(str);
            		}
HXLINE(4583)		Float percf = ::flixel::addons::ui::U_obj::perc_to_float(str);
HXLINE(4584)		if (!(::Math_obj::isNaN(percf))) {
HXLINE(4586)			::String _hx_switch_0 = target;
            			if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("height",e7,07,4c,02)) ){
HXLINE(4589)				return (this->screenHeight() * percf);
HXDLIN(4589)				goto _hx_goto_234;
            			}
            			if (  (_hx_switch_0==HX_("scale",8a,ce,ce,78)) ||  (_hx_switch_0==HX_("scale_x",43,58,07,65)) ||  (_hx_switch_0==HX_("scale_y",44,58,07,65)) ){
HXLINE(4590)				return percf;
HXDLIN(4590)				goto _hx_goto_234;
            			}
            			if (  (_hx_switch_0==HX_("w",77,00,00,00)) ||  (_hx_switch_0==HX_("width",06,b6,62,ca)) ){
HXLINE(4588)				return (this->screenWidth() * percf);
HXDLIN(4588)				goto _hx_goto_234;
            			}
            			_hx_goto_234:;
            		}
            		else {
HXLINE(4595)			if ((str.indexOf(HX_("stretch:",95,06,83,92),null()) == (int)0)) {
HXLINE(4597)				str = ::StringTools_obj::replace(str,HX_("stretch:",95,06,83,92),HX_("",00,00,00,00));
HXLINE(4598)				::Array< ::String > arr = str.split(HX_(",",2c,00,00,00));
HXLINE(4599)				Float stretch_0 = this->_getStretch((int)0,target,arr->__get((int)0));
HXLINE(4600)				Float stretch_1 = this->_getStretch((int)1,target,arr->__get((int)1));
HXLINE(4601)				bool _hx_tmp;
HXDLIN(4601)				if ((stretch_0 != (int)-1)) {
HXLINE(4601)					_hx_tmp = (stretch_1 != (int)-1);
            				}
            				else {
HXLINE(4601)					_hx_tmp = false;
            				}
HXDLIN(4601)				if (_hx_tmp) {
HXLINE(4603)					return (stretch_1 - stretch_0);
            				}
            				else {
HXLINE(4607)					return default_;
            				}
            			}
            			else {
HXLINE(4610)				if ((str.indexOf(HX_("asset:",4a,48,03,4c),null()) == (int)0)) {
HXLINE(4612)					str = ::StringTools_obj::replace(str,HX_("asset:",4a,48,03,4c),HX_("",00,00,00,00));
HXLINE(4613)					Float assetValue = this->_getStretch((int)1,target,str);
HXLINE(4614)					return assetValue;
            				}
            				else {
HXLINE(4618)					 ::EReg r =  ::EReg_obj::__alloc( HX_CTX ,HX_("[\\w]+\\.[\\w]+",ee,da,86,47),HX_("",00,00,00,00));
HXLINE(4619)					if (r->match(str)) {
HXLINE(4621)						Float assetValue1 = this->_getStretch((int)1,target,str);
HXLINE(4622)						return assetValue1;
            					}
            				}
            			}
HXLINE(4626)			::String ptStr = HX_("",00,00,00,00);
HXLINE(4628)			int _hx_tmp1 = str.indexOf(HX_("pt",04,62,00,00),null());
HXDLIN(4628)			if ((_hx_tmp1 == (str.length - (int)2))) {
HXLINE(4630)				ptStr = str.substr((int)0,(str.length - (int)2));
            			}
HXLINE(4633)			bool _hx_tmp2;
HXDLIN(4633)			if ((ptStr != HX_("",00,00,00,00))) {
HXLINE(4633)				_hx_tmp2 = ::flixel::addons::ui::U_obj::isStrNum(ptStr);
            			}
            			else {
HXLINE(4633)				_hx_tmp2 = false;
            			}
HXDLIN(4633)			if (_hx_tmp2) {
HXLINE(4635)				Float tempNum = ::Std_obj::parseFloat(ptStr);
HXLINE(4637)				::String _hx_switch_1 = target;
            				if (  (_hx_switch_1==HX_("h",68,00,00,00)) ||  (_hx_switch_1==HX_("height",e7,07,4c,02)) ){
HXLINE(4640)					return (this->_pointY * tempNum);
HXDLIN(4640)					goto _hx_goto_235;
            				}
            				if (  (_hx_switch_1==HX_("w",77,00,00,00)) ||  (_hx_switch_1==HX_("width",06,b6,62,ca)) ){
HXLINE(4639)					return (this->_pointX * tempNum);
HXDLIN(4639)					goto _hx_goto_235;
            				}
            				_hx_goto_235:;
            			}
            		}
HXLINE(4644)		return default_;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_getDataSize,return )

::cpp::VirtualArray FlxUI_obj::_getOperation(::String str){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4656__getOperation)
HXLINE(4657)		::Array< ::String > list = ::Array_obj< ::String >::fromData( _hx_array_data_e9110855_239,5);
HXLINE(4659)		::String _hx_operator = HX_("",00,00,00,00);
HXLINE(4660)		Float besti = ::Math_obj::POSITIVE_INFINITY;
HXLINE(4662)		{
HXLINE(4662)			int _g = (int)0;
HXDLIN(4662)			while((_g < list->length)){
HXLINE(4662)				::String op = list->__get(_g);
HXDLIN(4662)				_g = (_g + (int)1);
HXLINE(4664)				int i = str.indexOf(op,null());
HXLINE(4665)				if ((i != (int)-1)) {
HXLINE(4667)					if ((i < besti)) {
HXLINE(4669)						besti = i;
HXLINE(4670)						_hx_operator = op;
            					}
            				}
            			}
            		}
HXLINE(4675)		bool hasPoint = false;
HXLINE(4677)		if ((_hx_operator != HX_("",00,00,00,00))) {
HXLINE(4679)			if ((str.indexOf(_hx_operator,null()) != (int)-1)) {
HXLINE(4681)				int opindex = str.indexOf(_hx_operator,null());
HXLINE(4683)				if ((opindex != (str.length - (int)1))) {
HXLINE(4685)					::String firstBit = str.substr((int)0,opindex);
HXLINE(4686)					int str1 = str.length;
HXDLIN(4686)					::String secondBit = str.substr((opindex + (int)1),(str1 - (opindex + (int)1)));
HXLINE(4688)					Float f = (int)0;
HXLINE(4691)					int ptIndex = secondBit.indexOf(HX_("pt",04,62,00,00),null());
HXLINE(4692)					bool _hx_tmp;
HXDLIN(4692)					if ((ptIndex != (int)-1)) {
HXLINE(4692)						_hx_tmp = (ptIndex == (secondBit.length - (int)2));
            					}
            					else {
HXLINE(4692)						_hx_tmp = false;
            					}
HXDLIN(4692)					if (_hx_tmp) {
HXLINE(4694)						::String sansPt = ::StringTools_obj::replace(secondBit,HX_("pt",04,62,00,00),HX_("",00,00,00,00));
HXLINE(4695)						f = ::Std_obj::parseFloat(sansPt);
HXLINE(4696)						hasPoint = true;
            					}
            					else {
HXLINE(4700)						f = ::Std_obj::parseFloat(secondBit);
            					}
HXLINE(4703)					if (::Math_obj::isNaN(f)) {
HXLINE(4705)						f = this->getAssetProperty((int)1,HX_("",00,00,00,00),secondBit);
            					}
HXLINE(4707)					bool _hx_tmp1;
HXDLIN(4707)					if ((f == (int)0)) {
HXLINE(4707)						_hx_tmp1 = (secondBit != HX_("0",30,00,00,00));
            					}
            					else {
HXLINE(4707)						_hx_tmp1 = false;
            					}
HXDLIN(4707)					if (_hx_tmp1) {
HXLINE(4709)						return null();
            					}
            					else {
HXLINE(4713)						return ::cpp::VirtualArray_obj::__new(4)->init(0,firstBit)->init(1,_hx_operator)->init(2,f)->init(3,hasPoint);
            					}
            				}
            			}
            		}
HXLINE(4719)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_getOperation,return )

Float FlxUI_obj::_doOperation(Float value,::String _hx_operator,Float operand){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4723__doOperation)
HXLINE(4724)		::String _hx_switch_0 = _hx_operator;
            		if (  (_hx_switch_0==HX_("*",2a,00,00,00)) ){
HXLINE(4729)			return (value * operand);
HXDLIN(4729)			goto _hx_goto_240;
            		}
            		if (  (_hx_switch_0==HX_("+",2b,00,00,00)) ){
HXLINE(4726)			return (value + operand);
HXDLIN(4726)			goto _hx_goto_240;
            		}
            		if (  (_hx_switch_0==HX_("-",2d,00,00,00)) ){
HXLINE(4727)			return (value - operand);
HXDLIN(4727)			goto _hx_goto_240;
            		}
            		if (  (_hx_switch_0==HX_("/",2f,00,00,00)) ){
HXLINE(4728)			return ((Float)value / (Float)operand);
HXDLIN(4728)			goto _hx_goto_240;
            		}
            		if (  (_hx_switch_0==HX_("^",5e,00,00,00)) ){
HXLINE(4730)			return ::Math_obj::pow(value,operand);
HXDLIN(4730)			goto _hx_goto_240;
            		}
            		_hx_goto_240:;
HXLINE(4732)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_doOperation,return )

Float FlxUI_obj::_getStretch(int index,::String target,::String str){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4736__getStretch)
HXLINE(4737)		::cpp::VirtualArray arr = null();
HXLINE(4739)		::String _hx_operator = HX_("",00,00,00,00);
HXLINE(4740)		Float operand = (int)0;
HXLINE(4741)		bool hasPoint = false;
HXLINE(4743)		arr = this->_getOperation(str);
HXLINE(4745)		if (hx::IsNotNull( arr )) {
HXLINE(4747)			str = ( (::String)(arr->__get((int)0)) );
HXLINE(4748)			_hx_operator = ( (::String)(arr->__get((int)1)) );
HXLINE(4749)			operand = ( (Float)(arr->__get((int)2)) );
HXLINE(4750)			hasPoint = ( (bool)(arr->__get((int)3)) );
HXLINE(4752)			if (hasPoint) {
HXLINE(4753)				::String _hx_switch_0 = target;
            				if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("height",e7,07,4c,02)) ){
HXLINE(4757)					operand = (operand * this->_pointY);
HXDLIN(4757)					goto _hx_goto_242;
            				}
            				if (  (_hx_switch_0==HX_("w",77,00,00,00)) ||  (_hx_switch_0==HX_("width",06,b6,62,ca)) ){
HXLINE(4755)					operand = (operand * this->_pointX);
HXDLIN(4755)					goto _hx_goto_242;
            				}
            				/* default */{
HXLINE(4759)					operand = (operand * this->_pointY);
            				}
            				_hx_goto_242:;
            			}
            		}
HXLINE(4764)		Float return_val = this->getAssetProperty(index,target,str);
HXLINE(4766)		bool _hx_tmp;
HXDLIN(4766)		if ((return_val != (int)-1)) {
HXLINE(4766)			_hx_tmp = (_hx_operator != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(4766)			_hx_tmp = false;
            		}
HXDLIN(4766)		if (_hx_tmp) {
HXLINE(4768)			return_val = this->_doOperation(return_val,_hx_operator,operand);
            		}
HXLINE(4771)		return return_val;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_getStretch,return )

Float FlxUI_obj::getAssetProperty(int index,::String target,::String str){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4775_getAssetProperty)
HXLINE(4776)		::String prop = HX_("",00,00,00,00);
HXLINE(4778)		if ((str.indexOf(HX_(".",2e,00,00,00),null()) != (int)-1)) {
HXLINE(4780)			::Array< ::String > arr = null();
HXLINE(4781)			arr = str.split(HX_(".",2e,00,00,00));
HXLINE(4782)			str = arr->__get((int)0);
HXLINE(4783)			prop = arr->__get((int)1);
            		}
HXLINE(4786)		::Dynamic other = this->getAsset(str,null());
HXLINE(4788)		Float return_val = (int)0;
HXLINE(4790)		if (hx::IsNull( other )) {
HXLINE(4792)			::String _hx_switch_0 = str;
            			if (  (_hx_switch_0==HX_("bottom",eb,e6,78,65)) ||  (_hx_switch_0==HX_("down",62,f8,6d,42)) ){
HXLINE(4795)				return_val = this->screenHeight();
HXDLIN(4795)				goto _hx_goto_244;
            			}
            			if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE(4796)				return_val = (int)0;
HXDLIN(4796)				goto _hx_goto_244;
            			}
            			if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE(4797)				return_val = this->screenWidth();
HXDLIN(4797)				goto _hx_goto_244;
            			}
            			if (  (_hx_switch_0==HX_("top",95,66,58,00)) ||  (_hx_switch_0==HX_("up",5b,66,00,00)) ){
HXLINE(4794)				return_val = (int)0;
HXDLIN(4794)				goto _hx_goto_244;
            			}
            			/* default */{
HXLINE(4799)				if (::flixel::addons::ui::U_obj::isStrNum(str)) {
HXLINE(4801)					return_val = ::Std_obj::parseFloat(str);
            				}
            				else {
HXLINE(4805)					return_val = (int)-1;
            				}
            			}
            			_hx_goto_244:;
            		}
            		else {
HXLINE(4811)			::String _hx_switch_1 = target;
            			if (  (_hx_switch_1==HX_("h",68,00,00,00)) ||  (_hx_switch_1==HX_("height",e7,07,4c,02)) ){
HXLINE(4835)				if ((prop == HX_("",00,00,00,00))) {
HXLINE(4837)					if ((index == (int)0)) {
HXLINE(4837)						Float other1 = ( (Float)(other->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN(4837)						return_val = (other1 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other));
            					}
HXLINE(4838)					if ((index == (int)1)) {
HXLINE(4838)						return_val = ( (Float)(other->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
            					}
            				}
            				else {
HXLINE(4842)					::String _hx_switch_2 = prop;
            					if (  (_hx_switch_2==HX_("bottom",eb,e6,78,65)) ||  (_hx_switch_2==HX_("down",62,f8,6d,42)) ){
HXLINE(4844)						Float other2 = ( (Float)(other->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN(4844)						return_val = (other2 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other));
HXDLIN(4844)						goto _hx_goto_247;
            					}
            					if (  (_hx_switch_2==HX_("center",d5,25,db,05)) ){
HXLINE(4847)						Float other3 = ( (Float)(other->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN(4847)						return_val = (other3 + ((Float)::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other) / (Float)(int)2));
HXDLIN(4847)						goto _hx_goto_247;
            					}
            					if (  (_hx_switch_2==HX_("halfheight",da,f9,da,c0)) ){
HXLINE(4850)						return_val = ((Float)::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other) / (Float)(int)2);
HXDLIN(4850)						goto _hx_goto_247;
            					}
            					if (  (_hx_switch_2==HX_("halfwidth",73,83,07,7c)) ){
HXLINE(4851)						return_val = ((Float)::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other) / (Float)(int)2);
HXDLIN(4851)						goto _hx_goto_247;
            					}
            					if (  (_hx_switch_2==HX_("height",e7,07,4c,02)) ){
HXLINE(4848)						return_val = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other);
HXDLIN(4848)						goto _hx_goto_247;
            					}
            					if (  (_hx_switch_2==HX_("right",dc,0b,64,e9)) ){
HXLINE(4845)						Float other4 = ( (Float)(other->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN(4845)						return_val = (other4 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other));
HXDLIN(4845)						goto _hx_goto_247;
            					}
            					if (  (_hx_switch_2==HX_("top",95,66,58,00)) ||  (_hx_switch_2==HX_("up",5b,66,00,00)) ||  (_hx_switch_2==HX_("y",79,00,00,00)) ){
HXLINE(4843)						return_val = ( (Float)(other->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN(4843)						goto _hx_goto_247;
            					}
            					if (  (_hx_switch_2==HX_("width",06,b6,62,ca)) ){
HXLINE(4849)						return_val = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other);
HXDLIN(4849)						goto _hx_goto_247;
            					}
            					if (  (_hx_switch_2==HX_("left",07,08,b0,47)) ||  (_hx_switch_2==HX_("x",78,00,00,00)) ){
HXLINE(4846)						return_val = ( (Float)(other->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN(4846)						goto _hx_goto_247;
            					}
            					_hx_goto_247:;
            				}
HXLINE(4835)				goto _hx_goto_246;
            			}
            			if (  (_hx_switch_1==HX_("w",77,00,00,00)) ||  (_hx_switch_1==HX_("width",06,b6,62,ca)) ){
HXLINE(4814)				if ((prop == HX_("",00,00,00,00))) {
HXLINE(4816)					if ((index == (int)0)) {
HXLINE(4816)						Float other5 = ( (Float)(other->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN(4816)						return_val = (other5 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other));
            					}
HXLINE(4817)					if ((index == (int)1)) {
HXLINE(4817)						return_val = ( (Float)(other->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
            					}
            				}
            				else {
HXLINE(4821)					::String _hx_switch_3 = prop;
            					if (  (_hx_switch_3==HX_("bottom",eb,e6,78,65)) ||  (_hx_switch_3==HX_("down",62,f8,6d,42)) ){
HXLINE(4824)						Float other6 = ( (Float)(other->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN(4824)						return_val = (other6 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other));
HXDLIN(4824)						goto _hx_goto_248;
            					}
            					if (  (_hx_switch_3==HX_("center",d5,25,db,05)) ){
HXLINE(4827)						Float other7 = ( (Float)(other->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN(4827)						return_val = (other7 + ((Float)::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other) / (Float)(int)2));
HXDLIN(4827)						goto _hx_goto_248;
            					}
            					if (  (_hx_switch_3==HX_("halfheight",da,f9,da,c0)) ){
HXLINE(4830)						return_val = ((Float)::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other) / (Float)(int)2);
HXDLIN(4830)						goto _hx_goto_248;
            					}
            					if (  (_hx_switch_3==HX_("halfwidth",73,83,07,7c)) ){
HXLINE(4831)						return_val = ((Float)::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other) / (Float)(int)2);
HXDLIN(4831)						goto _hx_goto_248;
            					}
            					if (  (_hx_switch_3==HX_("height",e7,07,4c,02)) ){
HXLINE(4829)						return_val = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other);
HXDLIN(4829)						goto _hx_goto_248;
            					}
            					if (  (_hx_switch_3==HX_("right",dc,0b,64,e9)) ){
HXLINE(4825)						Float other8 = ( (Float)(other->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN(4825)						return_val = (other8 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other));
HXDLIN(4825)						goto _hx_goto_248;
            					}
            					if (  (_hx_switch_3==HX_("top",95,66,58,00)) ||  (_hx_switch_3==HX_("up",5b,66,00,00)) ||  (_hx_switch_3==HX_("y",79,00,00,00)) ){
HXLINE(4823)						return_val = ( (Float)(other->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN(4823)						goto _hx_goto_248;
            					}
            					if (  (_hx_switch_3==HX_("width",06,b6,62,ca)) ){
HXLINE(4828)						return_val = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other);
HXDLIN(4828)						goto _hx_goto_248;
            					}
            					if (  (_hx_switch_3==HX_("left",07,08,b0,47)) ||  (_hx_switch_3==HX_("x",78,00,00,00)) ){
HXLINE(4826)						return_val = ( (Float)(other->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN(4826)						goto _hx_goto_248;
            					}
            					_hx_goto_248:;
            				}
HXLINE(4814)				goto _hx_goto_246;
            			}
            			/* default */{
HXLINE(4855)				::String _hx_switch_4 = prop;
            				if (  (_hx_switch_4==HX_("bottom",eb,e6,78,65)) ||  (_hx_switch_4==HX_("down",62,f8,6d,42)) ){
HXLINE(4858)					Float other9 = ( (Float)(other->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN(4858)					return_val = (other9 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other));
HXDLIN(4858)					goto _hx_goto_245;
            				}
            				if (  (_hx_switch_4==HX_("centerx",03,f5,e5,19)) ){
HXLINE(4862)					Float other10 = ( (Float)(other->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN(4862)					return_val = (other10 + ((Float)::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other) / (Float)(int)2));
HXDLIN(4862)					goto _hx_goto_245;
            				}
            				if (  (_hx_switch_4==HX_("centery",04,f5,e5,19)) ){
HXLINE(4861)					Float other11 = ( (Float)(other->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN(4861)					return_val = (other11 + ((Float)::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other) / (Float)(int)2));
HXDLIN(4861)					goto _hx_goto_245;
            				}
            				if (  (_hx_switch_4==HX_("halfheight",da,f9,da,c0)) ){
HXLINE(4865)					return_val = ((Float)::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other) / (Float)(int)2);
HXDLIN(4865)					goto _hx_goto_245;
            				}
            				if (  (_hx_switch_4==HX_("halfwidth",73,83,07,7c)) ){
HXLINE(4866)					return_val = ((Float)::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other) / (Float)(int)2);
HXDLIN(4866)					goto _hx_goto_245;
            				}
            				if (  (_hx_switch_4==HX_("height",e7,07,4c,02)) ){
HXLINE(4863)					return_val = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other);
HXDLIN(4863)					goto _hx_goto_245;
            				}
            				if (  (_hx_switch_4==HX_("right",dc,0b,64,e9)) ){
HXLINE(4859)					Float other12 = ( (Float)(other->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN(4859)					return_val = (other12 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other));
HXDLIN(4859)					goto _hx_goto_245;
            				}
            				if (  (_hx_switch_4==HX_("top",95,66,58,00)) ||  (_hx_switch_4==HX_("up",5b,66,00,00)) ||  (_hx_switch_4==HX_("y",79,00,00,00)) ){
HXLINE(4857)					return_val = ( (Float)(other->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN(4857)					goto _hx_goto_245;
            				}
            				if (  (_hx_switch_4==HX_("width",06,b6,62,ca)) ){
HXLINE(4864)					return_val = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other);
HXDLIN(4864)					goto _hx_goto_245;
            				}
            				if (  (_hx_switch_4==HX_("left",07,08,b0,47)) ||  (_hx_switch_4==HX_("x",78,00,00,00)) ){
HXLINE(4860)					return_val = ( (Float)(other->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN(4860)					goto _hx_goto_245;
            				}
            				_hx_goto_245:;
            			}
            			_hx_goto_246:;
            		}
HXLINE(4870)		return return_val;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,getAssetProperty,return )

void FlxUI_obj::_loadCursor( ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4875__loadCursor)
HXDLIN(4875)		if (data->hasNode->resolve(HX_("list",5e,1c,b3,47))) {
HXLINE(4877)			if (hx::IsNull( this->cursorLists )) {
HXLINE(4879)				this->cursorLists = ::Array_obj< ::Dynamic>::__new(0);
            			}
HXLINE(4881)			{
HXLINE(4881)				 ::_List::ListNode _g_head = data->nodes->resolve(HX_("list",5e,1c,b3,47))->h;
HXDLIN(4881)				while(hx::IsNotNull( _g_head )){
HXLINE(4881)					 ::haxe::xml::Fast val = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(4881)					_g_head = _g_head->next;
HXDLIN(4881)					 ::haxe::xml::Fast lNode = val;
HXLINE(4883)					::String ids = ::flixel::addons::ui::U_obj::xml_str(lNode->x,HX_("ids",38,04,50,00),null(),null());
HXLINE(4884)					::Array< ::String > arr = ids.split(HX_(",",2c,00,00,00));
HXLINE(4885)					bool _hx_tmp;
HXDLIN(4885)					if (hx::IsNotNull( arr )) {
HXLINE(4885)						_hx_tmp = (arr->length > (int)0);
            					}
            					else {
HXLINE(4885)						_hx_tmp = false;
            					}
HXDLIN(4885)					if (_hx_tmp) {
HXLINE(4887)						::Array< ::Dynamic> list = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(4888)						{
HXLINE(4888)							int _g = (int)0;
HXDLIN(4888)							while((_g < arr->length)){
HXLINE(4888)								::String str = arr->__get(_g);
HXDLIN(4888)								_g = (_g + (int)1);
HXLINE(4890)								::Dynamic widget = this->getAsset(str,null());
HXLINE(4891)								if (hx::IsNotNull( widget )) {
HXLINE(4893)									list->push(widget);
            								}
            							}
            						}
HXLINE(4896)						this->cursorLists->push(list);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadCursor,(void))

void FlxUI_obj::_loadPosition( ::haxe::xml::Fast data,::Dynamic thing){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4903__loadPosition)
HXLINE(4904)		Float X = this->_loadWidth(data,(int)0,HX_("x",78,00,00,00),null());
HXLINE(4905)		Float Y = this->_loadHeight(data,(int)0,HX_("y",79,00,00,00),null());
HXLINE(4910)		bool ctrX = ::flixel::addons::ui::U_obj::xml_bool(data->x,HX_("center_x",4e,58,50,8f),null());
HXLINE(4911)		bool ctrY = ::flixel::addons::ui::U_obj::xml_bool(data->x,HX_("center_y",4f,58,50,8f),null());
HXLINE(4913)		::String center_on = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("center_on",89,e4,fc,d6),null(),null());
HXLINE(4914)		::String center_on_x = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("center_on_x",02,2c,66,3b),null(),null());
HXLINE(4915)		::String center_on_y = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("center_on_y",03,2c,66,3b),null(),null());
HXLINE(4917)		::String anchor_x_str = HX_("",00,00,00,00);
HXLINE(4918)		::String anchor_y_str = HX_("",00,00,00,00);
HXLINE(4919)		Float anchor_x = (int)0;
HXLINE(4920)		Float anchor_y = (int)0;
HXLINE(4921)		::String anchor_x_flush = HX_("",00,00,00,00);
HXLINE(4922)		::String anchor_y_flush = HX_("",00,00,00,00);
HXLINE(4924)		if (data->hasNode->resolve(HX_("anchor",75,3a,71,60))) {
HXLINE(4926)			anchor_x_str = ::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("anchor",75,3a,71,60))->x,HX_("x",78,00,00,00),null(),null());
HXLINE(4927)			anchor_y_str = ::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("anchor",75,3a,71,60))->x,HX_("y",79,00,00,00),null(),null());
HXLINE(4929)			 ::flixel::addons::ui::Rounding rounding = this->getRound(data->node->resolve(HX_("anchor",75,3a,71,60)),null());
HXLINE(4931)			anchor_x = this->_getAnchorPos(thing,HX_("x",78,00,00,00),anchor_x_str);
HXLINE(4932)			anchor_y = this->_getAnchorPos(thing,HX_("y",79,00,00,00),anchor_y_str);
HXLINE(4934)			anchor_x = this->doRound(anchor_x,rounding);
HXLINE(4935)			anchor_y = this->doRound(anchor_y,rounding);
HXLINE(4937)			anchor_x_flush = ::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("anchor",75,3a,71,60))->x,HX_("x-flush",ef,49,ba,7e),true,null());
HXLINE(4938)			anchor_y_flush = ::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("anchor",75,3a,71,60))->x,HX_("y-flush",b0,c0,4f,a8),true,null());
            		}
HXLINE(4942)		bool _hx_tmp;
HXDLIN(4942)		if ((anchor_x_str == HX_("",00,00,00,00))) {
HXLINE(4942)			_hx_tmp = (anchor_y_str != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(4942)			_hx_tmp = true;
            		}
HXDLIN(4942)		if (_hx_tmp) {
HXLINE(4944)			::String _hx_switch_0 = anchor_x_flush;
            			if (  (_hx_switch_0==HX_("center",d5,25,db,05)) ){
HXLINE(4948)				anchor_x = (anchor_x - ((Float)::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(thing) / (Float)(int)2));
HXDLIN(4948)				goto _hx_goto_253;
            			}
            			if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE(4946)				goto _hx_goto_253;
            			}
            			if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE(4947)				anchor_x = (anchor_x - ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(thing));
HXDLIN(4947)				goto _hx_goto_253;
            			}
            			_hx_goto_253:;
HXLINE(4950)			::String _hx_switch_1 = anchor_y_flush;
            			if (  (_hx_switch_1==HX_("bottom",eb,e6,78,65)) ||  (_hx_switch_1==HX_("down",62,f8,6d,42)) ){
HXLINE(4953)				anchor_y = (anchor_y - ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(thing));
HXDLIN(4953)				goto _hx_goto_254;
            			}
            			if (  (_hx_switch_1==HX_("center",d5,25,db,05)) ){
HXLINE(4954)				anchor_y = (anchor_y - ((Float)::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(thing) / (Float)(int)2));
HXDLIN(4954)				goto _hx_goto_254;
            			}
            			if (  (_hx_switch_1==HX_("top",95,66,58,00)) ||  (_hx_switch_1==HX_("up",5b,66,00,00)) ){
HXLINE(4952)				goto _hx_goto_254;
            			}
            			_hx_goto_254:;
HXLINE(4957)			if ((anchor_x_str != HX_("",00,00,00,00))) {
HXLINE(4959)				::flixel::IFlxSprite_obj::set_x(thing,anchor_x);
            			}
HXLINE(4961)			if ((anchor_y_str != HX_("",00,00,00,00))) {
HXLINE(4963)				::flixel::IFlxSprite_obj::set_y(thing,anchor_y);
            			}
            		}
HXLINE(4969)		bool _hx_tmp1;
HXDLIN(4969)		if (!(ctrX)) {
HXLINE(4969)			_hx_tmp1 = ctrY;
            		}
            		else {
HXLINE(4969)			_hx_tmp1 = true;
            		}
HXDLIN(4969)		if (_hx_tmp1) {
HXLINE(4970)			if (ctrX) {
HXLINE(4970)				int _hx_tmp2 = ::flixel::FlxG_obj::width;
HXDLIN(4970)				::flixel::IFlxSprite_obj::set_x(thing,((Float)(_hx_tmp2 - ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(thing)) / (Float)(int)2));
            			}
HXDLIN(4970)			if (ctrY) {
HXLINE(4970)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(4970)				::flixel::IFlxSprite_obj::set_y(thing,((Float)(_hx_tmp3 - ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(thing)) / (Float)(int)2));
            			}
            		}
HXLINE(4974)		if ((center_on != HX_("",00,00,00,00))) {
HXLINE(4976)			::Dynamic other = this->getAsset(center_on,null());
HXLINE(4977)			if (hx::IsNotNull( other )) {
HXLINE(4979)				 ::flixel::FlxObject fb1 = hx::TCast<  ::flixel::FlxObject >::cast(other);
HXDLIN(4979)				 ::flixel::FlxObject fb2 = hx::TCast<  ::flixel::FlxObject >::cast(thing);
HXDLIN(4979)				{
HXLINE(4979)					Float fb11 = fb1->x;
HXDLIN(4979)					Float _hx_tmp4 = fb1->get_width();
HXDLIN(4979)					fb2->set_x((fb11 + ((Float)(_hx_tmp4 - fb2->get_width()) / (Float)(int)2)));
            				}
HXDLIN(4979)				{
HXLINE(4979)					Float fb12 = fb1->y;
HXDLIN(4979)					Float _hx_tmp5 = fb1->get_height();
HXDLIN(4979)					fb2->set_y((fb12 + ((Float)(_hx_tmp5 - fb2->get_height()) / (Float)(int)2)));
            				}
            			}
            		}
            		else {
HXLINE(4984)			if ((center_on_x != HX_("",00,00,00,00))) {
HXLINE(4986)				::Dynamic other1 = this->getAsset(center_on_x,null());
HXLINE(4987)				if (hx::IsNotNull( other1 )) {
HXLINE(4989)					 ::flixel::FlxObject fb13 = hx::TCast<  ::flixel::FlxObject >::cast(other1);
HXDLIN(4989)					 ::flixel::FlxObject fb21 = hx::TCast<  ::flixel::FlxObject >::cast(thing);
HXDLIN(4989)					Float fb14 = fb13->x;
HXDLIN(4989)					Float _hx_tmp6 = fb13->get_width();
HXDLIN(4989)					fb21->set_x((fb14 + ((Float)(_hx_tmp6 - fb21->get_width()) / (Float)(int)2)));
            				}
            			}
HXLINE(4992)			if ((center_on_y != HX_("",00,00,00,00))) {
HXLINE(4994)				::Dynamic other2 = this->getAsset(center_on_y,null());
HXLINE(4995)				if (hx::IsNotNull( other2 )) {
HXLINE(4997)					 ::flixel::FlxObject fb15 = hx::TCast<  ::flixel::FlxObject >::cast(other2);
HXDLIN(4997)					 ::flixel::FlxObject fb22 = hx::TCast<  ::flixel::FlxObject >::cast(thing);
HXDLIN(4997)					Float fb16 = fb15->y;
HXDLIN(4997)					Float _hx_tmp7 = fb15->get_height();
HXDLIN(4997)					fb22->set_y((fb16 + ((Float)(_hx_tmp7 - fb22->get_height()) / (Float)(int)2)));
            				}
            			}
            		}
HXLINE(5003)		{
HXLINE(5003)			{
HXLINE(5003)				::Dynamic _g = thing;
HXDLIN(5003)				::flixel::IFlxSprite_obj::set_x(_g,(( (Float)(_g->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) + X));
            			}
HXDLIN(5003)			{
HXLINE(5003)				::Dynamic _g1 = thing;
HXDLIN(5003)				::flixel::IFlxSprite_obj::set_y(_g1,(( (Float)(_g1->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) + Y));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadPosition,(void))

 ::flixel::addons::ui::BorderDef FlxUI_obj::_loadBorder( ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5007__loadBorder)
HXLINE(5008)		 ::flixel::addons::ui::BorderDef borderDef = ::flixel::addons::ui::BorderDef_obj::fromXML(data->x);
HXLINE(5010)		 ::flixel::addons::ui::Rounding round = this->getRound(data,HX_("floor",cc,d1,96,02));
HXLINE(5011)		Float dataSize = this->_getDataSize(HX_("h",68,00,00,00),::flixel::addons::ui::U_obj::xml_str(data->x,HX_("border_size",34,18,b0,f8),null(),null()),(int)1);
HXLINE(5012)		int border_size = ::Std_obj::_hx_int(this->doRound(dataSize,round));
HXLINE(5014)		borderDef->size = border_size;
HXLINE(5016)		return borderDef;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadBorder,return )

int FlxUI_obj::_loadColor( ::haxe::xml::Fast data,::String __o_colorName,hx::Null< int >  __o__default){
::String colorName = __o_colorName.Default(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
int _default = __o__default.Default(-1);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5019__loadColor)
HXLINE(5020)		::String colorStr = ::flixel::addons::ui::U_obj::xml_str(data->x,colorName,null(),null());
HXLINE(5021)		bool _hx_tmp;
HXDLIN(5021)		if ((colorStr == HX_("",00,00,00,00))) {
HXLINE(5021)			 ::Xml _this = data->x;
HXDLIN(5021)			if ((_this->nodeType != ::Xml_obj::Element)) {
HXLINE(5021)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + _this->nodeType));
            			}
HXDLIN(5021)			_hx_tmp = (_this->nodeName == colorName);
            		}
            		else {
HXLINE(5021)			_hx_tmp = false;
            		}
HXDLIN(5021)		if (_hx_tmp) {
HXLINE(5022)			colorStr = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("value",71,7f,b8,31),null(),null());
            		}
HXLINE(5024)		int color = _default;
HXLINE(5025)		if ((colorStr != HX_("",00,00,00,00))) {
HXLINE(5025)			 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(colorStr);
HXDLIN(5025)			if (hx::IsNull( return_val )) {
HXLINE(5025)				HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + colorStr));
            			}
HXDLIN(5025)			color = return_val;
            		}
HXLINE(5026)		return color;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_loadColor,return )

 ::flixel::addons::ui::FontDef FlxUI_obj::_loadFontDef( ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5029__loadFontDef)
HXLINE(5030)		 ::flixel::addons::ui::FontDef fd = ::flixel::addons::ui::FontDef_obj::fromXML(data->x);
HXLINE(5031)		int fontSize = ::Std_obj::_hx_int(this->_loadHeight(data,(int)8,HX_("size",c1,a0,53,4c),null()));
HXLINE(5032)		fd->format->size = ::flixel::addons::ui::FlxUI_obj::fontSize(fd->file,fontSize);
HXLINE(5033)		fd->set_size(fontSize);
HXLINE(5034)		return fd;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadFontDef,return )

::String FlxUI_obj::_loadFontFace( ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5037__loadFontFace)
HXLINE(5038)		::String fontFace = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("font",cf,5d,c0,43),null(),null());
HXLINE(5039)		::String fontStyle = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("style",31,a5,1d,84),null(),null());
HXLINE(5040)		::String the_font = null();
HXLINE(5041)		if ((fontFace != HX_("",00,00,00,00))) {
HXLINE(5041)			the_font = ::flixel::addons::ui::FlxUI_obj::font(fontFace,fontStyle,null());
            		}
HXLINE(5042)		return the_font;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadFontFace,return )

void FlxUI_obj::_onFinishLoad(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5047__onFinishLoad)
HXDLIN(5047)		if (hx::IsNotNull( this->_ptr )) {
HXLINE(5049)			::flixel::addons::ui::interfaces::IEventGetter_obj::getEvent(this->_ptr,HX_("finish_load",d2,68,a0,8e),hx::ObjectPtr<OBJ_>(this),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,_onFinishLoad,(void))

::String FlxUI_obj::getText(::String flag,::String __o_context,hx::Null< bool >  __o_safe,::String __o_code){
::String context = __o_context.Default(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
bool safe = __o_safe.Default(true);
::String code = __o_code.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5055_getText)
HXLINE(5056)		::String str = HX_("",00,00,00,00);
HXLINE(5057)		if (hx::IsNotNull( this->_ptr_tongue )) {
HXLINE(5058)			str = ::flixel::addons::ui::interfaces::IFireTongue_obj::get(this->_ptr_tongue,flag,context,safe);
HXLINE(5059)			return this->formatFromCode(str,code);
            		}
            		else {
HXLINE(5060)			if (hx::IsNotNull( this->getTextFallback )) {
HXLINE(5061)				str = ( (::String)(this->getTextFallback(flag,context,safe)) );
HXLINE(5062)				return this->formatFromCode(str,code);
            			}
            		}
HXLINE(5065)		return flag;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,getText,return )

::String FlxUI_obj::formatFromCode(::String str,::String code){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5068_formatFromCode)
HXLINE(5069)		::String _hx_switch_0 = code;
            		if (  (_hx_switch_0==HX_("fu",4f,59,00,00)) ){
HXLINE(5072)			return ::flixel::addons::ui::U_obj::FU(str);
HXDLIN(5072)			goto _hx_goto_262;
            		}
            		if (  (_hx_switch_0==HX_("fu_",30,cc,4d,00)) ){
HXLINE(5073)			return ::flixel::addons::ui::U_obj::FU_(str);
HXDLIN(5073)			goto _hx_goto_262;
            		}
            		if (  (_hx_switch_0==HX_("l",6c,00,00,00)) ){
HXLINE(5071)			return str.toLowerCase();
HXDLIN(5071)			goto _hx_goto_262;
            		}
            		if (  (_hx_switch_0==HX_("u",75,00,00,00)) ){
HXLINE(5070)			return str.toUpperCase();
HXDLIN(5070)			goto _hx_goto_262;
            		}
            		_hx_goto_262:;
HXLINE(5075)		return str;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,formatFromCode,return )

 ::flixel::text::FlxText FlxUI_obj::formatButtonText( ::haxe::xml::Fast data, ::Dynamic button){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5135_formatButtonText)
HXLINE(5136)		bool _hx_tmp;
HXDLIN(5136)		if (hx::IsNotNull( data )) {
HXLINE(5136)			_hx_tmp = data->hasNode->resolve(HX_("text",ad,cc,f9,4c));
            		}
            		else {
HXLINE(5136)			_hx_tmp = false;
            		}
HXDLIN(5136)		if (_hx_tmp) {
HXLINE(5138)			 ::haxe::xml::Fast textNode = data->node->resolve(HX_("text",ad,cc,f9,4c));
HXLINE(5139)			::String use_def = ::flixel::addons::ui::U_obj::xml_str(textNode->x,HX_("use_def",8d,da,e9,62),true,null());
HXLINE(5140)			 ::haxe::xml::Fast text_def = null();
HXLINE(5142)			if ((use_def != HX_("",00,00,00,00))) {
HXLINE(5144)				text_def = this->getDefinition(use_def,null());
            			}
HXLINE(5147)			 ::haxe::xml::Fast info = ::flixel::addons::ui::FlxUI_obj::consolidateData(textNode,text_def,null());
HXLINE(5149)			::String the_font = this->_loadFontFace(info);
HXLINE(5150)			int size = ::Std_obj::_hx_int(this->_loadHeight(info,(int)8,HX_("size",c1,a0,53,4c),HX_("floor",cc,d1,96,02)));
HXLINE(5151)			int color = this->_loadColor(info,null(),null());
HXLINE(5153)			Float labelWidth = ::flixel::addons::ui::U_obj::xml_f(info->x,HX_("width",06,b6,62,ca),null());
HXLINE(5155)			 ::flixel::addons::ui::BorderDef border = this->_loadBorder(info);
HXLINE(5157)			::String align = ::flixel::addons::ui::U_obj::xml_str(info->x,HX_("align",c5,56,91,21),true,null());
HXDLIN(5157)			if ((align == HX_("",00,00,00,00))) {
HXLINE(5157)				align = null();
            			}
HXLINE(5159)			 ::flixel::text::FlxText the_label = null();
HXLINE(5160)			 ::flixel::addons::ui::FlxUIButton fb = null();
HXLINE(5161)			 ::flixel::addons::ui::FlxUISpriteButton fsb = null();
HXLINE(5162)			::Dynamic ifb = null();
HXLINE(5164)			if ((::Std_obj::is(button,hx::ClassOf< ::flixel::addons::ui::FlxUICheckBox >()) == false)) {
HXLINE(5166)				ifb = button;
HXLINE(5167)				bool _hx_tmp1;
HXDLIN(5167)				if ((align != HX_("",00,00,00,00))) {
HXLINE(5167)					_hx_tmp1 = hx::IsNull( align );
            				}
            				else {
HXLINE(5167)					_hx_tmp1 = true;
            				}
HXDLIN(5167)				if (_hx_tmp1) {
HXLINE(5169)					align = HX_("center",d5,25,db,05);
            				}
            			}
            			else {
HXLINE(5174)				 ::flixel::addons::ui::FlxUICheckBox cb = ( ( ::flixel::addons::ui::FlxUICheckBox)(button) );
HXLINE(5175)				ifb = cb->button;
HXLINE(5176)				align = HX_("left",07,08,b0,47);
            			}
HXLINE(5179)			if (hx::IsNotNull( ifb )) {
HXLINE(5181)				if (::Std_obj::is(ifb,hx::ClassOf< ::flixel::addons::ui::FlxUIButton >())) {
HXLINE(5183)					fb = ( ( ::flixel::addons::ui::FlxUIButton)(ifb) );
HXLINE(5184)					the_label = ( ( ::flixel::text::FlxText)(fb->label) );
            				}
            				else {
HXLINE(5186)					if (::Std_obj::is(ifb,hx::ClassOf< ::flixel::addons::ui::FlxUISpriteButton >())) {
HXLINE(5188)						fsb = ( ( ::flixel::addons::ui::FlxUISpriteButton)(ifb) );
HXLINE(5189)						if (::Std_obj::is(fsb->label,hx::ClassOf< ::flixel::text::FlxText >())) {
HXLINE(5191)							the_label = ( ( ::flixel::text::FlxText)(fsb->label) );
            						}
            						else {
HXLINE(5193)							if (::Std_obj::is(fsb->label,hx::ClassOf< ::flixel::group::FlxTypedSpriteGroup >())) {
HXLINE(5195)								 ::flixel::group::FlxTypedSpriteGroup fsg = ( ( ::flixel::group::FlxTypedSpriteGroup)(fsb->label) );
HXLINE(5196)								{
HXLINE(5196)									int _g = (int)0;
HXDLIN(5196)									::Array< ::Dynamic> _g1 = fsg->group->members;
HXDLIN(5196)									while((_g < _g1->length)){
HXLINE(5196)										 ::flixel::FlxSprite fs = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(5196)										_g = (_g + (int)1);
HXLINE(5197)										if (::Std_obj::is(fs,hx::ClassOf< ::flixel::text::FlxText >())) {
HXLINE(5198)											the_label = ( ( ::flixel::text::FlxText)(fs) );
HXLINE(5199)											goto _hx_goto_264;
            										}
            									}
            									_hx_goto_264:;
            								}
            							}
            						}
            					}
            				}
HXLINE(5205)				ifb->__SetField(HX_("up_color",3f,d5,b5,9b),color,hx::paccDynamic);
HXLINE(5206)				ifb->__SetField(HX_("down_color",86,26,b3,4e),(int)0,hx::paccDynamic);
HXLINE(5207)				ifb->__SetField(HX_("over_color",f8,00,4a,f7),(int)0,hx::paccDynamic);
            			}
HXLINE(5210)			if (hx::IsNotNull( the_label )) {
HXLINE(5212)				if ((labelWidth != (int)0)) {
HXLINE(5214)					the_label->set_width(labelWidth);
HXLINE(5215)					the_label->resetHelpers();
            				}
HXLINE(5218)				if (hx::IsNotNull( fb )) {
HXLINE(5220)					fb->setLabelFormat(the_font,size,color,align,null(),null(),null());
            				}
            				else {
HXLINE(5224)					the_label->setFormat(the_font,size,color,align,null(),null(),null());
            				}
HXLINE(5227)				the_label->set_borderStyle(border->style);
HXLINE(5228)				the_label->set_borderColor(border->color);
HXLINE(5229)				the_label->set_borderSize(border->size);
HXLINE(5230)				the_label->set_borderQuality(border->quality);
HXLINE(5232)				if (::Std_obj::is(the_label,hx::ClassOf< ::flixel::addons::ui::FlxUIText >())) {
HXLINE(5234)					 ::flixel::addons::ui::FlxUIText ftu = ( ( ::flixel::addons::ui::FlxUIText)(the_label) );
HXLINE(5235)					ftu->drawFrame(null());
            				}
HXLINE(5238)				if (hx::IsNotNull( fb )) {
HXLINE(5240)					fb->autoCenterLabel();
            				}
HXLINE(5242)				if (hx::IsNotNull( fsb )) {
HXLINE(5244)					fsb->autoCenterLabel();
            				}
            			}
HXLINE(5248)			{
HXLINE(5248)				 ::_List::ListNode _g_head = info->nodes->resolve(HX_("color",63,71,5c,4a))->h;
HXDLIN(5248)				while(hx::IsNotNull( _g_head )){
HXLINE(5248)					 ::haxe::xml::Fast val = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(5248)					_g_head = _g_head->next;
HXDLIN(5248)					 ::haxe::xml::Fast textColorNode = val;
HXLINE(5250)					int color1 = this->_loadColor(textColorNode,null(),null());
HXLINE(5251)					bool vis = ::flixel::addons::ui::U_obj::xml_bool(textColorNode->x,HX_("visible",72,78,24,a3),true);
HXLINE(5252)					::String state_name = ::flixel::addons::ui::U_obj::xml_name(textColorNode->x);
HXLINE(5253)					bool toggle = ::flixel::addons::ui::U_obj::xml_bool(textColorNode->x,HX_("toggle",94,bf,43,8f),null());
HXLINE(5254)					::String _hx_switch_0 = state_name;
            					if (  (_hx_switch_0==HX_("active",c6,41,46,16)) ||  (_hx_switch_0==HX_("hilight",35,b2,2d,55)) ||  (_hx_switch_0==HX_("hover",bc,e5,64,2b)) ||  (_hx_switch_0==HX_("over",54,91,b8,49)) ){
HXLINE(5268)						if (!(toggle)) {
HXLINE(5270)							ifb->__SetField(HX_("over_color",f8,00,4a,f7),color1,hx::paccDynamic);
HXLINE(5271)							ifb->__SetField(HX_("over_visible",47,d7,44,92),vis,hx::paccDynamic);
            						}
            						else {
HXLINE(5275)							ifb->__SetField(HX_("over_toggle_color",43,1c,98,aa),color1,hx::paccDynamic);
HXLINE(5276)							ifb->__SetField(HX_("over_toggle_visible",52,9b,c8,49),vis,hx::paccDynamic);
            						}
HXLINE(5268)						goto _hx_goto_266;
            					}
            					if (  (_hx_switch_0==HX_("down",62,f8,6d,42)) ||  (_hx_switch_0==HX_("pressed",a2,d2,e6,39)) ||  (_hx_switch_0==HX_("pushed",b9,14,2d,72)) ){
HXLINE(5279)						if (!(toggle)) {
HXLINE(5281)							ifb->__SetField(HX_("down_color",86,26,b3,4e),color1,hx::paccDynamic);
HXLINE(5282)							ifb->__SetField(HX_("down_visible",55,fc,6c,72),vis,hx::paccDynamic);
            						}
            						else {
HXLINE(5286)							ifb->__SetField(HX_("down_toggle_color",75,e4,c8,06),color1,hx::paccDynamic);
HXLINE(5287)							ifb->__SetField(HX_("down_toggle_visible",04,54,e1,a9),vis,hx::paccDynamic);
            						}
HXLINE(5279)						goto _hx_goto_266;
            					}
            					if (  (_hx_switch_0==HX_("",00,00,00,00)) ||  (_hx_switch_0==HX_("inactive",6b,17,30,6a)) ||  (_hx_switch_0==HX_("normal",27,72,69,30)) ||  (_hx_switch_0==HX_("up",5b,66,00,00)) ){
HXLINE(5257)						if (!(toggle)) {
HXLINE(5259)							ifb->__SetField(HX_("up_color",3f,d5,b5,9b),color1,hx::paccDynamic);
HXLINE(5260)							ifb->__SetField(HX_("up_visible",4e,8b,83,08),vis,hx::paccDynamic);
            						}
            						else {
HXLINE(5264)							ifb->__SetField(HX_("up_toggle_color",dc,6e,0c,dd),color1,hx::paccDynamic);
HXLINE(5265)							ifb->__SetField(HX_("up_toggle_visible",2b,86,e9,3f),vis,hx::paccDynamic);
            						}
HXLINE(5257)						goto _hx_goto_266;
            					}
            					_hx_goto_266:;
            				}
            			}
HXLINE(5292)			if (hx::IsEq( ifb->__Field(HX_("over_color",f8,00,4a,f7),hx::paccDynamic),(int)0 )) {
HXLINE(5294)				ifb->__SetField(HX_("over_color",f8,00,4a,f7),ifb->__Field(HX_("up_color",3f,d5,b5,9b),hx::paccDynamic),hx::paccDynamic);
            			}
HXLINE(5296)			if (hx::IsEq( ifb->__Field(HX_("down_color",86,26,b3,4e),hx::paccDynamic),(int)0 )) {
HXLINE(5298)				ifb->__SetField(HX_("down_color",86,26,b3,4e),ifb->__Field(HX_("over_color",f8,00,4a,f7),hx::paccDynamic),hx::paccDynamic);
            			}
HXLINE(5302)			if (hx::IsEq( ifb->__Field(HX_("up_toggle_color",dc,6e,0c,dd),hx::paccDynamic),(int)0 )) {
HXLINE(5304)				ifb->__SetField(HX_("up_toggle_color",dc,6e,0c,dd),ifb->__Field(HX_("up_color",3f,d5,b5,9b),hx::paccDynamic),hx::paccDynamic);
            			}
HXLINE(5306)			if (hx::IsEq( ifb->__Field(HX_("over_toggle_color",43,1c,98,aa),hx::paccDynamic),(int)0 )) {
HXLINE(5308)				ifb->__SetField(HX_("over_toggle_color",43,1c,98,aa),ifb->__Field(HX_("over_color",f8,00,4a,f7),hx::paccDynamic),hx::paccDynamic);
            			}
HXLINE(5310)			if (hx::IsEq( ifb->__Field(HX_("down_toggle_color",75,e4,c8,06),hx::paccDynamic),(int)0 )) {
HXLINE(5312)				ifb->__SetField(HX_("down_toggle_color",75,e4,c8,06),ifb->__Field(HX_("down_color",86,26,b3,4e),hx::paccDynamic),hx::paccDynamic);
            			}
HXLINE(5315)			if (hx::IsNotNull( the_label )) {
HXLINE(5316)				the_label->set_visible(( (bool)(ifb->__Field(HX_("up_visible",4e,8b,83,08),hx::paccDynamic)) ));
HXLINE(5317)				the_label->set_color(( (int)(ifb->__Field(HX_("up_color",3f,d5,b5,9b),hx::paccDynamic)) ));
            			}
HXLINE(5319)			return the_label;
            		}
HXLINE(5321)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,formatButtonText,return )

void FlxUI_obj::event(::String name,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_141_event)
HXLINE( 142)		::Dynamic currState = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXLINE( 144)		if (hx::IsNotNull( currState )) {
HXLINE( 145)			::flixel::addons::ui::interfaces::IEventGetter_obj::getEvent(currState,name,sender,data,params);
            		}
            		else {
HXLINE( 147)			 ::flixel::_hx_system::frontEnds::LogFrontEnd _this = ::flixel::FlxG_obj::log;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,event,(void))

::String FlxUI_obj::fontStr(::String str,::String __o_style){
::String style = __o_style.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_159_fontStr)
HXLINE( 160)		::Dynamic currState = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXDLIN( 160)		::Dynamic tongue =  ::Dynamic(currState->__Field(HX_("_tongue",63,57,5b,02),hx::paccDynamic));
HXDLIN( 160)		::Dynamic t;
HXDLIN( 160)		if (hx::IsNotNull( tongue )) {
HXLINE( 160)			t = tongue;
            		}
            		else {
HXLINE( 160)			t = null();
            		}
HXDLIN( 160)		::Dynamic t1 = t;
HXLINE( 161)		if (hx::IsNotNull( t1 )) {
HXLINE( 161)			str = ::flixel::addons::ui::interfaces::IFireTongue_obj::getFont(t1,str);
            		}
HXLINE( 162)		::String style1 = style;
HXDLIN( 162)		style1 = style1.toLowerCase();
HXDLIN( 162)		::String suffix = HX_("",00,00,00,00);
HXDLIN( 162)		::String _hx_switch_0 = style1;
            		if (  (_hx_switch_0==HX_("b",62,00,00,00)) ||  (_hx_switch_0==HX_("bold",85,81,1b,41)) ){
HXLINE( 162)			suffix = HX_("b",62,00,00,00);
HXDLIN( 162)			goto _hx_goto_269;
            		}
            		if (  (_hx_switch_0==HX_("bi",c7,55,00,00)) ||  (_hx_switch_0==HX_("bold-italic",f8,f7,a5,60)) ||  (_hx_switch_0==HX_("boldi",44,d3,f5,b6)) ||  (_hx_switch_0==HX_("bolditalic",35,22,3d,79)) ||  (_hx_switch_0==HX_("ib",d9,5b,00,00)) ||  (_hx_switch_0==HX_("ibold",6e,6a,2e,b6)) ||  (_hx_switch_0==HX_("italic-bold",42,47,7f,d9)) ||  (_hx_switch_0==HX_("italicbold",75,e8,59,e8)) ||  (_hx_switch_0==HX_("z",7a,00,00,00)) ){
HXLINE( 162)			suffix = HX_("z",7a,00,00,00);
HXDLIN( 162)			goto _hx_goto_269;
            		}
            		if (  (_hx_switch_0==HX_("i",69,00,00,00)) ||  (_hx_switch_0==HX_("italic",f0,2e,64,06)) ){
HXLINE( 162)			suffix = HX_("i",69,00,00,00);
HXDLIN( 162)			goto _hx_goto_269;
            		}
            		if (  (_hx_switch_0==HX_("",00,00,00,00)) ||  (_hx_switch_0==HX_("none",b8,12,0a,49)) ||  (_hx_switch_0==HX_("normal",27,72,69,30)) ||  (_hx_switch_0==HX_("regular",5c,52,88,82)) ){
HXLINE( 162)			suffix = HX_("",00,00,00,00);
HXDLIN( 162)			goto _hx_goto_269;
            		}
            		_hx_goto_269:;
HXDLIN( 162)		if ((str.indexOf(HX_("assets/fonts/",37,ff,a5,9c),null()) != (int)0)) {
HXLINE( 162)			return ((HX_("assets/fonts/",37,ff,a5,9c) + str) + suffix);
            		}
            		else {
HXLINE( 162)			return (str + suffix);
            		}
HXDLIN( 162)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,fontStr,return )

int FlxUI_obj::fontSize(::String str,int size){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_173_fontSize)
HXLINE( 174)		::Dynamic currState = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXDLIN( 174)		::Dynamic tongue =  ::Dynamic(currState->__Field(HX_("_tongue",63,57,5b,02),hx::paccDynamic));
HXDLIN( 174)		::Dynamic t;
HXDLIN( 174)		if (hx::IsNotNull( tongue )) {
HXLINE( 174)			t = tongue;
            		}
            		else {
HXLINE( 174)			t = null();
            		}
HXDLIN( 174)		::Dynamic t1 = t;
HXLINE( 175)		if (hx::IsNotNull( t1 )) {
HXLINE( 175)			size = ::flixel::addons::ui::interfaces::IFireTongue_obj::getFontSize(t1,str,size);
            		}
HXLINE( 176)		return size;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,fontSize,return )

::String FlxUI_obj::font(::String str,::String __o_style,::String __o_extension){
::String style = __o_style.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
::String extension = __o_extension.Default(HX_HCSTRING(".ttf","\x78","\x3b","\xc0","\x1e"));
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_188_font)
HXLINE( 189)		::Dynamic currState = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXDLIN( 189)		::Dynamic tongue =  ::Dynamic(currState->__Field(HX_("_tongue",63,57,5b,02),hx::paccDynamic));
HXDLIN( 189)		::Dynamic t;
HXDLIN( 189)		if (hx::IsNotNull( tongue )) {
HXLINE( 189)			t = tongue;
            		}
            		else {
HXLINE( 189)			t = null();
            		}
HXDLIN( 189)		::Dynamic t1 = t;
HXLINE( 190)		if (hx::IsNotNull( t1 )) {
HXLINE( 190)			str = ::flixel::addons::ui::interfaces::IFireTongue_obj::getFont(t1,str);
            		}
HXLINE( 191)		return ::flixel::addons::ui::U_obj::font(str,style,extension);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,font,return )

::Dynamic FlxUI_obj::_hx___getTongue(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_196___getTongue)
HXLINE( 197)		::Dynamic currState = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXLINE( 198)		::Dynamic tongue =  ::Dynamic(currState->__Field(HX_("_tongue",63,57,5b,02),hx::paccDynamic));
HXLINE( 199)		if (hx::IsNotNull( tongue )) {
HXLINE( 201)			return tongue;
            		}
HXLINE( 203)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,_hx___getTongue,return )

void FlxUI_obj::forceFocus(bool b,::Dynamic thing){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_212_forceFocus)
HXLINE( 213)		::Dynamic currState = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXLINE( 214)		if (hx::IsNotNull( currState )) {
HXLINE( 215)			::flixel::addons::ui::interfaces::IFlxUIState_obj::forceFocus(currState,b,thing);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,forceFocus,(void))

::Dynamic FlxUI_obj::getLeafUIState(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_224_getLeafUIState)
HXLINE( 225)		 ::flixel::FlxState state = ::flixel::FlxG_obj::game->_state;
HXLINE( 226)		if (hx::IsNotNull( state )) {
HXLINE( 228)			while(hx::IsNotNull( state->subState )){
HXLINE( 230)				state = state->subState;
            			}
            		}
HXLINE( 233)		if (::Std_obj::is(state,hx::ClassOf< ::flixel::addons::ui::interfaces::IFlxUIState >())) {
HXLINE( 235)			return state;
            		}
HXLINE( 237)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,getLeafUIState,return )

 ::Dynamic FlxUI_obj::request(::String name,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_249_request)
HXLINE( 250)		::Dynamic currState = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXLINE( 251)		if (hx::IsNotNull( currState )) {
HXLINE( 252)			return ::flixel::addons::ui::interfaces::IEventGetter_obj::getRequest(currState,name,sender,data,params);
            		}
            		else {
HXLINE( 254)			 ::flixel::_hx_system::frontEnds::LogFrontEnd _this = ::flixel::FlxG_obj::log;
            		}
HXLINE( 256)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,request,return )

void FlxUI_obj::_delta(::Dynamic thing,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1456__delta)
HXLINE(1457)		{
HXLINE(1457)			::Dynamic _g = thing;
HXDLIN(1457)			::flixel::IFlxSprite_obj::set_x(_g,(( (Float)(_g->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) + X));
            		}
HXLINE(1458)		{
HXLINE(1458)			::Dynamic _g1 = thing;
HXDLIN(1458)			::flixel::IFlxSprite_obj::set_y(_g1,(( (Float)(_g1->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) + Y));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_delta,(void))

::Dynamic FlxUI_obj::_center(::Dynamic thing,hx::Null< bool >  __o_X,hx::Null< bool >  __o_Y){
bool X = __o_X.Default(true);
bool Y = __o_Y.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1468__center)
HXLINE(1469)		if (X) {
HXLINE(1469)			int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(1469)			::flixel::IFlxSprite_obj::set_x(thing,((Float)(_hx_tmp - ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(thing)) / (Float)(int)2));
            		}
HXLINE(1470)		if (Y) {
HXLINE(1470)			int _hx_tmp1 = ::flixel::FlxG_obj::height;
HXDLIN(1470)			::flixel::IFlxSprite_obj::set_y(thing,((Float)(_hx_tmp1 - ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(thing)) / (Float)(int)2));
            		}
HXLINE(1471)		return thing;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_center,return )

 ::haxe::xml::Fast FlxUI_obj::consolidateData( ::haxe::xml::Fast data, ::haxe::xml::Fast definition,hx::Null< bool >  __o_combineUniqueChildren){
bool combineUniqueChildren = __o_combineUniqueChildren.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2671_consolidateData)
HXLINE(2672)		bool _hx_tmp;
HXDLIN(2672)		if (hx::IsNull( data )) {
HXLINE(2672)			_hx_tmp = hx::IsNotNull( definition );
            		}
            		else {
HXLINE(2672)			_hx_tmp = false;
            		}
HXDLIN(2672)		if (_hx_tmp) {
HXLINE(2674)			return definition;
            		}
HXLINE(2676)		if (hx::IsNull( definition )) {
HXLINE(2678)			return data;
            		}
            		else {
HXLINE(2685)			 ::Xml new_data = ::Xml_obj::parse(::haxe::xml::Printer_obj::print(definition->x,null()))->firstElement();
HXLINE(2687)			{
HXLINE(2687)				 ::Dynamic att = data->x->attributes();
HXDLIN(2687)				while(( (bool)(att->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(2687)					::String att1 = ( (::String)(att->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(2689)					::String val = data->att->resolve(att1);
HXLINE(2690)					new_data->set(att1,val);
            				}
            			}
HXLINE(2694)			{
HXLINE(2694)				::String v = data->get_name();
HXDLIN(2694)				if ((new_data->nodeType != ::Xml_obj::Element)) {
HXLINE(2694)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + new_data->nodeType));
            				}
HXDLIN(2694)				new_data->nodeName = v;
            			}
HXLINE(2695)			bool _hx_tmp1;
HXDLIN(2695)			if (!(data->has->resolve(HX_("name",4b,72,ff,48)))) {
HXLINE(2695)				_hx_tmp1 = data->has->resolve(HX_("id",db,5b,00,00));
            			}
            			else {
HXLINE(2695)				_hx_tmp1 = true;
            			}
HXDLIN(2695)			if (_hx_tmp1) {
HXLINE(2697)				new_data->set(HX_("name",4b,72,ff,48),::flixel::addons::ui::U_obj::xml_name(data->x));
            			}
            			else {
HXLINE(2701)				new_data->set(HX_("name",4b,72,ff,48),HX_("",00,00,00,00));
            			}
HXLINE(2704)			{
HXLINE(2704)				 ::Dynamic element = data->x->elements();
HXDLIN(2704)				while(( (bool)(element->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(2704)					 ::Xml element1 = ( ( ::Xml)(element->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(2706)					if ((element1->nodeType != ::Xml_obj::Element)) {
HXLINE(2706)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + element1->nodeType));
            					}
HXDLIN(2706)					::String nodeName = element1->nodeName;
HXLINE(2707)					bool notCombine = !(combineUniqueChildren);
HXLINE(2708)					if (combineUniqueChildren) {
HXLINE(2710)						 ::Dynamic new_els = new_data->elementsNamed(nodeName);
HXLINE(2711)						 ::Xml new_el = ( ( ::Xml)(new_els->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(2714)						bool _hx_tmp2;
HXDLIN(2714)						bool _hx_tmp3;
HXDLIN(2714)						if ((data->nodes->resolve(nodeName)->length == (int)1)) {
HXLINE(2714)							_hx_tmp3 = hx::IsNotNull( new_el );
            						}
            						else {
HXLINE(2714)							_hx_tmp3 = false;
            						}
HXDLIN(2714)						if (_hx_tmp3) {
HXLINE(2714)							_hx_tmp2 = (( (bool)(new_els->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) ) == false);
            						}
            						else {
HXLINE(2714)							_hx_tmp2 = false;
            						}
HXDLIN(2714)						if (_hx_tmp2) {
HXLINE(2717)							 ::Dynamic att2 = element1->attributes();
HXDLIN(2717)							while(( (bool)(att2->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(2717)								::String att3 = ( (::String)(att2->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(2719)								new_el->set(att3,element1->get(att3));
            							}
            						}
            						else {
HXLINE(2724)							notCombine = true;
            						}
            					}
HXLINE(2728)					if (notCombine) {
HXLINE(2730)						new_data->insertChild(::Xml_obj::parse(::haxe::xml::Printer_obj::print(element1,null()))->firstElement(),(int)0);
            					}
            				}
            			}
HXLINE(2733)			return  ::haxe::xml::Fast_obj::__alloc( HX_CTX ,new_data);
            		}
HXLINE(2676)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,consolidateData,return )

 ::openfl::_legacy::display::BitmapData FlxUI_obj::_loadBitmapRect(::String source,::String rect_str){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3866__loadBitmapRect)
HXLINE(3867)		 ::openfl::_legacy::display::BitmapData b1 = ::openfl::_legacy::Assets_obj::getBitmapData(::flixel::addons::ui::U_obj::gfx(source,null(),null(),null(),null(),null()),null());
HXLINE(3868)		::Array< ::String > coords = rect_str.split(HX_(",",2c,00,00,00));
HXDLIN(3868)		 ::openfl::_legacy::geom::Rectangle rect = null();
HXDLIN(3868)		bool _hx_tmp;
HXDLIN(3868)		if (hx::IsNotNull( coords )) {
HXLINE(3868)			_hx_tmp = (coords->length == (int)4);
            		}
            		else {
HXLINE(3868)			_hx_tmp = false;
            		}
HXDLIN(3868)		if (_hx_tmp) {
HXLINE(3868)			int x_ = ::Std_obj::parseInt(coords->__get((int)0));
HXDLIN(3868)			int y_ = ::Std_obj::parseInt(coords->__get((int)1));
HXDLIN(3868)			int w_ = ::Std_obj::parseInt(coords->__get((int)2));
HXDLIN(3868)			int h_ = ::Std_obj::parseInt(coords->__get((int)3));
HXDLIN(3868)			rect =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,x_,y_,w_,h_);
            		}
HXDLIN(3868)		 ::openfl::_legacy::geom::Rectangle r = rect;
HXLINE(3869)		int b2 = ::Std_obj::_hx_int(r->width);
HXDLIN(3869)		 ::openfl::_legacy::display::BitmapData b21 =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,b2,::Std_obj::_hx_int(r->height),true,(int)16777215,null());
HXLINE(3870)		b21->copyPixels(b1,r, ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,(int)0,(int)0),null(),null(),null());
HXLINE(3871)		return b21;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadBitmapRect,return )

::cpp::VirtualArray FlxUI_obj::getParams( ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5084_getParams)
HXLINE(5085)		::cpp::VirtualArray params = null();
HXLINE(5087)		if (data->hasNode->resolve(HX_("param",8d,80,55,bd))) {
HXLINE(5088)			params = ::cpp::VirtualArray_obj::__new();
HXLINE(5089)			{
HXLINE(5089)				 ::_List::ListNode _g_head = data->nodes->resolve(HX_("param",8d,80,55,bd))->h;
HXDLIN(5089)				while(hx::IsNotNull( _g_head )){
HXLINE(5089)					 ::haxe::xml::Fast val = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(5089)					_g_head = _g_head->next;
HXDLIN(5089)					 ::haxe::xml::Fast param = val;
HXLINE(5090)					bool _hx_tmp;
HXDLIN(5090)					if (param->has->resolve(HX_("type",ba,f2,08,4d))) {
HXLINE(5090)						_hx_tmp = param->has->resolve(HX_("value",71,7f,b8,31));
            					}
            					else {
HXLINE(5090)						_hx_tmp = false;
            					}
HXDLIN(5090)					if (_hx_tmp) {
HXLINE(5091)						::String type = param->att->resolve(HX_("type",ba,f2,08,4d));
HXLINE(5092)						type = type.toLowerCase();
HXLINE(5093)						::String valueStr = param->att->resolve(HX_("value",71,7f,b8,31));
HXLINE(5094)						 ::Dynamic value = valueStr;
HXLINE(5095)						int sort = ::flixel::addons::ui::U_obj::xml_i(param->x,HX_("sort",5e,27,58,4c),(int)-1);
HXLINE(5096)						::String _hx_switch_0 = type;
            						if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_0==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(5102)							::String str = ::String(valueStr);
HXLINE(5103)							str = str.toLowerCase();
HXLINE(5104)							bool _hx_tmp1;
HXDLIN(5104)							if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(5104)								_hx_tmp1 = (str == HX_("1",31,00,00,00));
            							}
            							else {
HXLINE(5104)								_hx_tmp1 = true;
            							}
HXDLIN(5104)							if (_hx_tmp1) {
HXLINE(5105)								value = true;
            							}
            							else {
HXLINE(5107)								value = false;
            							}
HXLINE(5101)							goto _hx_goto_286;
            						}
            						if (  (_hx_switch_0==HX_("color",63,71,5c,4a)) ||  (_hx_switch_0==HX_("hex",db,42,4f,00)) ){
HXLINE(5100)							 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(5100)							if (hx::IsNull( return_val )) {
HXLINE(5100)								HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            							}
HXDLIN(5100)							value = return_val;
HXDLIN(5100)							goto _hx_goto_286;
            						}
            						if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE(5099)							value = ::Std_obj::parseFloat(valueStr);
HXDLIN(5099)							goto _hx_goto_286;
            						}
            						if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ){
HXLINE(5098)							value = ::Std_obj::parseInt(valueStr);
HXDLIN(5098)							goto _hx_goto_286;
            						}
            						if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE(5097)							value = ::String(valueStr);
HXDLIN(5097)							goto _hx_goto_286;
            						}
            						_hx_goto_286:;
HXLINE(5112)						params->push( ::Dynamic(hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("value",71,7f,b8,31),value)
            							->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            					}
            				}
            			}
HXLINE(5117)			params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXLINE(5120)			{
HXLINE(5120)				int _g1 = (int)0;
HXDLIN(5120)				int _g = params->get_length();
HXDLIN(5120)				while((_g1 < _g)){
HXLINE(5120)					_g1 = (_g1 + (int)1);
HXDLIN(5120)					int i = (_g1 - (int)1);
HXLINE(5121)					params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)));
            				}
            			}
            		}
HXLINE(5124)		return params;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,getParams,return )

int FlxUI_obj::sortParams( ::Dynamic a, ::Dynamic b){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5128_sortParams)
HXLINE(5129)		if ((( (int)(a->__Field(HX_("sort",5e,27,58,4c),hx::paccDynamic)) ) < ( (int)(b->__Field(HX_("sort",5e,27,58,4c),hx::paccDynamic)) ))) {
HXLINE(5129)			return (int)-1;
            		}
HXLINE(5130)		if ((( (int)(a->__Field(HX_("sort",5e,27,58,4c),hx::paccDynamic)) ) > ( (int)(b->__Field(HX_("sort",5e,27,58,4c),hx::paccDynamic)) ))) {
HXLINE(5130)			return (int)1;
            		}
HXLINE(5131)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,sortParams,return )


hx::ObjectPtr< FlxUI_obj > FlxUI_obj::__new( ::haxe::xml::Fast data,::Dynamic ptr, ::flixel::addons::ui::FlxUI superIndex_,::Dynamic tongue_,::String __o_liveFilePath_, ::haxe::ds::StringMap uiVars_) {
	hx::ObjectPtr< FlxUI_obj > __this = new FlxUI_obj();
	__this->__construct(data,ptr,superIndex_,tongue_,__o_liveFilePath_,uiVars_);
	return __this;
}

hx::ObjectPtr< FlxUI_obj > FlxUI_obj::__alloc(hx::Ctx *_hx_ctx, ::haxe::xml::Fast data,::Dynamic ptr, ::flixel::addons::ui::FlxUI superIndex_,::Dynamic tongue_,::String __o_liveFilePath_, ::haxe::ds::StringMap uiVars_) {
	FlxUI_obj *__this = (FlxUI_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxUI_obj), true, "flixel.addons.ui.FlxUI"));
	*(void **)__this = FlxUI_obj::_hx_vtable;
	__this->__construct(data,ptr,superIndex_,tongue_,__o_liveFilePath_,uiVars_);
	return __this;
}

FlxUI_obj::FlxUI_obj()
{
}

void FlxUI_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxUI);
	HX_MARK_MEMBER_NAME(do_safe_input_delay,"do_safe_input_delay");
	HX_MARK_MEMBER_NAME(safe_input_delay_time,"safe_input_delay_time");
	HX_MARK_MEMBER_NAME(failed,"failed");
	HX_MARK_MEMBER_NAME(failed_by,"failed_by");
	HX_MARK_MEMBER_NAME(isRoot,"isRoot");
	HX_MARK_MEMBER_NAME(liveFilePath,"liveFilePath");
	HX_MARK_MEMBER_NAME(focus,"focus");
	HX_MARK_MEMBER_NAME(getTextFallback,"getTextFallback");
	HX_MARK_MEMBER_NAME(cursorLists,"cursorLists");
	HX_MARK_MEMBER_NAME(_ptr_tongue,"_ptr_tongue");
	HX_MARK_MEMBER_NAME(_data,"_data");
	HX_MARK_MEMBER_NAME(_postLoaded,"_postLoaded");
	HX_MARK_MEMBER_NAME(_pointX,"_pointX");
	HX_MARK_MEMBER_NAME(_pointY,"_pointY");
	HX_MARK_MEMBER_NAME(_group_index,"_group_index");
	HX_MARK_MEMBER_NAME(_asset_index,"_asset_index");
	HX_MARK_MEMBER_NAME(_tag_index,"_tag_index");
	HX_MARK_MEMBER_NAME(_definition_index,"_definition_index");
	HX_MARK_MEMBER_NAME(_variable_index,"_variable_index");
	HX_MARK_MEMBER_NAME(_mode_index,"_mode_index");
	HX_MARK_MEMBER_NAME(_curr_mode,"_curr_mode");
	HX_MARK_MEMBER_NAME(_ptr,"_ptr");
	HX_MARK_MEMBER_NAME(_superIndexUI,"_superIndexUI");
	HX_MARK_MEMBER_NAME(_safe_input_delay_elapsed,"_safe_input_delay_elapsed");
	HX_MARK_MEMBER_NAME(_failure_checks,"_failure_checks");
	HX_MARK_MEMBER_NAME(_assetsToCleanUp,"_assetsToCleanUp");
	HX_MARK_MEMBER_NAME(_scaledAssets,"_scaledAssets");
	 ::flixel::addons::ui::FlxUIGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxUI_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(do_safe_input_delay,"do_safe_input_delay");
	HX_VISIT_MEMBER_NAME(safe_input_delay_time,"safe_input_delay_time");
	HX_VISIT_MEMBER_NAME(failed,"failed");
	HX_VISIT_MEMBER_NAME(failed_by,"failed_by");
	HX_VISIT_MEMBER_NAME(isRoot,"isRoot");
	HX_VISIT_MEMBER_NAME(liveFilePath,"liveFilePath");
	HX_VISIT_MEMBER_NAME(focus,"focus");
	HX_VISIT_MEMBER_NAME(getTextFallback,"getTextFallback");
	HX_VISIT_MEMBER_NAME(cursorLists,"cursorLists");
	HX_VISIT_MEMBER_NAME(_ptr_tongue,"_ptr_tongue");
	HX_VISIT_MEMBER_NAME(_data,"_data");
	HX_VISIT_MEMBER_NAME(_postLoaded,"_postLoaded");
	HX_VISIT_MEMBER_NAME(_pointX,"_pointX");
	HX_VISIT_MEMBER_NAME(_pointY,"_pointY");
	HX_VISIT_MEMBER_NAME(_group_index,"_group_index");
	HX_VISIT_MEMBER_NAME(_asset_index,"_asset_index");
	HX_VISIT_MEMBER_NAME(_tag_index,"_tag_index");
	HX_VISIT_MEMBER_NAME(_definition_index,"_definition_index");
	HX_VISIT_MEMBER_NAME(_variable_index,"_variable_index");
	HX_VISIT_MEMBER_NAME(_mode_index,"_mode_index");
	HX_VISIT_MEMBER_NAME(_curr_mode,"_curr_mode");
	HX_VISIT_MEMBER_NAME(_ptr,"_ptr");
	HX_VISIT_MEMBER_NAME(_superIndexUI,"_superIndexUI");
	HX_VISIT_MEMBER_NAME(_safe_input_delay_elapsed,"_safe_input_delay_elapsed");
	HX_VISIT_MEMBER_NAME(_failure_checks,"_failure_checks");
	HX_VISIT_MEMBER_NAME(_assetsToCleanUp,"_assetsToCleanUp");
	HX_VISIT_MEMBER_NAME(_scaledAssets,"_scaledAssets");
	 ::flixel::addons::ui::FlxUIGroup_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxUI_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"load") ) { return hx::Val( load_dyn() ); }
		if (HX_FIELD_EQ(inName,"_ptr") ) { return hx::Val( _ptr ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"focus") ) { return hx::Val( focus ); }
		if (HX_FIELD_EQ(inName,"_data") ) { return hx::Val( _data ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"failed") ) { return hx::Val( failed ); }
		if (HX_FIELD_EQ(inName,"isRoot") ) { return hx::Val( inCallProp == hx::paccAlways ? get_isRoot() : isRoot ); }
		if (HX_FIELD_EQ(inName,"tongue") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_tongue() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadX") ) { return hx::Val( _loadX_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadY") ) { return hx::Val( _loadY_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onFocus") ) { return hx::Val( onFocus_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"_sendTo") ) { return hx::Val( _sendTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"setMode") ) { return hx::Val( setMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"getMode") ) { return hx::Val( getMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"_pointX") ) { return hx::Val( _pointX ); }
		if (HX_FIELD_EQ(inName,"_pointY") ) { return hx::Val( _pointY ); }
		if (HX_FIELD_EQ(inName,"cleanup") ) { return hx::Val( cleanup_dyn() ); }
		if (HX_FIELD_EQ(inName,"doRound") ) { return hx::Val( doRound_dyn() ); }
		if (HX_FIELD_EQ(inName,"getText") ) { return hx::Val( getText_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getEvent") ) { return hx::Val( getEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"addAsset") ) { return hx::Val( addAsset_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadSub") ) { return hx::Val( _loadSub_dyn() ); }
		if (HX_FIELD_EQ(inName,"_addTags") ) { return hx::Val( _addTags_dyn() ); }
		if (HX_FIELD_EQ(inName,"currMode") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_currMode() ); }
		if (HX_FIELD_EQ(inName,"getGroup") ) { return hx::Val( getGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"hasAsset") ) { return hx::Val( hasAsset_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAsset") ) { return hx::Val( getAsset_dyn() ); }
		if (HX_FIELD_EQ(inName,"_doAlign") ) { return hx::Val( _doAlign_dyn() ); }
		if (HX_FIELD_EQ(inName,"createUI") ) { return hx::Val( createUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadBox") ) { return hx::Val( _loadBox_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadBar") ) { return hx::Val( _loadBar_dyn() ); }
		if (HX_FIELD_EQ(inName,"getRound") ) { return hx::Val( getRound_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"failed_by") ) { return hx::Val( failed_by ); }
		if (HX_FIELD_EQ(inName,"set_focus") ) { return hx::Val( set_focus_dyn() ); }
		if (HX_FIELD_EQ(inName,"callEvent") ) { return hx::Val( callEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"showGroup") ) { return hx::Val( showGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"showAsset") ) { return hx::Val( showAsset_dyn() ); }
		if (HX_FIELD_EQ(inName,"_postLoad") ) { return hx::Val( _postLoad_dyn() ); }
		if (HX_FIELD_EQ(inName,"showThing") ) { return hx::Val( showThing_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadThing") ) { return hx::Val( loadThing_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadText") ) { return hx::Val( _loadText_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadTest") ) { return hx::Val( _loadTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadLine") ) { return hx::Val( _loadLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"thisWidth") ) { return hx::Val( thisWidth_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_isRoot") ) { return hx::Val( get_isRoot_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_tongue") ) { return hx::Val( get_tongue_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_tongue") ) { return hx::Val( set_tongue_dyn() ); }
		if (HX_FIELD_EQ(inName,"_tongueSet") ) { return hx::Val( _tongueSet_dyn() ); }
		if (HX_FIELD_EQ(inName,"getRequest") ) { return hx::Val( getRequest_dyn() ); }
		if (HX_FIELD_EQ(inName,"toggleShow") ) { return hx::Val( toggleShow_dyn() ); }
		if (HX_FIELD_EQ(inName,"sendToBack") ) { return hx::Val( sendToBack_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFlxText") ) { return hx::Val( getFlxText_dyn() ); }
		if (HX_FIELD_EQ(inName,"_tag_index") ) { return hx::Val( _tag_index ); }
		if (HX_FIELD_EQ(inName,"_curr_mode") ) { return hx::Val( _curr_mode ); }
		if (HX_FIELD_EQ(inName,"_loadThing") ) { return hx::Val( _loadThing_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadScale") ) { return hx::Val( _loadScale_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadWidth") ) { return hx::Val( _loadWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadSmooth") ) { return hx::Val( loadSmooth_dyn() ); }
		if (HX_FIELD_EQ(inName,"thisHeight") ) { return hx::Val( thisHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadColor") ) { return hx::Val( _loadColor_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cursorLists") ) { return hx::Val( cursorLists ); }
		if (HX_FIELD_EQ(inName,"_ptr_tongue") ) { return hx::Val( _ptr_tongue ); }
		if (HX_FIELD_EQ(inName,"onFocusLost") ) { return hx::Val( onFocusLost_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeAsset") ) { return hx::Val( removeAsset_dyn() ); }
		if (HX_FIELD_EQ(inName,"unparentXML") ) { return hx::Val( unparentXML_dyn() ); }
		if (HX_FIELD_EQ(inName,"sendToFront") ) { return hx::Val( sendToFront_dyn() ); }
		if (HX_FIELD_EQ(inName,"setVariable") ) { return hx::Val( setVariable_dyn() ); }
		if (HX_FIELD_EQ(inName,"getVariable") ) { return hx::Val( getVariable_dyn() ); }
		if (HX_FIELD_EQ(inName,"screenWidth") ) { return hx::Val( screenWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"_postLoaded") ) { return hx::Val( _postLoaded ); }
		if (HX_FIELD_EQ(inName,"_mode_index") ) { return hx::Val( _mode_index ); }
		if (HX_FIELD_EQ(inName,"_loadAnchor") ) { return hx::Val( _loadAnchor_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadScaleX") ) { return hx::Val( _loadScaleX_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadScaleY") ) { return hx::Val( _loadScaleY_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadHeight") ) { return hx::Val( _loadHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"_alignThing") ) { return hx::Val( _alignThing_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadString") ) { return hx::Val( _loadString_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadLayout") ) { return hx::Val( _loadLayout_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadButton") ) { return hx::Val( _loadButton_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadRegion") ) { return hx::Val( _loadRegion_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadSprite") ) { return hx::Val( _loadSprite_dyn() ); }
		if (HX_FIELD_EQ(inName,"_getStretch") ) { return hx::Val( _getStretch_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadCursor") ) { return hx::Val( _loadCursor_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadBorder") ) { return hx::Val( _loadBorder_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"liveFilePath") ) { return hx::Val( liveFilePath ); }
		if (HX_FIELD_EQ(inName,"replaceAsset") ) { return hx::Val( replaceAsset_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadGlobals") ) { return hx::Val( _loadGlobals_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_currMode") ) { return hx::Val( get_currMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_currMode") ) { return hx::Val( set_currMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAllAssets") ) { return hx::Val( getAllAssets_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAssetKeys") ) { return hx::Val( getAssetKeys_dyn() ); }
		if (HX_FIELD_EQ(inName,"screenHeight") ) { return hx::Val( screenHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"_group_index") ) { return hx::Val( _group_index ); }
		if (HX_FIELD_EQ(inName,"_asset_index") ) { return hx::Val( _asset_index ); }
		if (HX_FIELD_EQ(inName,"_loadTooltip") ) { return hx::Val( _loadTooltip_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadCompass") ) { return hx::Val( _loadCompass_dyn() ); }
		if (HX_FIELD_EQ(inName,"_changeThing") ) { return hx::Val( _changeThing_dyn() ); }
		if (HX_FIELD_EQ(inName,"_resizeThing") ) { return hx::Val( _resizeThing_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadTestSub") ) { return hx::Val( _loadTestSub_dyn() ); }
		if (HX_FIELD_EQ(inName,"addToCleanup") ) { return hx::Val( addToCleanup_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadTabMenu") ) { return hx::Val( _loadTabMenu_dyn() ); }
		if (HX_FIELD_EQ(inName,"_getDataSize") ) { return hx::Val( _getDataSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"_doOperation") ) { return hx::Val( _doOperation_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadFontDef") ) { return hx::Val( _loadFontDef_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setSuperIndex") ) { return hx::Val( setSuperIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAssetGroup") ) { return hx::Val( getAssetGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkVariable") ) { return hx::Val( checkVariable_dyn() ); }
		if (HX_FIELD_EQ(inName,"getDefinition") ) { return hx::Val( getDefinition_dyn() ); }
		if (HX_FIELD_EQ(inName,"_superIndexUI") ) { return hx::Val( _superIndexUI ); }
		if (HX_FIELD_EQ(inName,"_scaledAssets") ) { return hx::Val( _scaledAssets ); }
		if (HX_FIELD_EQ(inName,"_checkFailure") ) { return hx::Val( _checkFailure_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadTileTest") ) { return hx::Val( _loadTileTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadCheckBox") ) { return hx::Val( _loadCheckBox_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseVarValue") ) { return hx::Val( parseVarValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadTileRule") ) { return hx::Val( _loadTileRule_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadScaledSrc") ) { return hx::Val( loadScaledSrc_dyn() ); }
		if (HX_FIELD_EQ(inName,"_getAnchorPos") ) { return hx::Val( _getAnchorPos_dyn() ); }
		if (HX_FIELD_EQ(inName,"_getOperation") ) { return hx::Val( _getOperation_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadPosition") ) { return hx::Val( _loadPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadFontFace") ) { return hx::Val( _loadFontFace_dyn() ); }
		if (HX_FIELD_EQ(inName,"_onFinishLoad") ) { return hx::Val( _onFinishLoad_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_loadPointSize") ) { return hx::Val( _loadPointSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"replaceInGroup") ) { return hx::Val( replaceInGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"_postLoadThing") ) { return hx::Val( _postLoadThing_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadInputText") ) { return hx::Val( _loadInputText_dyn() ); }
		if (HX_FIELD_EQ(inName,"getResizeRatio") ) { return hx::Val( getResizeRatio_dyn() ); }
		if (HX_FIELD_EQ(inName,"calcMaxMinSize") ) { return hx::Val( calcMaxMinSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"formatFromCode") ) { return hx::Val( formatFromCode_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getTextFallback") ) { return hx::Val( getTextFallback ); }
		if (HX_FIELD_EQ(inName,"_variable_index") ) { return hx::Val( _variable_index ); }
		if (HX_FIELD_EQ(inName,"_failure_checks") ) { return hx::Val( _failure_checks ); }
		if (HX_FIELD_EQ(inName,"_loadRadioGroup") ) { return hx::Val( _loadRadioGroup_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getAssetsWithTag") ) { return hx::Val( getAssetsWithTag_dyn() ); }
		if (HX_FIELD_EQ(inName,"_assetsToCleanUp") ) { return hx::Val( _assetsToCleanUp ); }
		if (HX_FIELD_EQ(inName,"applyNodeChanges") ) { return hx::Val( applyNodeChanges_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadTooltipData") ) { return hx::Val( _loadTooltipData_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadTooltipText") ) { return hx::Val( _loadTooltipText_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAssetProperty") ) { return hx::Val( getAssetProperty_dyn() ); }
		if (HX_FIELD_EQ(inName,"formatButtonText") ) { return hx::Val( formatButtonText_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_definition_index") ) { return hx::Val( _definition_index ); }
		if (HX_FIELD_EQ(inName,"_loadThingGetInfo") ) { return hx::Val( _loadThingGetInfo_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadTooltipStyle") ) { return hx::Val( _loadTooltipStyle_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadDropDownMenu") ) { return hx::Val( _loadDropDownMenu_dyn() ); }
		if (HX_FIELD_EQ(inName,"addToScaledAssets") ) { return hx::Val( addToScaledAssets_dyn() ); }
		if (HX_FIELD_EQ(inName,"_load9SliceSprite") ) { return hx::Val( _load9SliceSprite_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_changeParamsThing") ) { return hx::Val( _changeParamsThing_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"do_safe_input_delay") ) { return hx::Val( do_safe_input_delay ); }
		if (HX_FIELD_EQ(inName,"_loadNumericStepper") ) { return hx::Val( _loadNumericStepper_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"setWidgetSuppression") ) { return hx::Val( setWidgetSuppression_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"safe_input_delay_time") ) { return hx::Val( safe_input_delay_time ); }
		if (HX_FIELD_EQ(inName,"getLabelStyleFromData") ) { return hx::Val( getLabelStyleFromData_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyNodeConditionals") ) { return hx::Val( applyNodeConditionals_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_safe_input_delay_elapsed") ) { return hx::Val( _safe_input_delay_elapsed ); }
		if (HX_FIELD_EQ(inName,"load9SliceSprite_scaleSub") ) { return hx::Val( load9SliceSprite_scaleSub_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"getLabelStyleFromDefinition") ) { return hx::Val( getLabelStyleFromDefinition_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxUI_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"font") ) { outValue = font_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"event") ) { outValue = event_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_delta") ) { outValue = _delta_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fontStr") ) { outValue = fontStr_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"request") ) { outValue = request_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_center") ) { outValue = _center_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fontSize") ) { outValue = fontSize_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getParams") ) { outValue = getParams_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"forceFocus") ) { outValue = forceFocus_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sortParams") ) { outValue = sortParams_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__getTongue") ) { outValue = _hx___getTongue_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getLeafUIState") ) { outValue = getLeafUIState_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"consolidateData") ) { outValue = consolidateData_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_loadBitmapRect") ) { outValue = _loadBitmapRect_dyn(); return true; }
	}
	return false;
}

hx::Val FlxUI_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_ptr") ) { _ptr=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"focus") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_focus(inValue.Cast< ::Dynamic >()) );focus=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_data") ) { _data=inValue.Cast<  ::haxe::xml::Fast >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"failed") ) { failed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isRoot") ) { isRoot=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tongue") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_tongue(inValue.Cast< ::Dynamic >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_pointX") ) { _pointX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_pointY") ) { _pointY=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"currMode") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_currMode(inValue.Cast< ::String >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"failed_by") ) { failed_by=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_tag_index") ) { _tag_index=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_curr_mode") ) { _curr_mode=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cursorLists") ) { cursorLists=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_ptr_tongue") ) { _ptr_tongue=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_postLoaded") ) { _postLoaded=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_mode_index") ) { _mode_index=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"liveFilePath") ) { liveFilePath=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_group_index") ) { _group_index=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_asset_index") ) { _asset_index=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_superIndexUI") ) { _superIndexUI=inValue.Cast<  ::flixel::addons::ui::FlxUI >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_scaledAssets") ) { _scaledAssets=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getTextFallback") ) { getTextFallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_variable_index") ) { _variable_index=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_failure_checks") ) { _failure_checks=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_assetsToCleanUp") ) { _assetsToCleanUp=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_definition_index") ) { _definition_index=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"do_safe_input_delay") ) { do_safe_input_delay=inValue.Cast< bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"safe_input_delay_time") ) { safe_input_delay_time=inValue.Cast< Float >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_safe_input_delay_elapsed") ) { _safe_input_delay_elapsed=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxUI_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("do_safe_input_delay","\x90","\x5b","\x9d","\x88"));
	outFields->push(HX_HCSTRING("safe_input_delay_time","\x50","\x71","\xb0","\xf4"));
	outFields->push(HX_HCSTRING("failed","\xbd","\xc5","\xfe","\xe7"));
	outFields->push(HX_HCSTRING("failed_by","\x59","\x1a","\x00","\x5f"));
	outFields->push(HX_HCSTRING("isRoot","\x2c","\xb3","\x15","\x69"));
	outFields->push(HX_HCSTRING("liveFilePath","\x4d","\x75","\xd5","\xb0"));
	outFields->push(HX_HCSTRING("tongue","\xc4","\x45","\xe4","\x93"));
	outFields->push(HX_HCSTRING("focus","\xd8","\x5f","\x89","\x04"));
	outFields->push(HX_HCSTRING("cursorLists","\x9f","\x0f","\xe7","\xfd"));
	outFields->push(HX_HCSTRING("_ptr_tongue","\x54","\xfc","\x53","\x03"));
	outFields->push(HX_HCSTRING("_data","\x09","\x72","\x74","\xf5"));
	outFields->push(HX_HCSTRING("currMode","\x75","\xab","\x68","\x8b"));
	outFields->push(HX_HCSTRING("_postLoaded","\xa4","\x95","\x31","\x80"));
	outFields->push(HX_HCSTRING("_pointX","\xa7","\x23","\xa5","\x65"));
	outFields->push(HX_HCSTRING("_pointY","\xa8","\x23","\xa5","\x65"));
	outFields->push(HX_HCSTRING("_group_index","\xd3","\xbc","\xca","\x66"));
	outFields->push(HX_HCSTRING("_asset_index","\x44","\x0e","\xd3","\x80"));
	outFields->push(HX_HCSTRING("_tag_index","\xee","\xf7","\x41","\x12"));
	outFields->push(HX_HCSTRING("_definition_index","\x85","\x96","\xe5","\x82"));
	outFields->push(HX_HCSTRING("_variable_index","\x2e","\x92","\x8a","\x75"));
	outFields->push(HX_HCSTRING("_mode_index","\x15","\xaf","\x93","\xa2"));
	outFields->push(HX_HCSTRING("_curr_mode","\xd1","\x32","\xbc","\x27"));
	outFields->push(HX_HCSTRING("_ptr","\xef","\xa6","\x20","\x3f"));
	outFields->push(HX_HCSTRING("_superIndexUI","\x8a","\xfc","\x6d","\xd1"));
	outFields->push(HX_HCSTRING("_safe_input_delay_elapsed","\x38","\x44","\x1a","\x3b"));
	outFields->push(HX_HCSTRING("_failure_checks","\xdf","\xfd","\xae","\x28"));
	outFields->push(HX_HCSTRING("_assetsToCleanUp","\x87","\x59","\xf7","\x5a"));
	outFields->push(HX_HCSTRING("_scaledAssets","\x9c","\x29","\x61","\x6b"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxUI_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(FlxUI_obj,do_safe_input_delay),HX_HCSTRING("do_safe_input_delay","\x90","\x5b","\x9d","\x88")},
	{hx::fsFloat,(int)offsetof(FlxUI_obj,safe_input_delay_time),HX_HCSTRING("safe_input_delay_time","\x50","\x71","\xb0","\xf4")},
	{hx::fsBool,(int)offsetof(FlxUI_obj,failed),HX_HCSTRING("failed","\xbd","\xc5","\xfe","\xe7")},
	{hx::fsFloat,(int)offsetof(FlxUI_obj,failed_by),HX_HCSTRING("failed_by","\x59","\x1a","\x00","\x5f")},
	{hx::fsBool,(int)offsetof(FlxUI_obj,isRoot),HX_HCSTRING("isRoot","\x2c","\xb3","\x15","\x69")},
	{hx::fsString,(int)offsetof(FlxUI_obj,liveFilePath),HX_HCSTRING("liveFilePath","\x4d","\x75","\xd5","\xb0")},
	{hx::fsObject /*::flixel::addons::ui::interfaces::IFlxUIWidget*/ ,(int)offsetof(FlxUI_obj,focus),HX_HCSTRING("focus","\xd8","\x5f","\x89","\x04")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxUI_obj,getTextFallback),HX_HCSTRING("getTextFallback","\xa5","\xc3","\x03","\x82")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxUI_obj,cursorLists),HX_HCSTRING("cursorLists","\x9f","\x0f","\xe7","\xfd")},
	{hx::fsObject /*::flixel::addons::ui::interfaces::IFireTongue*/ ,(int)offsetof(FlxUI_obj,_ptr_tongue),HX_HCSTRING("_ptr_tongue","\x54","\xfc","\x53","\x03")},
	{hx::fsObject /*::haxe::xml::Fast*/ ,(int)offsetof(FlxUI_obj,_data),HX_HCSTRING("_data","\x09","\x72","\x74","\xf5")},
	{hx::fsBool,(int)offsetof(FlxUI_obj,_postLoaded),HX_HCSTRING("_postLoaded","\xa4","\x95","\x31","\x80")},
	{hx::fsFloat,(int)offsetof(FlxUI_obj,_pointX),HX_HCSTRING("_pointX","\xa7","\x23","\xa5","\x65")},
	{hx::fsFloat,(int)offsetof(FlxUI_obj,_pointY),HX_HCSTRING("_pointY","\xa8","\x23","\xa5","\x65")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(FlxUI_obj,_group_index),HX_HCSTRING("_group_index","\xd3","\xbc","\xca","\x66")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(FlxUI_obj,_asset_index),HX_HCSTRING("_asset_index","\x44","\x0e","\xd3","\x80")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(FlxUI_obj,_tag_index),HX_HCSTRING("_tag_index","\xee","\xf7","\x41","\x12")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(FlxUI_obj,_definition_index),HX_HCSTRING("_definition_index","\x85","\x96","\xe5","\x82")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(FlxUI_obj,_variable_index),HX_HCSTRING("_variable_index","\x2e","\x92","\x8a","\x75")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(FlxUI_obj,_mode_index),HX_HCSTRING("_mode_index","\x15","\xaf","\x93","\xa2")},
	{hx::fsString,(int)offsetof(FlxUI_obj,_curr_mode),HX_HCSTRING("_curr_mode","\xd1","\x32","\xbc","\x27")},
	{hx::fsObject /*::flixel::addons::ui::interfaces::IEventGetter*/ ,(int)offsetof(FlxUI_obj,_ptr),HX_HCSTRING("_ptr","\xef","\xa6","\x20","\x3f")},
	{hx::fsObject /*::flixel::addons::ui::FlxUI*/ ,(int)offsetof(FlxUI_obj,_superIndexUI),HX_HCSTRING("_superIndexUI","\x8a","\xfc","\x6d","\xd1")},
	{hx::fsFloat,(int)offsetof(FlxUI_obj,_safe_input_delay_elapsed),HX_HCSTRING("_safe_input_delay_elapsed","\x38","\x44","\x1a","\x3b")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxUI_obj,_failure_checks),HX_HCSTRING("_failure_checks","\xdf","\xfd","\xae","\x28")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(FlxUI_obj,_assetsToCleanUp),HX_HCSTRING("_assetsToCleanUp","\x87","\x59","\xf7","\x5a")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(FlxUI_obj,_scaledAssets),HX_HCSTRING("_scaledAssets","\x9c","\x29","\x61","\x6b")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxUI_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxUI_obj_sMemberFields[] = {
	HX_HCSTRING("do_safe_input_delay","\x90","\x5b","\x9d","\x88"),
	HX_HCSTRING("safe_input_delay_time","\x50","\x71","\xb0","\xf4"),
	HX_HCSTRING("failed","\xbd","\xc5","\xfe","\xe7"),
	HX_HCSTRING("failed_by","\x59","\x1a","\x00","\x5f"),
	HX_HCSTRING("isRoot","\x2c","\xb3","\x15","\x69"),
	HX_HCSTRING("get_isRoot","\xf5","\x22","\x9d","\x59"),
	HX_HCSTRING("liveFilePath","\x4d","\x75","\xd5","\xb0"),
	HX_HCSTRING("get_tongue","\x8d","\xb5","\x6b","\x84"),
	HX_HCSTRING("set_tongue","\x01","\x54","\xe9","\x87"),
	HX_HCSTRING("focus","\xd8","\x5f","\x89","\x04"),
	HX_HCSTRING("set_focus","\x3b","\xa8","\x83","\x2b"),
	HX_HCSTRING("getTextFallback","\xa5","\xc3","\x03","\x82"),
	HX_HCSTRING("cursorLists","\x9f","\x0f","\xe7","\xfd"),
	HX_HCSTRING("_ptr_tongue","\x54","\xfc","\x53","\x03"),
	HX_HCSTRING("_data","\x09","\x72","\x74","\xf5"),
	HX_HCSTRING("_tongueSet","\xff","\x7b","\xc4","\x6b"),
	HX_HCSTRING("callEvent","\x9c","\x22","\x04","\x02"),
	HX_HCSTRING("getEvent","\xa4","\xd7","\x9b","\xd5"),
	HX_HCSTRING("getRequest","\x59","\x65","\xe6","\x93"),
	HX_HCSTRING("onFocus","\x39","\xfe","\xc6","\x9a"),
	HX_HCSTRING("setWidgetSuppression","\x4d","\x9a","\xd2","\xbf"),
	HX_HCSTRING("onFocusLost","\xbd","\xe4","\x85","\x41"),
	HX_HCSTRING("setSuperIndex","\xd9","\x09","\x3c","\xbf"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("toggleShow","\xb1","\x1a","\x09","\xe4"),
	HX_HCSTRING("showGroup","\x02","\x19","\x59","\xc8"),
	HX_HCSTRING("showAsset","\xb3","\xcf","\x9d","\x54"),
	HX_HCSTRING("removeAsset","\x0c","\x47","\x6d","\x24"),
	HX_HCSTRING("addAsset","\x0f","\x90","\x96","\x9f"),
	HX_HCSTRING("replaceAsset","\x1c","\x55","\xc8","\x19"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("load","\x26","\x9a","\xb7","\x47"),
	HX_HCSTRING("unparentXML","\x54","\xa1","\xff","\x04"),
	HX_HCSTRING("_loadPointSize","\x6c","\xaa","\x6c","\xe2"),
	HX_HCSTRING("_loadSub","\x7b","\x7c","\x9a","\x42"),
	HX_HCSTRING("_addTags","\x1b","\x51","\xec","\xc2"),
	HX_HCSTRING("_loadGlobals","\x2b","\x72","\xe0","\x4a"),
	HX_HCSTRING("_postLoad","\x05","\xf2","\x8c","\x4d"),
	HX_HCSTRING("_sendTo","\x82","\xca","\xfb","\xd9"),
	HX_HCSTRING("sendToFront","\xc6","\xb8","\x1e","\x5d"),
	HX_HCSTRING("sendToBack","\xaa","\x6c","\x20","\x18"),
	HX_HCSTRING("get_currMode","\x7e","\x5f","\x82","\x40"),
	HX_HCSTRING("set_currMode","\xf2","\x82","\x7b","\x55"),
	HX_HCSTRING("setMode","\x25","\x14","\xe5","\x0d"),
	HX_HCSTRING("showThing","\xb1","\xed","\xed","\x3d"),
	HX_HCSTRING("getGroup","\xc9","\xc2","\xcb","\xf9"),
	HX_HCSTRING("getFlxText","\x49","\x64","\x62","\x5f"),
	HX_HCSTRING("getAllAssets","\x0e","\x61","\xbd","\x29"),
	HX_HCSTRING("getAssetKeys","\x8e","\xcc","\x03","\xbb"),
	HX_HCSTRING("hasAsset","\x36","\xb4","\x91","\xb2"),
	HX_HCSTRING("getAsset","\x7a","\x79","\x10","\x86"),
	HX_HCSTRING("getAssetsWithTag","\x3b","\x93","\x24","\x96"),
	HX_HCSTRING("getAssetGroup","\x65","\x0f","\x45","\xa3"),
	HX_HCSTRING("getMode","\x19","\x83","\xe3","\x1a"),
	HX_HCSTRING("getLabelStyleFromDefinition","\xd0","\x35","\x54","\xc4"),
	HX_HCSTRING("getLabelStyleFromData","\xa7","\xba","\x4b","\x0c"),
	HX_HCSTRING("checkVariable","\x24","\x6f","\x67","\x51"),
	HX_HCSTRING("setVariable","\xfe","\xdb","\x6d","\x99"),
	HX_HCSTRING("getVariable","\xf2","\xd4","\x00","\x8f"),
	HX_HCSTRING("getDefinition","\xc9","\x31","\x80","\x48"),
	HX_HCSTRING("screenWidth","\xfa","\x02","\xe8","\x81"),
	HX_HCSTRING("screenHeight","\x73","\x10","\x6a","\xdf"),
	HX_HCSTRING("_postLoaded","\xa4","\x95","\x31","\x80"),
	HX_HCSTRING("_pointX","\xa7","\x23","\xa5","\x65"),
	HX_HCSTRING("_pointY","\xa8","\x23","\xa5","\x65"),
	HX_HCSTRING("_group_index","\xd3","\xbc","\xca","\x66"),
	HX_HCSTRING("_asset_index","\x44","\x0e","\xd3","\x80"),
	HX_HCSTRING("_tag_index","\xee","\xf7","\x41","\x12"),
	HX_HCSTRING("_definition_index","\x85","\x96","\xe5","\x82"),
	HX_HCSTRING("_variable_index","\x2e","\x92","\x8a","\x75"),
	HX_HCSTRING("_mode_index","\x15","\xaf","\x93","\xa2"),
	HX_HCSTRING("_curr_mode","\xd1","\x32","\xbc","\x27"),
	HX_HCSTRING("_ptr","\xef","\xa6","\x20","\x3f"),
	HX_HCSTRING("_superIndexUI","\x8a","\xfc","\x6d","\xd1"),
	HX_HCSTRING("_safe_input_delay_elapsed","\x38","\x44","\x1a","\x3b"),
	HX_HCSTRING("_failure_checks","\xdf","\xfd","\xae","\x28"),
	HX_HCSTRING("_assetsToCleanUp","\x87","\x59","\xf7","\x5a"),
	HX_HCSTRING("_scaledAssets","\x9c","\x29","\x61","\x6b"),
	HX_HCSTRING("replaceInGroup","\x46","\x97","\x32","\x5c"),
	HX_HCSTRING("applyNodeConditionals","\x1d","\xb1","\xba","\xec"),
	HX_HCSTRING("applyNodeChanges","\x53","\x40","\x3a","\x89"),
	HX_HCSTRING("loadThing","\xe8","\xd3","\xc0","\x2a"),
	HX_HCSTRING("_loadThingGetInfo","\x7b","\xf7","\x10","\x95"),
	HX_HCSTRING("_loadTooltip","\x7e","\x19","\x34","\xa1"),
	HX_HCSTRING("_loadTooltipData","\xc8","\x32","\x6e","\x09"),
	HX_HCSTRING("_loadTooltipStyle","\xd3","\xd2","\x93","\xe6"),
	HX_HCSTRING("_loadTooltipText","\x4b","\xa9","\x04","\x14"),
	HX_HCSTRING("_loadAnchor","\x5a","\x36","\x26","\xe8"),
	HX_HCSTRING("_loadThing","\xa9","\x4f","\x63","\x86"),
	HX_HCSTRING("_loadX","\xb3","\x8e","\xd6","\x74"),
	HX_HCSTRING("_loadY","\xb4","\x8e","\xd6","\x74"),
	HX_HCSTRING("_loadScale","\x45","\x96","\xa8","\xef"),
	HX_HCSTRING("_loadScaleX","\x73","\xe6","\xda","\xc3"),
	HX_HCSTRING("_loadScaleY","\x74","\xe6","\xda","\xc3"),
	HX_HCSTRING("_loadWidth","\xc1","\x7d","\x3c","\x41"),
	HX_HCSTRING("_loadHeight","\xcc","\x03","\x01","\x8a"),
	HX_HCSTRING("_loadCompass","\x0d","\x86","\x10","\xba"),
	HX_HCSTRING("_changeParamsThing","\xf9","\x9f","\x76","\x8d"),
	HX_HCSTRING("_changeThing","\x5f","\xde","\x58","\x9b"),
	HX_HCSTRING("_alignThing","\x08","\xc4","\x65","\x7b"),
	HX_HCSTRING("_doAlign","\xbb","\x90","\x76","\x8e"),
	HX_HCSTRING("_checkFailure","\x41","\xbb","\xef","\xe6"),
	HX_HCSTRING("_resizeThing","\x5b","\xb7","\x96","\xb4"),
	HX_HCSTRING("_postLoadThing","\xa9","\x93","\xc5","\x16"),
	HX_HCSTRING("_loadTileTest","\xc5","\x6d","\xd7","\x22"),
	HX_HCSTRING("_loadString","\xb6","\x24","\xe5","\x98"),
	HX_HCSTRING("_loadText","\x52","\x95","\x2f","\x05"),
	HX_HCSTRING("_loadInputText","\x12","\x4b","\xdc","\xd4"),
	HX_HCSTRING("_loadRadioGroup","\xa9","\xf6","\x74","\x63"),
	HX_HCSTRING("_loadCheckBox","\x48","\x09","\xb5","\x48"),
	HX_HCSTRING("_loadDropDownMenu","\x15","\xf4","\x83","\x17"),
	HX_HCSTRING("_loadTest","\xf7","\x90","\x2f","\x05"),
	HX_HCSTRING("_loadTestSub","\xc9","\x84","\x6d","\xf4"),
	HX_HCSTRING("parseVarValue","\x5d","\xe2","\xa6","\xbd"),
	HX_HCSTRING("_loadLayout","\x8f","\xaa","\x6d","\xe0"),
	HX_HCSTRING("addToCleanup","\x88","\x65","\x2a","\xda"),
	HX_HCSTRING("addToScaledAssets","\xd9","\xb2","\xd7","\x0f"),
	HX_HCSTRING("cleanup","\x24","\x0c","\x42","\xab"),
	HX_HCSTRING("createUI","\x50","\x68","\xf4","\x2b"),
	HX_HCSTRING("_loadTabMenu","\x0f","\x87","\x76","\x77"),
	HX_HCSTRING("_loadNumericStepper","\xa9","\xd6","\xb0","\xb0"),
	HX_HCSTRING("getResizeRatio","\x81","\x09","\xc6","\xaa"),
	HX_HCSTRING("_loadButton","\xd7","\x5d","\x95","\x61"),
	HX_HCSTRING("_loadRegion","\xd9","\xbc","\x41","\x88"),
	HX_HCSTRING("_load9SliceSprite","\xc3","\x47","\x93","\xcb"),
	HX_HCSTRING("load9SliceSprite_scaleSub","\x91","\x16","\x9e","\xf3"),
	HX_HCSTRING("_loadTileRule","\x6f","\x1e","\x91","\x21"),
	HX_HCSTRING("_loadBox","\x06","\x91","\x8d","\x42"),
	HX_HCSTRING("_loadLine","\x99","\xe0","\xe8","\xff"),
	HX_HCSTRING("_loadBar","\xce","\x84","\x8d","\x42"),
	HX_HCSTRING("_loadSprite","\xea","\xd7","\x4a","\x4b"),
	HX_HCSTRING("loadSmooth","\xf4","\x36","\x96","\xbc"),
	HX_HCSTRING("loadScaledSrc","\x64","\x61","\x58","\xbd"),
	HX_HCSTRING("thisWidth","\xc8","\x4a","\xca","\x38"),
	HX_HCSTRING("thisHeight","\xe5","\x9c","\x86","\x2e"),
	HX_HCSTRING("_getAnchorPos","\x88","\x41","\xe7","\x51"),
	HX_HCSTRING("getRound","\xd8","\x07","\x3d","\x4d"),
	HX_HCSTRING("doRound","\xc3","\xd8","\x92","\x20"),
	HX_HCSTRING("calcMaxMinSize","\x24","\x12","\xef","\xe7"),
	HX_HCSTRING("_getDataSize","\xc2","\xf0","\xc4","\x17"),
	HX_HCSTRING("_getOperation","\x90","\xb3","\x05","\x92"),
	HX_HCSTRING("_doOperation","\x1d","\xf1","\x48","\x5f"),
	HX_HCSTRING("_getStretch","\x2e","\x91","\x3e","\x18"),
	HX_HCSTRING("getAssetProperty","\xef","\x87","\xa7","\x3d"),
	HX_HCSTRING("_loadCursor","\xbb","\x8a","\x9d","\xc6"),
	HX_HCSTRING("_loadPosition","\xce","\x1f","\xd2","\x66"),
	HX_HCSTRING("_loadBorder","\xd1","\x48","\xcf","\xeb"),
	HX_HCSTRING("_loadColor","\x1e","\x39","\x36","\xc1"),
	HX_HCSTRING("_loadFontDef","\xb1","\x4b","\xc6","\xcc"),
	HX_HCSTRING("_loadFontFace","\x31","\x51","\x0b","\x62"),
	HX_HCSTRING("_onFinishLoad","\xf7","\x60","\xa4","\x8e"),
	HX_HCSTRING("getText","\x63","\x7c","\x7c","\x1f"),
	HX_HCSTRING("formatFromCode","\x0e","\x5a","\x55","\xe0"),
	HX_HCSTRING("formatButtonText","\xd6","\x99","\x61","\x56"),
	::String(null()) };

static void FlxUI_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxUI_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxUI_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxUI_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxUI_obj::__mClass;

static ::String FlxUI_obj_sStaticFields[] = {
	HX_HCSTRING("event","\x1a","\xc8","\xc4","\x75"),
	HX_HCSTRING("fontStr","\x22","\x4e","\x2a","\x96"),
	HX_HCSTRING("fontSize","\x30","\xbe","\xd1","\xce"),
	HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43"),
	HX_HCSTRING("__getTongue","\xda","\x17","\x67","\x3e"),
	HX_HCSTRING("forceFocus","\xed","\x49","\x5e","\x9b"),
	HX_HCSTRING("getLeafUIState","\x49","\xca","\x4d","\x90"),
	HX_HCSTRING("request","\x4f","\xdf","\x84","\x44"),
	HX_HCSTRING("_delta","\x39","\x2f","\x0e","\xd3"),
	HX_HCSTRING("_center","\x74","\x37","\x52","\x74"),
	HX_HCSTRING("consolidateData","\xd3","\xc5","\x7a","\xdc"),
	HX_HCSTRING("_loadBitmapRect","\x18","\xff","\x15","\x1d"),
	HX_HCSTRING("getParams","\x7c","\x84","\xd1","\x69"),
	HX_HCSTRING("sortParams","\x44","\x71","\x60","\x4a"),
	::String(null())
};

void FlxUI_obj::__register()
{
	hx::Object *dummy = new FlxUI_obj;
	FlxUI_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.ui.FlxUI","\x55","\x08","\x11","\xe9");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxUI_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxUI_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxUI_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxUI_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxUI_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxUI_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxUI_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxUI_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace ui
