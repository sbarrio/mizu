// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_Anchor
#include <flixel/addons/ui/Anchor.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_AnchorPoint
#include <flixel/addons/ui/AnchorPoint.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxBaseMultiInput
#include <flixel/addons/ui/FlxBaseMultiInput.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxMultiGamepad
#include <flixel/addons/ui/FlxMultiGamepad.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxMultiGamepadAnalogStick
#include <flixel/addons/ui/FlxMultiGamepadAnalogStick.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxMultiKey
#include <flixel/addons/ui/FlxMultiKey.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI
#include <flixel/addons/ui/FlxUI.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUICheckBox
#include <flixel/addons/ui/FlxUICheckBox.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUICursor
#include <flixel/addons/ui/FlxUICursor.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISprite
#include <flixel/addons/ui/FlxUISprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_GamepadAutoConnectPreference
#include <flixel/addons/ui/GamepadAutoConnectPreference.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_SortMethod
#include <flixel/addons/ui/SortMethod.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_U
#include <flixel/addons/ui/U.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_XY
#include <flixel/addons/ui/XY.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ICursorPointable
#include <flixel/addons/ui/interfaces/ICursorPointable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ILabeled
#include <flixel/addons/ui/interfaces/ILabeled.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxArrayUtil
#include <flixel/util/FlxArrayUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_27_new,"flixel.addons.ui.FlxUICursor","new",0x0bf8fb7d,"flixel.addons.ui.FlxUICursor.new","flixel/addons/ui/FlxUICursor.hx",27,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_48_findVisibleLocation,"flixel.addons.ui.FlxUICursor","findVisibleLocation",0x70b2b9ab,"flixel.addons.ui.FlxUICursor.findVisibleLocation","flixel/addons/ui/FlxUICursor.hx",48,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_119_getCurrentWidget,"flixel.addons.ui.FlxUICursor","getCurrentWidget",0x954e412a,"flixel.addons.ui.FlxUICursor.getCurrentWidget","flixel/addons/ui/FlxUICursor.hx",119,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_128_set_listIndex,"flixel.addons.ui.FlxUICursor","set_listIndex",0xbbda2114,"flixel.addons.ui.FlxUICursor.set_listIndex","flixel/addons/ui/FlxUICursor.hx",128,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_144_set_visible,"flixel.addons.ui.FlxUICursor","set_visible",0x5e2cefb2,"flixel.addons.ui.FlxUICursor.set_visible","flixel/addons/ui/FlxUICursor.hx",144,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_150_set_location,"flixel.addons.ui.FlxUICursor","set_location",0xd1a64ef5,"flixel.addons.ui.FlxUICursor.set_location","flixel/addons/ui/FlxUICursor.hx",150,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_166_set_gamepad,"flixel.addons.ui.FlxUICursor","set_gamepad",0x448e57e1,"flixel.addons.ui.FlxUICursor.set_gamepad","flixel/addons/ui/FlxUICursor.hx",166,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_189_get_gamepad,"flixel.addons.ui.FlxUICursor","get_gamepad",0x3a2150d5,"flixel.addons.ui.FlxUICursor.get_gamepad","flixel/addons/ui/FlxUICursor.hx",189,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_269_destroy,"flixel.addons.ui.FlxUICursor","destroy",0x543baa97,"flixel.addons.ui.FlxUICursor.destroy","flixel/addons/ui/FlxUICursor.hx",269,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_297_update,"flixel.addons.ui.FlxUICursor","update",0x0fd86b0c,"flixel.addons.ui.FlxUICursor.update","flixel/addons/ui/FlxUICursor.hx",297,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_330_addWidgetsFromUI,"flixel.addons.ui.FlxUICursor","addWidgetsFromUI",0xd07d3faf,"flixel.addons.ui.FlxUICursor.addWidgetsFromUI","flixel/addons/ui/FlxUICursor.hx",330,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_358_jumpTo,"flixel.addons.ui.FlxUICursor","jumpTo",0x90ea8b0c,"flixel.addons.ui.FlxUICursor.jumpTo","flixel/addons/ui/FlxUICursor.hx",358,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_391_jumpToXY,"flixel.addons.ui.FlxUICursor","jumpToXY",0x88ecb30d,"flixel.addons.ui.FlxUICursor.jumpToXY","flixel/addons/ui/FlxUICursor.hx",391,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_448_addWidgetList,"flixel.addons.ui.FlxUICursor","addWidgetList",0xa4f08520,"flixel.addons.ui.FlxUICursor.addWidgetList","flixel/addons/ui/FlxUICursor.hx",448,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_502_addWidget,"flixel.addons.ui.FlxUICursor","addWidget",0xaa5cc3a2,"flixel.addons.ui.FlxUICursor.addWidget","flixel/addons/ui/FlxUICursor.hx",502,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_522_sortWidgets,"flixel.addons.ui.FlxUICursor","sortWidgets",0x3ee9f48e,"flixel.addons.ui.FlxUICursor.sortWidgets","flixel/addons/ui/FlxUICursor.hx",522,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_537_clearWidgets,"flixel.addons.ui.FlxUICursor","clearWidgets",0x2632d765,"flixel.addons.ui.FlxUICursor.clearWidgets","flixel/addons/ui/FlxUICursor.hx",537,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_540_removeWidget,"flixel.addons.ui.FlxUICursor","removeWidget",0xdd6d546b,"flixel.addons.ui.FlxUICursor.removeWidget","flixel/addons/ui/FlxUICursor.hx",540,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_561_setDefaultKeys,"flixel.addons.ui.FlxUICursor","setDefaultKeys",0xd71836d6,"flixel.addons.ui.FlxUICursor.setDefaultKeys","flixel/addons/ui/FlxUICursor.hx",561,0xd77c8c34)
static const int _hx_array_data_79a4790b_34[] = {
	(int)16,
};
static const int _hx_array_data_79a4790b_35[] = {
	(int)16,
};
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_650_getGamepad,"flixel.addons.ui.FlxUICursor","getGamepad",0xafc4892e,"flixel.addons.ui.FlxUICursor.getGamepad","flixel/addons/ui/FlxUICursor.hx",650,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_673__sortIDVisible,"flixel.addons.ui.FlxUICursor","_sortIDVisible",0x79dbeefd,"flixel.addons.ui.FlxUICursor._sortIDVisible","flixel/addons/ui/FlxUICursor.hx",673,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_681__sortXYWidgetList,"flixel.addons.ui.FlxUICursor","_sortXYWidgetList",0x16b9553d,"flixel.addons.ui.FlxUICursor._sortXYWidgetList","flixel/addons/ui/FlxUICursor.hx",681,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_689__sortXYVisible,"flixel.addons.ui.FlxUICursor","_sortXYVisible",0x87247297,"flixel.addons.ui.FlxUICursor._sortXYVisible","flixel/addons/ui/FlxUICursor.hx",689,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_699__addToKeys,"flixel.addons.ui.FlxUICursor","_addToKeys",0x67642054,"flixel.addons.ui.FlxUICursor._addToKeys","flixel/addons/ui/FlxUICursor.hx",699,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_712__clearKeys,"flixel.addons.ui.FlxUICursor","_clearKeys",0xed476865,"flixel.addons.ui.FlxUICursor._clearKeys","flixel/addons/ui/FlxUICursor.hx",712,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_720__newKeys,"flixel.addons.ui.FlxUICursor","_newKeys",0xbfa453b8,"flixel.addons.ui.FlxUICursor._newKeys","flixel/addons/ui/FlxUICursor.hx",720,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_728__checkKeys,"flixel.addons.ui.FlxUICursor","_checkKeys",0xcd664920,"flixel.addons.ui.FlxUICursor._checkKeys","flixel/addons/ui/FlxUICursor.hx",728,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_792__clickKeysJustPressed,"flixel.addons.ui.FlxUICursor","_clickKeysJustPressed",0x0327bd16,"flixel.addons.ui.FlxUICursor._clickKeysJustPressed","flixel/addons/ui/FlxUICursor.hx",792,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_804__clickKeysPressed,"flixel.addons.ui.FlxUICursor","_clickKeysPressed",0x3a0ee1e2,"flixel.addons.ui.FlxUICursor._clickKeysPressed","flixel/addons/ui/FlxUICursor.hx",804,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_815__getWidgetPoint,"flixel.addons.ui.FlxUICursor","_getWidgetPoint",0xcea94c32,"flixel.addons.ui.FlxUICursor._getWidgetPoint","flixel/addons/ui/FlxUICursor.hx",815,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_850__doMouseMove,"flixel.addons.ui.FlxUICursor","_doMouseMove",0xd60b120f,"flixel.addons.ui.FlxUICursor._doMouseMove","flixel/addons/ui/FlxUICursor.hx",850,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_884__doPress,"flixel.addons.ui.FlxUICursor","_doPress",0xc485f93c,"flixel.addons.ui.FlxUICursor._doPress","flixel/addons/ui/FlxUICursor.hx",884,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_921__doRelease,"flixel.addons.ui.FlxUICursor","_doRelease",0x8beacbc0,"flixel.addons.ui.FlxUICursor._doRelease","flixel/addons/ui/FlxUICursor.hx",921,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_974__findNextY,"flixel.addons.ui.FlxUICursor","_findNextY",0xbaa89f51,"flixel.addons.ui.FlxUICursor._findNextY","flixel/addons/ui/FlxUICursor.hx",974,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_1047__wrapX,"flixel.addons.ui.FlxUICursor","_wrapX",0x550d8392,"flixel.addons.ui.FlxUICursor._wrapX","flixel/addons/ui/FlxUICursor.hx",1047,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_1060__wrapY,"flixel.addons.ui.FlxUICursor","_wrapY",0x550d8393,"flixel.addons.ui.FlxUICursor._wrapY","flixel/addons/ui/FlxUICursor.hx",1060,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_1136__doInput,"flixel.addons.ui.FlxUICursor","_doInput",0xba1b69c3,"flixel.addons.ui.FlxUICursor._doInput","flixel/addons/ui/FlxUICursor.hx",1136,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_1237__updateCursor,"flixel.addons.ui.FlxUICursor","_updateCursor",0x0235d9fb,"flixel.addons.ui.FlxUICursor._updateCursor","flixel/addons/ui/FlxUICursor.hx",1237,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_1297__flipAnchor,"flixel.addons.ui.FlxUICursor","_flipAnchor",0xd4c95e3e,"flixel.addons.ui.FlxUICursor._flipAnchor","flixel/addons/ui/FlxUICursor.hx",1297,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_204_boot,"flixel.addons.ui.FlxUICursor","boot",0x65fc1275,"flixel.addons.ui.FlxUICursor.boot","flixel/addons/ui/FlxUICursor.hx",204,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_205_boot,"flixel.addons.ui.FlxUICursor","boot",0x65fc1275,"flixel.addons.ui.FlxUICursor.boot","flixel/addons/ui/FlxUICursor.hx",205,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_206_boot,"flixel.addons.ui.FlxUICursor","boot",0x65fc1275,"flixel.addons.ui.FlxUICursor.boot","flixel/addons/ui/FlxUICursor.hx",206,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_207_boot,"flixel.addons.ui.FlxUICursor","boot",0x65fc1275,"flixel.addons.ui.FlxUICursor.boot","flixel/addons/ui/FlxUICursor.hx",207,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_209_boot,"flixel.addons.ui.FlxUICursor","boot",0x65fc1275,"flixel.addons.ui.FlxUICursor.boot","flixel/addons/ui/FlxUICursor.hx",209,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_210_boot,"flixel.addons.ui.FlxUICursor","boot",0x65fc1275,"flixel.addons.ui.FlxUICursor.boot","flixel/addons/ui/FlxUICursor.hx",210,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_211_boot,"flixel.addons.ui.FlxUICursor","boot",0x65fc1275,"flixel.addons.ui.FlxUICursor.boot","flixel/addons/ui/FlxUICursor.hx",211,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_212_boot,"flixel.addons.ui.FlxUICursor","boot",0x65fc1275,"flixel.addons.ui.FlxUICursor.boot","flixel/addons/ui/FlxUICursor.hx",212,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_222_boot,"flixel.addons.ui.FlxUICursor","boot",0x65fc1275,"flixel.addons.ui.FlxUICursor.boot","flixel/addons/ui/FlxUICursor.hx",222,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_223_boot,"flixel.addons.ui.FlxUICursor","boot",0x65fc1275,"flixel.addons.ui.FlxUICursor.boot","flixel/addons/ui/FlxUICursor.hx",223,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_224_boot,"flixel.addons.ui.FlxUICursor","boot",0x65fc1275,"flixel.addons.ui.FlxUICursor.boot","flixel/addons/ui/FlxUICursor.hx",224,0xd77c8c34)
namespace flixel{
namespace addons{
namespace ui{

void FlxUICursor_obj::__construct( ::Dynamic Callback,hx::Null< int >  __o_InputMethod,hx::Null< int >  __o_DefaultKeys, ::Dynamic Asset){
int InputMethod = __o_InputMethod.Default(1);
int DefaultKeys = __o_DefaultKeys.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_7e07195111da0df5_27_new)
HXLINE( 646)		this->_clickTime = ((Float)0);
HXLINE( 637)		this->_clickPressed = false;
HXLINE( 220)		this->inputMethod = (int)0;
HXLINE( 217)		this->dispatchEvents = true;
HXLINE( 163)		this->gamepadAutoConnect = ::flixel::addons::ui::GamepadAutoConnectPreference_obj::FirstActive_dyn();
HXLINE(  34)		this->listIndex = (int)0;
HXLINE(  33)		this->location = (int)-1;
HXLINE(  31)		this->wrap = true;
HXLINE( 237)		if (hx::IsNull( Asset )) {
HXLINE( 238)			if ((::flixel::FlxG_obj::height < (int)400)) {
HXLINE( 239)				Asset = HX_("flixel/flixel-ui/img/finger_small.png",35,b3,60,fc);
            			}
            			else {
HXLINE( 241)				Asset = HX_("flixel/flixel-ui/img/finger_big.png",ee,88,a9,18);
            			}
            		}
HXLINE( 245)		super::__construct((int)0,(int)0,Asset);
HXLINE( 247)		this->inputMethod = InputMethod;
HXLINE( 248)		this->_lists = ::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("width",06,b6,62,ca),(int)0)
            			->setFixed(1,HX_("x",78,00,00,00),(int)0)
            			->setFixed(2,HX_("y",79,00,00,00),(int)0)
            			->setFixed(3,HX_("height",e7,07,4c,02),(int)0)
            			->setFixed(4,HX_("widgets",2f,1c,67,28),::Array_obj< ::Dynamic>::__new(0))));
HXLINE( 249)		this->_widgets = ( (::Array< ::Dynamic>)(this->_lists->__get((int)0)->__Field(HX_("widgets",2f,1c,67,28),hx::paccDynamic)) );
HXLINE( 250)		this->anchor =  ::flixel::addons::ui::Anchor_obj::__alloc( HX_CTX ,(int)-2,(int)0,HX_("left",07,08,b0,47),HX_("center",d5,25,db,05),HX_("right",dc,0b,64,e9),HX_("center",d5,25,db,05));
HXLINE( 251)		this->setDefaultKeys(DefaultKeys);
HXLINE( 252)		this->callback = Callback;
HXLINE( 254)		this->scrollFactor->set((int)0,(int)0);
            	}

Dynamic FlxUICursor_obj::__CreateEmpty() { return new FlxUICursor_obj; }

void *FlxUICursor_obj::_hx_vtable = 0;

Dynamic FlxUICursor_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxUICursor_obj > _hx_result = new FlxUICursor_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool FlxUICursor_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e105115) {
		if (inClassId<=(int)0x25a685e0) {
			if (inClassId<=(int)0x0b6ffd77) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
			} else {
				return inClassId==(int)0x25a685e0;
			}
		} else {
			return inClassId==(int)0x2e105115;
		}
	} else {
		return inClassId==(int)0x761e0d59 || inClassId==(int)0x7eb12c44;
	}
}

void FlxUICursor_obj::findVisibleLocation(int loc,hx::Null< bool >  __o_forwardIfInvisible,hx::Null< bool >  __o_wrap){
bool forwardIfInvisible = __o_forwardIfInvisible.Default(true);
bool wrap = __o_wrap.Default(true);
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_48_findVisibleLocation)
HXLINE(  49)		this->set_location(loc);
HXLINE(  50)		if ((this->location == (int)-1)) {
HXLINE(  50)			return;
            		}
HXLINE(  52)		bool wrapped = false;
HXLINE(  53)		while(true){
HXLINE(  53)			bool _hx_tmp;
HXDLIN(  53)			if (hx::IsNotNull( this->_widgets->__get(this->location) )) {
HXLINE(  53)				_hx_tmp = (( (bool)(this->_widgets->__get(this->location)->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) ) == false);
            			}
            			else {
HXLINE(  53)				_hx_tmp = true;
            			}
HXDLIN(  53)			if (!(_hx_tmp)) {
HXLINE(  53)				goto _hx_goto_1;
            			}
HXLINE(  55)			if (forwardIfInvisible) {
HXLINE(  57)				int _hx_tmp1 = this->location;
HXDLIN(  57)				if ((_hx_tmp1 == (this->_widgets->length - (int)1))) {
HXLINE(  59)					if (wrap) {
HXLINE(  61)						if (!(wrapped)) {
HXLINE(  63)							wrapped = true;
HXLINE(  64)							this->set_location((int)0);
            						}
            						else {
HXLINE(  68)							this->set_location((int)-1);
HXLINE(  69)							return;
            						}
            					}
            					else {
HXLINE(  74)						this->set_location((int)-1);
HXLINE(  75)						return;
            					}
            				}
            				else {
HXLINE(  80)					 ::flixel::addons::ui::FlxUICursor _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  80)					int _g1 = _g->location;
HXDLIN(  80)					_g->set_location((_g1 + (int)1));
            				}
            			}
            			else {
HXLINE(  85)				if ((this->location == (int)0)) {
HXLINE(  87)					if (wrap) {
HXLINE(  89)						if (!(wrapped)) {
HXLINE(  91)							wrapped = true;
HXLINE(  92)							this->set_location((this->_widgets->length - (int)1));
            						}
            						else {
HXLINE(  96)							this->set_location((int)-1);
HXLINE(  97)							return;
            						}
            					}
            					else {
HXLINE( 102)						this->set_location((int)-1);
HXLINE( 103)						return;
            					}
            				}
            				else {
HXLINE( 108)					 ::flixel::addons::ui::FlxUICursor _g2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 108)					int _g11 = _g2->location;
HXDLIN( 108)					_g2->set_location((_g11 - (int)1));
            				}
            			}
            		}
            		_hx_goto_1:;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUICursor_obj,findVisibleLocation,(void))

::Dynamic FlxUICursor_obj::getCurrentWidget(){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_119_getCurrentWidget)
HXLINE( 120)		bool _hx_tmp;
HXDLIN( 120)		bool _hx_tmp1;
HXDLIN( 120)		if (hx::IsNotNull( this->_widgets )) {
HXLINE( 120)			_hx_tmp1 = (this->location >= (int)0);
            		}
            		else {
HXLINE( 120)			_hx_tmp1 = false;
            		}
HXDLIN( 120)		if (_hx_tmp1) {
HXLINE( 120)			_hx_tmp = (this->location < this->_widgets->length);
            		}
            		else {
HXLINE( 120)			_hx_tmp = false;
            		}
HXDLIN( 120)		if (_hx_tmp) {
HXLINE( 122)			return this->_widgets->__get(this->location);
            		}
HXLINE( 124)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUICursor_obj,getCurrentWidget,return )

int FlxUICursor_obj::set_listIndex(int i){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_128_set_listIndex)
HXLINE( 129)		if ((i >= this->_lists->length)) {
HXLINE( 131)			i = (this->_lists->length - (int)1);
            		}
            		else {
HXLINE( 133)			if ((i < (int)0)) {
HXLINE( 135)				i = (int)0;
            			}
            		}
HXLINE( 137)		this->listIndex = i;
HXLINE( 138)		this->set_location((int)0);
HXLINE( 139)		this->_updateCursor();
HXLINE( 140)		return this->listIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,set_listIndex,return )

bool FlxUICursor_obj::set_visible(bool b){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_144_set_visible)
HXLINE( 145)		b = this->super::set_visible(b);
HXLINE( 146)		return b;
            	}


int FlxUICursor_obj::set_location(int i){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_150_set_location)
HXLINE( 151)		if ((i >= this->_widgets->length)) {
HXLINE( 153)			i = (this->_widgets->length - (int)1);
            		}
HXLINE( 155)		this->location = i;
HXLINE( 156)		this->_updateCursor();
HXLINE( 157)		return this->location;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,set_location,return )

 ::flixel::input::gamepad::FlxGamepad FlxUICursor_obj::set_gamepad( ::flixel::input::gamepad::FlxGamepad g){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_166_set_gamepad)
HXLINE( 167)		this->_gamepad = g;
HXLINE( 168)		this->setDefaultKeys(this->_defaultCode);
HXLINE( 169)		::Array< ::Dynamic> arr = ::Array_obj< ::Dynamic>::__new(5)->init(0,this->keysUp)->init(1,this->keysDown)->init(2,this->keysLeft)->init(3,this->keysRight)->init(4,this->keysClick);
HXLINE( 170)		{
HXLINE( 170)			int _g = (int)0;
HXDLIN( 170)			while((_g < arr->length)){
HXLINE( 170)				::Array< ::Dynamic> list = arr->__get(_g).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 170)				_g = (_g + (int)1);
HXLINE( 172)				if (hx::IsNotNull( list )) {
HXLINE( 174)					int _g1 = (int)0;
HXDLIN( 174)					while((_g1 < list->length)){
HXLINE( 174)						 ::flixel::addons::ui::FlxBaseMultiInput keys = list->__get(_g1).StaticCast<  ::flixel::addons::ui::FlxBaseMultiInput >();
HXDLIN( 174)						_g1 = (_g1 + (int)1);
HXLINE( 176)						if (::Std_obj::is(keys,hx::ClassOf< ::flixel::addons::ui::FlxMultiGamepad >())) {
HXLINE( 178)							 ::flixel::addons::ui::FlxMultiGamepad fmg = ( ( ::flixel::addons::ui::FlxMultiGamepad)(keys) );
HXLINE( 179)							fmg->gamepad = this->_gamepad;
            						}
            					}
            				}
            			}
            		}
HXLINE( 184)		return g;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,set_gamepad,return )

 ::flixel::input::gamepad::FlxGamepad FlxUICursor_obj::get_gamepad(){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_189_get_gamepad)
HXDLIN( 189)		return this->_gamepad;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUICursor_obj,get_gamepad,return )

void FlxUICursor_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_269_destroy)
HXLINE( 270)		this->super::destroy();
HXLINE( 280)		this->keysUp = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->keysUp);
HXLINE( 281)		this->keysDown = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->keysDown);
HXLINE( 282)		this->keysLeft = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->keysLeft);
HXLINE( 283)		this->keysRight = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->keysRight);
HXLINE( 284)		this->keysClick = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->keysClick);
HXLINE( 286)		this->anchor = ( ( ::flixel::addons::ui::Anchor)(::flixel::util::FlxDestroyUtil_obj::destroy(this->anchor)) );
HXLINE( 288)		{
HXLINE( 288)			int _g = (int)0;
HXDLIN( 288)			::Array< ::Dynamic> _g1 = this->_lists;
HXDLIN( 288)			while((_g < _g1->length)){
HXLINE( 288)				 ::Dynamic l = _g1->__get(_g);
HXDLIN( 288)				_g = (_g + (int)1);
HXLINE( 290)				::flixel::addons::ui::U_obj::clearArraySoft(( (::cpp::VirtualArray)(l->__Field(HX_("widgets",2f,1c,67,28),hx::paccDynamic)) ));
            			}
            		}
HXLINE( 293)		::flixel::addons::ui::U_obj::clearArraySoft(this->_lists);
HXLINE( 294)		this->_widgets = null();
            	}


void FlxUICursor_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_297_update)
HXLINE( 299)		if (hx::IsNull( this->get_gamepad() )) {
HXLINE( 301)			 ::flixel::input::gamepad::FlxGamepad g = this->getGamepad(false);
HXLINE( 302)			if (hx::IsNotNull( g )) {
HXLINE( 304)				this->set_gamepad(g);
            			}
            		}
HXLINE( 323)		this->_checkKeys();
HXLINE( 324)		 ::flixel::addons::ui::FlxUICursor _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 324)		_hx_tmp->_clickTime = (_hx_tmp->_clickTime + elapsed);
HXLINE( 325)		this->super::update(elapsed);
            	}


void FlxUICursor_obj::addWidgetsFromUI( ::flixel::addons::ui::FlxUI ui){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_330_addWidgetsFromUI)
HXDLIN( 330)		if (hx::IsNotNull( ui->cursorLists )) {
HXLINE( 332)			{
HXLINE( 332)				int _g = (int)0;
HXDLIN( 332)				::Array< ::Dynamic> _g1 = ui->cursorLists;
HXDLIN( 332)				while((_g < _g1->length)){
HXLINE( 332)					::Array< ::Dynamic> list = _g1->__get(_g).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 332)					_g = (_g + (int)1);
HXLINE( 334)					this->addWidgetList(list);
            				}
            			}
HXLINE( 336)			this->_widgets = ( (::Array< ::Dynamic>)(this->_lists->__get((int)0)->__Field(HX_("widgets",2f,1c,67,28),hx::paccDynamic)) );
HXLINE( 337)			this->set_location((int)0);
HXLINE( 338)			this->set_listIndex((int)0);
            		}
            		else {
HXLINE( 342)			int _g2 = (int)0;
HXDLIN( 342)			::Array< ::Dynamic> _g11 = ui->group->members;
HXDLIN( 342)			while((_g2 < _g11->length)){
HXLINE( 342)				 ::flixel::FlxSprite widget = _g11->__get(_g2).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 342)				_g2 = (_g2 + (int)1);
HXLINE( 344)				bool _hx_tmp;
HXDLIN( 344)				if (!(::Std_obj::is(widget,hx::ClassOf< ::flixel::addons::ui::interfaces::ICursorPointable >()))) {
HXLINE( 344)					_hx_tmp = ::Std_obj::is(widget,hx::ClassOf< ::flixel::addons::ui::FlxUIGroup >());
            				}
            				else {
HXLINE( 344)					_hx_tmp = true;
            				}
HXDLIN( 344)				if (_hx_tmp) {
HXLINE( 346)					this->addWidget(widget);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,addWidgetsFromUI,(void))

bool FlxUICursor_obj::jumpTo(::Dynamic widget){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_358_jumpTo)
HXLINE( 359)		int listi = (int)0;
HXLINE( 360)		int i = (int)0;
HXLINE( 361)		if (hx::IsNotNull( this->_lists )) {
HXLINE( 363)			int _g = (int)0;
HXDLIN( 363)			::Array< ::Dynamic> _g1 = this->_lists;
HXDLIN( 363)			while((_g < _g1->length)){
HXLINE( 363)				 ::Dynamic list = _g1->__get(_g);
HXDLIN( 363)				_g = (_g + (int)1);
HXLINE( 365)				i = ( (::Array< ::Dynamic>)(list->__Field(HX_("widgets",2f,1c,67,28),hx::paccDynamic)) )->indexOf(widget,null());
HXLINE( 366)				if ((i != (int)-1)) {
HXLINE( 368)					this->set_listIndex(listi);
HXLINE( 369)					this->set_location(i);
HXLINE( 370)					return true;
            				}
HXLINE( 372)				listi = (listi + (int)1);
            			}
            		}
            		else {
HXLINE( 377)			i = this->_widgets->indexOf(widget,null());
HXLINE( 378)			this->set_location(i);
HXLINE( 379)			return true;
            		}
HXLINE( 381)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,jumpTo,return )

bool FlxUICursor_obj::jumpToXY(Float X,Float Y){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_391_jumpToXY)
HXLINE( 392)		int listi = (int)0;
HXLINE( 394)		Float bestd2 = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 395)		int bestli = (int)-1;
HXLINE( 396)		int besti = (int)-1;
HXLINE( 398)		if (hx::IsNotNull( this->_lists )) {
HXLINE( 400)			{
HXLINE( 400)				int _g = (int)0;
HXDLIN( 400)				::Array< ::Dynamic> _g1 = this->_lists;
HXDLIN( 400)				while((_g < _g1->length)){
HXLINE( 400)					 ::Dynamic list = _g1->__get(_g);
HXDLIN( 400)					_g = (_g + (int)1);
HXLINE( 402)					{
HXLINE( 402)						int _g3 = (int)0;
HXDLIN( 402)						int _g2 = ( (::Array< ::Dynamic>)(list->__Field(HX_("widgets",2f,1c,67,28),hx::paccDynamic)) )->length;
HXDLIN( 402)						while((_g3 < _g2)){
HXLINE( 402)							_g3 = (_g3 + (int)1);
HXDLIN( 402)							int i = (_g3 - (int)1);
HXLINE( 403)							::Dynamic w =  ::Dynamic(list->__Field(HX_("widgets",2f,1c,67,28),hx::paccDynamic))->__GetItem(i);
HXLINE( 404)							bool _hx_tmp;
HXDLIN( 404)							bool _hx_tmp1;
HXDLIN( 404)							bool _hx_tmp2;
HXDLIN( 404)							bool _hx_tmp3;
HXDLIN( 404)							if ((( (bool)(w->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) ) == true)) {
HXLINE( 404)								_hx_tmp3 = (X >= ( (Float)(w->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ));
            							}
            							else {
HXLINE( 404)								_hx_tmp3 = false;
            							}
HXDLIN( 404)							if (_hx_tmp3) {
HXLINE( 404)								_hx_tmp2 = (Y >= ( (Float)(w->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ));
            							}
            							else {
HXLINE( 404)								_hx_tmp2 = false;
            							}
HXDLIN( 404)							if (_hx_tmp2) {
HXLINE( 404)								Float w1 = ( (Float)(w->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 404)								_hx_tmp1 = (X <= (w1 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(w)));
            							}
            							else {
HXLINE( 404)								_hx_tmp1 = false;
            							}
HXDLIN( 404)							if (_hx_tmp1) {
HXLINE( 404)								Float w2 = ( (Float)(w->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 404)								_hx_tmp = (Y <= (w2 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(w)));
            							}
            							else {
HXLINE( 404)								_hx_tmp = false;
            							}
HXDLIN( 404)							if (_hx_tmp) {
HXLINE( 406)								Float w3 = ( (Float)(w->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 406)								Float dx = ((w3 + ((Float)::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(w) / (Float)(int)2)) - X);
HXLINE( 407)								Float w4 = ( (Float)(w->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 407)								Float dy = ((w4 + ((Float)::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(w) / (Float)(int)2)) - Y);
HXLINE( 408)								Float d2 = ((dx * dx) + (dy * dy));
HXLINE( 409)								if ((d2 < bestd2)) {
HXLINE( 410)									bestd2 = d2;
HXLINE( 411)									bestli = listi;
HXLINE( 412)									besti = i;
            								}
            							}
            						}
            					}
HXLINE( 416)					listi = (listi + (int)1);
            				}
            			}
HXLINE( 418)			bool _hx_tmp4;
HXDLIN( 418)			if ((bestli != (int)-1)) {
HXLINE( 418)				_hx_tmp4 = (besti != (int)-1);
            			}
            			else {
HXLINE( 418)				_hx_tmp4 = false;
            			}
HXDLIN( 418)			if (_hx_tmp4) {
HXLINE( 419)				this->set_listIndex(bestli);
HXLINE( 420)				this->set_location(besti);
HXLINE( 421)				return true;
            			}
            		}
            		else {
HXLINE( 426)			{
HXLINE( 426)				int _g11 = (int)0;
HXDLIN( 426)				int _g4 = this->_widgets->length;
HXDLIN( 426)				while((_g11 < _g4)){
HXLINE( 426)					_g11 = (_g11 + (int)1);
HXDLIN( 426)					int i1 = (_g11 - (int)1);
HXLINE( 427)					::Dynamic w5 = this->_widgets->__get(i1);
HXLINE( 428)					bool _hx_tmp5;
HXDLIN( 428)					bool _hx_tmp6;
HXDLIN( 428)					bool _hx_tmp7;
HXDLIN( 428)					bool _hx_tmp8;
HXDLIN( 428)					if ((( (bool)(w5->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) ) == true)) {
HXLINE( 428)						_hx_tmp8 = (X >= ( (Float)(w5->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ));
            					}
            					else {
HXLINE( 428)						_hx_tmp8 = false;
            					}
HXDLIN( 428)					if (_hx_tmp8) {
HXLINE( 428)						_hx_tmp7 = (Y >= ( (Float)(w5->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ));
            					}
            					else {
HXLINE( 428)						_hx_tmp7 = false;
            					}
HXDLIN( 428)					if (_hx_tmp7) {
HXLINE( 428)						Float w6 = ( (Float)(w5->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 428)						_hx_tmp6 = (X <= (w6 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(w5)));
            					}
            					else {
HXLINE( 428)						_hx_tmp6 = false;
            					}
HXDLIN( 428)					if (_hx_tmp6) {
HXLINE( 428)						Float w7 = ( (Float)(w5->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 428)						_hx_tmp5 = (Y <= (w7 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(w5)));
            					}
            					else {
HXLINE( 428)						_hx_tmp5 = false;
            					}
HXDLIN( 428)					if (_hx_tmp5) {
HXLINE( 430)						Float w8 = ( (Float)(w5->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 430)						Float dx1 = ((w8 + ((Float)::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(w5) / (Float)(int)2)) - X);
HXLINE( 431)						Float w9 = ( (Float)(w5->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 431)						Float dy1 = ((w9 + ((Float)::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(w5) / (Float)(int)2)) - Y);
HXLINE( 432)						Float d21 = ((dx1 * dx1) + (dy1 * dy1));
HXLINE( 433)						if ((d21 < bestd2)) {
HXLINE( 434)							bestd2 = d21;
HXLINE( 435)							besti = i1;
            						}
            					}
            				}
            			}
HXLINE( 439)			if ((besti != (int)-1)) {
HXLINE( 440)				this->set_location(besti);
HXLINE( 441)				return true;
            			}
            		}
HXLINE( 444)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUICursor_obj,jumpToXY,return )

void FlxUICursor_obj::addWidgetList(::Array< ::Dynamic> list){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_448_addWidgetList)
HXLINE( 449)		{
HXLINE( 449)			int _g = (int)0;
HXDLIN( 449)			::Array< ::Dynamic> _g1 = this->_lists;
HXDLIN( 449)			while((_g < _g1->length)){
HXLINE( 449)				 ::Dynamic l = _g1->__get(_g);
HXDLIN( 449)				_g = (_g + (int)1);
HXLINE( 451)				if (::flixel::util::FlxArrayUtil_obj::equals(( (::cpp::VirtualArray)(l->__Field(HX_("widgets",2f,1c,67,28),hx::paccDynamic)) ),list)) {
HXLINE( 453)					return;
            				}
            			}
            		}
HXLINE( 457)		Float x1 = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 458)		Float y1 = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 459)		Float x2 = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 460)		Float y2 = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 462)		{
HXLINE( 462)			int _g2 = (int)0;
HXDLIN( 462)			while((_g2 < list->length)){
HXLINE( 462)				::Dynamic w = list->__get(_g2);
HXDLIN( 462)				_g2 = (_g2 + (int)1);
HXLINE( 464)				if ((( (Float)(w->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) < x1)) {
HXLINE( 464)					x1 = ( (Float)(w->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
            				}
HXLINE( 465)				if ((( (Float)(w->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) < y1)) {
HXLINE( 465)					y1 = ( (Float)(w->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
            				}
HXLINE( 466)				Float w1 = ( (Float)(w->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 466)				if (((w1 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(w)) > x2)) {
HXLINE( 466)					x2 = ( (Float)(w->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
            				}
HXLINE( 467)				Float w2 = ( (Float)(w->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 467)				if (((w2 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(w)) > y2)) {
HXLINE( 467)					y2 = ( (Float)(w->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
            				}
            			}
            		}
HXLINE( 470)		 ::Dynamic theList = null();
HXLINE( 471)		bool _hx_tmp;
HXDLIN( 471)		bool _hx_tmp1;
HXDLIN( 471)		if ((this->_lists->length == (int)1)) {
HXLINE( 471)			_hx_tmp1 = hx::IsNotNull( ( (::Array< ::Dynamic>)(this->_lists->__get((int)0)->__Field(HX_("widgets",2f,1c,67,28),hx::paccDynamic)) ) );
            		}
            		else {
HXLINE( 471)			_hx_tmp1 = false;
            		}
HXDLIN( 471)		if (_hx_tmp1) {
HXLINE( 471)			_hx_tmp = (( (::Array< ::Dynamic>)(this->_lists->__get((int)0)->__Field(HX_("widgets",2f,1c,67,28),hx::paccDynamic)) )->length == (int)0);
            		}
            		else {
HXLINE( 471)			_hx_tmp = false;
            		}
HXDLIN( 471)		if (_hx_tmp) {
HXLINE( 473)			this->_lists->__get((int)0)->__SetField(HX_("widgets",2f,1c,67,28),::Array_obj< ::Dynamic>::__new(0),hx::paccDynamic);
HXLINE( 474)			this->_lists->__get((int)0)->__SetField(HX_("x",78,00,00,00),::Std_obj::_hx_int(x1),hx::paccDynamic);
HXLINE( 475)			this->_lists->__get((int)0)->__SetField(HX_("y",79,00,00,00),::Std_obj::_hx_int(y1),hx::paccDynamic);
HXLINE( 476)			this->_lists->__get((int)0)->__SetField(HX_("width",06,b6,62,ca),::Std_obj::_hx_int((x2 - x1)),hx::paccDynamic);
HXLINE( 477)			this->_lists->__get((int)0)->__SetField(HX_("height",e7,07,4c,02),::Std_obj::_hx_int((y2 - y1)),hx::paccDynamic);
HXLINE( 478)			theList = this->_lists->__get((int)0);
            		}
            		else {
HXLINE( 482)			::Array< ::Dynamic> _hx_tmp2 = this->_lists;
HXDLIN( 482)			int _hx_tmp3 = ::Std_obj::_hx_int(x1);
HXDLIN( 482)			int _hx_tmp4 = ::Std_obj::_hx_int(y1);
HXDLIN( 482)			int _hx_tmp5 = ::Std_obj::_hx_int((x2 - x1));
HXDLIN( 482)			_hx_tmp2->push( ::Dynamic(hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("width",06,b6,62,ca),_hx_tmp5)
            				->setFixed(1,HX_("x",78,00,00,00),_hx_tmp3)
            				->setFixed(2,HX_("y",79,00,00,00),_hx_tmp4)
            				->setFixed(3,HX_("height",e7,07,4c,02),::Std_obj::_hx_int((y2 - y1)))
            				->setFixed(4,HX_("widgets",2f,1c,67,28),::Array_obj< ::Dynamic>::__new(0))));
HXLINE( 483)			::Array< ::Dynamic> theList1 = this->_lists;
HXDLIN( 483)			theList = theList1->__get((this->_lists->length - (int)1));
            		}
HXLINE( 486)		::Array< ::Dynamic> oldWidgets = this->_widgets;
HXLINE( 487)		this->_widgets = ( (::Array< ::Dynamic>)(theList->__Field(HX_("widgets",2f,1c,67,28),hx::paccDynamic)) );
HXLINE( 488)		{
HXLINE( 488)			int _g3 = (int)0;
HXDLIN( 488)			while((_g3 < list->length)){
HXLINE( 488)				::Dynamic ifw = list->__get(_g3);
HXDLIN( 488)				_g3 = (_g3 + (int)1);
HXLINE( 490)				this->addWidget(ifw);
            			}
            		}
HXLINE( 492)		this->_widgets = oldWidgets;
HXLINE( 494)		this->_lists->sort(this->_sortXYWidgetList_dyn());
HXLINE( 495)		{
HXLINE( 495)			int _g4 = (int)0;
HXDLIN( 495)			::Array< ::Dynamic> _g11 = this->_lists;
HXDLIN( 495)			while((_g4 < _g11->length)){
HXLINE( 495)				 ::Dynamic widgetList = _g11->__get(_g4);
HXDLIN( 495)				_g4 = (_g4 + (int)1);
HXLINE( 497)				( (::Array< ::Dynamic>)(widgetList->__Field(HX_("widgets",2f,1c,67,28),hx::paccDynamic)) )->sort(this->_sortXYVisible_dyn());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,addWidgetList,(void))

void FlxUICursor_obj::addWidget(::Dynamic widget){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_502_addWidget)
HXLINE( 503)		if (::Std_obj::is(widget,hx::ClassOf< ::flixel::addons::ui::interfaces::ICursorPointable >())) {
HXLINE( 505)			this->_widgets->push(widget);
            		}
            		else {
HXLINE( 507)			if (::Std_obj::is(widget,hx::ClassOf< ::flixel::addons::ui::FlxUIGroup >())) {
HXLINE( 509)				 ::flixel::addons::ui::FlxUIGroup g = ( ( ::flixel::addons::ui::FlxUIGroup)(widget) );
HXLINE( 510)				{
HXLINE( 510)					int _g = (int)0;
HXDLIN( 510)					::Array< ::Dynamic> _g1 = g->group->members;
HXDLIN( 510)					while((_g < _g1->length)){
HXLINE( 510)						 ::flixel::FlxSprite member = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 510)						_g = (_g + (int)1);
HXLINE( 512)						if (::Std_obj::is(member,hx::ClassOf< ::flixel::addons::ui::interfaces::IFlxUIWidget >())) {
HXLINE( 514)							this->addWidget(member);
            						}
            					}
            				}
            			}
            		}
HXLINE( 518)		this->_widgets->sort(this->_sortXYVisible_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,addWidget,(void))

void FlxUICursor_obj::sortWidgets( ::flixel::addons::ui::SortMethod method,::Array< ::Dynamic> list){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_522_sortWidgets)
HXLINE( 523)		if (hx::IsNull( list )) {
HXLINE( 525)			list = this->_widgets;
            		}
HXLINE( 527)		switch((int)(_hx_getEnumValueIndex(method))){
            			case (int)0: {
HXLINE( 529)				list->sort(this->_sortXYVisible_dyn());
            			}
            			break;
            			case (int)1: {
HXLINE( 530)				list->sort(this->_sortIDVisible_dyn());
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUICursor_obj,sortWidgets,(void))

void FlxUICursor_obj::clearWidgets(){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_537_clearWidgets)
HXDLIN( 537)		::flixel::util::FlxArrayUtil_obj::clearArray(this->_widgets,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUICursor_obj,clearWidgets,(void))

bool FlxUICursor_obj::removeWidget(::Dynamic widget,::Array< ::Dynamic> list){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_540_removeWidget)
HXLINE( 541)		if (hx::IsNull( list )) {
HXLINE( 543)			list = this->_widgets;
            		}
HXLINE( 545)		bool value = false;
HXLINE( 546)		if (hx::IsNotNull( list )) {
HXLINE( 548)			if ((list->indexOf(widget,null()) != (int)-1)) {
HXLINE( 549)				value = list->remove(widget);
HXLINE( 550)				list->sort(this->_sortXYVisible_dyn());
            			}
            		}
HXLINE( 553)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUICursor_obj,removeWidget,return )

void FlxUICursor_obj::setDefaultKeys(int code){
            	HX_GC_STACKFRAME(&_hx_pos_7e07195111da0df5_561_setDefaultKeys)
HXLINE( 562)		this->_defaultCode = code;
HXLINE( 563)		this->_clearKeys();
HXLINE( 564)		this->_newKeys();
HXLINE( 565)		if ((((int)code & (int)(int)1) == (int)1)) {
HXLINE( 566)			::Array< ::Dynamic> _hx_tmp = this->keysRight;
HXDLIN( 566)			this->_addToKeys(_hx_tmp, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)9,null(),::Array_obj< int >::fromData( _hx_array_data_79a4790b_34,1)));
HXLINE( 567)			::Array< ::Dynamic> _hx_tmp1 = this->keysLeft;
HXDLIN( 567)			this->_addToKeys(_hx_tmp1, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)9,::Array_obj< int >::fromData( _hx_array_data_79a4790b_35,1),null()));
HXLINE( 568)			::Array< ::Dynamic> _hx_tmp2 = this->keysClick;
HXDLIN( 568)			this->_addToKeys(_hx_tmp2, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)13,null(),null()));
            		}
HXLINE( 570)		if ((((int)code & (int)(int)256) == (int)256)) {
HXLINE( 571)			::Array< ::Dynamic> _hx_tmp3 = this->keysRight;
HXDLIN( 571)			this->_addToKeys(_hx_tmp3, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)39,null(),null()));
HXLINE( 572)			::Array< ::Dynamic> _hx_tmp4 = this->keysLeft;
HXDLIN( 572)			this->_addToKeys(_hx_tmp4, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)37,null(),null()));
HXLINE( 573)			::Array< ::Dynamic> _hx_tmp5 = this->keysDown;
HXDLIN( 573)			this->_addToKeys(_hx_tmp5, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)40,null(),null()));
HXLINE( 574)			::Array< ::Dynamic> _hx_tmp6 = this->keysUp;
HXDLIN( 574)			this->_addToKeys(_hx_tmp6, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)38,null(),null()));
HXLINE( 575)			::Array< ::Dynamic> _hx_tmp7 = this->keysClick;
HXDLIN( 575)			this->_addToKeys(_hx_tmp7, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)13,null(),null()));
            		}
HXLINE( 577)		if ((((int)code & (int)(int)16) == (int)16)) {
HXLINE( 578)			::Array< ::Dynamic> _hx_tmp8 = this->keysRight;
HXDLIN( 578)			this->_addToKeys(_hx_tmp8, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)68,null(),null()));
HXLINE( 579)			::Array< ::Dynamic> _hx_tmp9 = this->keysLeft;
HXDLIN( 579)			this->_addToKeys(_hx_tmp9, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)65,null(),null()));
HXLINE( 580)			::Array< ::Dynamic> _hx_tmp10 = this->keysDown;
HXDLIN( 580)			this->_addToKeys(_hx_tmp10, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)83,null(),null()));
HXLINE( 581)			::Array< ::Dynamic> _hx_tmp11 = this->keysUp;
HXDLIN( 581)			this->_addToKeys(_hx_tmp11, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)87,null(),null()));
HXLINE( 582)			::Array< ::Dynamic> _hx_tmp12 = this->keysClick;
HXDLIN( 582)			this->_addToKeys(_hx_tmp12, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)13,null(),null()));
            		}
HXLINE( 584)		if ((((int)code & (int)(int)4096) == (int)4096)) {
HXLINE( 585)			::Array< ::Dynamic> _hx_tmp13 = this->keysRight;
HXDLIN( 585)			this->_addToKeys(_hx_tmp13, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)102,null(),null()));
HXLINE( 586)			::Array< ::Dynamic> _hx_tmp14 = this->keysLeft;
HXDLIN( 586)			this->_addToKeys(_hx_tmp14, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)100,null(),null()));
HXLINE( 587)			::Array< ::Dynamic> _hx_tmp15 = this->keysDown;
HXDLIN( 587)			this->_addToKeys(_hx_tmp15, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)98,null(),null()));
HXLINE( 588)			::Array< ::Dynamic> _hx_tmp16 = this->keysUp;
HXDLIN( 588)			this->_addToKeys(_hx_tmp16, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)104,null(),null()));
HXLINE( 589)			::Array< ::Dynamic> _hx_tmp17 = this->keysClick;
HXDLIN( 589)			this->_addToKeys(_hx_tmp17, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)13,null(),null()));
            		}
HXLINE( 594)		if (hx::IsNull( this->get_gamepad() )) {
HXLINE( 596)			this->_gamepad = this->getGamepad(null());
            		}
HXLINE( 599)		if ((((int)code & (int)(int)65536) == (int)65536)) {
HXLINE( 600)			::Array< ::Dynamic> _hx_tmp18 = this->keysLeft;
HXDLIN( 600)			this->_addToKeys(_hx_tmp18, ::flixel::addons::ui::FlxMultiGamepad_obj::__alloc( HX_CTX ,this->get_gamepad(),(int)13,null(),null()));
HXLINE( 601)			::Array< ::Dynamic> _hx_tmp19 = this->keysRight;
HXDLIN( 601)			this->_addToKeys(_hx_tmp19, ::flixel::addons::ui::FlxMultiGamepad_obj::__alloc( HX_CTX ,this->get_gamepad(),(int)14,null(),null()));
HXLINE( 602)			::Array< ::Dynamic> _hx_tmp20 = this->keysDown;
HXDLIN( 602)			this->_addToKeys(_hx_tmp20, ::flixel::addons::ui::FlxMultiGamepad_obj::__alloc( HX_CTX ,this->get_gamepad(),(int)12,null(),null()));
HXLINE( 603)			::Array< ::Dynamic> _hx_tmp21 = this->keysUp;
HXDLIN( 603)			this->_addToKeys(_hx_tmp21, ::flixel::addons::ui::FlxMultiGamepad_obj::__alloc( HX_CTX ,this->get_gamepad(),(int)11,null(),null()));
HXLINE( 604)			::Array< ::Dynamic> _hx_tmp22 = this->keysClick;
HXDLIN( 604)			this->_addToKeys(_hx_tmp22, ::flixel::addons::ui::FlxMultiGamepad_obj::__alloc( HX_CTX ,this->get_gamepad(),(int)0,null(),null()));
            		}
HXLINE( 606)		if ((((int)code & (int)(int)268435456) == (int)268435456)) {
HXLINE( 607)			::Array< ::Dynamic> _hx_tmp23 = this->keysLeft;
HXDLIN( 607)			this->_addToKeys(_hx_tmp23, ::flixel::addons::ui::FlxMultiGamepad_obj::__alloc( HX_CTX ,this->get_gamepad(),(int)4,null(),null()));
HXLINE( 608)			::Array< ::Dynamic> _hx_tmp24 = this->keysRight;
HXDLIN( 608)			this->_addToKeys(_hx_tmp24, ::flixel::addons::ui::FlxMultiGamepad_obj::__alloc( HX_CTX ,this->get_gamepad(),(int)5,null(),null()));
HXLINE( 609)			::Array< ::Dynamic> _hx_tmp25 = this->keysClick;
HXDLIN( 609)			this->_addToKeys(_hx_tmp25, ::flixel::addons::ui::FlxMultiGamepad_obj::__alloc( HX_CTX ,this->get_gamepad(),(int)0,null(),null()));
            		}
HXLINE( 611)		if ((((int)code & (int)(int)1048576) == (int)1048576)) {
HXLINE( 612)			::Array< ::Dynamic> _hx_tmp26 = this->keysLeft;
HXDLIN( 612)			 ::flixel::input::gamepad::FlxGamepad _hx_tmp27 = this->get_gamepad();
HXDLIN( 612)			this->_addToKeys(_hx_tmp26, ::flixel::addons::ui::FlxMultiGamepadAnalogStick_obj::__alloc( HX_CTX ,_hx_tmp27, ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("positive",b9,a6,fa,ca),false)
            				->setFixed(1,HX_("id",db,5b,00,00),(int)19)
            				->setFixed(2,HX_("axis",a1,1c,79,40),::flixel::addons::ui::XY_obj::X_dyn())),null(),null()));
HXLINE( 613)			::Array< ::Dynamic> _hx_tmp28 = this->keysRight;
HXDLIN( 613)			 ::flixel::input::gamepad::FlxGamepad _hx_tmp29 = this->get_gamepad();
HXDLIN( 613)			this->_addToKeys(_hx_tmp28, ::flixel::addons::ui::FlxMultiGamepadAnalogStick_obj::__alloc( HX_CTX ,_hx_tmp29, ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("positive",b9,a6,fa,ca),true)
            				->setFixed(1,HX_("id",db,5b,00,00),(int)19)
            				->setFixed(2,HX_("axis",a1,1c,79,40),::flixel::addons::ui::XY_obj::X_dyn())),null(),null()));
HXLINE( 614)			::Array< ::Dynamic> _hx_tmp30 = this->keysUp;
HXDLIN( 614)			 ::flixel::input::gamepad::FlxGamepad _hx_tmp31 = this->get_gamepad();
HXDLIN( 614)			this->_addToKeys(_hx_tmp30, ::flixel::addons::ui::FlxMultiGamepadAnalogStick_obj::__alloc( HX_CTX ,_hx_tmp31, ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("positive",b9,a6,fa,ca),false)
            				->setFixed(1,HX_("id",db,5b,00,00),(int)19)
            				->setFixed(2,HX_("axis",a1,1c,79,40),::flixel::addons::ui::XY_obj::Y_dyn())),null(),null()));
HXLINE( 615)			::Array< ::Dynamic> _hx_tmp32 = this->keysDown;
HXDLIN( 615)			 ::flixel::input::gamepad::FlxGamepad _hx_tmp33 = this->get_gamepad();
HXDLIN( 615)			this->_addToKeys(_hx_tmp32, ::flixel::addons::ui::FlxMultiGamepadAnalogStick_obj::__alloc( HX_CTX ,_hx_tmp33, ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("positive",b9,a6,fa,ca),true)
            				->setFixed(1,HX_("id",db,5b,00,00),(int)19)
            				->setFixed(2,HX_("axis",a1,1c,79,40),::flixel::addons::ui::XY_obj::Y_dyn())),null(),null()));
HXLINE( 616)			::Array< ::Dynamic> _hx_tmp34 = this->keysClick;
HXDLIN( 616)			this->_addToKeys(_hx_tmp34, ::flixel::addons::ui::FlxMultiGamepad_obj::__alloc( HX_CTX ,this->get_gamepad(),(int)0,null(),null()));
            		}
HXLINE( 618)		if ((((int)code & (int)(int)16777216) == (int)16777216)) {
HXLINE( 619)			::Array< ::Dynamic> _hx_tmp35 = this->keysLeft;
HXDLIN( 619)			 ::flixel::input::gamepad::FlxGamepad _hx_tmp36 = this->get_gamepad();
HXDLIN( 619)			this->_addToKeys(_hx_tmp35, ::flixel::addons::ui::FlxMultiGamepadAnalogStick_obj::__alloc( HX_CTX ,_hx_tmp36, ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("positive",b9,a6,fa,ca),false)
            				->setFixed(1,HX_("id",db,5b,00,00),(int)20)
            				->setFixed(2,HX_("axis",a1,1c,79,40),::flixel::addons::ui::XY_obj::X_dyn())),null(),null()));
HXLINE( 620)			::Array< ::Dynamic> _hx_tmp37 = this->keysRight;
HXDLIN( 620)			 ::flixel::input::gamepad::FlxGamepad _hx_tmp38 = this->get_gamepad();
HXDLIN( 620)			this->_addToKeys(_hx_tmp37, ::flixel::addons::ui::FlxMultiGamepadAnalogStick_obj::__alloc( HX_CTX ,_hx_tmp38, ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("positive",b9,a6,fa,ca),true)
            				->setFixed(1,HX_("id",db,5b,00,00),(int)20)
            				->setFixed(2,HX_("axis",a1,1c,79,40),::flixel::addons::ui::XY_obj::X_dyn())),null(),null()));
HXLINE( 621)			::Array< ::Dynamic> _hx_tmp39 = this->keysUp;
HXDLIN( 621)			 ::flixel::input::gamepad::FlxGamepad _hx_tmp40 = this->get_gamepad();
HXDLIN( 621)			this->_addToKeys(_hx_tmp39, ::flixel::addons::ui::FlxMultiGamepadAnalogStick_obj::__alloc( HX_CTX ,_hx_tmp40, ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("positive",b9,a6,fa,ca),false)
            				->setFixed(1,HX_("id",db,5b,00,00),(int)20)
            				->setFixed(2,HX_("axis",a1,1c,79,40),::flixel::addons::ui::XY_obj::Y_dyn())),null(),null()));
HXLINE( 622)			::Array< ::Dynamic> _hx_tmp41 = this->keysDown;
HXDLIN( 622)			 ::flixel::input::gamepad::FlxGamepad _hx_tmp42 = this->get_gamepad();
HXDLIN( 622)			this->_addToKeys(_hx_tmp41, ::flixel::addons::ui::FlxMultiGamepadAnalogStick_obj::__alloc( HX_CTX ,_hx_tmp42, ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("positive",b9,a6,fa,ca),true)
            				->setFixed(1,HX_("id",db,5b,00,00),(int)20)
            				->setFixed(2,HX_("axis",a1,1c,79,40),::flixel::addons::ui::XY_obj::Y_dyn())),null(),null()));
HXLINE( 623)			::Array< ::Dynamic> _hx_tmp43 = this->keysClick;
HXDLIN( 623)			this->_addToKeys(_hx_tmp43, ::flixel::addons::ui::FlxMultiGamepad_obj::__alloc( HX_CTX ,this->get_gamepad(),(int)0,null(),null()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,setDefaultKeys,(void))

 ::flixel::input::gamepad::FlxGamepad FlxUICursor_obj::getGamepad(hx::Null< bool >  __o_exhaustive){
bool exhaustive = __o_exhaustive.Default(true);
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_650_getGamepad)
HXLINE( 651)		 ::flixel::input::gamepad::FlxGamepad gamepad;
HXDLIN( 651)		 ::flixel::addons::ui::GamepadAutoConnectPreference _g = this->gamepadAutoConnect;
HXDLIN( 651)		switch((int)(_hx_getEnumValueIndex(_g))){
            			case (int)0: {
HXLINE( 651)				gamepad = null();
            			}
            			break;
            			case (int)1: {
HXLINE( 651)				gamepad = ::flixel::FlxG_obj::gamepads->getFirstActiveGamepad();
            			}
            			break;
            			case (int)2: {
HXLINE( 651)				gamepad = ::flixel::FlxG_obj::gamepads->lastActive;
            			}
            			break;
            			case (int)3: {
HXLINE( 656)				int i = _g->_hx_getInt(0);
HXLINE( 651)				gamepad = ::flixel::FlxG_obj::gamepads->_activeGamepads->__get(i).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
            			}
            			break;
            		}
HXLINE( 658)		bool _hx_tmp;
HXDLIN( 658)		if (hx::IsNull( gamepad )) {
HXLINE( 658)			_hx_tmp = exhaustive;
            		}
            		else {
HXLINE( 658)			_hx_tmp = false;
            		}
HXDLIN( 658)		if (_hx_tmp) {
HXLINE( 660)			int _g2 = (int)0;
HXDLIN( 660)			int _g1 = ::flixel::FlxG_obj::gamepads->get_numActiveGamepads();
HXDLIN( 660)			while((_g2 < _g1)){
HXLINE( 660)				_g2 = (_g2 + (int)1);
HXDLIN( 660)				int i1 = (_g2 - (int)1);
HXLINE( 662)				gamepad = ::flixel::FlxG_obj::gamepads->_activeGamepads->__get(i1).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXLINE( 663)				if (hx::IsNotNull( gamepad )) {
HXLINE( 665)					return gamepad;
            				}
            			}
            		}
HXLINE( 669)		return gamepad;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,getGamepad,return )

int FlxUICursor_obj::_sortIDVisible(::Dynamic a,::Dynamic b){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_673__sortIDVisible)
HXLINE( 674)		bool _hx_tmp;
HXDLIN( 674)		if (( (bool)(a->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) )) {
HXLINE( 674)			_hx_tmp = !(( (bool)(b->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 674)			_hx_tmp = false;
            		}
HXDLIN( 674)		if (_hx_tmp) {
HXLINE( 674)			return (int)-1;
            		}
HXLINE( 675)		bool _hx_tmp1;
HXDLIN( 675)		if (( (bool)(b->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) )) {
HXLINE( 675)			_hx_tmp1 = !(( (bool)(a->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 675)			_hx_tmp1 = false;
            		}
HXDLIN( 675)		if (_hx_tmp1) {
HXLINE( 675)			return (int)1;
            		}
HXLINE( 676)		if ((( (int)(a->__Field(HX_("ID",db,3f,00,00),hx::paccDynamic)) ) < ( (int)(b->__Field(HX_("ID",db,3f,00,00),hx::paccDynamic)) ))) {
HXLINE( 676)			return (int)-1;
            		}
HXLINE( 677)		if ((( (int)(a->__Field(HX_("ID",db,3f,00,00),hx::paccDynamic)) ) > ( (int)(b->__Field(HX_("ID",db,3f,00,00),hx::paccDynamic)) ))) {
HXLINE( 677)			return (int)1;
            		}
HXLINE( 678)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUICursor_obj,_sortIDVisible,return )

int FlxUICursor_obj::_sortXYWidgetList( ::Dynamic a, ::Dynamic b){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_681__sortXYWidgetList)
HXLINE( 682)		if ((( (int)(a->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) < ( (int)(b->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ))) {
HXLINE( 682)			return (int)-1;
            		}
HXLINE( 683)		if ((( (int)(a->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) > ( (int)(b->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ))) {
HXLINE( 683)			return (int)1;
            		}
HXLINE( 684)		if ((( (int)(a->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) < ( (int)(b->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ))) {
HXLINE( 684)			return (int)-1;
            		}
HXLINE( 685)		if ((( (int)(a->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) > ( (int)(b->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ))) {
HXLINE( 685)			return (int)1;
            		}
HXLINE( 686)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUICursor_obj,_sortXYWidgetList,return )

int FlxUICursor_obj::_sortXYVisible(::Dynamic a,::Dynamic b){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_689__sortXYVisible)
HXLINE( 690)		bool _hx_tmp;
HXDLIN( 690)		if (( (bool)(a->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) )) {
HXLINE( 690)			_hx_tmp = !(( (bool)(b->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 690)			_hx_tmp = false;
            		}
HXDLIN( 690)		if (_hx_tmp) {
HXLINE( 690)			return (int)-1;
            		}
HXLINE( 691)		bool _hx_tmp1;
HXDLIN( 691)		if (( (bool)(b->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) )) {
HXLINE( 691)			_hx_tmp1 = !(( (bool)(a->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 691)			_hx_tmp1 = false;
            		}
HXDLIN( 691)		if (_hx_tmp1) {
HXLINE( 691)			return (int)1;
            		}
HXLINE( 692)		if ((( (Float)(a->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) < ( (Float)(b->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ))) {
HXLINE( 692)			return (int)-1;
            		}
HXLINE( 693)		if ((( (Float)(a->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) > ( (Float)(b->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ))) {
HXLINE( 693)			return (int)1;
            		}
HXLINE( 694)		if ((( (Float)(a->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) < ( (Float)(b->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ))) {
HXLINE( 694)			return (int)-1;
            		}
HXLINE( 695)		if ((( (Float)(a->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) > ( (Float)(b->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ))) {
HXLINE( 695)			return (int)1;
            		}
HXLINE( 696)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUICursor_obj,_sortXYVisible,return )

void FlxUICursor_obj::_addToKeys(::Array< ::Dynamic> keys, ::flixel::addons::ui::FlxBaseMultiInput m){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_699__addToKeys)
HXLINE( 700)		bool exists = false;
HXLINE( 701)		{
HXLINE( 701)			int _g = (int)0;
HXDLIN( 701)			while((_g < keys->length)){
HXLINE( 701)				 ::flixel::addons::ui::FlxBaseMultiInput mk = keys->__get(_g).StaticCast<  ::flixel::addons::ui::FlxBaseMultiInput >();
HXDLIN( 701)				_g = (_g + (int)1);
HXLINE( 702)				if (m->equals(mk)) {
HXLINE( 703)					exists = true;
HXLINE( 704)					goto _hx_goto_41;
            				}
            			}
            			_hx_goto_41:;
            		}
HXLINE( 707)		if (!(exists)) {
HXLINE( 708)			keys->push(m);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUICursor_obj,_addToKeys,(void))

void FlxUICursor_obj::_clearKeys(){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_712__clearKeys)
HXLINE( 713)		::flixel::addons::ui::U_obj::clearArray(this->keysUp);
HXDLIN( 713)		this->keysUp = null();
HXLINE( 714)		::flixel::addons::ui::U_obj::clearArray(this->keysDown);
HXDLIN( 714)		this->keysDown = null();
HXLINE( 715)		::flixel::addons::ui::U_obj::clearArray(this->keysLeft);
HXDLIN( 715)		this->keysLeft = null();
HXLINE( 716)		::flixel::addons::ui::U_obj::clearArray(this->keysRight);
HXDLIN( 716)		this->keysRight = null();
HXLINE( 717)		::flixel::addons::ui::U_obj::clearArray(this->keysClick);
HXDLIN( 717)		this->keysClick = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUICursor_obj,_clearKeys,(void))

void FlxUICursor_obj::_newKeys(){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_720__newKeys)
HXLINE( 721)		this->keysUp = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 722)		this->keysDown = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 723)		this->keysLeft = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 724)		this->keysRight = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 725)		this->keysClick = ::Array_obj< ::Dynamic>::__new(0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUICursor_obj,_newKeys,(void))

void FlxUICursor_obj::_checkKeys(){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_728__checkKeys)
HXLINE( 729)		bool wasInvisible = (this->visible == false);
HXLINE( 730)		int lastLocation = this->location;
HXLINE( 732)		{
HXLINE( 732)			int _g = (int)0;
HXDLIN( 732)			::Array< ::Dynamic> _g1 = this->keysUp;
HXDLIN( 732)			while((_g < _g1->length)){
HXLINE( 732)				 ::flixel::addons::ui::FlxBaseMultiInput key = _g1->__get(_g).StaticCast<  ::flixel::addons::ui::FlxBaseMultiInput >();
HXDLIN( 732)				_g = (_g + (int)1);
HXLINE( 733)				if (key->justPressed()) {
HXLINE( 734)					this->_doInput((int)0,(int)-1,null());
HXLINE( 735)					goto _hx_goto_45;
            				}
            			}
            			_hx_goto_45:;
            		}
HXLINE( 738)		{
HXLINE( 738)			int _g2 = (int)0;
HXDLIN( 738)			::Array< ::Dynamic> _g11 = this->keysDown;
HXDLIN( 738)			while((_g2 < _g11->length)){
HXLINE( 738)				 ::flixel::addons::ui::FlxBaseMultiInput key1 = _g11->__get(_g2).StaticCast<  ::flixel::addons::ui::FlxBaseMultiInput >();
HXDLIN( 738)				_g2 = (_g2 + (int)1);
HXLINE( 739)				if (key1->justPressed()) {
HXLINE( 740)					this->_doInput((int)0,(int)1,null());
HXLINE( 741)					goto _hx_goto_46;
            				}
            			}
            			_hx_goto_46:;
            		}
HXLINE( 744)		{
HXLINE( 744)			int _g3 = (int)0;
HXDLIN( 744)			::Array< ::Dynamic> _g12 = this->keysLeft;
HXDLIN( 744)			while((_g3 < _g12->length)){
HXLINE( 744)				 ::flixel::addons::ui::FlxBaseMultiInput key2 = _g12->__get(_g3).StaticCast<  ::flixel::addons::ui::FlxBaseMultiInput >();
HXDLIN( 744)				_g3 = (_g3 + (int)1);
HXLINE( 745)				if (key2->justPressed()) {
HXLINE( 746)					this->_doInput((int)-1,(int)0,null());
HXLINE( 747)					goto _hx_goto_47;
            				}
            			}
            			_hx_goto_47:;
            		}
HXLINE( 750)		{
HXLINE( 750)			int _g4 = (int)0;
HXDLIN( 750)			::Array< ::Dynamic> _g13 = this->keysRight;
HXDLIN( 750)			while((_g4 < _g13->length)){
HXLINE( 750)				 ::flixel::addons::ui::FlxBaseMultiInput key3 = _g13->__get(_g4).StaticCast<  ::flixel::addons::ui::FlxBaseMultiInput >();
HXDLIN( 750)				_g4 = (_g4 + (int)1);
HXLINE( 751)				if (key3->justPressed()) {
HXLINE( 752)					this->_doInput((int)1,(int)0,null());
HXLINE( 753)					goto _hx_goto_48;
            				}
            			}
            			_hx_goto_48:;
            		}
HXLINE( 757)		bool _hx_tmp;
HXDLIN( 757)		bool _hx_tmp1;
HXDLIN( 757)		if (wasInvisible) {
HXLINE( 757)			_hx_tmp1 = this->visible;
            		}
            		else {
HXLINE( 757)			_hx_tmp1 = false;
            		}
HXDLIN( 757)		if (_hx_tmp1) {
HXLINE( 757)			_hx_tmp = (lastLocation != (int)-1);
            		}
            		else {
HXLINE( 757)			_hx_tmp = false;
            		}
HXDLIN( 757)		if (_hx_tmp) {
HXLINE( 759)			this->set_location(lastLocation);
            		}
HXLINE( 762)		if (this->_clickKeysJustPressed()) {
HXLINE( 764)			if (!(this->ignoreNextInput)) {
HXLINE( 766)				this->_clickPressed = true;
HXLINE( 767)				this->_clickTime = (int)0;
HXLINE( 768)				this->_doPress(null());
            			}
            			else {
HXLINE( 772)				this->ignoreNextInput = false;
            			}
            		}
HXLINE( 776)		if (this->_clickKeysPressed()) {
HXLINE( 778)			this->_clickPressed = true;
HXLINE( 779)			this->_doMouseMove(null());
            		}
            		else {
HXLINE( 781)			if ((this->_clickTime > (int)0)) {
HXLINE( 783)				if (this->_clickPressed) {
HXLINE( 785)					this->_doRelease(null());
HXLINE( 786)					this->_clickPressed = false;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUICursor_obj,_checkKeys,(void))

bool FlxUICursor_obj::_clickKeysJustPressed(){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_792__clickKeysJustPressed)
HXLINE( 793)		{
HXLINE( 793)			int _g = (int)0;
HXDLIN( 793)			::Array< ::Dynamic> _g1 = this->keysClick;
HXDLIN( 793)			while((_g < _g1->length)){
HXLINE( 793)				 ::flixel::addons::ui::FlxBaseMultiInput key = _g1->__get(_g).StaticCast<  ::flixel::addons::ui::FlxBaseMultiInput >();
HXDLIN( 793)				_g = (_g + (int)1);
HXLINE( 795)				if (key->justPressed()) {
HXLINE( 797)					return true;
            				}
            			}
            		}
HXLINE( 800)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUICursor_obj,_clickKeysJustPressed,return )

bool FlxUICursor_obj::_clickKeysPressed(){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_804__clickKeysPressed)
HXLINE( 805)		{
HXLINE( 805)			int _g = (int)0;
HXDLIN( 805)			::Array< ::Dynamic> _g1 = this->keysClick;
HXDLIN( 805)			while((_g < _g1->length)){
HXLINE( 805)				 ::flixel::addons::ui::FlxBaseMultiInput key = _g1->__get(_g).StaticCast<  ::flixel::addons::ui::FlxBaseMultiInput >();
HXDLIN( 805)				_g = (_g + (int)1);
HXLINE( 807)				if (key->pressed()) {
HXLINE( 809)					return true;
            				}
            			}
            		}
HXLINE( 812)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUICursor_obj,_clickKeysPressed,return )

 ::flixel::math::FlxPoint FlxUICursor_obj::_getWidgetPoint( ::flixel::FlxCamera Camera){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_815__getWidgetPoint)
HXLINE( 817)		if (hx::IsNull( Camera )) {
HXLINE( 817)			Camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE( 820)		::Dynamic currWidget = this->_widgets->__get(this->location);
HXLINE( 821)		if (hx::IsNull( currWidget )) {
HXLINE( 822)			return null();
            		}
HXLINE( 825)		 ::flixel::FlxObject fo;
HXLINE( 826)		 ::flixel::math::FlxPoint widgetPoint = null();
HXLINE( 829)		if (::Std_obj::is(currWidget,hx::ClassOf< ::flixel::FlxObject >())) {
HXLINE( 830)			fo = ( ( ::flixel::FlxObject)(currWidget) );
HXLINE( 832)			widgetPoint = fo->getScreenPosition(null(),null());
            		}
HXLINE( 835)		{
HXLINE( 835)			 ::flixel::math::FlxPoint _g = widgetPoint;
HXDLIN( 835)			_g->set_x((_g->x * Camera->totalScaleX));
            		}
HXLINE( 836)		{
HXLINE( 836)			 ::flixel::math::FlxPoint _g1 = widgetPoint;
HXDLIN( 836)			_g1->set_y((_g1->y * Camera->totalScaleY));
            		}
HXLINE( 838)		if (hx::IsNull( widgetPoint )) {
HXLINE( 840)			Float X = ( (Float)(currWidget->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 840)			Float Y = ( (Float)(currWidget->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 840)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 840)			point->_inPool = false;
HXDLIN( 840)			widgetPoint = point;
            		}
HXLINE( 844)		{
HXLINE( 844)			 ::flixel::math::FlxPoint _g2 = widgetPoint;
HXDLIN( 844)			Float _g3 = _g2->x;
HXDLIN( 844)			_g2->set_x((_g3 + ((Float)::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(currWidget) / (Float)(int)2)));
            		}
HXLINE( 845)		{
HXLINE( 845)			 ::flixel::math::FlxPoint _g4 = widgetPoint;
HXDLIN( 845)			Float _g5 = _g4->y;
HXDLIN( 845)			_g4->set_y((_g5 + ((Float)::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(currWidget) / (Float)(int)2)));
            		}
HXLINE( 847)		return widgetPoint;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,_getWidgetPoint,return )

void FlxUICursor_obj::_doMouseMove( ::flixel::math::FlxPoint pt){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_850__doMouseMove)
HXLINE( 851)		bool dispose = false;
HXLINE( 852)		if (hx::IsNull( pt )) {
HXLINE( 853)			pt = this->_getWidgetPoint(null());
HXLINE( 854)			if (hx::IsNull( pt )) {
HXLINE( 856)				return;
            			}
HXLINE( 858)			dispose = true;
            		}
HXLINE( 860)		bool _hx_tmp = this->dispatchEvents;
HXLINE( 879)		if (dispose) {
HXLINE( 880)			pt->put();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,_doMouseMove,(void))

void FlxUICursor_obj::_doPress( ::flixel::math::FlxPoint pt){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_884__doPress)
HXLINE( 885)		::Dynamic currWidget = this->_widgets->__get(this->location);
HXLINE( 886)		if (hx::IsNull( currWidget )) {
HXLINE( 887)			return;
            		}
HXLINE( 890)		bool dispose = false;
HXLINE( 891)		if (hx::IsNull( pt )) {
HXLINE( 892)			pt = this->_getWidgetPoint(null());
HXLINE( 893)			if (hx::IsNull( pt )) {
HXLINE( 895)				return;
            			}
HXLINE( 897)			dispose = true;
            		}
HXLINE( 912)		if (hx::IsNotNull( this->callback )) {
HXLINE( 914)			this->callback(HX_("cursor_down",ab,fd,32,eb),currWidget);
            		}
HXLINE( 916)		if (dispose) {
HXLINE( 917)			pt->put();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,_doPress,(void))

void FlxUICursor_obj::_doRelease( ::flixel::math::FlxPoint pt){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_921__doRelease)
HXLINE( 922)		::Dynamic currWidget = this->_widgets->__get(this->location);
HXLINE( 923)		if (hx::IsNull( currWidget )) {
HXLINE( 924)			return;
            		}
HXLINE( 927)		bool dispose = false;
HXLINE( 928)		if (hx::IsNull( pt )) {
HXLINE( 929)			pt = this->_getWidgetPoint(null());
HXLINE( 930)			if (hx::IsNull( pt )) {
HXLINE( 932)				return;
            			}
HXLINE( 934)			dispose = true;
            		}
HXLINE( 956)		if (hx::IsNotNull( this->callback )) {
HXLINE( 958)			this->callback(HX_("cursor_click",df,16,fe,4b),currWidget);
            		}
HXLINE( 960)		if (dispose) {
HXLINE( 961)			pt->put();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,_doRelease,(void))

int FlxUICursor_obj::_findNextY(int Y,int indexValue,::Array< ::Dynamic> listWidget,::Array< ::Dynamic> listLists){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_974__findNextY)
HXLINE( 975)		int currX = (int)0;
HXLINE( 976)		int currY = (int)0;
HXLINE( 977)		int length = (int)0;
HXLINE( 979)		if (hx::IsNotNull( listWidget )) {
HXLINE( 981)			currX = ::Std_obj::_hx_int(( (Float)(listWidget->__get(indexValue)->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ));
HXLINE( 982)			currY = ::Std_obj::_hx_int(( (Float)(listWidget->__get(indexValue)->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ));
HXLINE( 983)			length = listWidget->length;
            		}
            		else {
HXLINE( 985)			if (hx::IsNotNull( listLists )) {
HXLINE( 987)				currX = ( (int)(listLists->__get(indexValue)->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXLINE( 988)				currY = ( (int)(listLists->__get(indexValue)->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXLINE( 989)				length = listLists->length;
            			}
            		}
HXLINE( 992)		int nextX = (int)0;
HXLINE( 993)		int nextY = (int)0;
HXLINE( 995)		Float dx = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 996)		Float dy = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 998)		Float bestdx = dx;
HXLINE( 999)		Float bestdy = dy;
HXLINE(1001)		int besti = (int)-1;
HXLINE(1006)		{
HXLINE(1006)			int _g1 = (int)0;
HXDLIN(1006)			int _g = length;
HXDLIN(1006)			while((_g1 < _g)){
HXLINE(1006)				_g1 = (_g1 + (int)1);
HXDLIN(1006)				int i = (_g1 - (int)1);
HXLINE(1008)				if ((i != indexValue)) {
HXLINE(1010)					if (hx::IsNotNull( listWidget )) {
HXLINE(1012)						nextX = ::Std_obj::_hx_int(( (Float)(listWidget->__get(i)->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ));
HXLINE(1013)						nextY = ::Std_obj::_hx_int(( (Float)(listWidget->__get(i)->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ));
            					}
            					else {
HXLINE(1015)						if (hx::IsNotNull( listLists )) {
HXLINE(1017)							nextX = ( (int)(listLists->__get(i)->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXLINE(1018)							nextY = ( (int)(listLists->__get(i)->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
            						}
            					}
HXLINE(1021)					dy = (nextY - currY);
HXLINE(1022)					bool _hx_tmp;
HXDLIN(1022)					int _hx_tmp1;
HXDLIN(1022)					if ((dy < (int)0)) {
HXLINE(1022)						_hx_tmp1 = (int)-1;
            					}
            					else {
HXLINE(1022)						_hx_tmp1 = (int)1;
            					}
HXDLIN(1022)					int _hx_tmp2;
HXDLIN(1022)					if ((Y < (int)0)) {
HXLINE(1022)						_hx_tmp2 = (int)-1;
            					}
            					else {
HXLINE(1022)						_hx_tmp2 = (int)1;
            					}
HXDLIN(1022)					if ((_hx_tmp1 == _hx_tmp2)) {
HXLINE(1022)						_hx_tmp = (dy != (int)0);
            					}
            					else {
HXLINE(1022)						_hx_tmp = false;
            					}
HXDLIN(1022)					if (_hx_tmp) {
HXLINE(1024)						dy = ::Math_obj::abs(dy);
HXLINE(1025)						if ((dy < bestdy)) {
HXLINE(1027)							bestdy = dy;
HXLINE(1028)							bestdx = ::Math_obj::abs((currX - nextX));
HXLINE(1029)							besti = i;
            						}
            						else {
HXLINE(1031)							if ((dy == bestdy)) {
HXLINE(1033)								dx = ::Math_obj::abs((currX - nextX));
HXLINE(1034)								if ((dx < bestdx)) {
HXLINE(1036)									bestdx = dx;
HXLINE(1037)									besti = i;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1043)		return besti;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUICursor_obj,_findNextY,return )

int FlxUICursor_obj::_wrapX(int X,int indexValue,int listLength){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_1047__wrapX)
HXLINE(1048)		if (((indexValue + X) < (int)0)) {
HXLINE(1050)			indexValue = ((indexValue + X) + listLength);
            		}
            		else {
HXLINE(1052)			if (((indexValue + X) >= listLength)) {
HXLINE(1054)				indexValue = ((indexValue + X) - listLength);
            			}
            		}
HXLINE(1056)		return indexValue;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUICursor_obj,_wrapX,return )

int FlxUICursor_obj::_wrapY(int Y,int indexValue,::Array< ::Dynamic> listWidget,::Array< ::Dynamic> listLists){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_1060__wrapY)
HXLINE(1061)		Float dx = ::Math_obj::POSITIVE_INFINITY;
HXLINE(1062)		Float dy = ::Math_obj::POSITIVE_INFINITY;
HXLINE(1064)		Float bestdx = dx;
HXLINE(1065)		Float bestdy = dy;
HXLINE(1067)		int besti = (int)-1;
HXLINE(1069)		bestdx = ::Math_obj::POSITIVE_INFINITY;
HXLINE(1070)		bestdy = (int)0;
HXLINE(1072)		int length = (int)0;
HXLINE(1073)		int currX = (int)0;
HXLINE(1074)		int currY = (int)0;
HXLINE(1076)		if (hx::IsNotNull( listWidget )) {
HXLINE(1078)			length = listWidget->length;
HXLINE(1079)			currX = ::Std_obj::_hx_int(( (Float)(listWidget->__get(indexValue)->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ));
HXLINE(1080)			currY = ::Std_obj::_hx_int(( (Float)(listWidget->__get(indexValue)->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ));
            		}
HXLINE(1082)		if (hx::IsNotNull( listLists )) {
HXLINE(1084)			length = listLists->length;
HXLINE(1085)			currX = ( (int)(listLists->__get(indexValue)->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXLINE(1086)			currY = ( (int)(listLists->__get(indexValue)->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
            		}
HXLINE(1089)		{
HXLINE(1089)			int _g1 = (int)0;
HXDLIN(1089)			int _g = length;
HXDLIN(1089)			while((_g1 < _g)){
HXLINE(1089)				_g1 = (_g1 + (int)1);
HXDLIN(1089)				int i = (_g1 - (int)1);
HXLINE(1091)				if ((i != this->location)) {
HXLINE(1093)					int xx = (int)0;
HXLINE(1094)					int yy = (int)0;
HXLINE(1095)					if (hx::IsNotNull( listWidget )) {
HXLINE(1097)						xx = ::Std_obj::_hx_int(( (Float)(listWidget->__get(i)->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ));
HXLINE(1098)						yy = ::Std_obj::_hx_int(( (Float)(listWidget->__get(i)->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ));
            					}
            					else {
HXLINE(1100)						if (hx::IsNotNull( listLists )) {
HXLINE(1102)							xx = ::Std_obj::_hx_int(( (Float)(listLists->__get(i)->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ));
HXLINE(1103)							yy = ::Std_obj::_hx_int(( (Float)(listLists->__get(i)->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ));
            						}
            					}
HXLINE(1106)					dy = (yy - currY);
HXLINE(1108)					bool _hx_tmp;
HXDLIN(1108)					int _hx_tmp1;
HXDLIN(1108)					if ((dy < (int)0)) {
HXLINE(1108)						_hx_tmp1 = (int)-1;
            					}
            					else {
HXLINE(1108)						_hx_tmp1 = (int)1;
            					}
HXDLIN(1108)					int _hx_tmp2;
HXDLIN(1108)					if ((Y < (int)0)) {
HXLINE(1108)						_hx_tmp2 = (int)-1;
            					}
            					else {
HXLINE(1108)						_hx_tmp2 = (int)1;
            					}
HXDLIN(1108)					if (((_hx_tmp1 == _hx_tmp2) == false)) {
HXLINE(1108)						_hx_tmp = (dy != (int)0);
            					}
            					else {
HXLINE(1108)						_hx_tmp = false;
            					}
HXDLIN(1108)					if (_hx_tmp) {
HXLINE(1109)						dy = ::Math_obj::abs(dy);
HXLINE(1110)						if ((dy > bestdy)) {
HXLINE(1112)							bestdy = dy;
HXLINE(1113)							bestdx = ::Math_obj::abs((currX - xx));
HXLINE(1114)							besti = i;
            						}
            						else {
HXLINE(1116)							if ((dy == bestdy)) {
HXLINE(1118)								dx = ::Math_obj::abs((currX - xx));
HXLINE(1119)								if ((dx < bestdx)) {
HXLINE(1121)									bestdx = dx;
HXLINE(1122)									besti = i;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1128)		if ((besti != (int)-1)) {
HXLINE(1130)			indexValue = besti;
            		}
HXLINE(1132)		return indexValue;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUICursor_obj,_wrapY,return )

void FlxUICursor_obj::_doInput(int X,int Y,hx::Null< int >  __o_recursion){
int recursion = __o_recursion.Default(0);
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_1136__doInput)
HXLINE(1137)		if (this->ignoreNextInput) {
HXLINE(1139)			this->ignoreNextInput = false;
HXLINE(1140)			return;
            		}
HXLINE(1142)		::Dynamic currWidget = null();
HXLINE(1144)		if ((Y == (int)0)) {
HXLINE(1148)			bool _hx_tmp;
HXDLIN(1148)			if (((this->location + X) >= (int)0)) {
HXLINE(1148)				_hx_tmp = ((this->location + X) < this->_widgets->length);
            			}
            			else {
HXLINE(1148)				_hx_tmp = false;
            			}
HXDLIN(1148)			if (_hx_tmp) {
HXLINE(1150)				this->set_location((this->location + X));
            			}
            			else {
HXLINE(1154)				if (this->wrap) {
HXLINE(1156)					if ((this->_lists->length == (int)1)) {
HXLINE(1158)						this->set_location(this->_wrapX(X,this->location,this->_widgets->length));
            					}
            					else {
HXLINE(1162)						bool _hx_tmp1;
HXDLIN(1162)						if (((this->listIndex + X) >= (int)0)) {
HXLINE(1162)							_hx_tmp1 = ((this->listIndex + X) < this->_lists->length);
            						}
            						else {
HXLINE(1162)							_hx_tmp1 = false;
            						}
HXDLIN(1162)						if (_hx_tmp1) {
HXLINE(1164)							this->set_listIndex((this->listIndex + X));
            						}
            						else {
HXLINE(1168)							this->set_listIndex(this->_wrapX(X,this->listIndex,this->_lists->length));
            						}
HXLINE(1170)						if ((X == (int)-1)) {
HXLINE(1172)							this->set_location((this->_widgets->length - (int)1));
            						}
            					}
            				}
            			}
HXLINE(1177)			currWidget = this->_widgets->__get(this->location);
            		}
            		else {
HXLINE(1182)			int nextY = this->_findNextY(Y,this->location,this->_widgets,null());
HXLINE(1184)			if ((nextY != (int)-1)) {
HXLINE(1186)				this->set_location(nextY);
HXLINE(1187)				currWidget = this->_widgets->__get(this->location);
            			}
            			else {
HXLINE(1191)				if (this->wrap) {
HXLINE(1193)					if ((this->_lists->length == (int)1)) {
HXLINE(1195)						this->set_location(this->_wrapY(Y,this->location,this->_widgets,null()));
HXLINE(1196)						currWidget = this->_widgets->__get(this->location);
            					}
            					else {
HXLINE(1200)						int nextListY = this->_findNextY(Y,this->listIndex,null(),this->_lists);
HXLINE(1201)						if ((nextListY != (int)-1)) {
HXLINE(1203)							this->set_listIndex(nextListY);
HXLINE(1204)							currWidget = this->_widgets->__get(this->location);
            						}
            						else {
HXLINE(1208)							this->set_listIndex(this->_wrapY(Y,this->listIndex,null(),this->_lists));
            						}
HXLINE(1210)						if ((Y == (int)-1)) {
HXLINE(1212)							this->set_location((this->_widgets->length - (int)1));
            						}
            					}
HXLINE(1215)					currWidget = this->_widgets->__get(this->location);
            				}
            			}
            		}
HXLINE(1220)		bool _hx_tmp2;
HXDLIN(1220)		if (hx::IsNotNull( currWidget )) {
HXLINE(1220)			_hx_tmp2 = hx::IsNotNull( this->_widgets );
            		}
            		else {
HXLINE(1220)			_hx_tmp2 = false;
            		}
HXDLIN(1220)		if (_hx_tmp2) {
HXLINE(1222)			bool _hx_tmp3;
HXDLIN(1222)			if ((( (bool)(currWidget->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) ) == false)) {
HXLINE(1222)				_hx_tmp3 = (recursion < this->_widgets->length);
            			}
            			else {
HXLINE(1222)				_hx_tmp3 = false;
            			}
HXDLIN(1222)			if (_hx_tmp3) {
HXLINE(1224)				this->_doInput(X,Y,(recursion + (int)1));
HXLINE(1225)				return;
            			}
            		}
HXLINE(1229)		if (hx::IsNotNull( this->callback )) {
HXLINE(1232)			this->callback(HX_("cursor_jump",37,ca,2e,ef),currWidget);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUICursor_obj,_doInput,(void))

void FlxUICursor_obj::_updateCursor(){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_1237__updateCursor)
HXLINE(1238)		this->_widgets = ( (::Array< ::Dynamic>)(this->_lists->__get(this->listIndex)->__Field(HX_("widgets",2f,1c,67,28),hx::paccDynamic)) );
HXLINE(1240)		bool _hx_tmp;
HXDLIN(1240)		bool _hx_tmp1;
HXDLIN(1240)		if ((this->location >= (int)0)) {
HXLINE(1240)			_hx_tmp1 = hx::IsNull( this->_lists );
            		}
            		else {
HXLINE(1240)			_hx_tmp1 = true;
            		}
HXDLIN(1240)		if (!(_hx_tmp1)) {
HXLINE(1240)			_hx_tmp = hx::IsNull( this->_widgets );
            		}
            		else {
HXLINE(1240)			_hx_tmp = true;
            		}
HXDLIN(1240)		if (_hx_tmp) {
HXLINE(1242)			this->set_visible(false);
HXLINE(1243)			return;
            		}
HXLINE(1246)		this->set_visible(this->set_active(true));
HXLINE(1248)		::Dynamic currWidget = this->_widgets->__get(this->location);
HXLINE(1249)		bool flippedX = false;
HXLINE(1250)		bool flippedY = false;
HXLINE(1252)		if (hx::IsNotNull( currWidget )) {
HXLINE(1253)			 ::flixel::FlxObject target = ( ( ::flixel::FlxObject)(currWidget) );
HXLINE(1255)			if (::Std_obj::is(target,hx::ClassOf< ::flixel::FlxSprite >())) {
HXLINE(1257)				 ::flixel::FlxSprite fs = ( ( ::flixel::FlxSprite)(target) );
HXLINE(1258)				bool _hx_tmp2;
HXDLIN(1258)				if (hx::IsNotNull( fs )) {
HXLINE(1258)					_hx_tmp2 = hx::IsNotNull( fs->scrollFactor );
            				}
            				else {
HXLINE(1258)					_hx_tmp2 = false;
            				}
HXDLIN(1258)				if (_hx_tmp2) {
HXLINE(1260)					this->scrollFactor->set(fs->scrollFactor->x,fs->scrollFactor->y);
            				}
            			}
HXLINE(1264)			if (::Std_obj::is(currWidget,hx::ClassOf< ::flixel::addons::ui::FlxUICheckBox >())) {
HXLINE(1266)				 ::flixel::addons::ui::FlxUICheckBox check = ( ( ::flixel::addons::ui::FlxUICheckBox)(target) );
HXLINE(1267)				target = check->box;
            			}
HXLINE(1270)			this->anchor->anchorThing(hx::ObjectPtr<OBJ_>(this),target);
HXLINE(1271)			if ((this->x < (int)0)) {
HXLINE(1273)				this->_flipAnchor(HX_("left",07,08,b0,47),target);
HXLINE(1274)				flippedX = true;
            			}
            			else {
HXLINE(1276)				Float _hx_tmp3 = this->x;
HXDLIN(1276)				int _hx_tmp4 = ::flixel::FlxG_obj::width;
HXDLIN(1276)				if ((_hx_tmp3 > (_hx_tmp4 + this->get_width()))) {
HXLINE(1278)					this->_flipAnchor(HX_("right",dc,0b,64,e9),target);
HXLINE(1279)					flippedX = true;
            				}
            			}
HXLINE(1281)			if ((this->y < (int)0)) {
HXLINE(1283)				this->_flipAnchor(HX_("top",95,66,58,00),target);
HXLINE(1284)				flippedY = true;
            			}
            			else {
HXLINE(1286)				Float _hx_tmp5 = this->y;
HXDLIN(1286)				int _hx_tmp6 = ::flixel::FlxG_obj::height;
HXDLIN(1286)				if ((_hx_tmp5 > (_hx_tmp6 + this->get_height()))) {
HXLINE(1288)					this->_flipAnchor(HX_("bottom",eb,e6,78,65),target);
HXLINE(1289)					flippedY = true;
            				}
            			}
HXLINE(1291)			this->set_flipX(flippedX);
HXLINE(1292)			this->set_flipY(flippedY);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUICursor_obj,_updateCursor,(void))

void FlxUICursor_obj::_flipAnchor(::String AnchorDir, ::flixel::FlxObject destination){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_1297__flipAnchor)
HXLINE(1298)		 ::flixel::addons::ui::Anchor theAnchor = null();
HXLINE(1299)		::String _hx_switch_0 = AnchorDir;
            		if (  (_hx_switch_0==HX_("bottom",eb,e6,78,65)) ){
HXLINE(1320)			if ((this->anchor->y->side == HX_("bottom",eb,e6,78,65))) {
HXLINE(1322)				this->_bottomAnchor = this->anchor->getFlipped(true,false,this->_bottomAnchor);
HXLINE(1323)				theAnchor = this->_bottomAnchor;
            			}
HXLINE(1320)			goto _hx_goto_65;
            		}
            		if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE(1302)			if ((this->anchor->x->side == HX_("left",07,08,b0,47))) {
HXLINE(1304)				this->_leftAnchor = this->anchor->getFlipped(true,false,this->_leftAnchor);
HXLINE(1305)				theAnchor = this->_leftAnchor;
            			}
HXLINE(1302)			goto _hx_goto_65;
            		}
            		if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE(1308)			if ((this->anchor->x->side == HX_("right",dc,0b,64,e9))) {
HXLINE(1310)				this->_topAnchor = this->anchor->getFlipped(true,false,this->_rightAnchor);
HXLINE(1311)				theAnchor = this->_rightAnchor;
            			}
HXLINE(1308)			goto _hx_goto_65;
            		}
            		if (  (_hx_switch_0==HX_("top",95,66,58,00)) ){
HXLINE(1314)			if ((this->anchor->y->side == HX_("top",95,66,58,00))) {
HXLINE(1316)				this->_topAnchor = this->anchor->getFlipped(true,false,this->_topAnchor);
HXLINE(1317)				theAnchor = this->_topAnchor;
            			}
HXLINE(1314)			goto _hx_goto_65;
            		}
            		_hx_goto_65:;
HXLINE(1326)		if (hx::IsNotNull( theAnchor )) {
HXLINE(1328)			theAnchor->anchorThing(hx::ObjectPtr<OBJ_>(this),destination);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUICursor_obj,_flipAnchor,(void))

int FlxUICursor_obj::KEYS_TAB;

int FlxUICursor_obj::KEYS_WASD;

int FlxUICursor_obj::KEYS_ARROWS;

int FlxUICursor_obj::KEYS_NUMPAD;

int FlxUICursor_obj::GAMEPAD_DPAD;

int FlxUICursor_obj::GAMEPAD_LEFT_STICK;

int FlxUICursor_obj::GAMEPAD_RIGHT_STICK;

int FlxUICursor_obj::GAMEPAD_SHOULDER_BUTTONS;

int FlxUICursor_obj::INPUT_NONE;

int FlxUICursor_obj::INPUT_KEYS;

int FlxUICursor_obj::INPUT_GAMEPAD;


hx::ObjectPtr< FlxUICursor_obj > FlxUICursor_obj::__new( ::Dynamic Callback,hx::Null< int >  __o_InputMethod,hx::Null< int >  __o_DefaultKeys, ::Dynamic Asset) {
	hx::ObjectPtr< FlxUICursor_obj > __this = new FlxUICursor_obj();
	__this->__construct(Callback,__o_InputMethod,__o_DefaultKeys,Asset);
	return __this;
}

hx::ObjectPtr< FlxUICursor_obj > FlxUICursor_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic Callback,hx::Null< int >  __o_InputMethod,hx::Null< int >  __o_DefaultKeys, ::Dynamic Asset) {
	FlxUICursor_obj *__this = (FlxUICursor_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxUICursor_obj), true, "flixel.addons.ui.FlxUICursor"));
	*(void **)__this = FlxUICursor_obj::_hx_vtable;
	__this->__construct(Callback,__o_InputMethod,__o_DefaultKeys,Asset);
	return __this;
}

FlxUICursor_obj::FlxUICursor_obj()
{
}

void FlxUICursor_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxUICursor);
	HX_MARK_MEMBER_NAME(callback,"callback");
	HX_MARK_MEMBER_NAME(wrap,"wrap");
	HX_MARK_MEMBER_NAME(location,"location");
	HX_MARK_MEMBER_NAME(listIndex,"listIndex");
	HX_MARK_MEMBER_NAME(ignoreNextInput,"ignoreNextInput");
	HX_MARK_MEMBER_NAME(gamepadAutoConnect,"gamepadAutoConnect");
	HX_MARK_MEMBER_NAME(_gamepad,"_gamepad");
	HX_MARK_MEMBER_NAME(keysUp,"keysUp");
	HX_MARK_MEMBER_NAME(keysDown,"keysDown");
	HX_MARK_MEMBER_NAME(keysLeft,"keysLeft");
	HX_MARK_MEMBER_NAME(keysRight,"keysRight");
	HX_MARK_MEMBER_NAME(keysClick,"keysClick");
	HX_MARK_MEMBER_NAME(anchor,"anchor");
	HX_MARK_MEMBER_NAME(dispatchEvents,"dispatchEvents");
	HX_MARK_MEMBER_NAME(inputMethod,"inputMethod");
	HX_MARK_MEMBER_NAME(_lists,"_lists");
	HX_MARK_MEMBER_NAME(_widgets,"_widgets");
	HX_MARK_MEMBER_NAME(_clickPressed,"_clickPressed");
	HX_MARK_MEMBER_NAME(_defaultCode,"_defaultCode");
	HX_MARK_MEMBER_NAME(_rightAnchor,"_rightAnchor");
	HX_MARK_MEMBER_NAME(_topAnchor,"_topAnchor");
	HX_MARK_MEMBER_NAME(_leftAnchor,"_leftAnchor");
	HX_MARK_MEMBER_NAME(_bottomAnchor,"_bottomAnchor");
	HX_MARK_MEMBER_NAME(_clickTime,"_clickTime");
	 ::flixel::addons::ui::FlxUISprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxUICursor_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(callback,"callback");
	HX_VISIT_MEMBER_NAME(wrap,"wrap");
	HX_VISIT_MEMBER_NAME(location,"location");
	HX_VISIT_MEMBER_NAME(listIndex,"listIndex");
	HX_VISIT_MEMBER_NAME(ignoreNextInput,"ignoreNextInput");
	HX_VISIT_MEMBER_NAME(gamepadAutoConnect,"gamepadAutoConnect");
	HX_VISIT_MEMBER_NAME(_gamepad,"_gamepad");
	HX_VISIT_MEMBER_NAME(keysUp,"keysUp");
	HX_VISIT_MEMBER_NAME(keysDown,"keysDown");
	HX_VISIT_MEMBER_NAME(keysLeft,"keysLeft");
	HX_VISIT_MEMBER_NAME(keysRight,"keysRight");
	HX_VISIT_MEMBER_NAME(keysClick,"keysClick");
	HX_VISIT_MEMBER_NAME(anchor,"anchor");
	HX_VISIT_MEMBER_NAME(dispatchEvents,"dispatchEvents");
	HX_VISIT_MEMBER_NAME(inputMethod,"inputMethod");
	HX_VISIT_MEMBER_NAME(_lists,"_lists");
	HX_VISIT_MEMBER_NAME(_widgets,"_widgets");
	HX_VISIT_MEMBER_NAME(_clickPressed,"_clickPressed");
	HX_VISIT_MEMBER_NAME(_defaultCode,"_defaultCode");
	HX_VISIT_MEMBER_NAME(_rightAnchor,"_rightAnchor");
	HX_VISIT_MEMBER_NAME(_topAnchor,"_topAnchor");
	HX_VISIT_MEMBER_NAME(_leftAnchor,"_leftAnchor");
	HX_VISIT_MEMBER_NAME(_bottomAnchor,"_bottomAnchor");
	HX_VISIT_MEMBER_NAME(_clickTime,"_clickTime");
	 ::flixel::addons::ui::FlxUISprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxUICursor_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"wrap") ) { return hx::Val( wrap ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"keysUp") ) { return hx::Val( keysUp ); }
		if (HX_FIELD_EQ(inName,"anchor") ) { return hx::Val( anchor ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"jumpTo") ) { return hx::Val( jumpTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"_lists") ) { return hx::Val( _lists ); }
		if (HX_FIELD_EQ(inName,"_wrapX") ) { return hx::Val( _wrapX_dyn() ); }
		if (HX_FIELD_EQ(inName,"_wrapY") ) { return hx::Val( _wrapY_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gamepad") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_gamepad() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"callback") ) { return hx::Val( callback ); }
		if (HX_FIELD_EQ(inName,"location") ) { return hx::Val( location ); }
		if (HX_FIELD_EQ(inName,"_gamepad") ) { return hx::Val( _gamepad ); }
		if (HX_FIELD_EQ(inName,"keysDown") ) { return hx::Val( keysDown ); }
		if (HX_FIELD_EQ(inName,"keysLeft") ) { return hx::Val( keysLeft ); }
		if (HX_FIELD_EQ(inName,"jumpToXY") ) { return hx::Val( jumpToXY_dyn() ); }
		if (HX_FIELD_EQ(inName,"_widgets") ) { return hx::Val( _widgets ); }
		if (HX_FIELD_EQ(inName,"_newKeys") ) { return hx::Val( _newKeys_dyn() ); }
		if (HX_FIELD_EQ(inName,"_doPress") ) { return hx::Val( _doPress_dyn() ); }
		if (HX_FIELD_EQ(inName,"_doInput") ) { return hx::Val( _doInput_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"listIndex") ) { return hx::Val( listIndex ); }
		if (HX_FIELD_EQ(inName,"keysRight") ) { return hx::Val( keysRight ); }
		if (HX_FIELD_EQ(inName,"keysClick") ) { return hx::Val( keysClick ); }
		if (HX_FIELD_EQ(inName,"addWidget") ) { return hx::Val( addWidget_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_topAnchor") ) { return hx::Val( _topAnchor ); }
		if (HX_FIELD_EQ(inName,"_clickTime") ) { return hx::Val( _clickTime ); }
		if (HX_FIELD_EQ(inName,"getGamepad") ) { return hx::Val( getGamepad_dyn() ); }
		if (HX_FIELD_EQ(inName,"_addToKeys") ) { return hx::Val( _addToKeys_dyn() ); }
		if (HX_FIELD_EQ(inName,"_clearKeys") ) { return hx::Val( _clearKeys_dyn() ); }
		if (HX_FIELD_EQ(inName,"_checkKeys") ) { return hx::Val( _checkKeys_dyn() ); }
		if (HX_FIELD_EQ(inName,"_doRelease") ) { return hx::Val( _doRelease_dyn() ); }
		if (HX_FIELD_EQ(inName,"_findNextY") ) { return hx::Val( _findNextY_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"set_visible") ) { return hx::Val( set_visible_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_gamepad") ) { return hx::Val( set_gamepad_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_gamepad") ) { return hx::Val( get_gamepad_dyn() ); }
		if (HX_FIELD_EQ(inName,"inputMethod") ) { return hx::Val( inputMethod ); }
		if (HX_FIELD_EQ(inName,"sortWidgets") ) { return hx::Val( sortWidgets_dyn() ); }
		if (HX_FIELD_EQ(inName,"_leftAnchor") ) { return hx::Val( _leftAnchor ); }
		if (HX_FIELD_EQ(inName,"_flipAnchor") ) { return hx::Val( _flipAnchor_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"set_location") ) { return hx::Val( set_location_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearWidgets") ) { return hx::Val( clearWidgets_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeWidget") ) { return hx::Val( removeWidget_dyn() ); }
		if (HX_FIELD_EQ(inName,"_defaultCode") ) { return hx::Val( _defaultCode ); }
		if (HX_FIELD_EQ(inName,"_rightAnchor") ) { return hx::Val( _rightAnchor ); }
		if (HX_FIELD_EQ(inName,"_doMouseMove") ) { return hx::Val( _doMouseMove_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"set_listIndex") ) { return hx::Val( set_listIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"addWidgetList") ) { return hx::Val( addWidgetList_dyn() ); }
		if (HX_FIELD_EQ(inName,"_clickPressed") ) { return hx::Val( _clickPressed ); }
		if (HX_FIELD_EQ(inName,"_bottomAnchor") ) { return hx::Val( _bottomAnchor ); }
		if (HX_FIELD_EQ(inName,"_updateCursor") ) { return hx::Val( _updateCursor_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"dispatchEvents") ) { return hx::Val( dispatchEvents ); }
		if (HX_FIELD_EQ(inName,"setDefaultKeys") ) { return hx::Val( setDefaultKeys_dyn() ); }
		if (HX_FIELD_EQ(inName,"_sortIDVisible") ) { return hx::Val( _sortIDVisible_dyn() ); }
		if (HX_FIELD_EQ(inName,"_sortXYVisible") ) { return hx::Val( _sortXYVisible_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"ignoreNextInput") ) { return hx::Val( ignoreNextInput ); }
		if (HX_FIELD_EQ(inName,"_getWidgetPoint") ) { return hx::Val( _getWidgetPoint_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getCurrentWidget") ) { return hx::Val( getCurrentWidget_dyn() ); }
		if (HX_FIELD_EQ(inName,"addWidgetsFromUI") ) { return hx::Val( addWidgetsFromUI_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_sortXYWidgetList") ) { return hx::Val( _sortXYWidgetList_dyn() ); }
		if (HX_FIELD_EQ(inName,"_clickKeysPressed") ) { return hx::Val( _clickKeysPressed_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"gamepadAutoConnect") ) { return hx::Val( gamepadAutoConnect ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"findVisibleLocation") ) { return hx::Val( findVisibleLocation_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_clickKeysJustPressed") ) { return hx::Val( _clickKeysJustPressed_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxUICursor_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"wrap") ) { wrap=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"keysUp") ) { keysUp=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"anchor") ) { anchor=inValue.Cast<  ::flixel::addons::ui::Anchor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_lists") ) { _lists=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gamepad") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_gamepad(inValue.Cast<  ::flixel::input::gamepad::FlxGamepad >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"callback") ) { callback=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"location") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_location(inValue.Cast< int >()) );location=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_gamepad") ) { _gamepad=inValue.Cast<  ::flixel::input::gamepad::FlxGamepad >(); return inValue; }
		if (HX_FIELD_EQ(inName,"keysDown") ) { keysDown=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"keysLeft") ) { keysLeft=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_widgets") ) { _widgets=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"listIndex") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_listIndex(inValue.Cast< int >()) );listIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"keysRight") ) { keysRight=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"keysClick") ) { keysClick=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_topAnchor") ) { _topAnchor=inValue.Cast<  ::flixel::addons::ui::Anchor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_clickTime") ) { _clickTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inputMethod") ) { inputMethod=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_leftAnchor") ) { _leftAnchor=inValue.Cast<  ::flixel::addons::ui::Anchor >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_defaultCode") ) { _defaultCode=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_rightAnchor") ) { _rightAnchor=inValue.Cast<  ::flixel::addons::ui::Anchor >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_clickPressed") ) { _clickPressed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_bottomAnchor") ) { _bottomAnchor=inValue.Cast<  ::flixel::addons::ui::Anchor >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"dispatchEvents") ) { dispatchEvents=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"ignoreNextInput") ) { ignoreNextInput=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"gamepadAutoConnect") ) { gamepadAutoConnect=inValue.Cast<  ::flixel::addons::ui::GamepadAutoConnectPreference >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxUICursor_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("wrap","\xca","\x39","\xff","\x4e"));
	outFields->push(HX_HCSTRING("location","\x35","\x6e","\x46","\xe5"));
	outFields->push(HX_HCSTRING("listIndex","\xd4","\x59","\x55","\xd4"));
	outFields->push(HX_HCSTRING("ignoreNextInput","\xa5","\x52","\x4a","\x31"));
	outFields->push(HX_HCSTRING("gamepadAutoConnect","\x1a","\x89","\x80","\xc3"));
	outFields->push(HX_HCSTRING("gamepad","\xa1","\xe0","\x85","\x89"));
	outFields->push(HX_HCSTRING("_gamepad","\x22","\x3a","\x3e","\xc3"));
	outFields->push(HX_HCSTRING("keysUp","\x6f","\x91","\xfa","\x3f"));
	outFields->push(HX_HCSTRING("keysDown","\x76","\x10","\x98","\x15"));
	outFields->push(HX_HCSTRING("keysLeft","\x1b","\x20","\xda","\x1a"));
	outFields->push(HX_HCSTRING("keysRight","\x48","\x05","\x0f","\xdb"));
	outFields->push(HX_HCSTRING("keysClick","\xb4","\x75","\x09","\x3a"));
	outFields->push(HX_HCSTRING("anchor","\x75","\x3a","\x71","\x60"));
	outFields->push(HX_HCSTRING("dispatchEvents","\x73","\x59","\xc9","\xd1"));
	outFields->push(HX_HCSTRING("inputMethod","\x8b","\xd2","\x8e","\xfe"));
	outFields->push(HX_HCSTRING("_lists","\x96","\xfd","\xec","\x70"));
	outFields->push(HX_HCSTRING("_widgets","\xb0","\x75","\x1f","\x62"));
	outFields->push(HX_HCSTRING("_clickPressed","\x19","\xaa","\x7f","\x0e"));
	outFields->push(HX_HCSTRING("_defaultCode","\x8f","\x58","\x8d","\x79"));
	outFields->push(HX_HCSTRING("_rightAnchor","\x72","\xb5","\xff","\x2f"));
	outFields->push(HX_HCSTRING("_topAnchor","\xab","\x2e","\x4f","\x84"));
	outFields->push(HX_HCSTRING("_leftAnchor","\xfb","\xc2","\x0b","\x62"));
	outFields->push(HX_HCSTRING("_bottomAnchor","\x9f","\xaa","\xd1","\xbb"));
	outFields->push(HX_HCSTRING("_clickTime","\x36","\xb4","\x9e","\x87"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxUICursor_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxUICursor_obj,callback),HX_HCSTRING("callback","\xc5","\x99","\x06","\x7f")},
	{hx::fsBool,(int)offsetof(FlxUICursor_obj,wrap),HX_HCSTRING("wrap","\xca","\x39","\xff","\x4e")},
	{hx::fsInt,(int)offsetof(FlxUICursor_obj,location),HX_HCSTRING("location","\x35","\x6e","\x46","\xe5")},
	{hx::fsInt,(int)offsetof(FlxUICursor_obj,listIndex),HX_HCSTRING("listIndex","\xd4","\x59","\x55","\xd4")},
	{hx::fsBool,(int)offsetof(FlxUICursor_obj,ignoreNextInput),HX_HCSTRING("ignoreNextInput","\xa5","\x52","\x4a","\x31")},
	{hx::fsObject /*::flixel::addons::ui::GamepadAutoConnectPreference*/ ,(int)offsetof(FlxUICursor_obj,gamepadAutoConnect),HX_HCSTRING("gamepadAutoConnect","\x1a","\x89","\x80","\xc3")},
	{hx::fsObject /*::flixel::input::gamepad::FlxGamepad*/ ,(int)offsetof(FlxUICursor_obj,_gamepad),HX_HCSTRING("_gamepad","\x22","\x3a","\x3e","\xc3")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxUICursor_obj,keysUp),HX_HCSTRING("keysUp","\x6f","\x91","\xfa","\x3f")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxUICursor_obj,keysDown),HX_HCSTRING("keysDown","\x76","\x10","\x98","\x15")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxUICursor_obj,keysLeft),HX_HCSTRING("keysLeft","\x1b","\x20","\xda","\x1a")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxUICursor_obj,keysRight),HX_HCSTRING("keysRight","\x48","\x05","\x0f","\xdb")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxUICursor_obj,keysClick),HX_HCSTRING("keysClick","\xb4","\x75","\x09","\x3a")},
	{hx::fsObject /*::flixel::addons::ui::Anchor*/ ,(int)offsetof(FlxUICursor_obj,anchor),HX_HCSTRING("anchor","\x75","\x3a","\x71","\x60")},
	{hx::fsBool,(int)offsetof(FlxUICursor_obj,dispatchEvents),HX_HCSTRING("dispatchEvents","\x73","\x59","\xc9","\xd1")},
	{hx::fsInt,(int)offsetof(FlxUICursor_obj,inputMethod),HX_HCSTRING("inputMethod","\x8b","\xd2","\x8e","\xfe")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(FlxUICursor_obj,_lists),HX_HCSTRING("_lists","\x96","\xfd","\xec","\x70")},
	{hx::fsObject /*Array< ::flixel::addons::ui::interfaces::IFlxUIWidget >*/ ,(int)offsetof(FlxUICursor_obj,_widgets),HX_HCSTRING("_widgets","\xb0","\x75","\x1f","\x62")},
	{hx::fsBool,(int)offsetof(FlxUICursor_obj,_clickPressed),HX_HCSTRING("_clickPressed","\x19","\xaa","\x7f","\x0e")},
	{hx::fsInt,(int)offsetof(FlxUICursor_obj,_defaultCode),HX_HCSTRING("_defaultCode","\x8f","\x58","\x8d","\x79")},
	{hx::fsObject /*::flixel::addons::ui::Anchor*/ ,(int)offsetof(FlxUICursor_obj,_rightAnchor),HX_HCSTRING("_rightAnchor","\x72","\xb5","\xff","\x2f")},
	{hx::fsObject /*::flixel::addons::ui::Anchor*/ ,(int)offsetof(FlxUICursor_obj,_topAnchor),HX_HCSTRING("_topAnchor","\xab","\x2e","\x4f","\x84")},
	{hx::fsObject /*::flixel::addons::ui::Anchor*/ ,(int)offsetof(FlxUICursor_obj,_leftAnchor),HX_HCSTRING("_leftAnchor","\xfb","\xc2","\x0b","\x62")},
	{hx::fsObject /*::flixel::addons::ui::Anchor*/ ,(int)offsetof(FlxUICursor_obj,_bottomAnchor),HX_HCSTRING("_bottomAnchor","\x9f","\xaa","\xd1","\xbb")},
	{hx::fsFloat,(int)offsetof(FlxUICursor_obj,_clickTime),HX_HCSTRING("_clickTime","\x36","\xb4","\x9e","\x87")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FlxUICursor_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &FlxUICursor_obj::KEYS_TAB,HX_HCSTRING("KEYS_TAB","\x2a","\xef","\x20","\x96")},
	{hx::fsInt,(void *) &FlxUICursor_obj::KEYS_WASD,HX_HCSTRING("KEYS_WASD","\x86","\x08","\xac","\xc8")},
	{hx::fsInt,(void *) &FlxUICursor_obj::KEYS_ARROWS,HX_HCSTRING("KEYS_ARROWS","\xb5","\x10","\x79","\x4f")},
	{hx::fsInt,(void *) &FlxUICursor_obj::KEYS_NUMPAD,HX_HCSTRING("KEYS_NUMPAD","\xf8","\x1c","\x03","\x39")},
	{hx::fsInt,(void *) &FlxUICursor_obj::GAMEPAD_DPAD,HX_HCSTRING("GAMEPAD_DPAD","\x2d","\xe3","\x43","\x25")},
	{hx::fsInt,(void *) &FlxUICursor_obj::GAMEPAD_LEFT_STICK,HX_HCSTRING("GAMEPAD_LEFT_STICK","\xf6","\xdd","\x44","\x78")},
	{hx::fsInt,(void *) &FlxUICursor_obj::GAMEPAD_RIGHT_STICK,HX_HCSTRING("GAMEPAD_RIGHT_STICK","\x2f","\x51","\xb1","\x65")},
	{hx::fsInt,(void *) &FlxUICursor_obj::GAMEPAD_SHOULDER_BUTTONS,HX_HCSTRING("GAMEPAD_SHOULDER_BUTTONS","\xc0","\x3b","\x6b","\x64")},
	{hx::fsInt,(void *) &FlxUICursor_obj::INPUT_NONE,HX_HCSTRING("INPUT_NONE","\x6d","\x8a","\x04","\x46")},
	{hx::fsInt,(void *) &FlxUICursor_obj::INPUT_KEYS,HX_HCSTRING("INPUT_KEYS","\xa9","\x59","\x01","\x44")},
	{hx::fsInt,(void *) &FlxUICursor_obj::INPUT_GAMEPAD,HX_HCSTRING("INPUT_GAMEPAD","\xec","\x03","\xbb","\x84")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxUICursor_obj_sMemberFields[] = {
	HX_HCSTRING("callback","\xc5","\x99","\x06","\x7f"),
	HX_HCSTRING("wrap","\xca","\x39","\xff","\x4e"),
	HX_HCSTRING("location","\x35","\x6e","\x46","\xe5"),
	HX_HCSTRING("listIndex","\xd4","\x59","\x55","\xd4"),
	HX_HCSTRING("ignoreNextInput","\xa5","\x52","\x4a","\x31"),
	HX_HCSTRING("findVisibleLocation","\x8e","\xc4","\x28","\x41"),
	HX_HCSTRING("getCurrentWidget","\x67","\xda","\x6f","\x99"),
	HX_HCSTRING("set_listIndex","\xb7","\x0f","\xbf","\xda"),
	HX_HCSTRING("set_visible","\x95","\xdf","\x8b","\x33"),
	HX_HCSTRING("set_location","\xb2","\x45","\x59","\xaf"),
	HX_HCSTRING("gamepadAutoConnect","\x1a","\x89","\x80","\xc3"),
	HX_HCSTRING("set_gamepad","\xc4","\x47","\xed","\x19"),
	HX_HCSTRING("get_gamepad","\xb8","\x40","\x80","\x0f"),
	HX_HCSTRING("_gamepad","\x22","\x3a","\x3e","\xc3"),
	HX_HCSTRING("keysUp","\x6f","\x91","\xfa","\x3f"),
	HX_HCSTRING("keysDown","\x76","\x10","\x98","\x15"),
	HX_HCSTRING("keysLeft","\x1b","\x20","\xda","\x1a"),
	HX_HCSTRING("keysRight","\x48","\x05","\x0f","\xdb"),
	HX_HCSTRING("keysClick","\xb4","\x75","\x09","\x3a"),
	HX_HCSTRING("anchor","\x75","\x3a","\x71","\x60"),
	HX_HCSTRING("dispatchEvents","\x73","\x59","\xc9","\xd1"),
	HX_HCSTRING("inputMethod","\x8b","\xd2","\x8e","\xfe"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("addWidgetsFromUI","\xec","\xd8","\x9e","\xd4"),
	HX_HCSTRING("jumpTo","\x09","\xa6","\x17","\x08"),
	HX_HCSTRING("jumpToXY","\x4a","\x47","\xd4","\xf9"),
	HX_HCSTRING("addWidgetList","\xc3","\x73","\xd5","\xc3"),
	HX_HCSTRING("addWidget","\xc5","\xe4","\x16","\x04"),
	HX_HCSTRING("sortWidgets","\x71","\xe4","\x48","\x14"),
	HX_HCSTRING("clearWidgets","\x22","\xce","\xe5","\x03"),
	HX_HCSTRING("removeWidget","\x28","\x4b","\x20","\xbb"),
	HX_HCSTRING("setDefaultKeys","\xd3","\x16","\x84","\xc0"),
	HX_HCSTRING("_lists","\x96","\xfd","\xec","\x70"),
	HX_HCSTRING("_widgets","\xb0","\x75","\x1f","\x62"),
	HX_HCSTRING("_clickPressed","\x19","\xaa","\x7f","\x0e"),
	HX_HCSTRING("_defaultCode","\x8f","\x58","\x8d","\x79"),
	HX_HCSTRING("_rightAnchor","\x72","\xb5","\xff","\x2f"),
	HX_HCSTRING("_topAnchor","\xab","\x2e","\x4f","\x84"),
	HX_HCSTRING("_leftAnchor","\xfb","\xc2","\x0b","\x62"),
	HX_HCSTRING("_bottomAnchor","\x9f","\xaa","\xd1","\xbb"),
	HX_HCSTRING("_clickTime","\x36","\xb4","\x9e","\x87"),
	HX_HCSTRING("getGamepad","\xab","\x66","\xe7","\xd8"),
	HX_HCSTRING("_sortIDVisible","\xfa","\xce","\x47","\x63"),
	HX_HCSTRING("_sortXYWidgetList","\x60","\xd1","\xfd","\xaf"),
	HX_HCSTRING("_sortXYVisible","\x94","\x52","\x90","\x70"),
	HX_HCSTRING("_addToKeys","\xd1","\xfd","\x86","\x90"),
	HX_HCSTRING("_clearKeys","\xe2","\x45","\x6a","\x16"),
	HX_HCSTRING("_newKeys","\xf5","\xe7","\x8b","\x30"),
	HX_HCSTRING("_checkKeys","\x9d","\x26","\x89","\xf6"),
	HX_HCSTRING("_clickKeysJustPressed","\xb9","\x86","\x60","\x65"),
	HX_HCSTRING("_clickKeysPressed","\x05","\x5e","\x53","\xd3"),
	HX_HCSTRING("_getWidgetPoint","\x95","\x69","\xa1","\x23"),
	HX_HCSTRING("_doMouseMove","\xcc","\x08","\xbe","\xb3"),
	HX_HCSTRING("_doPress","\x79","\x8d","\x6d","\x35"),
	HX_HCSTRING("_doRelease","\x3d","\xa9","\x0d","\xb5"),
	HX_HCSTRING("_findNextY","\xce","\x7c","\xcb","\xe3"),
	HX_HCSTRING("_wrapX","\x8f","\x9e","\x3a","\xcc"),
	HX_HCSTRING("_wrapY","\x90","\x9e","\x3a","\xcc"),
	HX_HCSTRING("_doInput","\x00","\xfe","\x02","\x2b"),
	HX_HCSTRING("_updateCursor","\x9e","\xc8","\x1a","\x21"),
	HX_HCSTRING("_flipAnchor","\x21","\x4e","\x28","\xaa"),
	::String(null()) };

static void FlxUICursor_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxUICursor_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxUICursor_obj::KEYS_TAB,"KEYS_TAB");
	HX_MARK_MEMBER_NAME(FlxUICursor_obj::KEYS_WASD,"KEYS_WASD");
	HX_MARK_MEMBER_NAME(FlxUICursor_obj::KEYS_ARROWS,"KEYS_ARROWS");
	HX_MARK_MEMBER_NAME(FlxUICursor_obj::KEYS_NUMPAD,"KEYS_NUMPAD");
	HX_MARK_MEMBER_NAME(FlxUICursor_obj::GAMEPAD_DPAD,"GAMEPAD_DPAD");
	HX_MARK_MEMBER_NAME(FlxUICursor_obj::GAMEPAD_LEFT_STICK,"GAMEPAD_LEFT_STICK");
	HX_MARK_MEMBER_NAME(FlxUICursor_obj::GAMEPAD_RIGHT_STICK,"GAMEPAD_RIGHT_STICK");
	HX_MARK_MEMBER_NAME(FlxUICursor_obj::GAMEPAD_SHOULDER_BUTTONS,"GAMEPAD_SHOULDER_BUTTONS");
	HX_MARK_MEMBER_NAME(FlxUICursor_obj::INPUT_NONE,"INPUT_NONE");
	HX_MARK_MEMBER_NAME(FlxUICursor_obj::INPUT_KEYS,"INPUT_KEYS");
	HX_MARK_MEMBER_NAME(FlxUICursor_obj::INPUT_GAMEPAD,"INPUT_GAMEPAD");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxUICursor_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxUICursor_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxUICursor_obj::KEYS_TAB,"KEYS_TAB");
	HX_VISIT_MEMBER_NAME(FlxUICursor_obj::KEYS_WASD,"KEYS_WASD");
	HX_VISIT_MEMBER_NAME(FlxUICursor_obj::KEYS_ARROWS,"KEYS_ARROWS");
	HX_VISIT_MEMBER_NAME(FlxUICursor_obj::KEYS_NUMPAD,"KEYS_NUMPAD");
	HX_VISIT_MEMBER_NAME(FlxUICursor_obj::GAMEPAD_DPAD,"GAMEPAD_DPAD");
	HX_VISIT_MEMBER_NAME(FlxUICursor_obj::GAMEPAD_LEFT_STICK,"GAMEPAD_LEFT_STICK");
	HX_VISIT_MEMBER_NAME(FlxUICursor_obj::GAMEPAD_RIGHT_STICK,"GAMEPAD_RIGHT_STICK");
	HX_VISIT_MEMBER_NAME(FlxUICursor_obj::GAMEPAD_SHOULDER_BUTTONS,"GAMEPAD_SHOULDER_BUTTONS");
	HX_VISIT_MEMBER_NAME(FlxUICursor_obj::INPUT_NONE,"INPUT_NONE");
	HX_VISIT_MEMBER_NAME(FlxUICursor_obj::INPUT_KEYS,"INPUT_KEYS");
	HX_VISIT_MEMBER_NAME(FlxUICursor_obj::INPUT_GAMEPAD,"INPUT_GAMEPAD");
};

#endif

hx::Class FlxUICursor_obj::__mClass;

static ::String FlxUICursor_obj_sStaticFields[] = {
	HX_HCSTRING("KEYS_TAB","\x2a","\xef","\x20","\x96"),
	HX_HCSTRING("KEYS_WASD","\x86","\x08","\xac","\xc8"),
	HX_HCSTRING("KEYS_ARROWS","\xb5","\x10","\x79","\x4f"),
	HX_HCSTRING("KEYS_NUMPAD","\xf8","\x1c","\x03","\x39"),
	HX_HCSTRING("GAMEPAD_DPAD","\x2d","\xe3","\x43","\x25"),
	HX_HCSTRING("GAMEPAD_LEFT_STICK","\xf6","\xdd","\x44","\x78"),
	HX_HCSTRING("GAMEPAD_RIGHT_STICK","\x2f","\x51","\xb1","\x65"),
	HX_HCSTRING("GAMEPAD_SHOULDER_BUTTONS","\xc0","\x3b","\x6b","\x64"),
	HX_HCSTRING("INPUT_NONE","\x6d","\x8a","\x04","\x46"),
	HX_HCSTRING("INPUT_KEYS","\xa9","\x59","\x01","\x44"),
	HX_HCSTRING("INPUT_GAMEPAD","\xec","\x03","\xbb","\x84"),
	::String(null())
};

void FlxUICursor_obj::__register()
{
	hx::Object *dummy = new FlxUICursor_obj;
	FlxUICursor_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.ui.FlxUICursor","\x0b","\x79","\xa4","\x79");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxUICursor_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxUICursor_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxUICursor_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxUICursor_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxUICursor_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxUICursor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxUICursor_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxUICursor_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_204_boot)
HXDLIN( 204)		KEYS_TAB = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_205_boot)
HXDLIN( 205)		KEYS_WASD = (int)16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_206_boot)
HXDLIN( 206)		KEYS_ARROWS = (int)256;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_207_boot)
HXDLIN( 207)		KEYS_NUMPAD = (int)4096;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_209_boot)
HXDLIN( 209)		GAMEPAD_DPAD = (int)65536;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_210_boot)
HXDLIN( 210)		GAMEPAD_LEFT_STICK = (int)1048576;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_211_boot)
HXDLIN( 211)		GAMEPAD_RIGHT_STICK = (int)16777216;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_212_boot)
HXDLIN( 212)		GAMEPAD_SHOULDER_BUTTONS = (int)268435456;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_222_boot)
HXDLIN( 222)		INPUT_NONE = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_223_boot)
HXDLIN( 223)		INPUT_KEYS = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_224_boot)
HXDLIN( 224)		INPUT_GAMEPAD = (int)16;
            	}
}

} // end namespace flixel
} // end namespace addons
} // end namespace ui
