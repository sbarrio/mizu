// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI
#include <flixel/addons/ui/FlxUI.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIInputText
#include <flixel/addons/ui/FlxUIInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUINumericStepper
#include <flixel/addons/ui/FlxUINumericStepper.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITypedButton
#include <flixel/addons/ui/FlxUITypedButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ICursorPointable
#include <flixel/addons/ui/interfaces/ICursorPointable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIButton
#include <flixel/addons/ui/interfaces/IFlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton
#include <flixel/ui/FlxTypedButton.h>
#endif
#ifndef INCLUDED_flixel_ui__FlxButton_FlxButtonEvent
#include <flixel/ui/_FlxButton/FlxButtonEvent.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b3434b006136ea9e_16_new,"flixel.addons.ui.FlxUINumericStepper","new",0xdb22a66b,"flixel.addons.ui.FlxUINumericStepper.new","flixel/addons/ui/FlxUINumericStepper.hx",16,0xbef22206)
HX_LOCAL_STACK_FRAME(_hx_pos_b3434b006136ea9e_39_set_params,"flixel.addons.ui.FlxUINumericStepper","set_params",0xbd02dad8,"flixel.addons.ui.FlxUINumericStepper.set_params","flixel/addons/ui/FlxUINumericStepper.hx",39,0xbef22206)
HX_LOCAL_STACK_FRAME(_hx_pos_b3434b006136ea9e_45_set_skipButtonUpdate,"flixel.addons.ui.FlxUINumericStepper","set_skipButtonUpdate",0x707fcccc,"flixel.addons.ui.FlxUINumericStepper.set_skipButtonUpdate","flixel/addons/ui/FlxUINumericStepper.hx",45,0xbef22206)
HX_LOCAL_STACK_FRAME(_hx_pos_b3434b006136ea9e_53_set_color,"flixel.addons.ui.FlxUINumericStepper","set_color",0x15562a11,"flixel.addons.ui.FlxUINumericStepper.set_color","flixel/addons/ui/FlxUINumericStepper.hx",53,0xbef22206)
HX_LOCAL_STACK_FRAME(_hx_pos_b3434b006136ea9e_66_set_min,"flixel.addons.ui.FlxUINumericStepper","set_min",0x8923a2c0,"flixel.addons.ui.FlxUINumericStepper.set_min","flixel/addons/ui/FlxUINumericStepper.hx",66,0xbef22206)
HX_LOCAL_STACK_FRAME(_hx_pos_b3434b006136ea9e_72_set_max,"flixel.addons.ui.FlxUINumericStepper","set_max",0x89239bd2,"flixel.addons.ui.FlxUINumericStepper.set_max","flixel/addons/ui/FlxUINumericStepper.hx",72,0xbef22206)
HX_LOCAL_STACK_FRAME(_hx_pos_b3434b006136ea9e_78_set_value,"flixel.addons.ui.FlxUINumericStepper","set_value",0xfcb2381f,"flixel.addons.ui.FlxUINumericStepper.set_value","flixel/addons/ui/FlxUINumericStepper.hx",78,0xbef22206)
HX_LOCAL_STACK_FRAME(_hx_pos_b3434b006136ea9e_94_set_decimals,"flixel.addons.ui.FlxUINumericStepper","set_decimals",0xbb56b2d4,"flixel.addons.ui.FlxUINumericStepper.set_decimals","flixel/addons/ui/FlxUINumericStepper.hx",94,0xbef22206)
HX_LOCAL_STACK_FRAME(_hx_pos_b3434b006136ea9e_101_set_isPercent,"flixel.addons.ui.FlxUINumericStepper","set_isPercent",0xa2c7cfa9,"flixel.addons.ui.FlxUINumericStepper.set_isPercent","flixel/addons/ui/FlxUINumericStepper.hx",101,0xbef22206)
HX_LOCAL_STACK_FRAME(_hx_pos_b3434b006136ea9e_107_set_stack,"flixel.addons.ui.FlxUINumericStepper","set_stack",0x4f051ff6,"flixel.addons.ui.FlxUINumericStepper.set_stack","flixel/addons/ui/FlxUINumericStepper.hx",107,0xbef22206)
HX_LOCAL_STACK_FRAME(_hx_pos_b3434b006136ea9e_145_decimalize,"flixel.addons.ui.FlxUINumericStepper","decimalize",0x151fa4b8,"flixel.addons.ui.FlxUINumericStepper.decimalize","flixel/addons/ui/FlxUINumericStepper.hx",145,0xbef22206)
HX_LOCAL_STACK_FRAME(_hx_pos_b3434b006136ea9e_223__onInputTextEvent,"flixel.addons.ui.FlxUINumericStepper","_onInputTextEvent",0x97f1d1ec,"flixel.addons.ui.FlxUINumericStepper._onInputTextEvent","flixel/addons/ui/FlxUINumericStepper.hx",223,0xbef22206)
HX_LOCAL_STACK_FRAME(_hx_pos_b3434b006136ea9e_250__onPlus,"flixel.addons.ui.FlxUINumericStepper","_onPlus",0xcab59143,"flixel.addons.ui.FlxUINumericStepper._onPlus","flixel/addons/ui/FlxUINumericStepper.hx",250,0xbef22206)
HX_LOCAL_STACK_FRAME(_hx_pos_b3434b006136ea9e_256__onMinus,"flixel.addons.ui.FlxUINumericStepper","_onMinus",0xd7f4da67,"flixel.addons.ui.FlxUINumericStepper._onMinus","flixel/addons/ui/FlxUINumericStepper.hx",256,0xbef22206)
HX_LOCAL_STACK_FRAME(_hx_pos_b3434b006136ea9e_263__doCallback,"flixel.addons.ui.FlxUINumericStepper","_doCallback",0xf5f9d69a,"flixel.addons.ui.FlxUINumericStepper._doCallback","flixel/addons/ui/FlxUINumericStepper.hx",263,0xbef22206)
HX_LOCAL_STACK_FRAME(_hx_pos_b3434b006136ea9e_31_boot,"flixel.addons.ui.FlxUINumericStepper","boot",0xdb47f7c7,"flixel.addons.ui.FlxUINumericStepper.boot","flixel/addons/ui/FlxUINumericStepper.hx",31,0xbef22206)
HX_LOCAL_STACK_FRAME(_hx_pos_b3434b006136ea9e_32_boot,"flixel.addons.ui.FlxUINumericStepper","boot",0xdb47f7c7,"flixel.addons.ui.FlxUINumericStepper.boot","flixel/addons/ui/FlxUINumericStepper.hx",32,0xbef22206)
HX_LOCAL_STACK_FRAME(_hx_pos_b3434b006136ea9e_34_boot,"flixel.addons.ui.FlxUINumericStepper","boot",0xdb47f7c7,"flixel.addons.ui.FlxUINumericStepper.boot","flixel/addons/ui/FlxUINumericStepper.hx",34,0xbef22206)
HX_LOCAL_STACK_FRAME(_hx_pos_b3434b006136ea9e_35_boot,"flixel.addons.ui.FlxUINumericStepper","boot",0xdb47f7c7,"flixel.addons.ui.FlxUINumericStepper.boot","flixel/addons/ui/FlxUINumericStepper.hx",35,0xbef22206)
HX_LOCAL_STACK_FRAME(_hx_pos_b3434b006136ea9e_36_boot,"flixel.addons.ui.FlxUINumericStepper","boot",0xdb47f7c7,"flixel.addons.ui.FlxUINumericStepper.boot","flixel/addons/ui/FlxUINumericStepper.hx",36,0xbef22206)
namespace flixel{
namespace addons{
namespace ui{

void FlxUINumericStepper_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< Float >  __o_StepSize,hx::Null< Float >  __o_DefaultValue,hx::Null< Float >  __o_Min,hx::Null< Float >  __o_Max,hx::Null< int >  __o_Decimals,hx::Null< int >  __o_Stack, ::flixel::text::FlxText TextField, ::flixel::addons::ui::FlxUITypedButton ButtonPlus, ::flixel::addons::ui::FlxUITypedButton ButtonMinus,hx::Null< bool >  __o_IsPercent){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
Float StepSize = __o_StepSize.Default(1);
Float DefaultValue = __o_DefaultValue.Default(0);
Float Min = __o_Min.Default(-999);
Float Max = __o_Max.Default(999);
int Decimals = __o_Decimals.Default(0);
int Stack = __o_Stack.Default(1);
bool IsPercent = __o_IsPercent.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_b3434b006136ea9e_16_new)
HXLINE(  29)		this->isPercent = false;
HXLINE(  28)		this->stack = (int)1;
HXLINE(  27)		this->value = ((Float)0);
HXLINE(  26)		this->max = ((Float)10);
HXLINE(  25)		this->min = ((Float)0);
HXLINE(  24)		this->decimals = (int)0;
HXLINE(  23)		this->stepSize = ((Float)0);
HXLINE( 168)		super::__construct(X,Y);
HXLINE( 170)		if (hx::IsNull( TextField )) {
HXLINE( 171)			TextField =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)25,null(),null(),null(),null(),null());
            		}
HXLINE( 173)		TextField->set_x((int)0);
HXLINE( 174)		TextField->set_y((int)0);
HXLINE( 175)		this->text_field = TextField;
HXLINE( 176)		 ::flixel::text::FlxText _hx_tmp = this->text_field;
HXDLIN( 176)		_hx_tmp->set_text(::Std_obj::string(DefaultValue));
HXLINE( 178)		if (::Std_obj::is(this->text_field,hx::ClassOf< ::flixel::addons::ui::FlxUIInputText >())) {
HXLINE( 180)			 ::flixel::addons::ui::FlxUIInputText fuit = ( ( ::flixel::addons::ui::FlxUIInputText)(this->text_field) );
HXLINE( 181)			fuit->set_lines((int)1);
HXLINE( 182)			fuit->callback = this->_onInputTextEvent_dyn();
HXLINE( 183)			fuit->broadcastToFlxUI = false;
            		}
HXLINE( 186)		this->stepSize = StepSize;
HXLINE( 187)		this->set_decimals(Decimals);
HXLINE( 188)		this->set_min(Min);
HXLINE( 189)		this->set_max(Max);
HXLINE( 190)		this->set_value(DefaultValue);
HXLINE( 191)		this->set_isPercent(IsPercent);
HXLINE( 193)		int btnSize = ((int)1 + TextField->get_height());
HXLINE( 195)		if (hx::IsNull( ButtonPlus )) {
HXLINE( 196)			ButtonPlus =  ::flixel::addons::ui::FlxUITypedButton_obj::__alloc( HX_CTX ,(int)0,(int)0,null());
HXLINE( 197)			ButtonPlus->loadGraphicSlice9(::cpp::VirtualArray_obj::__new(1)->init(0,HX_("flixel/flixel-ui/img/button_thin.png",58,62,55,9f)),btnSize,btnSize,::Array_obj< ::Dynamic>::__new(1)->init(0,::flixel::util::FlxStringUtil_obj::toIntArray(HX_("2,2,15,15",38,7b,83,18))),(int)0,(int)-1,false,(int)18,(int)18,null());
HXLINE( 198)			ButtonPlus->set_label( ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(int)0,(int)0,HX_("flixel/flixel-ui/img/plus_mark.png",e4,f7,7a,be))).StaticCast<  ::flixel::FlxSprite >();
            		}
HXLINE( 200)		if (hx::IsNull( ButtonMinus )) {
HXLINE( 201)			ButtonMinus =  ::flixel::addons::ui::FlxUITypedButton_obj::__alloc( HX_CTX ,(int)0,(int)0,null());
HXLINE( 202)			ButtonMinus->loadGraphicSlice9(::cpp::VirtualArray_obj::__new(1)->init(0,HX_("flixel/flixel-ui/img/button_thin.png",58,62,55,9f)),btnSize,btnSize,::Array_obj< ::Dynamic>::__new(1)->init(0,::flixel::util::FlxStringUtil_obj::toIntArray(HX_("2,2,15,15",38,7b,83,18))),(int)0,(int)-1,false,(int)18,(int)18,null());
HXLINE( 203)			ButtonMinus->set_label( ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(int)0,(int)0,HX_("flixel/flixel-ui/img/minus_mark.png",80,c9,b5,31))).StaticCast<  ::flixel::FlxSprite >();
            		}
HXLINE( 206)		this->button_plus = ButtonPlus;
HXLINE( 207)		this->button_minus = ButtonMinus;
HXLINE( 209)		this->add(this->text_field);
HXLINE( 210)		this->add(this->button_plus);
HXLINE( 211)		this->add(this->button_minus);
HXLINE( 213)		this->button_plus->onUp->callback = this->_onPlus_dyn();
HXLINE( 214)		this->button_plus->broadcastToFlxUI = false;
HXLINE( 216)		this->button_minus->onUp->callback = this->_onMinus_dyn();
HXLINE( 217)		this->button_minus->broadcastToFlxUI = false;
HXLINE( 219)		this->set_stack(Stack);
            	}

Dynamic FlxUINumericStepper_obj::__CreateEmpty() { return new FlxUINumericStepper_obj; }

void *FlxUINumericStepper_obj::_hx_vtable = 0;

Dynamic FlxUINumericStepper_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxUINumericStepper_obj > _hx_result = new FlxUINumericStepper_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11]);
	return _hx_result;
}

bool FlxUINumericStepper_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			if (inClassId<=(int)0x07172f7f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x07172f7f;
			} else {
				return inClassId==(int)0x0b6ffd77;
			}
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		if (inClassId<=(int)0x282173df) {
			return inClassId==(int)0x263b73ac || inClassId==(int)0x282173df;
		} else {
			return inClassId==(int)0x2e105115;
		}
	}
}

static ::flixel::IFlxSprite_obj _hx_flixel_addons_ui_FlxUINumericStepper__hx_flixel_IFlxSprite= {
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUINumericStepper_obj::set_active,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUINumericStepper_obj::set_visible,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUINumericStepper_obj::set_alive,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUINumericStepper_obj::set_exists,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUINumericStepper_obj::draw,
	( void (hx::Object::*)(Float))&::flixel::addons::ui::FlxUINumericStepper_obj::update,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUINumericStepper_obj::destroy,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUINumericStepper_obj::kill,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUINumericStepper_obj::revive,
	( ::String (hx::Object::*)())&::flixel::addons::ui::FlxUINumericStepper_obj::toString,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUINumericStepper_obj::set_x,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUINumericStepper_obj::set_y,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUINumericStepper_obj::set_alpha,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUINumericStepper_obj::set_angle,
	( int (hx::Object::*)(int))&::flixel::addons::ui::FlxUINumericStepper_obj::set_facing,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUINumericStepper_obj::set_moves,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUINumericStepper_obj::set_immovable,
	( void (hx::Object::*)(Float,Float))&::flixel::addons::ui::FlxUINumericStepper_obj::reset,
	( void (hx::Object::*)(hx::Null< Float > ,hx::Null< Float > ))&::flixel::addons::ui::FlxUINumericStepper_obj::setPosition,
};

static ::flixel::IFlxBasic_obj _hx_flixel_addons_ui_FlxUINumericStepper__hx_flixel_IFlxBasic= {
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUINumericStepper_obj::set_active,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUINumericStepper_obj::set_visible,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUINumericStepper_obj::set_alive,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUINumericStepper_obj::set_exists,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUINumericStepper_obj::draw,
	( void (hx::Object::*)(Float))&::flixel::addons::ui::FlxUINumericStepper_obj::update,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUINumericStepper_obj::destroy,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUINumericStepper_obj::kill,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUINumericStepper_obj::revive,
	( ::String (hx::Object::*)())&::flixel::addons::ui::FlxUINumericStepper_obj::toString,
};

static ::flixel::addons::ui::interfaces::IFlxUIWidget_obj _hx_flixel_addons_ui_FlxUINumericStepper__hx_flixel_addons_ui_interfaces_IFlxUIWidget= {
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUINumericStepper_obj::set_active,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUINumericStepper_obj::set_visible,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUINumericStepper_obj::set_alive,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUINumericStepper_obj::set_exists,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUINumericStepper_obj::draw,
	( void (hx::Object::*)(Float))&::flixel::addons::ui::FlxUINumericStepper_obj::update,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUINumericStepper_obj::destroy,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUINumericStepper_obj::kill,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUINumericStepper_obj::revive,
	( ::String (hx::Object::*)())&::flixel::addons::ui::FlxUINumericStepper_obj::toString,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUINumericStepper_obj::set_x,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUINumericStepper_obj::set_y,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUINumericStepper_obj::set_alpha,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUINumericStepper_obj::set_angle,
	( int (hx::Object::*)(int))&::flixel::addons::ui::FlxUINumericStepper_obj::set_facing,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUINumericStepper_obj::set_moves,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUINumericStepper_obj::set_immovable,
	( void (hx::Object::*)(Float,Float))&::flixel::addons::ui::FlxUINumericStepper_obj::reset,
	( void (hx::Object::*)(hx::Null< Float > ,hx::Null< Float > ))&::flixel::addons::ui::FlxUINumericStepper_obj::setPosition,
	( Float (hx::Object::*)())&::flixel::addons::ui::FlxUINumericStepper_obj::get_width,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUINumericStepper_obj::set_width,
	( Float (hx::Object::*)())&::flixel::addons::ui::FlxUINumericStepper_obj::get_height,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUINumericStepper_obj::set_height,
};

static ::flixel::addons::ui::interfaces::IHasParams_obj _hx_flixel_addons_ui_FlxUINumericStepper__hx_flixel_addons_ui_interfaces_IHasParams= {
	( ::cpp::VirtualArray (hx::Object::*)(::cpp::VirtualArray))&::flixel::addons::ui::FlxUINumericStepper_obj::set_params,
};

static ::flixel::addons::ui::interfaces::IFlxUIClickable_obj _hx_flixel_addons_ui_FlxUINumericStepper__hx_flixel_addons_ui_interfaces_IFlxUIClickable= {
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUINumericStepper_obj::set_skipButtonUpdate,
};

void *FlxUINumericStepper_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x897c83aa: return &_hx_flixel_addons_ui_FlxUINumericStepper__hx_flixel_IFlxSprite;
		case (int)0x284cfea9: return &_hx_flixel_addons_ui_FlxUINumericStepper__hx_flixel_IFlxBasic;
		case (int)0x998525de: return &_hx_flixel_addons_ui_FlxUINumericStepper__hx_flixel_addons_ui_interfaces_IFlxUIWidget;
		case (int)0x9e5db374: return &_hx_flixel_addons_ui_FlxUINumericStepper__hx_flixel_addons_ui_interfaces_IHasParams;
		case (int)0x3e998408: return &_hx_flixel_addons_ui_FlxUINumericStepper__hx_flixel_addons_ui_interfaces_IFlxUIClickable;
	}
	return super::_hx_getInterface(inHash);
}

::cpp::VirtualArray FlxUINumericStepper_obj::set_params(::cpp::VirtualArray p){
            	HX_STACKFRAME(&_hx_pos_b3434b006136ea9e_39_set_params)
HXLINE(  40)		this->params = p;
HXLINE(  41)		return this->params;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUINumericStepper_obj,set_params,return )

bool FlxUINumericStepper_obj::set_skipButtonUpdate(bool b){
            	HX_STACKFRAME(&_hx_pos_b3434b006136ea9e_45_set_skipButtonUpdate)
HXLINE(  46)		this->skipButtonUpdate = b;
HXLINE(  47)		this->button_plus->set_skipButtonUpdate(b);
HXLINE(  48)		this->button_minus->set_skipButtonUpdate(b);
HXLINE(  50)		return b;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUINumericStepper_obj,set_skipButtonUpdate,return )

int FlxUINumericStepper_obj::set_color(int _tmp_Value){
            	HX_STACKFRAME(&_hx_pos_b3434b006136ea9e_53_set_color)
HXLINE(  54)		int Value = _tmp_Value;
HXDLIN(  54)		this->color = Value;
HXLINE(  55)		this->button_plus->set_color(Value);
HXLINE(  56)		this->button_minus->set_color(Value);
HXLINE(  57)		if (::Std_obj::is(this->text_field,hx::ClassOf< ::flixel::addons::ui::FlxInputText >())) {
HXLINE(  58)			 ::flixel::addons::ui::FlxInputText fit = ( ( ::flixel::addons::ui::FlxInputText)(this->text_field) );
HXLINE(  59)			fit->set_backgroundColor(Value);
            		}
            		else {
HXLINE(  61)			this->text_field->set_color(Value);
            		}
HXLINE(  63)		return Value;
            	}


Float FlxUINumericStepper_obj::set_min(Float f){
            	HX_STACKFRAME(&_hx_pos_b3434b006136ea9e_66_set_min)
HXLINE(  67)		this->min = f;
HXLINE(  68)		if ((this->value < this->min)) {
HXLINE(  68)			this->set_value(this->min);
            		}
HXLINE(  69)		return this->min;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUINumericStepper_obj,set_min,return )

Float FlxUINumericStepper_obj::set_max(Float f){
            	HX_STACKFRAME(&_hx_pos_b3434b006136ea9e_72_set_max)
HXLINE(  73)		this->max = f;
HXLINE(  74)		if ((this->value > this->max)) {
HXLINE(  74)			this->set_value(this->max);
            		}
HXLINE(  75)		return this->max;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUINumericStepper_obj,set_max,return )

Float FlxUINumericStepper_obj::set_value(Float f){
            	HX_STACKFRAME(&_hx_pos_b3434b006136ea9e_78_set_value)
HXLINE(  79)		this->value = f;
HXLINE(  80)		if ((this->value < this->min)) {
HXLINE(  80)			this->value = this->min;
            		}
HXLINE(  81)		if ((this->value > this->max)) {
HXLINE(  81)			this->value = this->max;
            		}
HXLINE(  82)		if (hx::IsNotNull( this->text_field )) {
HXLINE(  83)			Float displayValue = this->value;
HXLINE(  84)			if (this->isPercent) {
HXLINE(  85)				displayValue = (displayValue * (int)100);
HXLINE(  86)				 ::flixel::text::FlxText _hx_tmp = this->text_field;
HXDLIN(  86)				Float tens = ::Math_obj::pow((int)10,this->decimals);
HXDLIN(  86)				_hx_tmp->set_text((::Std_obj::string(::Std_obj::string(((Float)::Math_obj::round((displayValue * tens)) / (Float)tens))) + HX_("%",25,00,00,00)));
            			}
            			else {
HXLINE(  88)				 ::flixel::text::FlxText _hx_tmp1 = this->text_field;
HXDLIN(  88)				Float tens1 = ::Math_obj::pow((int)10,this->decimals);
HXDLIN(  88)				_hx_tmp1->set_text(::Std_obj::string(((Float)::Math_obj::round((displayValue * tens1)) / (Float)tens1)));
            			}
            		}
HXLINE(  91)		return this->value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUINumericStepper_obj,set_value,return )

int FlxUINumericStepper_obj::set_decimals(int i){
            	HX_STACKFRAME(&_hx_pos_b3434b006136ea9e_94_set_decimals)
HXLINE(  95)		this->decimals = i;
HXLINE(  96)		if ((i < (int)0)) {
HXLINE(  96)			this->decimals = (int)0;
            		}
HXLINE(  97)		this->set_value(this->value);
HXLINE(  98)		return this->decimals;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUINumericStepper_obj,set_decimals,return )

bool FlxUINumericStepper_obj::set_isPercent(bool b){
            	HX_STACKFRAME(&_hx_pos_b3434b006136ea9e_101_set_isPercent)
HXLINE( 102)		this->isPercent = b;
HXLINE( 103)		this->set_value(this->value);
HXLINE( 104)		return this->isPercent;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUINumericStepper_obj,set_isPercent,return )

int FlxUINumericStepper_obj::set_stack(int s){
            	HX_STACKFRAME(&_hx_pos_b3434b006136ea9e_107_set_stack)
HXLINE( 108)		this->stack = s;
HXLINE( 109)		int btnSize = (int)10;
HXLINE( 110)		int offsetX = (int)0;
HXLINE( 111)		int offsetY = (int)0;
HXLINE( 112)		if (::Std_obj::is(this->text_field,hx::ClassOf< ::flixel::addons::ui::FlxUIInputText >())) {
HXLINE( 113)			offsetX = (int)1;
HXLINE( 114)			offsetY = (int)1;
            		}
HXLINE( 116)		{
HXLINE( 116)			int _g = this->stack;
HXDLIN( 116)			switch((int)(_g)){
            				case (int)0: {
HXLINE( 130)					btnSize = ((int)1 + ((Float)this->text_field->get_height() / (Float)(int)2));
HXLINE( 131)					if ((this->button_plus->get_height() != btnSize)) {
HXLINE( 132)						this->button_plus->resize(btnSize,btnSize);
            					}
HXLINE( 134)					if ((this->button_minus->get_height() != btnSize)) {
HXLINE( 135)						this->button_minus->resize(btnSize,btnSize);
            					}
HXLINE( 137)					 ::flixel::addons::ui::FlxUITypedButton _hx_tmp = this->button_plus;
HXDLIN( 137)					Float _hx_tmp1 = (offsetX + this->text_field->x);
HXDLIN( 137)					_hx_tmp->set_x((_hx_tmp1 + this->text_field->get_width()));
HXLINE( 138)					 ::flixel::addons::ui::FlxUITypedButton _hx_tmp2 = this->button_plus;
HXDLIN( 138)					_hx_tmp2->set_y((-(offsetY) + this->text_field->y));
HXLINE( 139)					 ::flixel::addons::ui::FlxUITypedButton _hx_tmp3 = this->button_minus;
HXDLIN( 139)					Float _hx_tmp4 = (offsetX + this->text_field->x);
HXDLIN( 139)					_hx_tmp3->set_x((_hx_tmp4 + this->text_field->get_width()));
HXLINE( 140)					 ::flixel::addons::ui::FlxUITypedButton _hx_tmp5 = this->button_minus;
HXDLIN( 140)					Float _hx_tmp6 = (offsetY + this->text_field->y);
HXDLIN( 140)					Float _hx_tmp7 = this->text_field->get_height();
HXDLIN( 140)					_hx_tmp5->set_y((_hx_tmp6 + (_hx_tmp7 - this->button_minus->get_height())));
            				}
            				break;
            				case (int)1: {
HXLINE( 118)					btnSize = ((int)2 + this->text_field->get_height());
HXLINE( 119)					if ((this->button_plus->get_height() != btnSize)) {
HXLINE( 120)						this->button_plus->resize(btnSize,btnSize);
            					}
HXLINE( 122)					if ((this->button_minus->get_height() != btnSize)) {
HXLINE( 123)						this->button_minus->resize(btnSize,btnSize);
            					}
HXLINE( 125)					 ::flixel::addons::ui::FlxUITypedButton _hx_tmp8 = this->button_plus;
HXDLIN( 125)					Float _hx_tmp9 = (offsetX + this->text_field->x);
HXDLIN( 125)					_hx_tmp8->set_x((_hx_tmp9 + this->text_field->get_width()));
HXLINE( 126)					 ::flixel::addons::ui::FlxUITypedButton _hx_tmp10 = this->button_plus;
HXDLIN( 126)					_hx_tmp10->set_y((-(offsetY) + this->text_field->y));
HXLINE( 127)					 ::flixel::addons::ui::FlxUITypedButton _hx_tmp11 = this->button_minus;
HXDLIN( 127)					Float _hx_tmp12 = this->button_plus->x;
HXDLIN( 127)					_hx_tmp11->set_x((_hx_tmp12 + this->button_plus->get_width()));
HXLINE( 128)					this->button_minus->set_y(this->button_plus->y);
            				}
            				break;
            			}
            		}
HXLINE( 142)		return this->stack;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUINumericStepper_obj,set_stack,return )

::String FlxUINumericStepper_obj::decimalize(Float f,int digits){
            	HX_STACKFRAME(&_hx_pos_b3434b006136ea9e_145_decimalize)
HXLINE( 146)		Float tens = ::Math_obj::pow((int)10,digits);
HXLINE( 147)		return ::Std_obj::string(((Float)::Math_obj::round((f * tens)) / (Float)tens));
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUINumericStepper_obj,decimalize,return )

void FlxUINumericStepper_obj::_onInputTextEvent(::String text,::String action){
            	HX_STACKFRAME(&_hx_pos_b3434b006136ea9e_223__onInputTextEvent)
HXLINE( 224)		if ((text == HX_("",00,00,00,00))) {
HXLINE( 226)			text = ::Std_obj::string(this->min);
            		}
HXLINE( 229)		int numDecimals = (int)0;
HXLINE( 230)		{
HXLINE( 230)			int _g1 = (int)0;
HXDLIN( 230)			int _g = text.length;
HXDLIN( 230)			while((_g1 < _g)){
HXLINE( 230)				_g1 = (_g1 + (int)1);
HXDLIN( 230)				int i = (_g1 - (int)1);
HXLINE( 232)				::String _hx_char = text.charAt(i);
HXLINE( 233)				if ((_hx_char == HX_(".",2e,00,00,00))) {
HXLINE( 235)					numDecimals = (numDecimals + (int)1);
            				}
            			}
            		}
HXLINE( 239)		bool justAddedDecimal;
HXDLIN( 239)		if ((numDecimals == (int)1)) {
HXLINE( 239)			int justAddedDecimal1 = text.indexOf(HX_(".",2e,00,00,00),null());
HXDLIN( 239)			justAddedDecimal = (justAddedDecimal1 == (text.length - (int)1));
            		}
            		else {
HXLINE( 239)			justAddedDecimal = false;
            		}
HXLINE( 242)		if (!(justAddedDecimal)) {
HXLINE( 244)			this->set_value(::Std_obj::parseFloat(text));
HXLINE( 245)			this->_doCallback(HX_("edit_numeric_stepper",ea,96,04,5c));
HXLINE( 246)			this->_doCallback(HX_("change_numeric_stepper",50,0a,cc,bb));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUINumericStepper_obj,_onInputTextEvent,(void))

void FlxUINumericStepper_obj::_onPlus(){
            	HX_STACKFRAME(&_hx_pos_b3434b006136ea9e_250__onPlus)
HXLINE( 251)		{
HXLINE( 251)			 ::flixel::addons::ui::FlxUINumericStepper _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 251)			_g->set_value((_g->value + this->stepSize));
            		}
HXLINE( 252)		this->_doCallback(HX_("click_numeric_stepper",28,25,65,6e));
HXLINE( 253)		this->_doCallback(HX_("change_numeric_stepper",50,0a,cc,bb));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUINumericStepper_obj,_onPlus,(void))

void FlxUINumericStepper_obj::_onMinus(){
            	HX_STACKFRAME(&_hx_pos_b3434b006136ea9e_256__onMinus)
HXLINE( 257)		{
HXLINE( 257)			 ::flixel::addons::ui::FlxUINumericStepper _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 257)			_g->set_value((_g->value - this->stepSize));
            		}
HXLINE( 258)		this->_doCallback(HX_("click_numeric_stepper",28,25,65,6e));
HXLINE( 259)		this->_doCallback(HX_("change_numeric_stepper",50,0a,cc,bb));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUINumericStepper_obj,_onMinus,(void))

void FlxUINumericStepper_obj::_doCallback(::String event_name){
            	HX_STACKFRAME(&_hx_pos_b3434b006136ea9e_263__doCallback)
HXDLIN( 263)		if (this->broadcastToFlxUI) {
HXLINE( 264)			::flixel::addons::ui::FlxUI_obj::event(event_name,hx::ObjectPtr<OBJ_>(this),this->value,this->params);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUINumericStepper_obj,_doCallback,(void))

int FlxUINumericStepper_obj::STACK_VERTICAL;

int FlxUINumericStepper_obj::STACK_HORIZONTAL;

::String FlxUINumericStepper_obj::CLICK_EVENT;

::String FlxUINumericStepper_obj::EDIT_EVENT;

::String FlxUINumericStepper_obj::CHANGE_EVENT;


hx::ObjectPtr< FlxUINumericStepper_obj > FlxUINumericStepper_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< Float >  __o_StepSize,hx::Null< Float >  __o_DefaultValue,hx::Null< Float >  __o_Min,hx::Null< Float >  __o_Max,hx::Null< int >  __o_Decimals,hx::Null< int >  __o_Stack, ::flixel::text::FlxText TextField, ::flixel::addons::ui::FlxUITypedButton ButtonPlus, ::flixel::addons::ui::FlxUITypedButton ButtonMinus,hx::Null< bool >  __o_IsPercent) {
	hx::ObjectPtr< FlxUINumericStepper_obj > __this = new FlxUINumericStepper_obj();
	__this->__construct(__o_X,__o_Y,__o_StepSize,__o_DefaultValue,__o_Min,__o_Max,__o_Decimals,__o_Stack,TextField,ButtonPlus,ButtonMinus,__o_IsPercent);
	return __this;
}

hx::ObjectPtr< FlxUINumericStepper_obj > FlxUINumericStepper_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< Float >  __o_StepSize,hx::Null< Float >  __o_DefaultValue,hx::Null< Float >  __o_Min,hx::Null< Float >  __o_Max,hx::Null< int >  __o_Decimals,hx::Null< int >  __o_Stack, ::flixel::text::FlxText TextField, ::flixel::addons::ui::FlxUITypedButton ButtonPlus, ::flixel::addons::ui::FlxUITypedButton ButtonMinus,hx::Null< bool >  __o_IsPercent) {
	FlxUINumericStepper_obj *__this = (FlxUINumericStepper_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxUINumericStepper_obj), true, "flixel.addons.ui.FlxUINumericStepper"));
	*(void **)__this = FlxUINumericStepper_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,__o_StepSize,__o_DefaultValue,__o_Min,__o_Max,__o_Decimals,__o_Stack,TextField,ButtonPlus,ButtonMinus,__o_IsPercent);
	return __this;
}

FlxUINumericStepper_obj::FlxUINumericStepper_obj()
{
}

void FlxUINumericStepper_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxUINumericStepper);
	HX_MARK_MEMBER_NAME(button_plus,"button_plus");
	HX_MARK_MEMBER_NAME(button_minus,"button_minus");
	HX_MARK_MEMBER_NAME(text_field,"text_field");
	HX_MARK_MEMBER_NAME(stepSize,"stepSize");
	HX_MARK_MEMBER_NAME(decimals,"decimals");
	HX_MARK_MEMBER_NAME(min,"min");
	HX_MARK_MEMBER_NAME(max,"max");
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_MEMBER_NAME(stack,"stack");
	HX_MARK_MEMBER_NAME(isPercent,"isPercent");
	HX_MARK_MEMBER_NAME(params,"params");
	HX_MARK_MEMBER_NAME(skipButtonUpdate,"skipButtonUpdate");
	 ::flixel::addons::ui::FlxUIGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxUINumericStepper_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(button_plus,"button_plus");
	HX_VISIT_MEMBER_NAME(button_minus,"button_minus");
	HX_VISIT_MEMBER_NAME(text_field,"text_field");
	HX_VISIT_MEMBER_NAME(stepSize,"stepSize");
	HX_VISIT_MEMBER_NAME(decimals,"decimals");
	HX_VISIT_MEMBER_NAME(min,"min");
	HX_VISIT_MEMBER_NAME(max,"max");
	HX_VISIT_MEMBER_NAME(value,"value");
	HX_VISIT_MEMBER_NAME(stack,"stack");
	HX_VISIT_MEMBER_NAME(isPercent,"isPercent");
	HX_VISIT_MEMBER_NAME(params,"params");
	HX_VISIT_MEMBER_NAME(skipButtonUpdate,"skipButtonUpdate");
	 ::flixel::addons::ui::FlxUIGroup_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxUINumericStepper_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"min") ) { return hx::Val( min ); }
		if (HX_FIELD_EQ(inName,"max") ) { return hx::Val( max ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value ); }
		if (HX_FIELD_EQ(inName,"stack") ) { return hx::Val( stack ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"params") ) { return hx::Val( params ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"set_min") ) { return hx::Val( set_min_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_max") ) { return hx::Val( set_max_dyn() ); }
		if (HX_FIELD_EQ(inName,"_onPlus") ) { return hx::Val( _onPlus_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"stepSize") ) { return hx::Val( stepSize ); }
		if (HX_FIELD_EQ(inName,"decimals") ) { return hx::Val( decimals ); }
		if (HX_FIELD_EQ(inName,"_onMinus") ) { return hx::Val( _onMinus_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isPercent") ) { return hx::Val( isPercent ); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return hx::Val( set_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_value") ) { return hx::Val( set_value_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_stack") ) { return hx::Val( set_stack_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"text_field") ) { return hx::Val( text_field ); }
		if (HX_FIELD_EQ(inName,"set_params") ) { return hx::Val( set_params_dyn() ); }
		if (HX_FIELD_EQ(inName,"decimalize") ) { return hx::Val( decimalize_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"button_plus") ) { return hx::Val( button_plus ); }
		if (HX_FIELD_EQ(inName,"_doCallback") ) { return hx::Val( _doCallback_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"button_minus") ) { return hx::Val( button_minus ); }
		if (HX_FIELD_EQ(inName,"set_decimals") ) { return hx::Val( set_decimals_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"set_isPercent") ) { return hx::Val( set_isPercent_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"skipButtonUpdate") ) { return hx::Val( skipButtonUpdate ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_onInputTextEvent") ) { return hx::Val( _onInputTextEvent_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"set_skipButtonUpdate") ) { return hx::Val( set_skipButtonUpdate_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxUINumericStepper_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"min") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_min(inValue.Cast< Float >()) );min=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"max") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_max(inValue.Cast< Float >()) );max=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_value(inValue.Cast< Float >()) );value=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stack") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_stack(inValue.Cast< int >()) );stack=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"params") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_params(inValue.Cast< ::cpp::VirtualArray >()) );params=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"stepSize") ) { stepSize=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"decimals") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_decimals(inValue.Cast< int >()) );decimals=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isPercent") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_isPercent(inValue.Cast< bool >()) );isPercent=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"text_field") ) { text_field=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"button_plus") ) { button_plus=inValue.Cast<  ::flixel::addons::ui::FlxUITypedButton >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"button_minus") ) { button_minus=inValue.Cast<  ::flixel::addons::ui::FlxUITypedButton >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"skipButtonUpdate") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_skipButtonUpdate(inValue.Cast< bool >()) );skipButtonUpdate=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxUINumericStepper_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("button_plus","\x07","\xac","\xe8","\xb7"));
	outFields->push(HX_HCSTRING("button_minus","\x23","\x2b","\x79","\x77"));
	outFields->push(HX_HCSTRING("text_field","\x68","\xe8","\xd6","\xfe"));
	outFields->push(HX_HCSTRING("stepSize","\x2d","\x4a","\x7c","\x9f"));
	outFields->push(HX_HCSTRING("decimals","\xc2","\x4a","\x6a","\x12"));
	outFields->push(HX_HCSTRING("min","\x92","\x11","\x53","\x00"));
	outFields->push(HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"));
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	outFields->push(HX_HCSTRING("stack","\x48","\x67","\x0b","\x84"));
	outFields->push(HX_HCSTRING("isPercent","\xfb","\x27","\xd9","\x7c"));
	outFields->push(HX_HCSTRING("params","\x46","\xfb","\x7a","\xed"));
	outFields->push(HX_HCSTRING("skipButtonUpdate","\xba","\x02","\xf2","\x13"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxUINumericStepper_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::addons::ui::FlxUITypedButton*/ ,(int)offsetof(FlxUINumericStepper_obj,button_plus),HX_HCSTRING("button_plus","\x07","\xac","\xe8","\xb7")},
	{hx::fsObject /*::flixel::addons::ui::FlxUITypedButton*/ ,(int)offsetof(FlxUINumericStepper_obj,button_minus),HX_HCSTRING("button_minus","\x23","\x2b","\x79","\x77")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(FlxUINumericStepper_obj,text_field),HX_HCSTRING("text_field","\x68","\xe8","\xd6","\xfe")},
	{hx::fsFloat,(int)offsetof(FlxUINumericStepper_obj,stepSize),HX_HCSTRING("stepSize","\x2d","\x4a","\x7c","\x9f")},
	{hx::fsInt,(int)offsetof(FlxUINumericStepper_obj,decimals),HX_HCSTRING("decimals","\xc2","\x4a","\x6a","\x12")},
	{hx::fsFloat,(int)offsetof(FlxUINumericStepper_obj,min),HX_HCSTRING("min","\x92","\x11","\x53","\x00")},
	{hx::fsFloat,(int)offsetof(FlxUINumericStepper_obj,max),HX_HCSTRING("max","\xa4","\x0a","\x53","\x00")},
	{hx::fsFloat,(int)offsetof(FlxUINumericStepper_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{hx::fsInt,(int)offsetof(FlxUINumericStepper_obj,stack),HX_HCSTRING("stack","\x48","\x67","\x0b","\x84")},
	{hx::fsBool,(int)offsetof(FlxUINumericStepper_obj,isPercent),HX_HCSTRING("isPercent","\xfb","\x27","\xd9","\x7c")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(FlxUINumericStepper_obj,params),HX_HCSTRING("params","\x46","\xfb","\x7a","\xed")},
	{hx::fsBool,(int)offsetof(FlxUINumericStepper_obj,skipButtonUpdate),HX_HCSTRING("skipButtonUpdate","\xba","\x02","\xf2","\x13")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FlxUINumericStepper_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &FlxUINumericStepper_obj::STACK_VERTICAL,HX_HCSTRING("STACK_VERTICAL","\xad","\x7f","\x2e","\xce")},
	{hx::fsInt,(void *) &FlxUINumericStepper_obj::STACK_HORIZONTAL,HX_HCSTRING("STACK_HORIZONTAL","\xdb","\x1f","\xfd","\x43")},
	{hx::fsString,(void *) &FlxUINumericStepper_obj::CLICK_EVENT,HX_HCSTRING("CLICK_EVENT","\x63","\x89","\xc0","\x0d")},
	{hx::fsString,(void *) &FlxUINumericStepper_obj::EDIT_EVENT,HX_HCSTRING("EDIT_EVENT","\xc5","\xfc","\x39","\xc0")},
	{hx::fsString,(void *) &FlxUINumericStepper_obj::CHANGE_EVENT,HX_HCSTRING("CHANGE_EVENT","\xab","\x38","\xff","\x8d")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxUINumericStepper_obj_sMemberFields[] = {
	HX_HCSTRING("button_plus","\x07","\xac","\xe8","\xb7"),
	HX_HCSTRING("button_minus","\x23","\x2b","\x79","\x77"),
	HX_HCSTRING("text_field","\x68","\xe8","\xd6","\xfe"),
	HX_HCSTRING("stepSize","\x2d","\x4a","\x7c","\x9f"),
	HX_HCSTRING("decimals","\xc2","\x4a","\x6a","\x12"),
	HX_HCSTRING("min","\x92","\x11","\x53","\x00"),
	HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"),
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("stack","\x48","\x67","\x0b","\x84"),
	HX_HCSTRING("isPercent","\xfb","\x27","\xd9","\x7c"),
	HX_HCSTRING("params","\x46","\xfb","\x7a","\xed"),
	HX_HCSTRING("set_params","\x83","\x09","\x80","\xe1"),
	HX_HCSTRING("skipButtonUpdate","\xba","\x02","\xf2","\x13"),
	HX_HCSTRING("set_skipButtonUpdate","\x37","\x1f","\x14","\xff"),
	HX_HCSTRING("set_color","\xc6","\xb9","\x56","\x71"),
	HX_HCSTRING("set_min","\x35","\x6b","\xc9","\x19"),
	HX_HCSTRING("set_max","\x47","\x64","\xc9","\x19"),
	HX_HCSTRING("set_value","\xd4","\xc7","\xb2","\x58"),
	HX_HCSTRING("set_decimals","\x3f","\x22","\x7d","\xdc"),
	HX_HCSTRING("set_isPercent","\xde","\xdd","\x42","\x83"),
	HX_HCSTRING("set_stack","\xab","\xaf","\x05","\xab"),
	HX_HCSTRING("decimalize","\x63","\xd3","\x9c","\x39"),
	HX_HCSTRING("_onInputTextEvent","\xa1","\x9e","\x48","\xf2"),
	HX_HCSTRING("_onPlus","\xb8","\x59","\x5b","\x5b"),
	HX_HCSTRING("_onMinus","\x52","\x78","\x5e","\xd8"),
	HX_HCSTRING("_doCallback","\x8f","\x7d","\x05","\xbf"),
	::String(null()) };

static void FlxUINumericStepper_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxUINumericStepper_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxUINumericStepper_obj::STACK_VERTICAL,"STACK_VERTICAL");
	HX_MARK_MEMBER_NAME(FlxUINumericStepper_obj::STACK_HORIZONTAL,"STACK_HORIZONTAL");
	HX_MARK_MEMBER_NAME(FlxUINumericStepper_obj::CLICK_EVENT,"CLICK_EVENT");
	HX_MARK_MEMBER_NAME(FlxUINumericStepper_obj::EDIT_EVENT,"EDIT_EVENT");
	HX_MARK_MEMBER_NAME(FlxUINumericStepper_obj::CHANGE_EVENT,"CHANGE_EVENT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxUINumericStepper_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxUINumericStepper_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxUINumericStepper_obj::STACK_VERTICAL,"STACK_VERTICAL");
	HX_VISIT_MEMBER_NAME(FlxUINumericStepper_obj::STACK_HORIZONTAL,"STACK_HORIZONTAL");
	HX_VISIT_MEMBER_NAME(FlxUINumericStepper_obj::CLICK_EVENT,"CLICK_EVENT");
	HX_VISIT_MEMBER_NAME(FlxUINumericStepper_obj::EDIT_EVENT,"EDIT_EVENT");
	HX_VISIT_MEMBER_NAME(FlxUINumericStepper_obj::CHANGE_EVENT,"CHANGE_EVENT");
};

#endif

hx::Class FlxUINumericStepper_obj::__mClass;

static ::String FlxUINumericStepper_obj_sStaticFields[] = {
	HX_HCSTRING("STACK_VERTICAL","\xad","\x7f","\x2e","\xce"),
	HX_HCSTRING("STACK_HORIZONTAL","\xdb","\x1f","\xfd","\x43"),
	HX_HCSTRING("CLICK_EVENT","\x63","\x89","\xc0","\x0d"),
	HX_HCSTRING("EDIT_EVENT","\xc5","\xfc","\x39","\xc0"),
	HX_HCSTRING("CHANGE_EVENT","\xab","\x38","\xff","\x8d"),
	::String(null())
};

void FlxUINumericStepper_obj::__register()
{
	hx::Object *dummy = new FlxUINumericStepper_obj;
	FlxUINumericStepper_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.ui.FlxUINumericStepper","\xf9","\x94","\xc6","\x34");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxUINumericStepper_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxUINumericStepper_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxUINumericStepper_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxUINumericStepper_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxUINumericStepper_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxUINumericStepper_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxUINumericStepper_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxUINumericStepper_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_b3434b006136ea9e_31_boot)
HXDLIN(  31)		STACK_VERTICAL = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b3434b006136ea9e_32_boot)
HXDLIN(  32)		STACK_HORIZONTAL = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b3434b006136ea9e_34_boot)
HXDLIN(  34)		CLICK_EVENT = HX_("click_numeric_stepper",28,25,65,6e);
            	}
{
            	HX_STACKFRAME(&_hx_pos_b3434b006136ea9e_35_boot)
HXDLIN(  35)		EDIT_EVENT = HX_("edit_numeric_stepper",ea,96,04,5c);
            	}
{
            	HX_STACKFRAME(&_hx_pos_b3434b006136ea9e_36_boot)
HXDLIN(  36)		CHANGE_EVENT = HX_("change_numeric_stepper",50,0a,cc,bb);
            	}
}

} // end namespace flixel
} // end namespace addons
} // end namespace ui
