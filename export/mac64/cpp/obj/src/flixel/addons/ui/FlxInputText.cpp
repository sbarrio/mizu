// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_text__FlxText_FlxTextAlign_Impl_
#include <flixel/text/_FlxText/FlxTextAlign_Impl_.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxRect
#include <flixel/util/FlxPool_flixel_math_FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl__legacy_Lib
#include <openfl/_legacy/Lib.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_MovieClip
#include <openfl/_legacy/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Stage
#include <openfl/_legacy/display/Stage.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_Event
#include <openfl/_legacy/events/Event.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_KeyboardEvent
#include <openfl/_legacy/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_TextField
#include <openfl/_legacy/text/TextField.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_TextFormat
#include <openfl/_legacy/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_75fddae7e64ce41a_29_new,"flixel.addons.ui.FlxInputText","new",0xf37b21c8,"flixel.addons.ui.FlxInputText.new","flixel/addons/ui/FlxInputText.hx",29,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_52_set_customFilterPattern,"flixel.addons.ui.FlxInputText","set_customFilterPattern",0x8ca18812,"flixel.addons.ui.FlxInputText.set_customFilterPattern","flixel/addons/ui/FlxInputText.hx",52,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_73_set_caretColor,"flixel.addons.ui.FlxInputText","set_caretColor",0xe765d535,"flixel.addons.ui.FlxInputText.set_caretColor","flixel/addons/ui/FlxInputText.hx",73,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_81_set_caretWidth,"flixel.addons.ui.FlxInputText","set_caretWidth",0x676c19d8,"flixel.addons.ui.FlxInputText.set_caretWidth","flixel/addons/ui/FlxInputText.hx",81,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_236_destroy,"flixel.addons.ui.FlxInputText","destroy",0x8dd65262,"flixel.addons.ui.FlxInputText.destroy","flixel/addons/ui/FlxInputText.hx",236,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_261_draw,"flixel.addons.ui.FlxInputText","draw",0x11b0159c,"flixel.addons.ui.FlxInputText.draw","flixel/addons/ui/FlxInputText.hx",261,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_282_drawSprite,"flixel.addons.ui.FlxInputText","drawSprite",0x07ac82c1,"flixel.addons.ui.FlxInputText.drawSprite","flixel/addons/ui/FlxInputText.hx",282,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_295_update,"flixel.addons.ui.FlxInputText","update",0x954505a1,"flixel.addons.ui.FlxInputText.update","flixel/addons/ui/FlxInputText.hx",295,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_323_onKeyDown,"flixel.addons.ui.FlxInputText","onKeyDown",0xeda471aa,"flixel.addons.ui.FlxInputText.onKeyDown","flixel/addons/ui/FlxInputText.hx",323,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_406_onChange,"flixel.addons.ui.FlxInputText","onChange",0x53f01d87,"flixel.addons.ui.FlxInputText.onChange","flixel/addons/ui/FlxInputText.hx",406,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_421_insertSubstring,"flixel.addons.ui.FlxInputText","insertSubstring",0xe0c1ad40,"flixel.addons.ui.FlxInputText.insertSubstring","flixel/addons/ui/FlxInputText.hx",421,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_444_getCaretIndex,"flixel.addons.ui.FlxInputText","getCaretIndex",0xfe00362d,"flixel.addons.ui.FlxInputText.getCaretIndex","flixel/addons/ui/FlxInputText.hx",444,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_450_getCharBoundaries,"flixel.addons.ui.FlxInputText","getCharBoundaries",0x38cd7cdc,"flixel.addons.ui.FlxInputText.getCharBoundaries","flixel/addons/ui/FlxInputText.hx",450,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_467_set_text,"flixel.addons.ui.FlxInputText","set_text",0x37e27742,"flixel.addons.ui.FlxInputText.set_text","flixel/addons/ui/FlxInputText.hx",467,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_514_getCharIndexAtPoint,"flixel.addons.ui.FlxInputText","getCharIndexAtPoint",0xf4438f7f,"flixel.addons.ui.FlxInputText.getCharIndexAtPoint","flixel/addons/ui/FlxInputText.hx",514,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_562_prepareCharBoundaries,"flixel.addons.ui.FlxInputText","prepareCharBoundaries",0x33edc58d,"flixel.addons.ui.FlxInputText.prepareCharBoundaries","flixel/addons/ui/FlxInputText.hx",562,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_589_onSetTextCheck,"flixel.addons.ui.FlxInputText","onSetTextCheck",0x14902030,"flixel.addons.ui.FlxInputText.onSetTextCheck","flixel/addons/ui/FlxInputText.hx",589,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_629_calcFrame,"flixel.addons.ui.FlxInputText","calcFrame",0x733ee2c0,"flixel.addons.ui.FlxInputText.calcFrame","flixel/addons/ui/FlxInputText.hx",629,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_715_toggleCaret,"flixel.addons.ui.FlxInputText","toggleCaret",0x6f59aab7,"flixel.addons.ui.FlxInputText.toggleCaret","flixel/addons/ui/FlxInputText.hx",715,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_723_filter,"flixel.addons.ui.FlxInputText","filter",0x93749f50,"flixel.addons.ui.FlxInputText.filter","flixel/addons/ui/FlxInputText.hx",723,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_751_set_params,"flixel.addons.ui.FlxInputText","set_params",0xe3d3351b,"flixel.addons.ui.FlxInputText.set_params","flixel/addons/ui/FlxInputText.hx",751,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_763_set_x,"flixel.addons.ui.FlxInputText","set_x",0x02dc16c3,"flixel.addons.ui.FlxInputText.set_x","flixel/addons/ui/FlxInputText.hx",763,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_776_set_y,"flixel.addons.ui.FlxInputText","set_y",0x02dc16c4,"flixel.addons.ui.FlxInputText.set_y","flixel/addons/ui/FlxInputText.hx",776,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_789_set_hasFocus,"flixel.addons.ui.FlxInputText","set_hasFocus",0xf91bc333,"flixel.addons.ui.FlxInputText.set_hasFocus","flixel/addons/ui/FlxInputText.hx",789,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_816_getAlignStr,"flixel.addons.ui.FlxInputText","getAlignStr",0xf6458f0a,"flixel.addons.ui.FlxInputText.getAlignStr","flixel/addons/ui/FlxInputText.hx",816,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_825_set_caretIndex,"flixel.addons.ui.FlxInputText","set_caretIndex",0x5b1dfee4,"flixel.addons.ui.FlxInputText.set_caretIndex","flixel/addons/ui/FlxInputText.hx",825,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_898_set_forceCase,"flixel.addons.ui.FlxInputText","set_forceCase",0x119aa786,"flixel.addons.ui.FlxInputText.set_forceCase","flixel/addons/ui/FlxInputText.hx",898,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_905_set_size,"flixel.addons.ui.FlxInputText","set_size",0x373c4b56,"flixel.addons.ui.FlxInputText.set_size","flixel/addons/ui/FlxInputText.hx",905,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_912_set_maxLength,"flixel.addons.ui.FlxInputText","set_maxLength",0x992e7ff5,"flixel.addons.ui.FlxInputText.set_maxLength","flixel/addons/ui/FlxInputText.hx",912,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_922_set_lines,"flixel.addons.ui.FlxInputText","set_lines",0x15ae75ca,"flixel.addons.ui.FlxInputText.set_lines","flixel/addons/ui/FlxInputText.hx",922,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_941_get_passwordMode,"flixel.addons.ui.FlxInputText","get_passwordMode",0x890c263f,"flixel.addons.ui.FlxInputText.get_passwordMode","flixel/addons/ui/FlxInputText.hx",941,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_945_set_passwordMode,"flixel.addons.ui.FlxInputText","set_passwordMode",0xdf4e13b3,"flixel.addons.ui.FlxInputText.set_passwordMode","flixel/addons/ui/FlxInputText.hx",945,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_952_set_filterMode,"flixel.addons.ui.FlxInputText","set_filterMode",0xd267a390,"flixel.addons.ui.FlxInputText.set_filterMode","flixel/addons/ui/FlxInputText.hx",952,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_959_set_fieldBorderColor,"flixel.addons.ui.FlxInputText","set_fieldBorderColor",0x31131c52,"flixel.addons.ui.FlxInputText.set_fieldBorderColor","flixel/addons/ui/FlxInputText.hx",959,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_966_set_fieldBorderThickness,"flixel.addons.ui.FlxInputText","set_fieldBorderThickness",0x8f7f3fe3,"flixel.addons.ui.FlxInputText.set_fieldBorderThickness","flixel/addons/ui/FlxInputText.hx",966,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_973_set_backgroundColor,"flixel.addons.ui.FlxInputText","set_backgroundColor",0x1e95b220,"flixel.addons.ui.FlxInputText.set_backgroundColor","flixel/addons/ui/FlxInputText.hx",973,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_31_boot,"flixel.addons.ui.FlxInputText","boot",0x105b6dca,"flixel.addons.ui.FlxInputText.boot","flixel/addons/ui/FlxInputText.hx",31,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_32_boot,"flixel.addons.ui.FlxInputText","boot",0x105b6dca,"flixel.addons.ui.FlxInputText.boot","flixel/addons/ui/FlxInputText.hx",32,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_33_boot,"flixel.addons.ui.FlxInputText","boot",0x105b6dca,"flixel.addons.ui.FlxInputText.boot","flixel/addons/ui/FlxInputText.hx",33,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_34_boot,"flixel.addons.ui.FlxInputText","boot",0x105b6dca,"flixel.addons.ui.FlxInputText.boot","flixel/addons/ui/FlxInputText.hx",34,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_35_boot,"flixel.addons.ui.FlxInputText","boot",0x105b6dca,"flixel.addons.ui.FlxInputText.boot","flixel/addons/ui/FlxInputText.hx",35,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_37_boot,"flixel.addons.ui.FlxInputText","boot",0x105b6dca,"flixel.addons.ui.FlxInputText.boot","flixel/addons/ui/FlxInputText.hx",37,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_38_boot,"flixel.addons.ui.FlxInputText","boot",0x105b6dca,"flixel.addons.ui.FlxInputText.boot","flixel/addons/ui/FlxInputText.hx",38,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_39_boot,"flixel.addons.ui.FlxInputText","boot",0x105b6dca,"flixel.addons.ui.FlxInputText.boot","flixel/addons/ui/FlxInputText.hx",39,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_41_boot,"flixel.addons.ui.FlxInputText","boot",0x105b6dca,"flixel.addons.ui.FlxInputText.boot","flixel/addons/ui/FlxInputText.hx",41,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_42_boot,"flixel.addons.ui.FlxInputText","boot",0x105b6dca,"flixel.addons.ui.FlxInputText.boot","flixel/addons/ui/FlxInputText.hx",42,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_43_boot,"flixel.addons.ui.FlxInputText","boot",0x105b6dca,"flixel.addons.ui.FlxInputText.boot","flixel/addons/ui/FlxInputText.hx",43,0x19fbd1e7)
HX_LOCAL_STACK_FRAME(_hx_pos_75fddae7e64ce41a_44_boot,"flixel.addons.ui.FlxInputText","boot",0x105b6dca,"flixel.addons.ui.FlxInputText.boot","flixel/addons/ui/FlxInputText.hx",44,0x19fbd1e7)
namespace flixel{
namespace addons{
namespace ui{

void FlxInputText_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< int >  __o_Width,::String Text,hx::Null< int >  __o_size,hx::Null< int >  __o_TextColor,hx::Null< int >  __o_BackgroundColor,hx::Null< bool >  __o_EmbeddedFont){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
int Width = __o_Width.Default(150);
int size = __o_size.Default(8);
int TextColor = __o_TextColor.Default(-16777216);
int BackgroundColor = __o_BackgroundColor.Default(-1);
bool EmbeddedFont = __o_EmbeddedFont.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_75fddae7e64ce41a_29_new)
HXLINE( 176)		this->_scrollBoundIndeces =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("right",dc,0b,64,e9),(int)0)
            			->setFixed(1,HX_("left",07,08,b0,47),(int)0));
HXLINE( 151)		this->backgroundColor = (int)-1;
HXLINE( 146)		this->fieldBorderThickness = (int)1;
HXLINE( 141)		this->fieldBorderColor = (int)-16777216;
HXLINE( 136)		this->filterMode = (int)0;
HXLINE( 125)		this->maxLength = (int)0;
HXLINE( 119)		this->forceCase = (int)0;
HXLINE( 102)		this->caretIndex = (int)0;
HXLINE(  97)		this->hasFocus = false;
HXLINE(  79)		this->caretWidth = (int)1;
HXLINE(  66)		this->background = false;
HXLINE( 198)		super::__construct(X,Y,Width,Text,size,EmbeddedFont);
HXLINE( 199)		this->set_backgroundColor(BackgroundColor);
HXLINE( 201)		if ((BackgroundColor != (int)0)) {
HXLINE( 203)			this->background = true;
            		}
HXLINE( 206)		this->set_color(TextColor);
HXLINE( 207)		this->set_caretColor(TextColor);
HXLINE( 209)		this->caret =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 210)		 ::flixel::FlxSprite _hx_tmp = this->caret;
HXDLIN( 210)		int _hx_tmp1 = this->caretWidth;
HXDLIN( 210)		_hx_tmp->makeGraphic(_hx_tmp1,::Std_obj::_hx_int((size + (int)2)),null(),null(),null());
HXLINE( 211)		this->_caretTimer =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXLINE( 213)		this->set_caretIndex((int)0);
HXLINE( 214)		this->set_hasFocus(false);
HXLINE( 215)		if (this->background) {
HXLINE( 216)			this->fieldBorderSprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,X,Y,null());
HXLINE( 217)			this->backgroundSprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,X,Y,null());
            		}
HXLINE( 220)		this->set_lines((int)1);
HXLINE( 221)		::openfl::_legacy::Lib_obj::get_current()->get_stage()->addEventListener(::openfl::_legacy::events::KeyboardEvent_obj::KEY_DOWN,this->onKeyDown_dyn(),null(),null(),null());
HXLINE( 223)		if (hx::IsNull( Text )) {
HXLINE( 224)			Text = HX_("",00,00,00,00);
            		}
HXLINE( 227)		this->set_text(Text);
HXLINE( 229)		this->calcFrame(null());
            	}

Dynamic FlxInputText_obj::__CreateEmpty() { return new FlxInputText_obj; }

void *FlxInputText_obj::_hx_vtable = 0;

Dynamic FlxInputText_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxInputText_obj > _hx_result = new FlxInputText_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7]);
	return _hx_result;
}

bool FlxInputText_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e105115) {
		if (inClassId<=(int)0x25a685e0) {
			if (inClassId<=(int)0x0b6ffd77) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
			} else {
				return inClassId==(int)0x25a685e0;
			}
		} else {
			return inClassId==(int)0x2e105115;
		}
	} else {
		return inClassId==(int)0x4d1b55ae || inClassId==(int)0x6fc11e2c;
	}
}

 ::EReg FlxInputText_obj::set_customFilterPattern( ::EReg cfp){
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_52_set_customFilterPattern)
HXLINE(  53)		this->customFilterPattern = cfp;
HXLINE(  54)		this->set_filterMode((int)4);
HXLINE(  55)		return this->customFilterPattern;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,set_customFilterPattern,return )

int FlxInputText_obj::set_caretColor(int i){
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_73_set_caretColor)
HXLINE(  74)		this->caretColor = i;
HXLINE(  75)		this->dirty = true;
HXLINE(  76)		return this->caretColor;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,set_caretColor,return )

int FlxInputText_obj::set_caretWidth(int i){
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_81_set_caretWidth)
HXLINE(  82)		this->caretWidth = i;
HXLINE(  83)		this->dirty = true;
HXLINE(  84)		return this->caretWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,set_caretWidth,return )

void FlxInputText_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_236_destroy)
HXLINE( 237)		::openfl::_legacy::Lib_obj::get_current()->get_stage()->removeEventListener(::openfl::_legacy::events::KeyboardEvent_obj::KEY_DOWN,this->onKeyDown_dyn(),null());
HXLINE( 239)		this->backgroundSprite = ( ( ::flixel::FlxSprite)(::flixel::util::FlxDestroyUtil_obj::destroy(this->backgroundSprite)) );
HXLINE( 240)		this->fieldBorderSprite = ( ( ::flixel::FlxSprite)(::flixel::util::FlxDestroyUtil_obj::destroy(this->fieldBorderSprite)) );
HXLINE( 241)		this->callback = null();
HXLINE( 244)		if (hx::IsNotNull( this->_charBoundaries )) {
HXLINE( 246)			while((this->_charBoundaries->length > (int)0)){
HXLINE( 248)				this->_charBoundaries->pop().StaticCast<  ::flixel::math::FlxRect >();
            			}
HXLINE( 250)			this->_charBoundaries = null();
            		}
HXLINE( 254)		this->super::destroy();
            	}


void FlxInputText_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_261_draw)
HXLINE( 262)		this->drawSprite(this->fieldBorderSprite);
HXLINE( 263)		this->drawSprite(this->backgroundSprite);
HXLINE( 265)		this->super::draw();
HXLINE( 268)		bool _hx_tmp;
HXDLIN( 268)		if ((this->caretColor == this->caret->color)) {
HXLINE( 268)			Float _hx_tmp1 = this->caret->get_height();
HXDLIN( 268)			_hx_tmp = (_hx_tmp1 != (::Std_obj::_hx_int(this->_defaultFormat->size) + (int)2));
            		}
            		else {
HXLINE( 268)			_hx_tmp = true;
            		}
HXDLIN( 268)		if (_hx_tmp) {
HXLINE( 270)			this->caret->set_color(this->caretColor);
            		}
HXLINE( 273)		this->drawSprite(this->caret);
            	}


void FlxInputText_obj::drawSprite( ::flixel::FlxSprite Sprite){
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_282_drawSprite)
HXDLIN( 282)		bool _hx_tmp;
HXDLIN( 282)		if (hx::IsNotNull( Sprite )) {
HXDLIN( 282)			_hx_tmp = Sprite->visible;
            		}
            		else {
HXDLIN( 282)			_hx_tmp = false;
            		}
HXDLIN( 282)		if (_hx_tmp) {
HXLINE( 284)			Sprite->scrollFactor = this->scrollFactor;
HXLINE( 285)			Sprite->set_cameras(this->get_cameras());
HXLINE( 286)			Sprite->draw();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,drawSprite,(void))

void FlxInputText_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_295_update)
HXDLIN( 295)		this->super::update(elapsed);
            	}


void FlxInputText_obj::onKeyDown( ::openfl::_legacy::events::KeyboardEvent e){
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_323_onKeyDown)
HXLINE( 324)		int key = e->keyCode;
HXLINE( 326)		if (this->hasFocus) {
HXLINE( 329)			bool _hx_tmp;
HXDLIN( 329)			bool _hx_tmp1;
HXDLIN( 329)			bool _hx_tmp2;
HXDLIN( 329)			if ((key != (int)16)) {
HXLINE( 329)				_hx_tmp2 = (key == (int)17);
            			}
            			else {
HXLINE( 329)				_hx_tmp2 = true;
            			}
HXDLIN( 329)			if (!(_hx_tmp2)) {
HXLINE( 329)				_hx_tmp1 = (key == (int)220);
            			}
            			else {
HXLINE( 329)				_hx_tmp1 = true;
            			}
HXDLIN( 329)			if (!(_hx_tmp1)) {
HXLINE( 329)				_hx_tmp = (key == (int)27);
            			}
            			else {
HXLINE( 329)				_hx_tmp = true;
            			}
HXDLIN( 329)			if (_hx_tmp) {
HXLINE( 331)				return;
            			}
            			else {
HXLINE( 334)				if ((key == (int)37)) {
HXLINE( 336)					if ((this->caretIndex > (int)0)) {
HXLINE( 337)						{
HXLINE( 337)							 ::flixel::addons::ui::FlxInputText _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 337)							int _g1 = _g->caretIndex;
HXDLIN( 337)							_g->set_caretIndex((_g1 - (int)1));
            						}
HXLINE( 338)						this->set_text(this->text);
            					}
            				}
            				else {
HXLINE( 342)					if ((key == (int)39)) {
HXLINE( 344)						if ((this->caretIndex < this->text.length)) {
HXLINE( 345)							{
HXLINE( 345)								 ::flixel::addons::ui::FlxInputText _g2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 345)								int _g11 = _g2->caretIndex;
HXDLIN( 345)								_g2->set_caretIndex((_g11 + (int)1));
            							}
HXLINE( 346)							this->set_text(this->text);
            						}
            					}
            					else {
HXLINE( 350)						if ((key == (int)35)) {
HXLINE( 352)							this->set_caretIndex(this->text.length);
HXLINE( 353)							this->set_text(this->text);
            						}
            						else {
HXLINE( 356)							if ((key == (int)36)) {
HXLINE( 358)								this->set_caretIndex((int)0);
HXLINE( 359)								this->set_text(this->text);
            							}
            							else {
HXLINE( 362)								if ((key == (int)8)) {
HXLINE( 364)									if ((this->caretIndex > (int)0)) {
HXLINE( 366)										{
HXLINE( 366)											 ::flixel::addons::ui::FlxInputText _g3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 366)											int _g12 = _g3->caretIndex;
HXDLIN( 366)											_g3->set_caretIndex((_g12 - (int)1));
            										}
HXLINE( 367)										::String _hx_tmp3 = this->text.substring((int)0,this->caretIndex);
HXDLIN( 367)										::String _hx_tmp4 = this->text;
HXDLIN( 367)										this->set_text((_hx_tmp3 + _hx_tmp4.substring((this->caretIndex + (int)1),null())));
HXLINE( 368)										this->onChange(HX_("backspace",3f,85,ea,ca));
            									}
            								}
            								else {
HXLINE( 372)									if ((key == (int)46)) {
HXLINE( 374)										bool _hx_tmp5;
HXDLIN( 374)										if ((this->text.length > (int)0)) {
HXLINE( 374)											_hx_tmp5 = (this->caretIndex < this->text.length);
            										}
            										else {
HXLINE( 374)											_hx_tmp5 = false;
            										}
HXDLIN( 374)										if (_hx_tmp5) {
HXLINE( 376)											::String _hx_tmp6 = this->text.substring((int)0,this->caretIndex);
HXDLIN( 376)											::String _hx_tmp7 = this->text;
HXDLIN( 376)											this->set_text((_hx_tmp6 + _hx_tmp7.substring((this->caretIndex + (int)1),null())));
HXLINE( 377)											this->onChange(HX_("delete",2b,c0,d8,6a));
            										}
            									}
            									else {
HXLINE( 381)										if ((key == (int)13)) {
HXLINE( 383)											this->onChange(HX_("enter",18,6d,86,70));
            										}
            										else {
HXLINE( 388)											if ((e->charCode == (int)0)) {
HXLINE( 390)												return;
            											}
HXLINE( 392)											::String newText = this->filter(::String::fromCharCode(e->charCode));
HXLINE( 394)											bool _hx_tmp8;
HXDLIN( 394)											if ((newText.length > (int)0)) {
HXLINE( 394)												if ((this->maxLength != (int)0)) {
HXLINE( 394)													_hx_tmp8 = ((this->text.length + newText.length) < this->maxLength);
            												}
            												else {
HXLINE( 394)													_hx_tmp8 = true;
            												}
            											}
            											else {
HXLINE( 394)												_hx_tmp8 = false;
            											}
HXDLIN( 394)											if (_hx_tmp8) {
HXLINE( 396)												this->set_text(this->insertSubstring(this->text,newText,this->caretIndex));
HXLINE( 397)												{
HXLINE( 397)													 ::flixel::addons::ui::FlxInputText _g4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 397)													int _g13 = _g4->caretIndex;
HXDLIN( 397)													_g4->set_caretIndex((_g13 + (int)1));
            												}
HXLINE( 398)												this->onChange(HX_("input",0a,c4,1d,be));
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,onKeyDown,(void))

void FlxInputText_obj::onChange(::String action){
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_406_onChange)
HXDLIN( 406)		if (hx::IsNotNull( this->callback )) {
HXLINE( 408)			this->callback(this->text,action);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,onChange,(void))

::String FlxInputText_obj::insertSubstring(::String Original,::String Insert,int Index){
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_421_insertSubstring)
HXLINE( 422)		if ((Index != Original.length)) {
HXLINE( 424)			::String Original1 = (Original.substring((int)0,Index) + Insert);
HXDLIN( 424)			Original = (Original1 + Original.substring(Index,null()));
            		}
            		else {
HXLINE( 428)			Original = (Original + Insert);
            		}
HXLINE( 430)		return Original;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxInputText_obj,insertSubstring,return )

int FlxInputText_obj::getCaretIndex(){
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_444_getCaretIndex)
HXDLIN( 444)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxInputText_obj,getCaretIndex,return )

 ::openfl::_legacy::geom::Rectangle FlxInputText_obj::getCharBoundaries(int charIndex){
            	HX_GC_STACKFRAME(&_hx_pos_75fddae7e64ce41a_450_getCharBoundaries)
HXLINE( 451)		bool _hx_tmp;
HXDLIN( 451)		bool _hx_tmp1;
HXDLIN( 451)		if (hx::IsNotNull( this->_charBoundaries )) {
HXLINE( 451)			_hx_tmp1 = (charIndex >= (int)0);
            		}
            		else {
HXLINE( 451)			_hx_tmp1 = false;
            		}
HXDLIN( 451)		if (_hx_tmp1) {
HXLINE( 451)			_hx_tmp = (this->_charBoundaries->length > (int)0);
            		}
            		else {
HXLINE( 451)			_hx_tmp = false;
            		}
HXDLIN( 451)		if (_hx_tmp) {
HXLINE( 453)			 ::openfl::_legacy::geom::Rectangle r =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 454)			if ((charIndex >= this->_charBoundaries->length)) {
HXLINE( 456)				::Array< ::Dynamic> _this = this->_charBoundaries;
HXDLIN( 456)				 ::flixel::math::FlxRect _this1 = _this->__get((this->_charBoundaries->length - (int)1)).StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 456)				 ::openfl::_legacy::geom::Rectangle FlashRect = r;
HXDLIN( 456)				if (hx::IsNull( FlashRect )) {
HXLINE( 456)					FlashRect =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            				}
HXDLIN( 456)				FlashRect->x = _this1->x;
HXDLIN( 456)				FlashRect->y = _this1->y;
HXDLIN( 456)				FlashRect->width = _this1->width;
HXDLIN( 456)				FlashRect->height = _this1->height;
            			}
            			else {
HXLINE( 459)				 ::flixel::math::FlxRect _this2 = this->_charBoundaries->__get(charIndex).StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 459)				 ::openfl::_legacy::geom::Rectangle FlashRect1 = r;
HXDLIN( 459)				if (hx::IsNull( FlashRect1 )) {
HXLINE( 459)					FlashRect1 =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            				}
HXDLIN( 459)				FlashRect1->x = _this2->x;
HXDLIN( 459)				FlashRect1->y = _this2->y;
HXDLIN( 459)				FlashRect1->width = _this2->width;
HXDLIN( 459)				FlashRect1->height = _this2->height;
            			}
HXLINE( 461)			return r;
            		}
HXLINE( 463)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,getCharBoundaries,return )

::String FlxInputText_obj::set_text(::String Text){
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_467_set_text)
HXLINE( 469)		if (hx::IsNotNull( this->textField )) {
HXLINE( 471)			this->lastScroll = this->textField->get_scrollH();
            		}
HXLINE( 474)		::String return_text = this->super::set_text(Text);
HXLINE( 476)		if (hx::IsNull( this->textField )) {
HXLINE( 478)			return return_text;
            		}
HXLINE( 481)		int numChars = Text.length;
HXLINE( 482)		this->prepareCharBoundaries(numChars);
HXLINE( 483)		this->textField->set_text(HX_("",00,00,00,00));
HXLINE( 484)		Float textH = (int)0;
HXLINE( 485)		Float textW = (int)0;
HXLINE( 486)		Float lastW = (int)0;
HXLINE( 491)		Float magicX = (int)2;
HXLINE( 492)		Float magicY = (int)2;
HXLINE( 494)		{
HXLINE( 494)			int _g1 = (int)0;
HXDLIN( 494)			int _g = numChars;
HXDLIN( 494)			while((_g1 < _g)){
HXLINE( 494)				_g1 = (_g1 + (int)1);
HXDLIN( 494)				int i = (_g1 - (int)1);
HXLINE( 496)				 ::openfl::_legacy::text::TextField _hx_tmp = this->textField;
HXDLIN( 496)				_hx_tmp->appendText(Text.substr(i,(int)1));
HXLINE( 497)				textW = this->textField->get_textWidth();
HXLINE( 498)				if ((i == (int)0)) {
HXLINE( 500)					textH = this->textField->get_textHeight();
            				}
HXLINE( 502)				this->_charBoundaries->__get(i).StaticCast<  ::flixel::math::FlxRect >()->x = (magicX + lastW);
HXLINE( 503)				this->_charBoundaries->__get(i).StaticCast<  ::flixel::math::FlxRect >()->y = magicY;
HXLINE( 504)				this->_charBoundaries->__get(i).StaticCast<  ::flixel::math::FlxRect >()->width = (textW - lastW);
HXLINE( 505)				this->_charBoundaries->__get(i).StaticCast<  ::flixel::math::FlxRect >()->height = textH;
HXLINE( 506)				lastW = textW;
            			}
            		}
HXLINE( 508)		this->textField->set_text(Text);
HXLINE( 509)		this->onSetTextCheck();
HXLINE( 510)		return return_text;
            	}


int FlxInputText_obj::getCharIndexAtPoint(Float X,Float Y){
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_514_getCharIndexAtPoint)
HXLINE( 515)		int i = (int)0;
HXLINE( 517)		X = (X + (this->textField->get_scrollH() + (int)2));
HXLINE( 521)		bool _hx_tmp;
HXDLIN( 521)		if (hx::IsNotNull( this->_charBoundaries )) {
HXLINE( 521)			_hx_tmp = (this->_charBoundaries->length > (int)0);
            		}
            		else {
HXLINE( 521)			_hx_tmp = false;
            		}
HXDLIN( 521)		if (_hx_tmp) {
HXLINE( 523)			Float _hx_tmp1 = this->textField->get_textWidth();
HXDLIN( 523)			if ((_hx_tmp1 <= this->textField->get_width())) {
HXLINE( 524)				::String _g = this->getAlignStr();
HXDLIN( 524)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_("center",d5,25,db,05)) ){
HXLINE( 529)					Float X1 = (X - ((Float)this->textField->get_width() / (Float)(int)2));
HXDLIN( 529)					X = (X1 + ((Float)this->textField->get_textWidth() / (Float)(int)2));
HXDLIN( 529)					goto _hx_goto_16;
            				}
            				if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE( 527)					Float X2 = (X - this->textField->get_width());
HXDLIN( 527)					X = (X2 + this->textField->get_textWidth());
HXDLIN( 527)					goto _hx_goto_16;
            				}
            				/* default */{
            				}
            				_hx_goto_16:;
            			}
            		}
HXLINE( 536)		if (hx::IsNotNull( this->_charBoundaries )) {
HXLINE( 538)			int _g1 = (int)0;
HXDLIN( 538)			::Array< ::Dynamic> _g11 = this->_charBoundaries;
HXDLIN( 538)			while((_g1 < _g11->length)){
HXLINE( 538)				 ::flixel::math::FlxRect r = _g11->__get(_g1).StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 538)				_g1 = (_g1 + (int)1);
HXLINE( 540)				bool _hx_tmp2;
HXDLIN( 540)				if ((X >= r->x)) {
HXLINE( 540)					_hx_tmp2 = (X <= (r->x + r->width));
            				}
            				else {
HXLINE( 540)					_hx_tmp2 = false;
            				}
HXDLIN( 540)				if (_hx_tmp2) {
HXLINE( 542)					return i;
            				}
HXLINE( 544)				i = (i + (int)1);
            			}
            		}
HXLINE( 549)		bool _hx_tmp3;
HXDLIN( 549)		if (hx::IsNotNull( this->_charBoundaries )) {
HXLINE( 549)			_hx_tmp3 = (this->_charBoundaries->length > (int)0);
            		}
            		else {
HXLINE( 549)			_hx_tmp3 = false;
            		}
HXDLIN( 549)		if (_hx_tmp3) {
HXLINE( 551)			if ((X > this->textField->get_textWidth())) {
HXLINE( 553)				return this->_charBoundaries->length;
            			}
            		}
HXLINE( 558)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxInputText_obj,getCharIndexAtPoint,return )

void FlxInputText_obj::prepareCharBoundaries(int numChars){
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_562_prepareCharBoundaries)
HXLINE( 563)		if (hx::IsNull( this->_charBoundaries )) {
HXLINE( 565)			this->_charBoundaries = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE( 568)		if ((this->_charBoundaries->length > numChars)) {
HXLINE( 570)			int diff = (this->_charBoundaries->length - numChars);
HXLINE( 571)			{
HXLINE( 571)				int _g1 = (int)0;
HXDLIN( 571)				int _g = diff;
HXDLIN( 571)				while((_g1 < _g)){
HXLINE( 571)					_g1 = (_g1 + (int)1);
HXDLIN( 571)					int i = (_g1 - (int)1);
HXLINE( 573)					this->_charBoundaries->pop().StaticCast<  ::flixel::math::FlxRect >();
            				}
            			}
            		}
HXLINE( 577)		{
HXLINE( 577)			int _g11 = (int)0;
HXDLIN( 577)			int _g2 = numChars;
HXDLIN( 577)			while((_g11 < _g2)){
HXLINE( 577)				_g11 = (_g11 + (int)1);
HXDLIN( 577)				int i1 = (_g11 - (int)1);
HXLINE( 579)				if (((this->_charBoundaries->length - (int)1) < i1)) {
HXLINE( 581)					::Array< ::Dynamic> _hx_tmp = this->_charBoundaries;
HXDLIN( 581)					 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 581)					_this->x = (int)0;
HXDLIN( 581)					_this->y = (int)0;
HXDLIN( 581)					_this->width = (int)0;
HXDLIN( 581)					_this->height = (int)0;
HXDLIN( 581)					 ::flixel::math::FlxRect rect = _this;
HXDLIN( 581)					rect->_inPool = false;
HXDLIN( 581)					_hx_tmp->push(rect);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,prepareCharBoundaries,(void))

void FlxInputText_obj::onSetTextCheck(){
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_589_onSetTextCheck)
HXLINE( 591)		 ::openfl::_legacy::geom::Rectangle boundary = null();
HXLINE( 592)		if ((this->caretIndex == (int)-1)) {
HXLINE( 594)			boundary = this->getCharBoundaries((this->text.length - (int)1));
            		}
            		else {
HXLINE( 597)			boundary = this->getCharBoundaries(this->caretIndex);
            		}
HXLINE( 600)		if (hx::IsNotNull( boundary )) {
HXLINE( 603)			int diffW = (int)0;
HXLINE( 604)			Float _hx_tmp = boundary->get_right();
HXDLIN( 604)			int _hx_tmp1 = this->lastScroll;
HXDLIN( 604)			if ((_hx_tmp > ((_hx_tmp1 + this->textField->get_width()) - (int)2))) {
HXLINE( 606)				Float diffW1 = (this->textField->get_width() - (int)2);
HXDLIN( 606)				diffW = -(::Std_obj::_hx_int((diffW1 - boundary->get_right())));
            			}
            			else {
HXLINE( 607)				Float _hx_tmp2 = boundary->get_left();
HXDLIN( 607)				if ((_hx_tmp2 < this->lastScroll)) {
HXLINE( 609)					diffW = (::Std_obj::_hx_int(boundary->get_left()) - (int)2);
            				}
            				else {
HXLINE( 612)					diffW = this->lastScroll;
            				}
            			}
HXLINE( 616)			this->textField->set_scrollH(diffW);
HXLINE( 618)			this->calcFrame(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxInputText_obj,onSetTextCheck,(void))

void FlxInputText_obj::calcFrame(hx::Null< bool >  __o_RunOnCpp){
bool RunOnCpp = __o_RunOnCpp.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_75fddae7e64ce41a_629_calcFrame)
HXLINE( 630)		this->super::calcFrame(RunOnCpp);
HXLINE( 632)		if (hx::IsNotNull( this->fieldBorderSprite )) {
HXLINE( 634)			if ((this->fieldBorderThickness > (int)0)) {
HXLINE( 636)				 ::flixel::FlxSprite _hx_tmp = this->fieldBorderSprite;
HXDLIN( 636)				Float _hx_tmp1 = this->get_width();
HXDLIN( 636)				int _hx_tmp2 = ::Std_obj::_hx_int((_hx_tmp1 + (this->fieldBorderThickness * (int)2)));
HXDLIN( 636)				Float _hx_tmp3 = this->get_height();
HXDLIN( 636)				int _hx_tmp4 = ::Std_obj::_hx_int((_hx_tmp3 + (this->fieldBorderThickness * (int)2)));
HXDLIN( 636)				_hx_tmp->makeGraphic(_hx_tmp2,_hx_tmp4,this->fieldBorderColor,null(),null());
HXLINE( 637)				 ::flixel::FlxSprite _hx_tmp5 = this->fieldBorderSprite;
HXDLIN( 637)				_hx_tmp5->set_x((this->x - this->fieldBorderThickness));
HXLINE( 638)				 ::flixel::FlxSprite _hx_tmp6 = this->fieldBorderSprite;
HXDLIN( 638)				_hx_tmp6->set_y((this->y - this->fieldBorderThickness));
            			}
            			else {
HXLINE( 640)				if ((this->fieldBorderThickness == (int)0)) {
HXLINE( 642)					this->fieldBorderSprite->set_visible(false);
            				}
            			}
            		}
HXLINE( 646)		if (hx::IsNotNull( this->backgroundSprite )) {
HXLINE( 648)			if (this->background) {
HXLINE( 650)				 ::flixel::FlxSprite _hx_tmp7 = this->backgroundSprite;
HXDLIN( 650)				int _hx_tmp8 = ::Std_obj::_hx_int(this->get_width());
HXDLIN( 650)				int _hx_tmp9 = ::Std_obj::_hx_int(this->get_height());
HXDLIN( 650)				_hx_tmp7->makeGraphic(_hx_tmp8,_hx_tmp9,this->backgroundColor,null(),null());
HXLINE( 651)				this->backgroundSprite->set_x(this->x);
HXLINE( 652)				this->backgroundSprite->set_y(this->y);
            			}
            			else {
HXLINE( 656)				this->backgroundSprite->set_visible(false);
            			}
            		}
HXLINE( 660)		if (hx::IsNotNull( this->caret )) {
HXLINE( 665)			int cw = this->caretWidth;
HXLINE( 666)			int ch = ::Std_obj::_hx_int((::Std_obj::_hx_int(this->_defaultFormat->size) + (int)2));
HXLINE( 669)			int borderC = ((int)(int)-16777216 | (int)((int)this->borderColor & (int)(int)16777215));
HXLINE( 670)			int caretC = ((int)(int)-16777216 | (int)((int)this->caretColor & (int)(int)16777215));
HXLINE( 673)			::String caretKey = ((((((((HX_("caret",83,f9,1f,41) + cw) + HX_("x",78,00,00,00)) + ch) + HX_("c:",77,56,00,00)) + caretC) + HX_("b:",98,55,00,00)) + ::Std_obj::string(this->borderStyle)) + HX_(",",2c,00,00,00));
HXDLIN( 673)			::String caretKey1 = (((caretKey + this->borderSize) + HX_(",",2c,00,00,00)) + borderC);
HXLINE( 674)			{
HXLINE( 674)				 ::flixel::text::FlxTextBorderStyle _g = this->borderStyle;
HXDLIN( 674)				switch((int)(_hx_getEnumValueIndex(_g))){
            					case (int)0: {
HXLINE( 678)						this->caret->makeGraphic(cw,ch,caretC,false,caretKey1);
HXLINE( 679)						 ::flixel::math::FlxPoint _hx_tmp10 = this->caret->offset;
HXDLIN( 679)						_hx_tmp10->set_x(this->caret->offset->set_y((int)0));
            					}
            					break;
            					case (int)1: {
HXLINE( 683)						cw = (cw + ::Std_obj::_hx_int(this->borderSize));
HXLINE( 684)						ch = (ch + ::Std_obj::_hx_int(this->borderSize));
HXLINE( 685)						this->caret->makeGraphic(cw,ch,(int)0,false,caretKey1);
HXLINE( 686)						Float r = this->borderSize;
HXDLIN( 686)						Float r1 = this->borderSize;
HXDLIN( 686)						int r2 = this->caretWidth;
HXDLIN( 686)						 ::openfl::_legacy::geom::Rectangle r3 =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,r,r1,r2,::Std_obj::_hx_int((::Std_obj::_hx_int(this->_defaultFormat->size) + (int)2)));
HXLINE( 687)						this->caret->get_pixels()->fillRect(r3,borderC);
HXLINE( 688)						r3->x = (r3->y = (int)0);
HXLINE( 689)						this->caret->get_pixels()->fillRect(r3,caretC);
HXLINE( 690)						 ::flixel::math::FlxPoint _hx_tmp11 = this->caret->offset;
HXDLIN( 690)						_hx_tmp11->set_x(this->caret->offset->set_y((int)0));
            					}
            					break;
            					case (int)2: case (int)3: {
HXLINE( 694)						cw = (cw + ::Std_obj::_hx_int((this->borderSize * (int)2)));
HXLINE( 695)						ch = (ch + ::Std_obj::_hx_int((this->borderSize * (int)2)));
HXLINE( 696)						this->caret->makeGraphic(cw,ch,borderC,false,caretKey1);
HXLINE( 697)						Float r4 = this->borderSize;
HXDLIN( 697)						Float r5 = this->borderSize;
HXDLIN( 697)						int r6 = this->caretWidth;
HXDLIN( 697)						 ::openfl::_legacy::geom::Rectangle r7 =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,r4,r5,r6,::Std_obj::_hx_int((::Std_obj::_hx_int(this->_defaultFormat->size) + (int)2)));
HXLINE( 698)						this->caret->get_pixels()->fillRect(r7,caretC);
HXLINE( 700)						 ::flixel::math::FlxPoint _hx_tmp12 = this->caret->offset;
HXDLIN( 700)						_hx_tmp12->set_x(this->caret->offset->set_y(this->borderSize));
            					}
            					break;
            				}
            			}
HXLINE( 703)			this->caret->set_width(cw);
HXLINE( 704)			this->caret->set_height(ch);
HXLINE( 706)			this->set_caretIndex(this->caretIndex);
            		}
            	}


void FlxInputText_obj::toggleCaret( ::flixel::util::FlxTimer timer){
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_715_toggleCaret)
HXDLIN( 715)		this->caret->set_visible(!(this->caret->visible));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,toggleCaret,(void))

::String FlxInputText_obj::filter(::String text){
            	HX_GC_STACKFRAME(&_hx_pos_75fddae7e64ce41a_723_filter)
HXLINE( 724)		if ((this->forceCase == (int)1)) {
HXLINE( 726)			text = text.toUpperCase();
            		}
            		else {
HXLINE( 728)			if ((this->forceCase == (int)2)) {
HXLINE( 730)				text = text.toLowerCase();
            			}
            		}
HXLINE( 733)		if ((this->filterMode != (int)0)) {
HXLINE( 735)			 ::EReg pattern;
HXLINE( 736)			{
HXLINE( 736)				int _g = this->filterMode;
HXDLIN( 736)				switch((int)(_g)){
            					case (int)1: {
HXLINE( 738)						pattern =  ::EReg_obj::__alloc( HX_CTX ,HX_("[^a-zA-Z]*",50,38,19,1d),HX_("g",67,00,00,00));
            					}
            					break;
            					case (int)2: {
HXLINE( 739)						pattern =  ::EReg_obj::__alloc( HX_CTX ,HX_("[^0-9]*",46,25,d3,1e),HX_("g",67,00,00,00));
            					}
            					break;
            					case (int)3: {
HXLINE( 740)						pattern =  ::EReg_obj::__alloc( HX_CTX ,HX_("[^a-zA-Z0-9]*",86,f4,79,aa),HX_("g",67,00,00,00));
            					}
            					break;
            					case (int)4: {
HXLINE( 741)						pattern = this->customFilterPattern;
            					}
            					break;
            					default:{
HXLINE( 743)						HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,((HX_("FlxInputText: Unknown filterMode (",04,c7,17,56) + this->filterMode) + HX_(")",29,00,00,00)),null()));
            					}
            				}
            			}
HXLINE( 745)			text = pattern->replace(text,HX_("",00,00,00,00));
            		}
HXLINE( 747)		return text;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,filter,return )

::cpp::VirtualArray FlxInputText_obj::set_params(::cpp::VirtualArray p){
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_751_set_params)
HXLINE( 752)		this->params = p;
HXLINE( 753)		if (hx::IsNull( this->params )) {
HXLINE( 755)			this->params = ::cpp::VirtualArray_obj::__new(0);
            		}
HXLINE( 757)		 ::Dynamic namedValue =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("value",71,7f,b8,31),this->text)
            			->setFixed(1,HX_("name",4b,72,ff,48),HX_("value",71,7f,b8,31)));
HXLINE( 758)		this->params->push(namedValue);
HXLINE( 759)		return p;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,set_params,return )

Float FlxInputText_obj::set_x(Float X){
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_763_set_x)
HXLINE( 764)		bool _hx_tmp;
HXDLIN( 764)		if (hx::IsNotNull( this->fieldBorderSprite )) {
HXLINE( 764)			_hx_tmp = (this->fieldBorderThickness > (int)0);
            		}
            		else {
HXLINE( 764)			_hx_tmp = false;
            		}
HXDLIN( 764)		if (_hx_tmp) {
HXLINE( 766)			 ::flixel::FlxSprite _hx_tmp1 = this->fieldBorderSprite;
HXDLIN( 766)			_hx_tmp1->set_x((X - this->fieldBorderThickness));
            		}
HXLINE( 768)		bool _hx_tmp2;
HXDLIN( 768)		if (hx::IsNotNull( this->backgroundSprite )) {
HXLINE( 768)			_hx_tmp2 = this->background;
            		}
            		else {
HXLINE( 768)			_hx_tmp2 = false;
            		}
HXDLIN( 768)		if (_hx_tmp2) {
HXLINE( 770)			this->backgroundSprite->set_x(X);
            		}
HXLINE( 772)		return this->super::set_x(X);
            	}


Float FlxInputText_obj::set_y(Float Y){
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_776_set_y)
HXLINE( 777)		bool _hx_tmp;
HXDLIN( 777)		if (hx::IsNotNull( this->fieldBorderSprite )) {
HXLINE( 777)			_hx_tmp = (this->fieldBorderThickness > (int)0);
            		}
            		else {
HXLINE( 777)			_hx_tmp = false;
            		}
HXDLIN( 777)		if (_hx_tmp) {
HXLINE( 779)			 ::flixel::FlxSprite _hx_tmp1 = this->fieldBorderSprite;
HXDLIN( 779)			_hx_tmp1->set_y((Y - this->fieldBorderThickness));
            		}
HXLINE( 781)		bool _hx_tmp2;
HXDLIN( 781)		if (hx::IsNotNull( this->backgroundSprite )) {
HXLINE( 781)			_hx_tmp2 = this->background;
            		}
            		else {
HXLINE( 781)			_hx_tmp2 = false;
            		}
HXDLIN( 781)		if (_hx_tmp2) {
HXLINE( 783)			this->backgroundSprite->set_y(Y);
            		}
HXLINE( 785)		return this->super::set_y(Y);
            	}


bool FlxInputText_obj::set_hasFocus(bool newFocus){
            	HX_GC_STACKFRAME(&_hx_pos_75fddae7e64ce41a_789_set_hasFocus)
HXLINE( 790)		if (newFocus) {
HXLINE( 792)			if ((this->hasFocus != newFocus)) {
HXLINE( 794)				this->_caretTimer =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.5),this->toggleCaret_dyn(),(int)0);
HXLINE( 795)				this->caret->set_visible(true);
HXLINE( 796)				this->set_caretIndex(this->text.length);
            			}
            		}
            		else {
HXLINE( 802)			this->caret->set_visible(false);
HXLINE( 803)			if (hx::IsNotNull( this->_caretTimer )) {
HXLINE( 805)				this->_caretTimer->cancel();
            			}
            		}
HXLINE( 809)		if ((newFocus != this->hasFocus)) {
HXLINE( 811)			this->calcFrame(null());
            		}
HXLINE( 813)		return (this->hasFocus = newFocus);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,set_hasFocus,return )

::String FlxInputText_obj::getAlignStr(){
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_816_getAlignStr)
HXLINE( 817)		::String alignStr = HX_("left",07,08,b0,47);
HXLINE( 818)		bool _hx_tmp;
HXDLIN( 818)		if (hx::IsNotNull( this->_defaultFormat )) {
HXLINE( 818)			_hx_tmp = hx::IsNotNull( this->_defaultFormat->align );
            		}
            		else {
HXLINE( 818)			_hx_tmp = false;
            		}
HXDLIN( 818)		if (_hx_tmp) {
HXLINE( 819)			alignStr = ::flixel::text::_FlxText::FlxTextAlign_Impl__obj::fromOpenFL(this->_defaultFormat->align);
            		}
HXLINE( 821)		return alignStr;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxInputText_obj,getAlignStr,return )

int FlxInputText_obj::set_caretIndex(int newCaretIndex){
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_825_set_caretIndex)
HXLINE( 826)		Float offx = (int)0;
HXLINE( 828)		::String alignStr = this->getAlignStr();
HXLINE( 830)		::String _hx_switch_0 = alignStr;
            		if (  (_hx_switch_0==HX_("center",d5,25,db,05)) ){
HXLINE( 837)			Float offx1 = (this->textField->get_width() - (int)2);
HXDLIN( 837)			Float offx2 = ((Float)(offx1 - this->textField->get_textWidth()) / (Float)(int)2);
HXDLIN( 837)			offx = (offx2 + ((Float)this->textField->get_scrollH() / (Float)(int)2));
HXLINE( 839)			if ((offx <= (int)1)) {
HXLINE( 839)				offx = (int)0;
            			}
HXLINE( 835)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE( 832)			Float offx3 = (this->textField->get_width() - (int)2);
HXDLIN( 832)			offx = ((offx3 - this->textField->get_textWidth()) - (int)2);
HXLINE( 833)			if ((offx < (int)0)) {
HXLINE( 833)				offx = (int)0;
            			}
HXLINE( 831)			goto _hx_goto_31;
            		}
            		/* default */{
HXLINE( 841)			offx = (int)0;
            		}
            		_hx_goto_31:;
HXLINE( 844)		this->caretIndex = newCaretIndex;
HXLINE( 847)		int _hx_tmp = this->caretIndex;
HXDLIN( 847)		if ((_hx_tmp > (this->text.length + (int)1))) {
HXLINE( 849)			this->caretIndex = (int)-1;
            		}
HXLINE( 853)		if ((this->caretIndex != (int)-1)) {
HXLINE( 855)			 ::openfl::_legacy::geom::Rectangle boundaries = null();
HXLINE( 858)			if ((this->caretIndex < this->text.length)) {
HXLINE( 859)				boundaries = this->getCharBoundaries(this->caretIndex);
HXLINE( 860)				if (hx::IsNotNull( boundaries )) {
HXLINE( 862)					 ::flixel::FlxSprite _hx_tmp1 = this->caret;
HXDLIN( 862)					Float _hx_tmp2 = (offx + boundaries->get_left());
HXDLIN( 862)					_hx_tmp1->set_x((_hx_tmp2 + this->x));
HXLINE( 863)					 ::flixel::FlxSprite _hx_tmp3 = this->caret;
HXDLIN( 863)					Float _hx_tmp4 = boundaries->get_top();
HXDLIN( 863)					_hx_tmp3->set_y((_hx_tmp4 + this->y));
            				}
            			}
            			else {
HXLINE( 868)				boundaries = this->getCharBoundaries((this->caretIndex - (int)1));
HXLINE( 869)				if (hx::IsNotNull( boundaries )) {
HXLINE( 871)					 ::flixel::FlxSprite _hx_tmp5 = this->caret;
HXDLIN( 871)					Float _hx_tmp6 = (offx + boundaries->get_right());
HXDLIN( 871)					_hx_tmp5->set_x((_hx_tmp6 + this->x));
HXLINE( 872)					 ::flixel::FlxSprite _hx_tmp7 = this->caret;
HXDLIN( 872)					Float _hx_tmp8 = boundaries->get_top();
HXDLIN( 872)					_hx_tmp7->set_y((_hx_tmp8 + this->y));
            				}
            				else {
HXLINE( 875)					if ((this->text.length == (int)0)) {
HXLINE( 878)						 ::flixel::FlxSprite _hx_tmp9 = this->caret;
HXDLIN( 878)						_hx_tmp9->set_x(((this->x + offx) + (int)2));
HXLINE( 879)						 ::flixel::FlxSprite _hx_tmp10 = this->caret;
HXDLIN( 879)						_hx_tmp10->set_y((this->y + (int)2));
            					}
            				}
            			}
            		}
HXLINE( 885)		{
HXLINE( 885)			 ::flixel::FlxSprite _g = this->caret;
HXDLIN( 885)			Float _g1 = _g->x;
HXDLIN( 885)			_g->set_x((_g1 - this->textField->get_scrollH()));
            		}
HXLINE( 889)		bool _hx_tmp11;
HXDLIN( 889)		if ((this->lines == (int)1)) {
HXLINE( 889)			Float _hx_tmp12 = this->caret->x;
HXDLIN( 889)			Float _hx_tmp13 = (_hx_tmp12 + this->caret->get_width());
HXDLIN( 889)			Float _hx_tmp14 = this->x;
HXDLIN( 889)			_hx_tmp11 = (_hx_tmp13 > (_hx_tmp14 + this->get_width()));
            		}
            		else {
HXLINE( 889)			_hx_tmp11 = false;
            		}
HXDLIN( 889)		if (_hx_tmp11) {
HXLINE( 891)			 ::flixel::FlxSprite _hx_tmp15 = this->caret;
HXDLIN( 891)			Float _hx_tmp16 = this->x;
HXDLIN( 891)			_hx_tmp15->set_x(((_hx_tmp16 + this->get_width()) - (int)2));
            		}
HXLINE( 894)		return this->caretIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,set_caretIndex,return )

int FlxInputText_obj::set_forceCase(int Value){
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_898_set_forceCase)
HXLINE( 899)		this->forceCase = Value;
HXLINE( 900)		this->set_text(this->filter(this->text));
HXLINE( 901)		return this->forceCase;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,set_forceCase,return )

int FlxInputText_obj::set_size(int Value){
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_905_set_size)
HXLINE( 906)		this->super::set_size(Value);
HXLINE( 907)		 ::flixel::FlxSprite _hx_tmp = this->caret;
HXDLIN( 907)		_hx_tmp->makeGraphic((int)1,::Std_obj::_hx_int((::Std_obj::_hx_int(this->_defaultFormat->size) + (int)2)),null(),null(),null());
HXLINE( 908)		return Value;
            	}


int FlxInputText_obj::set_maxLength(int Value){
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_912_set_maxLength)
HXLINE( 913)		this->maxLength = Value;
HXLINE( 914)		if ((this->text.length > this->maxLength)) {
HXLINE( 916)			this->set_text(this->text.substring((int)0,this->maxLength));
            		}
HXLINE( 918)		return this->maxLength;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,set_maxLength,return )

int FlxInputText_obj::set_lines(int Value){
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_922_set_lines)
HXLINE( 923)		if ((Value == (int)0)) {
HXLINE( 923)			return (int)0;
            		}
HXLINE( 925)		if ((Value > (int)1)) {
HXLINE( 926)			this->textField->set_wordWrap(true);
HXLINE( 927)			this->textField->set_multiline(true);
            		}
            		else {
HXLINE( 930)			this->textField->set_wordWrap(false);
HXLINE( 931)			this->textField->set_multiline(false);
            		}
HXLINE( 934)		this->lines = Value;
HXLINE( 935)		this->calcFrame(null());
HXLINE( 936)		return this->lines;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,set_lines,return )

bool FlxInputText_obj::get_passwordMode(){
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_941_get_passwordMode)
HXDLIN( 941)		return this->textField->get_displayAsPassword();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxInputText_obj,get_passwordMode,return )

bool FlxInputText_obj::set_passwordMode(bool value){
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_945_set_passwordMode)
HXLINE( 946)		this->textField->set_displayAsPassword(value);
HXLINE( 947)		this->calcFrame(null());
HXLINE( 948)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,set_passwordMode,return )

int FlxInputText_obj::set_filterMode(int Value){
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_952_set_filterMode)
HXLINE( 953)		this->filterMode = Value;
HXLINE( 954)		this->set_text(this->filter(this->text));
HXLINE( 955)		return this->filterMode;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,set_filterMode,return )

int FlxInputText_obj::set_fieldBorderColor(int Value){
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_959_set_fieldBorderColor)
HXLINE( 960)		this->fieldBorderColor = Value;
HXLINE( 961)		this->calcFrame(null());
HXLINE( 962)		return this->fieldBorderColor;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,set_fieldBorderColor,return )

int FlxInputText_obj::set_fieldBorderThickness(int Value){
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_966_set_fieldBorderThickness)
HXLINE( 967)		this->fieldBorderThickness = Value;
HXLINE( 968)		this->calcFrame(null());
HXLINE( 969)		return this->fieldBorderThickness;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,set_fieldBorderThickness,return )

int FlxInputText_obj::set_backgroundColor(int Value){
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_973_set_backgroundColor)
HXLINE( 974)		this->backgroundColor = Value;
HXLINE( 975)		this->calcFrame(null());
HXLINE( 976)		return this->backgroundColor;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxInputText_obj,set_backgroundColor,return )

int FlxInputText_obj::NO_FILTER;

int FlxInputText_obj::ONLY_ALPHA;

int FlxInputText_obj::ONLY_NUMERIC;

int FlxInputText_obj::ONLY_ALPHANUMERIC;

int FlxInputText_obj::CUSTOM_FILTER;

int FlxInputText_obj::ALL_CASES;

int FlxInputText_obj::UPPER_CASE;

int FlxInputText_obj::LOWER_CASE;

::String FlxInputText_obj::BACKSPACE_ACTION;

::String FlxInputText_obj::DELETE_ACTION;

::String FlxInputText_obj::ENTER_ACTION;

::String FlxInputText_obj::INPUT_ACTION;


hx::ObjectPtr< FlxInputText_obj > FlxInputText_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< int >  __o_Width,::String Text,hx::Null< int >  __o_size,hx::Null< int >  __o_TextColor,hx::Null< int >  __o_BackgroundColor,hx::Null< bool >  __o_EmbeddedFont) {
	hx::ObjectPtr< FlxInputText_obj > __this = new FlxInputText_obj();
	__this->__construct(__o_X,__o_Y,__o_Width,Text,__o_size,__o_TextColor,__o_BackgroundColor,__o_EmbeddedFont);
	return __this;
}

hx::ObjectPtr< FlxInputText_obj > FlxInputText_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< int >  __o_Width,::String Text,hx::Null< int >  __o_size,hx::Null< int >  __o_TextColor,hx::Null< int >  __o_BackgroundColor,hx::Null< bool >  __o_EmbeddedFont) {
	FlxInputText_obj *__this = (FlxInputText_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxInputText_obj), true, "flixel.addons.ui.FlxInputText"));
	*(void **)__this = FlxInputText_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,__o_Width,Text,__o_size,__o_TextColor,__o_BackgroundColor,__o_EmbeddedFont);
	return __this;
}

FlxInputText_obj::FlxInputText_obj()
{
}

void FlxInputText_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxInputText);
	HX_MARK_MEMBER_NAME(customFilterPattern,"customFilterPattern");
	HX_MARK_MEMBER_NAME(callback,"callback");
	HX_MARK_MEMBER_NAME(background,"background");
	HX_MARK_MEMBER_NAME(caretColor,"caretColor");
	HX_MARK_MEMBER_NAME(caretWidth,"caretWidth");
	HX_MARK_MEMBER_NAME(params,"params");
	HX_MARK_MEMBER_NAME(hasFocus,"hasFocus");
	HX_MARK_MEMBER_NAME(caretIndex,"caretIndex");
	HX_MARK_MEMBER_NAME(focusGained,"focusGained");
	HX_MARK_MEMBER_NAME(focusLost,"focusLost");
	HX_MARK_MEMBER_NAME(forceCase,"forceCase");
	HX_MARK_MEMBER_NAME(maxLength,"maxLength");
	HX_MARK_MEMBER_NAME(lines,"lines");
	HX_MARK_MEMBER_NAME(filterMode,"filterMode");
	HX_MARK_MEMBER_NAME(fieldBorderColor,"fieldBorderColor");
	HX_MARK_MEMBER_NAME(fieldBorderThickness,"fieldBorderThickness");
	HX_MARK_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_MARK_MEMBER_NAME(backgroundSprite,"backgroundSprite");
	HX_MARK_MEMBER_NAME(_caretTimer,"_caretTimer");
	HX_MARK_MEMBER_NAME(caret,"caret");
	HX_MARK_MEMBER_NAME(fieldBorderSprite,"fieldBorderSprite");
	HX_MARK_MEMBER_NAME(_scrollBoundIndeces,"_scrollBoundIndeces");
	HX_MARK_MEMBER_NAME(_charBoundaries,"_charBoundaries");
	HX_MARK_MEMBER_NAME(lastScroll,"lastScroll");
	 ::flixel::text::FlxText_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxInputText_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(customFilterPattern,"customFilterPattern");
	HX_VISIT_MEMBER_NAME(callback,"callback");
	HX_VISIT_MEMBER_NAME(background,"background");
	HX_VISIT_MEMBER_NAME(caretColor,"caretColor");
	HX_VISIT_MEMBER_NAME(caretWidth,"caretWidth");
	HX_VISIT_MEMBER_NAME(params,"params");
	HX_VISIT_MEMBER_NAME(hasFocus,"hasFocus");
	HX_VISIT_MEMBER_NAME(caretIndex,"caretIndex");
	HX_VISIT_MEMBER_NAME(focusGained,"focusGained");
	HX_VISIT_MEMBER_NAME(focusLost,"focusLost");
	HX_VISIT_MEMBER_NAME(forceCase,"forceCase");
	HX_VISIT_MEMBER_NAME(maxLength,"maxLength");
	HX_VISIT_MEMBER_NAME(lines,"lines");
	HX_VISIT_MEMBER_NAME(filterMode,"filterMode");
	HX_VISIT_MEMBER_NAME(fieldBorderColor,"fieldBorderColor");
	HX_VISIT_MEMBER_NAME(fieldBorderThickness,"fieldBorderThickness");
	HX_VISIT_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_VISIT_MEMBER_NAME(backgroundSprite,"backgroundSprite");
	HX_VISIT_MEMBER_NAME(_caretTimer,"_caretTimer");
	HX_VISIT_MEMBER_NAME(caret,"caret");
	HX_VISIT_MEMBER_NAME(fieldBorderSprite,"fieldBorderSprite");
	HX_VISIT_MEMBER_NAME(_scrollBoundIndeces,"_scrollBoundIndeces");
	HX_VISIT_MEMBER_NAME(_charBoundaries,"_charBoundaries");
	HX_VISIT_MEMBER_NAME(lastScroll,"lastScroll");
	 ::flixel::text::FlxText_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxInputText_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"lines") ) { return hx::Val( lines ); }
		if (HX_FIELD_EQ(inName,"caret") ) { return hx::Val( caret ); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"params") ) { return hx::Val( params ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"filter") ) { return hx::Val( filter_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"callback") ) { return hx::Val( callback ); }
		if (HX_FIELD_EQ(inName,"hasFocus") ) { return hx::Val( hasFocus ); }
		if (HX_FIELD_EQ(inName,"onChange") ) { return hx::Val( onChange_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return hx::Val( set_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_size") ) { return hx::Val( set_size_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"focusLost") ) { return hx::Val( focusLost ); }
		if (HX_FIELD_EQ(inName,"forceCase") ) { return hx::Val( forceCase ); }
		if (HX_FIELD_EQ(inName,"maxLength") ) { return hx::Val( maxLength ); }
		if (HX_FIELD_EQ(inName,"onKeyDown") ) { return hx::Val( onKeyDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"calcFrame") ) { return hx::Val( calcFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_lines") ) { return hx::Val( set_lines_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { return hx::Val( background ); }
		if (HX_FIELD_EQ(inName,"caretColor") ) { return hx::Val( caretColor ); }
		if (HX_FIELD_EQ(inName,"caretWidth") ) { return hx::Val( caretWidth ); }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { return hx::Val( caretIndex ); }
		if (HX_FIELD_EQ(inName,"filterMode") ) { return hx::Val( filterMode ); }
		if (HX_FIELD_EQ(inName,"lastScroll") ) { return hx::Val( lastScroll ); }
		if (HX_FIELD_EQ(inName,"drawSprite") ) { return hx::Val( drawSprite_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_params") ) { return hx::Val( set_params_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"focusGained") ) { return hx::Val( focusGained ); }
		if (HX_FIELD_EQ(inName,"_caretTimer") ) { return hx::Val( _caretTimer ); }
		if (HX_FIELD_EQ(inName,"toggleCaret") ) { return hx::Val( toggleCaret_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAlignStr") ) { return hx::Val( getAlignStr_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"passwordMode") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_passwordMode() ); }
		if (HX_FIELD_EQ(inName,"set_hasFocus") ) { return hx::Val( set_hasFocus_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getCaretIndex") ) { return hx::Val( getCaretIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_forceCase") ) { return hx::Val( set_forceCase_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_maxLength") ) { return hx::Val( set_maxLength_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"set_caretColor") ) { return hx::Val( set_caretColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_caretWidth") ) { return hx::Val( set_caretWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSetTextCheck") ) { return hx::Val( onSetTextCheck_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_caretIndex") ) { return hx::Val( set_caretIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_filterMode") ) { return hx::Val( set_filterMode_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { return hx::Val( backgroundColor ); }
		if (HX_FIELD_EQ(inName,"_charBoundaries") ) { return hx::Val( _charBoundaries ); }
		if (HX_FIELD_EQ(inName,"insertSubstring") ) { return hx::Val( insertSubstring_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"fieldBorderColor") ) { return hx::Val( fieldBorderColor ); }
		if (HX_FIELD_EQ(inName,"backgroundSprite") ) { return hx::Val( backgroundSprite ); }
		if (HX_FIELD_EQ(inName,"get_passwordMode") ) { return hx::Val( get_passwordMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_passwordMode") ) { return hx::Val( set_passwordMode_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"fieldBorderSprite") ) { return hx::Val( fieldBorderSprite ); }
		if (HX_FIELD_EQ(inName,"getCharBoundaries") ) { return hx::Val( getCharBoundaries_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"customFilterPattern") ) { return hx::Val( customFilterPattern ); }
		if (HX_FIELD_EQ(inName,"_scrollBoundIndeces") ) { return hx::Val( _scrollBoundIndeces ); }
		if (HX_FIELD_EQ(inName,"getCharIndexAtPoint") ) { return hx::Val( getCharIndexAtPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_backgroundColor") ) { return hx::Val( set_backgroundColor_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"fieldBorderThickness") ) { return hx::Val( fieldBorderThickness ); }
		if (HX_FIELD_EQ(inName,"set_fieldBorderColor") ) { return hx::Val( set_fieldBorderColor_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"prepareCharBoundaries") ) { return hx::Val( prepareCharBoundaries_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"set_customFilterPattern") ) { return hx::Val( set_customFilterPattern_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"set_fieldBorderThickness") ) { return hx::Val( set_fieldBorderThickness_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxInputText_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"lines") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_lines(inValue.Cast< int >()) );lines=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"caret") ) { caret=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"params") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_params(inValue.Cast< ::cpp::VirtualArray >()) );params=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"callback") ) { callback=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hasFocus") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_hasFocus(inValue.Cast< bool >()) );hasFocus=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"focusLost") ) { focusLost=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"forceCase") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_forceCase(inValue.Cast< int >()) );forceCase=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxLength") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_maxLength(inValue.Cast< int >()) );maxLength=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { background=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"caretColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_caretColor(inValue.Cast< int >()) );caretColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"caretWidth") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_caretWidth(inValue.Cast< int >()) );caretWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_caretIndex(inValue.Cast< int >()) );caretIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"filterMode") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_filterMode(inValue.Cast< int >()) );filterMode=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastScroll") ) { lastScroll=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"focusGained") ) { focusGained=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_caretTimer") ) { _caretTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"passwordMode") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_passwordMode(inValue.Cast< bool >()) ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_backgroundColor(inValue.Cast< int >()) );backgroundColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_charBoundaries") ) { _charBoundaries=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"fieldBorderColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_fieldBorderColor(inValue.Cast< int >()) );fieldBorderColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"backgroundSprite") ) { backgroundSprite=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"fieldBorderSprite") ) { fieldBorderSprite=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"customFilterPattern") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_customFilterPattern(inValue.Cast<  ::EReg >()) );customFilterPattern=inValue.Cast<  ::EReg >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_scrollBoundIndeces") ) { _scrollBoundIndeces=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"fieldBorderThickness") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_fieldBorderThickness(inValue.Cast< int >()) );fieldBorderThickness=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxInputText_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("customFilterPattern","\x07","\x03","\x33","\x08"));
	outFields->push(HX_HCSTRING("background","\xee","\x93","\x1d","\x26"));
	outFields->push(HX_HCSTRING("caretColor","\xe0","\x8c","\xa3","\x69"));
	outFields->push(HX_HCSTRING("caretWidth","\x83","\xd1","\xa9","\xe9"));
	outFields->push(HX_HCSTRING("params","\x46","\xfb","\x7a","\xed"));
	outFields->push(HX_HCSTRING("passwordMode","\x1e","\x4c","\x29","\xb6"));
	outFields->push(HX_HCSTRING("hasFocus","\x1e","\xaa","\xe1","\x90"));
	outFields->push(HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd"));
	outFields->push(HX_HCSTRING("forceCase","\x3b","\xce","\xfe","\x46"));
	outFields->push(HX_HCSTRING("maxLength","\xaa","\xa6","\x92","\xce"));
	outFields->push(HX_HCSTRING("lines","\xff","\xdd","\x01","\x75"));
	outFields->push(HX_HCSTRING("filterMode","\x3b","\x5b","\xa5","\x54"));
	outFields->push(HX_HCSTRING("fieldBorderColor","\x3d","\x66","\xca","\x1d"));
	outFields->push(HX_HCSTRING("fieldBorderThickness","\x4e","\x5b","\x39","\x33"));
	outFields->push(HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d"));
	outFields->push(HX_HCSTRING("backgroundSprite","\x93","\x8a","\x2c","\x8e"));
	outFields->push(HX_HCSTRING("_caretTimer","\x61","\xa8","\x06","\x02"));
	outFields->push(HX_HCSTRING("caret","\x83","\xf9","\x1f","\x41"));
	outFields->push(HX_HCSTRING("fieldBorderSprite","\xeb","\x25","\x5e","\xf0"));
	outFields->push(HX_HCSTRING("_scrollBoundIndeces","\xd9","\x8f","\x2d","\x01"));
	outFields->push(HX_HCSTRING("_charBoundaries","\xdd","\x1e","\x8e","\x62"));
	outFields->push(HX_HCSTRING("lastScroll","\x03","\xbb","\x3f","\x12"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxInputText_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::EReg*/ ,(int)offsetof(FlxInputText_obj,customFilterPattern),HX_HCSTRING("customFilterPattern","\x07","\x03","\x33","\x08")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxInputText_obj,callback),HX_HCSTRING("callback","\xc5","\x99","\x06","\x7f")},
	{hx::fsBool,(int)offsetof(FlxInputText_obj,background),HX_HCSTRING("background","\xee","\x93","\x1d","\x26")},
	{hx::fsInt,(int)offsetof(FlxInputText_obj,caretColor),HX_HCSTRING("caretColor","\xe0","\x8c","\xa3","\x69")},
	{hx::fsInt,(int)offsetof(FlxInputText_obj,caretWidth),HX_HCSTRING("caretWidth","\x83","\xd1","\xa9","\xe9")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(FlxInputText_obj,params),HX_HCSTRING("params","\x46","\xfb","\x7a","\xed")},
	{hx::fsBool,(int)offsetof(FlxInputText_obj,hasFocus),HX_HCSTRING("hasFocus","\x1e","\xaa","\xe1","\x90")},
	{hx::fsInt,(int)offsetof(FlxInputText_obj,caretIndex),HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxInputText_obj,focusGained),HX_HCSTRING("focusGained","\x96","\xec","\x66","\xa1")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxInputText_obj,focusLost),HX_HCSTRING("focusLost","\xdc","\x01","\x43","\x1f")},
	{hx::fsInt,(int)offsetof(FlxInputText_obj,forceCase),HX_HCSTRING("forceCase","\x3b","\xce","\xfe","\x46")},
	{hx::fsInt,(int)offsetof(FlxInputText_obj,maxLength),HX_HCSTRING("maxLength","\xaa","\xa6","\x92","\xce")},
	{hx::fsInt,(int)offsetof(FlxInputText_obj,lines),HX_HCSTRING("lines","\xff","\xdd","\x01","\x75")},
	{hx::fsInt,(int)offsetof(FlxInputText_obj,filterMode),HX_HCSTRING("filterMode","\x3b","\x5b","\xa5","\x54")},
	{hx::fsInt,(int)offsetof(FlxInputText_obj,fieldBorderColor),HX_HCSTRING("fieldBorderColor","\x3d","\x66","\xca","\x1d")},
	{hx::fsInt,(int)offsetof(FlxInputText_obj,fieldBorderThickness),HX_HCSTRING("fieldBorderThickness","\x4e","\x5b","\x39","\x33")},
	{hx::fsInt,(int)offsetof(FlxInputText_obj,backgroundColor),HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(FlxInputText_obj,backgroundSprite),HX_HCSTRING("backgroundSprite","\x93","\x8a","\x2c","\x8e")},
	{hx::fsObject /*::flixel::util::FlxTimer*/ ,(int)offsetof(FlxInputText_obj,_caretTimer),HX_HCSTRING("_caretTimer","\x61","\xa8","\x06","\x02")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(FlxInputText_obj,caret),HX_HCSTRING("caret","\x83","\xf9","\x1f","\x41")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(FlxInputText_obj,fieldBorderSprite),HX_HCSTRING("fieldBorderSprite","\xeb","\x25","\x5e","\xf0")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxInputText_obj,_scrollBoundIndeces),HX_HCSTRING("_scrollBoundIndeces","\xd9","\x8f","\x2d","\x01")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxInputText_obj,_charBoundaries),HX_HCSTRING("_charBoundaries","\xdd","\x1e","\x8e","\x62")},
	{hx::fsInt,(int)offsetof(FlxInputText_obj,lastScroll),HX_HCSTRING("lastScroll","\x03","\xbb","\x3f","\x12")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FlxInputText_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &FlxInputText_obj::NO_FILTER,HX_HCSTRING("NO_FILTER","\x36","\x13","\x4e","\x92")},
	{hx::fsInt,(void *) &FlxInputText_obj::ONLY_ALPHA,HX_HCSTRING("ONLY_ALPHA","\xeb","\x4c","\xe5","\xa7")},
	{hx::fsInt,(void *) &FlxInputText_obj::ONLY_NUMERIC,HX_HCSTRING("ONLY_NUMERIC","\x9a","\xa9","\x2d","\x5f")},
	{hx::fsInt,(void *) &FlxInputText_obj::ONLY_ALPHANUMERIC,HX_HCSTRING("ONLY_ALPHANUMERIC","\x22","\xad","\x7f","\xf5")},
	{hx::fsInt,(void *) &FlxInputText_obj::CUSTOM_FILTER,HX_HCSTRING("CUSTOM_FILTER","\xc6","\xf1","\x56","\xe9")},
	{hx::fsInt,(void *) &FlxInputText_obj::ALL_CASES,HX_HCSTRING("ALL_CASES","\xa5","\x06","\x9b","\x9d")},
	{hx::fsInt,(void *) &FlxInputText_obj::UPPER_CASE,HX_HCSTRING("UPPER_CASE","\x0d","\xe2","\x06","\x82")},
	{hx::fsInt,(void *) &FlxInputText_obj::LOWER_CASE,HX_HCSTRING("LOWER_CASE","\x0e","\x61","\xd8","\x7c")},
	{hx::fsString,(void *) &FlxInputText_obj::BACKSPACE_ACTION,HX_HCSTRING("BACKSPACE_ACTION","\x16","\x76","\x91","\xd1")},
	{hx::fsString,(void *) &FlxInputText_obj::DELETE_ACTION,HX_HCSTRING("DELETE_ACTION","\x8a","\x38","\xe3","\x2e")},
	{hx::fsString,(void *) &FlxInputText_obj::ENTER_ACTION,HX_HCSTRING("ENTER_ACTION","\x5d","\x63","\x46","\x79")},
	{hx::fsString,(void *) &FlxInputText_obj::INPUT_ACTION,HX_HCSTRING("INPUT_ACTION","\xab","\xae","\x95","\x20")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxInputText_obj_sMemberFields[] = {
	HX_HCSTRING("customFilterPattern","\x07","\x03","\x33","\x08"),
	HX_HCSTRING("set_customFilterPattern","\xaa","\x12","\xea","\x12"),
	HX_HCSTRING("callback","\xc5","\x99","\x06","\x7f"),
	HX_HCSTRING("background","\xee","\x93","\x1d","\x26"),
	HX_HCSTRING("caretColor","\xe0","\x8c","\xa3","\x69"),
	HX_HCSTRING("set_caretColor","\x9d","\xfd","\xb8","\xff"),
	HX_HCSTRING("caretWidth","\x83","\xd1","\xa9","\xe9"),
	HX_HCSTRING("set_caretWidth","\x40","\x42","\xbf","\x7f"),
	HX_HCSTRING("params","\x46","\xfb","\x7a","\xed"),
	HX_HCSTRING("hasFocus","\x1e","\xaa","\xe1","\x90"),
	HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd"),
	HX_HCSTRING("focusGained","\x96","\xec","\x66","\xa1"),
	HX_HCSTRING("focusLost","\xdc","\x01","\x43","\x1f"),
	HX_HCSTRING("forceCase","\x3b","\xce","\xfe","\x46"),
	HX_HCSTRING("maxLength","\xaa","\xa6","\x92","\xce"),
	HX_HCSTRING("lines","\xff","\xdd","\x01","\x75"),
	HX_HCSTRING("filterMode","\x3b","\x5b","\xa5","\x54"),
	HX_HCSTRING("fieldBorderColor","\x3d","\x66","\xca","\x1d"),
	HX_HCSTRING("fieldBorderThickness","\x4e","\x5b","\x39","\x33"),
	HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d"),
	HX_HCSTRING("backgroundSprite","\x93","\x8a","\x2c","\x8e"),
	HX_HCSTRING("_caretTimer","\x61","\xa8","\x06","\x02"),
	HX_HCSTRING("caret","\x83","\xf9","\x1f","\x41"),
	HX_HCSTRING("fieldBorderSprite","\xeb","\x25","\x5e","\xf0"),
	HX_HCSTRING("_scrollBoundIndeces","\xd9","\x8f","\x2d","\x01"),
	HX_HCSTRING("_charBoundaries","\xdd","\x1e","\x8e","\x62"),
	HX_HCSTRING("lastScroll","\x03","\xbb","\x3f","\x12"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("drawSprite","\x29","\x57","\x59","\x05"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("onKeyDown","\x42","\x22","\xf2","\x73"),
	HX_HCSTRING("onChange","\xef","\x87","\x1f","\x97"),
	HX_HCSTRING("insertSubstring","\xd8","\xdf","\x31","\x11"),
	HX_HCSTRING("getCaretIndex","\xc5","\x12","\xce","\x39"),
	HX_HCSTRING("getCharBoundaries","\x74","\x85","\xa1","\x8b"),
	HX_HCSTRING("set_text","\xaa","\xe1","\x11","\x7b"),
	HX_HCSTRING("getCharIndexAtPoint","\x17","\xee","\x9c","\xaa"),
	HX_HCSTRING("prepareCharBoundaries","\x25","\xfa","\x4d","\x3a"),
	HX_HCSTRING("onSetTextCheck","\x98","\x48","\xe3","\x2c"),
	HX_HCSTRING("calcFrame","\x58","\x93","\x8c","\xf9"),
	HX_HCSTRING("toggleCaret","\x4f","\xb1","\xe6","\x68"),
	HX_HCSTRING("filter","\xb8","\x1f","\x35","\x85"),
	HX_HCSTRING("set_params","\x83","\x09","\x80","\xe1"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_hasFocus","\x9b","\x81","\xf4","\x5a"),
	HX_HCSTRING("getAlignStr","\xa2","\x95","\xd2","\xef"),
	HX_HCSTRING("set_caretIndex","\x4c","\x27","\x71","\x73"),
	HX_HCSTRING("set_forceCase","\x1e","\x84","\x68","\x4d"),
	HX_HCSTRING("set_size","\xbe","\xb5","\x6b","\x7a"),
	HX_HCSTRING("set_maxLength","\x8d","\x5c","\xfc","\xd4"),
	HX_HCSTRING("set_lines","\x62","\x26","\xfc","\x9b"),
	HX_HCSTRING("get_passwordMode","\xa7","\x38","\xc8","\xba"),
	HX_HCSTRING("set_passwordMode","\x1b","\x26","\x0a","\x11"),
	HX_HCSTRING("set_filterMode","\xf8","\xcb","\xba","\xea"),
	HX_HCSTRING("set_fieldBorderColor","\xba","\x82","\xec","\x08"),
	HX_HCSTRING("set_fieldBorderThickness","\x4b","\xfa","\xaf","\x88"),
	HX_HCSTRING("set_backgroundColor","\xb8","\x10","\xef","\xd4"),
	::String(null()) };

static void FlxInputText_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxInputText_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxInputText_obj::NO_FILTER,"NO_FILTER");
	HX_MARK_MEMBER_NAME(FlxInputText_obj::ONLY_ALPHA,"ONLY_ALPHA");
	HX_MARK_MEMBER_NAME(FlxInputText_obj::ONLY_NUMERIC,"ONLY_NUMERIC");
	HX_MARK_MEMBER_NAME(FlxInputText_obj::ONLY_ALPHANUMERIC,"ONLY_ALPHANUMERIC");
	HX_MARK_MEMBER_NAME(FlxInputText_obj::CUSTOM_FILTER,"CUSTOM_FILTER");
	HX_MARK_MEMBER_NAME(FlxInputText_obj::ALL_CASES,"ALL_CASES");
	HX_MARK_MEMBER_NAME(FlxInputText_obj::UPPER_CASE,"UPPER_CASE");
	HX_MARK_MEMBER_NAME(FlxInputText_obj::LOWER_CASE,"LOWER_CASE");
	HX_MARK_MEMBER_NAME(FlxInputText_obj::BACKSPACE_ACTION,"BACKSPACE_ACTION");
	HX_MARK_MEMBER_NAME(FlxInputText_obj::DELETE_ACTION,"DELETE_ACTION");
	HX_MARK_MEMBER_NAME(FlxInputText_obj::ENTER_ACTION,"ENTER_ACTION");
	HX_MARK_MEMBER_NAME(FlxInputText_obj::INPUT_ACTION,"INPUT_ACTION");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxInputText_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxInputText_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxInputText_obj::NO_FILTER,"NO_FILTER");
	HX_VISIT_MEMBER_NAME(FlxInputText_obj::ONLY_ALPHA,"ONLY_ALPHA");
	HX_VISIT_MEMBER_NAME(FlxInputText_obj::ONLY_NUMERIC,"ONLY_NUMERIC");
	HX_VISIT_MEMBER_NAME(FlxInputText_obj::ONLY_ALPHANUMERIC,"ONLY_ALPHANUMERIC");
	HX_VISIT_MEMBER_NAME(FlxInputText_obj::CUSTOM_FILTER,"CUSTOM_FILTER");
	HX_VISIT_MEMBER_NAME(FlxInputText_obj::ALL_CASES,"ALL_CASES");
	HX_VISIT_MEMBER_NAME(FlxInputText_obj::UPPER_CASE,"UPPER_CASE");
	HX_VISIT_MEMBER_NAME(FlxInputText_obj::LOWER_CASE,"LOWER_CASE");
	HX_VISIT_MEMBER_NAME(FlxInputText_obj::BACKSPACE_ACTION,"BACKSPACE_ACTION");
	HX_VISIT_MEMBER_NAME(FlxInputText_obj::DELETE_ACTION,"DELETE_ACTION");
	HX_VISIT_MEMBER_NAME(FlxInputText_obj::ENTER_ACTION,"ENTER_ACTION");
	HX_VISIT_MEMBER_NAME(FlxInputText_obj::INPUT_ACTION,"INPUT_ACTION");
};

#endif

hx::Class FlxInputText_obj::__mClass;

static ::String FlxInputText_obj_sStaticFields[] = {
	HX_HCSTRING("NO_FILTER","\x36","\x13","\x4e","\x92"),
	HX_HCSTRING("ONLY_ALPHA","\xeb","\x4c","\xe5","\xa7"),
	HX_HCSTRING("ONLY_NUMERIC","\x9a","\xa9","\x2d","\x5f"),
	HX_HCSTRING("ONLY_ALPHANUMERIC","\x22","\xad","\x7f","\xf5"),
	HX_HCSTRING("CUSTOM_FILTER","\xc6","\xf1","\x56","\xe9"),
	HX_HCSTRING("ALL_CASES","\xa5","\x06","\x9b","\x9d"),
	HX_HCSTRING("UPPER_CASE","\x0d","\xe2","\x06","\x82"),
	HX_HCSTRING("LOWER_CASE","\x0e","\x61","\xd8","\x7c"),
	HX_HCSTRING("BACKSPACE_ACTION","\x16","\x76","\x91","\xd1"),
	HX_HCSTRING("DELETE_ACTION","\x8a","\x38","\xe3","\x2e"),
	HX_HCSTRING("ENTER_ACTION","\x5d","\x63","\x46","\x79"),
	HX_HCSTRING("INPUT_ACTION","\xab","\xae","\x95","\x20"),
	::String(null())
};

void FlxInputText_obj::__register()
{
	hx::Object *dummy = new FlxInputText_obj;
	FlxInputText_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.ui.FlxInputText","\xd6","\xdd","\xcc","\xb8");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxInputText_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxInputText_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxInputText_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxInputText_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxInputText_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxInputText_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxInputText_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxInputText_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_31_boot)
HXDLIN(  31)		NO_FILTER = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_32_boot)
HXDLIN(  32)		ONLY_ALPHA = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_33_boot)
HXDLIN(  33)		ONLY_NUMERIC = (int)2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_34_boot)
HXDLIN(  34)		ONLY_ALPHANUMERIC = (int)3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_35_boot)
HXDLIN(  35)		CUSTOM_FILTER = (int)4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_37_boot)
HXDLIN(  37)		ALL_CASES = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_38_boot)
HXDLIN(  38)		UPPER_CASE = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_39_boot)
HXDLIN(  39)		LOWER_CASE = (int)2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_41_boot)
HXDLIN(  41)		BACKSPACE_ACTION = HX_("backspace",3f,85,ea,ca);
            	}
{
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_42_boot)
HXDLIN(  42)		DELETE_ACTION = HX_("delete",2b,c0,d8,6a);
            	}
{
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_43_boot)
HXDLIN(  43)		ENTER_ACTION = HX_("enter",18,6d,86,70);
            	}
{
            	HX_STACKFRAME(&_hx_pos_75fddae7e64ce41a_44_boot)
HXDLIN(  44)		INPUT_ACTION = HX_("input",0a,c4,1d,be);
            	}
}

} // end namespace flixel
} // end namespace addons
} // end namespace ui
