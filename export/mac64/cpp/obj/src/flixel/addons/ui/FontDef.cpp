// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_BorderDef
#include <flixel/addons/ui/BorderDef.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI
#include <flixel/addons/ui/FlxUI.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FontDef
#include <flixel/addons/ui/FontDef.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_U
#include <flixel/addons/ui/U.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl__legacy_AssetType
#include <openfl/_legacy/AssetType.h>
#endif
#ifndef INCLUDED_openfl__legacy_Assets
#include <openfl/_legacy/Assets.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_TextField
#include <openfl/_legacy/text/TextField.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_TextFormat
#include <openfl/_legacy/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6202c8c3d680a662_14_new,"flixel.addons.ui.FontDef","new",0x626f8177,"flixel.addons.ui.FontDef.new","flixel/addons/ui/FontDef.hx",14,0x96f2befa)
HX_LOCAL_STACK_FRAME(_hx_pos_6202c8c3d680a662_43_get_size,"flixel.addons.ui.FontDef","get_size",0x452657d3,"flixel.addons.ui.FontDef.get_size","flixel/addons/ui/FontDef.hx",43,0x96f2befa)
HX_LOCAL_STACK_FRAME(_hx_pos_6202c8c3d680a662_52_set_size,"flixel.addons.ui.FontDef","set_size",0xf383b147,"flixel.addons.ui.FontDef.set_size","flixel/addons/ui/FontDef.hx",52,0x96f2befa)
HX_LOCAL_STACK_FRAME(_hx_pos_6202c8c3d680a662_62_clone,"flixel.addons.ui.FontDef","clone",0x2d9e7834,"flixel.addons.ui.FontDef.clone","flixel/addons/ui/FontDef.hx",62,0x96f2befa)
HX_LOCAL_STACK_FRAME(_hx_pos_6202c8c3d680a662_104_applyTxt,"flixel.addons.ui.FontDef","applyTxt",0x9e13352b,"flixel.addons.ui.FontDef.applyTxt","flixel/addons/ui/FontDef.hx",104,0x96f2befa)
HX_LOCAL_STACK_FRAME(_hx_pos_6202c8c3d680a662_110_applyFlx,"flixel.addons.ui.FontDef","applyFlx",0x9e088b2d,"flixel.addons.ui.FontDef.applyFlx","flixel/addons/ui/FontDef.hx",110,0x96f2befa)
HX_LOCAL_STACK_FRAME(_hx_pos_6202c8c3d680a662_134_apply,"flixel.addons.ui.FontDef","apply",0x0976ea45,"flixel.addons.ui.FontDef.apply","flixel/addons/ui/FontDef.hx",134,0x96f2befa)
HX_LOCAL_STACK_FRAME(_hx_pos_6202c8c3d680a662_151_fromStr,"flixel.addons.ui.FontDef","fromStr",0x8e8201fe,"flixel.addons.ui.FontDef.fromStr","flixel/addons/ui/FontDef.hx",151,0x96f2befa)
HX_LOCAL_STACK_FRAME(_hx_pos_6202c8c3d680a662_214_stripFontExtensions,"flixel.addons.ui.FontDef","stripFontExtensions",0x4ace96d2,"flixel.addons.ui.FontDef.stripFontExtensions","flixel/addons/ui/FontDef.hx",214,0x96f2befa)
HX_LOCAL_STACK_FRAME(_hx_pos_6202c8c3d680a662_224_getFontExtension,"flixel.addons.ui.FontDef","getFontExtension",0x3c4339c3,"flixel.addons.ui.FontDef.getFontExtension","flixel/addons/ui/FontDef.hx",224,0x96f2befa)
HX_LOCAL_STACK_FRAME(_hx_pos_6202c8c3d680a662_235_fixFontName,"flixel.addons.ui.FontDef","fixFontName",0x0fe78ac6,"flixel.addons.ui.FontDef.fixFontName","flixel/addons/ui/FontDef.hx",235,0x96f2befa)
HX_LOCAL_STACK_FRAME(_hx_pos_6202c8c3d680a662_266_getFontStyle,"flixel.addons.ui.FontDef","getFontStyle",0x0566d975,"flixel.addons.ui.FontDef.getFontStyle","flixel/addons/ui/FontDef.hx",266,0x96f2befa)
HX_LOCAL_STACK_FRAME(_hx_pos_6202c8c3d680a662_282_setFontStyle,"flixel.addons.ui.FontDef","setFontStyle",0x1a5ffce9,"flixel.addons.ui.FontDef.setFontStyle","flixel/addons/ui/FontDef.hx",282,0x96f2befa)
HX_LOCAL_STACK_FRAME(_hx_pos_6202c8c3d680a662_333_toString,"flixel.addons.ui.FontDef","toString",0xb186cc35,"flixel.addons.ui.FontDef.toString","flixel/addons/ui/FontDef.hx",333,0x96f2befa)
HX_LOCAL_STACK_FRAME(_hx_pos_6202c8c3d680a662_74_copyFromTextField,"flixel.addons.ui.FontDef","copyFromTextField",0xa0f3d465,"flixel.addons.ui.FontDef.copyFromTextField","flixel/addons/ui/FontDef.hx",74,0x96f2befa)
HX_LOCAL_STACK_FRAME(_hx_pos_6202c8c3d680a662_93_copyFromFlxText,"flixel.addons.ui.FontDef","copyFromFlxText",0x2447f7d7,"flixel.addons.ui.FontDef.copyFromFlxText","flixel/addons/ui/FontDef.hx",93,0x96f2befa)
HX_LOCAL_STACK_FRAME(_hx_pos_6202c8c3d680a662_301_fromXML,"flixel.addons.ui.FontDef","fromXML",0x8e85ab24,"flixel.addons.ui.FontDef.fromXML","flixel/addons/ui/FontDef.hx",301,0x96f2befa)
HX_LOCAL_STACK_FRAME(_hx_pos_6202c8c3d680a662_23_boot,"flixel.addons.ui.FontDef","boot",0xb73ac73b,"flixel.addons.ui.FontDef.boot","flixel/addons/ui/FontDef.hx",23,0x96f2befa)
static const ::String _hx_array_data_9b2dfa05_26[] = {
	HX_(".ttf",78,3b,c0,1e),HX_(".otf",33,70,bc,1e),
};
namespace flixel{
namespace addons{
namespace ui{

void FontDef_obj::__construct(::String Name,::String __o_Extension,::String __o_File, ::openfl::_legacy::text::TextFormat Format, ::flixel::addons::ui::BorderDef Border){
::String Extension = __o_Extension.Default(HX_HCSTRING(".ttf","\x78","\x3b","\xc0","\x1e"));
::String File = __o_File.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_GC_STACKFRAME(&_hx_pos_6202c8c3d680a662_14_new)
HXLINE( 206)		this->_size = (int)0;
HXLINE(  27)		this->name = Name;
HXLINE(  28)		this->extension = Extension;
HXLINE(  29)		this->file = File;
HXLINE(  30)		this->format = Format;
HXLINE(  31)		if (hx::IsNull( this->format )) {
HXLINE(  33)			this->format =  ::openfl::_legacy::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
            		}
HXLINE(  35)		this->border = Border;
HXLINE(  36)		if (hx::IsNull( this->border )) {
HXLINE(  38)			this->border =  ::flixel::addons::ui::BorderDef_obj::__alloc( HX_CTX ,::flixel::text::FlxTextBorderStyle_obj::NONE_dyn(),(int)0,null(),null());
            		}
            	}

Dynamic FontDef_obj::__CreateEmpty() { return new FontDef_obj; }

void *FontDef_obj::_hx_vtable = 0;

Dynamic FontDef_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FontDef_obj > _hx_result = new FontDef_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool FontDef_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0c57cf53;
}

int FontDef_obj::get_size(){
            	HX_STACKFRAME(&_hx_pos_6202c8c3d680a662_43_get_size)
HXLINE(  44)		if (hx::IsNotNull( this->format )) {
HXLINE(  46)			this->_size = ::Std_obj::_hx_int(this->format->size);
            		}
HXLINE(  48)		return this->_size;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FontDef_obj,get_size,return )

int FontDef_obj::set_size(int i){
            	HX_STACKFRAME(&_hx_pos_6202c8c3d680a662_52_set_size)
HXLINE(  53)		if (hx::IsNotNull( this->format )) {
HXLINE(  55)			this->format->size = i;
            		}
HXLINE(  57)		this->_size = i;
HXLINE(  58)		return this->_size;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FontDef_obj,set_size,return )

 ::flixel::addons::ui::FontDef FontDef_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_6202c8c3d680a662_62_clone)
HXLINE(  63)		 ::flixel::addons::ui::BorderDef newBorder;
HXDLIN(  63)		if (hx::IsNull( this->border )) {
HXLINE(  63)			newBorder = null();
            		}
            		else {
HXLINE(  63)			newBorder = this->border->clone();
            		}
HXLINE(  64)		 ::openfl::_legacy::text::TextFormat newFormat;
HXDLIN(  64)		if (hx::IsNull( this->format )) {
HXLINE(  64)			newFormat = null();
            		}
            		else {
HXLINE(  64)			newFormat =  ::openfl::_legacy::text::TextFormat_obj::__alloc( HX_CTX ,this->format->font,this->format->size,this->format->color,this->format->bold,this->format->italic,this->format->underline,this->format->url,this->format->target,this->format->align,this->format->leftMargin,this->format->rightMargin,this->format->indent,this->format->leading);
            		}
HXLINE(  66)		if (hx::IsNotNull( this->format )) {
HXLINE(  67)			newFormat->letterSpacing = this->format->letterSpacing;
            		}
HXLINE(  69)		 ::flixel::addons::ui::FontDef newThis =  ::flixel::addons::ui::FontDef_obj::__alloc( HX_CTX ,this->name,this->extension,this->file,newFormat,newBorder);
HXLINE(  70)		newThis->set_size(this->get_size());
HXLINE(  71)		return newThis;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FontDef_obj,clone,return )

 ::openfl::_legacy::text::TextField FontDef_obj::applyTxt( ::openfl::_legacy::text::TextField textField){
            	HX_STACKFRAME(&_hx_pos_6202c8c3d680a662_104_applyTxt)
HXLINE( 105)		textField->setTextFormat(this->format,null(),null());
HXLINE( 106)		return textField;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FontDef_obj,applyTxt,return )

 ::flixel::text::FlxText FontDef_obj::applyFlx( ::flixel::text::FlxText flxText){
            	HX_STACKFRAME(&_hx_pos_6202c8c3d680a662_110_applyFlx)
HXLINE( 111)		::String flxTxtAlign = null();
HXLINE( 113)		if (hx::IsNotNull( this->format->align )) {
HXLINE( 115)			::String _g = this->format->align;
HXDLIN( 115)			::String _hx_switch_0 = _g;
            			if (  (_hx_switch_0==HX_("center",d5,25,db,05)) ){
HXLINE( 117)				flxTxtAlign = HX_("center",d5,25,db,05);
HXDLIN( 117)				goto _hx_goto_5;
            			}
            			if (  (_hx_switch_0==HX_("justify",50,df,b5,83)) ){
HXLINE( 120)				flxTxtAlign = HX_("justify",50,df,b5,83);
HXDLIN( 120)				goto _hx_goto_5;
            			}
            			if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE( 118)				flxTxtAlign = HX_("left",07,08,b0,47);
HXDLIN( 118)				goto _hx_goto_5;
            			}
            			if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE( 119)				flxTxtAlign = HX_("right",dc,0b,64,e9);
HXDLIN( 119)				goto _hx_goto_5;
            			}
            			/* default */{
HXLINE( 121)				flxTxtAlign = HX_("left",07,08,b0,47);
            			}
            			_hx_goto_5:;
            		}
HXLINE( 125)		::String font;
HXDLIN( 125)		bool font1;
HXDLIN( 125)		if ((this->file != HX_("",00,00,00,00))) {
HXLINE( 125)			font1 = hx::IsNull( this->file );
            		}
            		else {
HXLINE( 125)			font1 = true;
            		}
HXDLIN( 125)		if (font1) {
HXLINE( 125)			font = null();
            		}
            		else {
HXLINE( 125)			font = this->file;
            		}
HXLINE( 127)		int _hx_tmp = ::Std_obj::_hx_int(this->format->size);
HXDLIN( 127)		flxText->setFormat(font,_hx_tmp,this->format->color,flxTxtAlign,this->border->style,this->border->color,null());
HXLINE( 128)		flxText->textField->get_defaultTextFormat()->leading = this->format->leading;
HXLINE( 129)		flxText->textField->get_defaultTextFormat()->letterSpacing = this->format->letterSpacing;
HXLINE( 130)		return flxText;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FontDef_obj,applyFlx,return )

void FontDef_obj::apply( ::openfl::_legacy::text::TextField textField, ::flixel::text::FlxText flxText){
            	HX_STACKFRAME(&_hx_pos_6202c8c3d680a662_134_apply)
HXLINE( 135)		if (hx::IsNotNull( textField )) {
HXLINE( 137)			textField->setTextFormat(this->format,null(),null());
            		}
HXLINE( 139)		if (hx::IsNotNull( flxText )) {
HXLINE( 141)			this->applyFlx(flxText);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FontDef_obj,apply,(void))

void FontDef_obj::fromStr(::String str,hx::Null< int >  __o_recursion){
int recursion = __o_recursion.Default(0);
            	HX_STACKFRAME(&_hx_pos_6202c8c3d680a662_151_fromStr)
HXLINE( 152)		if ((recursion > (int)3)) {
HXLINE( 153)			return;
            		}
HXLINE( 160)		::String style = this->getFontStyle(str);
HXLINE( 161)		this->setFontStyle(style);
HXLINE( 163)		::String extension = HX_("",00,00,00,00);
HXLINE( 165)		{
HXLINE( 165)			int _g = (int)0;
HXDLIN( 165)			::Array< ::String > _g1 = ::flixel::addons::ui::FontDef_obj::EXTENSIONS;
HXDLIN( 165)			while((_g < _g1->length)){
HXLINE( 165)				::String ext = _g1->__get(_g);
HXDLIN( 165)				_g = (_g + (int)1);
HXLINE( 166)				if ((str.indexOf(ext,null()) != (int)-1)) {
HXLINE( 167)					if (::openfl::_legacy::Assets_obj::exists((str + extension),::openfl::_legacy::AssetType_obj::FONT_dyn())) {
HXLINE( 168)						this->name = ::StringTools_obj::replace(str,extension,HX_("",00,00,00,00));
HXLINE( 169)						this->file = str;
HXLINE( 170)						extension = ext;
HXLINE( 171)						goto _hx_goto_8;
            					}
            				}
            			}
            			_hx_goto_8:;
            		}
HXLINE( 177)		if ((extension == HX_("",00,00,00,00))) {
HXLINE( 178)			int _g2 = (int)0;
HXDLIN( 178)			::Array< ::String > _g11 = ::flixel::addons::ui::FontDef_obj::EXTENSIONS;
HXDLIN( 178)			while((_g2 < _g11->length)){
HXLINE( 178)				::String ext1 = _g11->__get(_g2);
HXDLIN( 178)				_g2 = (_g2 + (int)1);
HXLINE( 179)				if (::openfl::_legacy::Assets_obj::exists((str + ext1),::openfl::_legacy::AssetType_obj::FONT_dyn())) {
HXLINE( 180)					extension = ext1;
HXLINE( 181)					this->name = str;
HXLINE( 182)					this->file = (str + extension);
HXLINE( 183)					extension = ext1;
HXLINE( 184)					goto _hx_goto_9;
            				}
            			}
            			_hx_goto_9:;
            		}
            		else {
HXLINE( 190)			str = this->stripFontExtensions(str);
HXLINE( 191)			::String fontStyle = this->getFontStyle(str);
HXLINE( 192)			if ((fontStyle != HX_("",00,00,00,00))) {
HXLINE( 193)				str = str.substr((str.length - (int)1),(int)1);
HXLINE( 194)				this->fromStr(str,(recursion + (int)1));
HXLINE( 195)				return;
            			}
            			else {
HXLINE( 198)				this->fromStr(str,(recursion + (int)1));
HXLINE( 199)				return;
            			}
            		}
HXLINE( 203)		this->setFontStyle(style);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FontDef_obj,fromStr,(void))

::String FontDef_obj::stripFontExtensions(::String str){
            	HX_STACKFRAME(&_hx_pos_6202c8c3d680a662_214_stripFontExtensions)
HXLINE( 215)		if (hx::IsNull( str )) {
HXLINE( 215)			return str;
            		}
HXLINE( 216)		{
HXLINE( 216)			int _g = (int)0;
HXDLIN( 216)			::Array< ::String > _g1 = ::flixel::addons::ui::FontDef_obj::EXTENSIONS;
HXDLIN( 216)			while((_g < _g1->length)){
HXLINE( 216)				::String ext = _g1->__get(_g);
HXDLIN( 216)				_g = (_g + (int)1);
HXLINE( 217)				bool _hx_tmp;
HXDLIN( 217)				if (hx::IsNotNull( str )) {
HXLINE( 217)					_hx_tmp = (str.indexOf(ext,null()) != (int)-1);
            				}
            				else {
HXLINE( 217)					_hx_tmp = false;
            				}
HXDLIN( 217)				if (_hx_tmp) {
HXLINE( 218)					str = ::StringTools_obj::replace(str,ext,HX_("",00,00,00,00));
            				}
            			}
            		}
HXLINE( 221)		return str;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FontDef_obj,stripFontExtensions,return )

::String FontDef_obj::getFontExtension(::String str){
            	HX_STACKFRAME(&_hx_pos_6202c8c3d680a662_224_getFontExtension)
HXLINE( 225)		if (hx::IsNull( str )) {
HXLINE( 225)			return HX_("",00,00,00,00);
            		}
HXLINE( 226)		{
HXLINE( 226)			int _g = (int)0;
HXDLIN( 226)			::Array< ::String > _g1 = ::flixel::addons::ui::FontDef_obj::EXTENSIONS;
HXDLIN( 226)			while((_g < _g1->length)){
HXLINE( 226)				::String ext = _g1->__get(_g);
HXDLIN( 226)				_g = (_g + (int)1);
HXLINE( 227)				if ((str.indexOf(ext,null()) != (int)-1)) {
HXLINE( 228)					return ext;
            				}
            			}
            		}
HXLINE( 231)		return str;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FontDef_obj,getFontExtension,return )

void FontDef_obj::fixFontName(){
            	HX_STACKFRAME(&_hx_pos_6202c8c3d680a662_235_fixFontName)
HXLINE( 236)		::String fontStyle = this->getFontStyle(this->file);
HXLINE( 237)		::String extension = this->getFontExtension(this->file);
HXLINE( 238)		::String fontbase = this->stripFontExtensions(this->file);
HXLINE( 239)		if ((fontStyle != HX_("",00,00,00,00))) {
HXLINE( 241)			fontbase = fontbase.substr((int)0,(fontbase.length - (int)1));
            		}
HXLINE( 243)		::String styleStr = HX_("",00,00,00,00);
HXLINE( 244)		bool _hx_tmp;
HXDLIN( 244)		if (this->format->bold) {
HXLINE( 244)			_hx_tmp = this->format->italic;
            		}
            		else {
HXLINE( 244)			_hx_tmp = false;
            		}
HXDLIN( 244)		if (_hx_tmp) {
HXLINE( 246)			styleStr = HX_("z",7a,00,00,00);
            		}
            		else {
HXLINE( 248)			if (this->format->bold) {
HXLINE( 250)				styleStr = HX_("b",62,00,00,00);
            			}
            			else {
HXLINE( 252)				if (this->format->italic) {
HXLINE( 254)					styleStr = HX_("i",69,00,00,00);
            				}
            			}
            		}
HXLINE( 257)		this->file = ((fontbase + styleStr) + extension);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FontDef_obj,fixFontName,(void))

::String FontDef_obj::getFontStyle(::String str){
            	HX_STACKFRAME(&_hx_pos_6202c8c3d680a662_266_getFontStyle)
HXLINE( 267)		if (hx::IsNull( str )) {
HXLINE( 267)			return HX_("",00,00,00,00);
            		}
HXLINE( 268)		str = this->stripFontExtensions(str);
HXLINE( 269)		::String lastChar = str.substr((str.length - (int)1),(int)1);
HXLINE( 270)		bool _hx_tmp;
HXDLIN( 270)		if ((lastChar != HX_("",00,00,00,00))) {
HXLINE( 270)			_hx_tmp = hx::IsNotNull( lastChar );
            		}
            		else {
HXLINE( 270)			_hx_tmp = false;
            		}
HXDLIN( 270)		if (_hx_tmp) {
HXLINE( 271)			lastChar = lastChar.toLowerCase();
HXLINE( 272)			::String _hx_switch_0 = lastChar;
            			if (  (_hx_switch_0==HX_("b",62,00,00,00)) ){
HXLINE( 273)				return HX_("b",62,00,00,00);
HXDLIN( 273)				goto _hx_goto_16;
            			}
            			if (  (_hx_switch_0==HX_("i",69,00,00,00)) ){
HXLINE( 274)				return HX_("i",69,00,00,00);
HXDLIN( 274)				goto _hx_goto_16;
            			}
            			if (  (_hx_switch_0==HX_("z",7a,00,00,00)) ){
HXLINE( 275)				return HX_("z",7a,00,00,00);
HXDLIN( 275)				goto _hx_goto_16;
            			}
            			/* default */{
HXLINE( 276)				return HX_("",00,00,00,00);
            			}
            			_hx_goto_16:;
            		}
HXLINE( 279)		return HX_("",00,00,00,00);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FontDef_obj,getFontStyle,return )

void FontDef_obj::setFontStyle(::String str){
            	HX_STACKFRAME(&_hx_pos_6202c8c3d680a662_282_setFontStyle)
HXLINE( 283)		str = str.toLowerCase();
HXLINE( 284)		::String _hx_switch_0 = str;
            		if (  (_hx_switch_0==HX_("b",62,00,00,00)) ||  (_hx_switch_0==HX_("bold",85,81,1b,41)) ){
HXLINE( 286)			this->format->bold = true;
HXLINE( 287)			this->format->italic = false;
HXLINE( 285)			goto _hx_goto_18;
            		}
            		if (  (_hx_switch_0==HX_("all",21,f9,49,00)) ||  (_hx_switch_0==HX_("bi",c7,55,00,00)) ||  (_hx_switch_0==HX_("bold-italic",f8,f7,a5,60)) ||  (_hx_switch_0==HX_("bolditalic",35,22,3d,79)) ||  (_hx_switch_0==HX_("both",81,88,1b,41)) ||  (_hx_switch_0==HX_("ib",d9,5b,00,00)) ||  (_hx_switch_0==HX_("italicbold",75,e8,59,e8)) ||  (_hx_switch_0==HX_("z",7a,00,00,00)) ){
HXLINE( 292)			this->format->bold = true;
HXLINE( 293)			this->format->italic = true;
HXLINE( 291)			goto _hx_goto_18;
            		}
            		if (  (_hx_switch_0==HX_("i",69,00,00,00)) ||  (_hx_switch_0==HX_("italic",f0,2e,64,06)) ){
HXLINE( 289)			this->format->bold = false;
HXLINE( 290)			this->format->italic = true;
HXLINE( 288)			goto _hx_goto_18;
            		}
            		/* default */{
HXLINE( 295)			this->format->bold = false;
HXLINE( 296)			this->format->italic = false;
            		}
            		_hx_goto_18:;
HXLINE( 298)		this->fixFontName();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FontDef_obj,setFontStyle,(void))

::String FontDef_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_6202c8c3d680a662_333_toString)
HXDLIN( 333)		::String _hx_tmp = ((HX_("{name:",34,f1,69,c4) + this->name) + HX_(",size:",ad,e8,8c,14));
HXDLIN( 333)		::String _hx_tmp1 = ((_hx_tmp + this->get_size()) + HX_(",file:",92,be,4c,98));
HXDLIN( 333)		::String _hx_tmp2 = ((((_hx_tmp1 + this->file) + HX_(",extension:",07,eb,aa,af)) + this->extension) + HX_(",format:",77,5e,da,b3));
HXDLIN( 333)		::String _hx_tmp3 = ((_hx_tmp2 + ::Std_obj::string(this->format)) + HX_(",border:",22,9f,94,07));
HXDLIN( 333)		return ((_hx_tmp3 + ::Std_obj::string(this->border)) + HX_("}",7d,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FontDef_obj,toString,return )

::Array< ::String > FontDef_obj::EXTENSIONS;

 ::flixel::addons::ui::FontDef FontDef_obj::copyFromTextField( ::openfl::_legacy::text::TextField t){
            	HX_GC_STACKFRAME(&_hx_pos_6202c8c3d680a662_74_copyFromTextField)
HXLINE(  75)		 ::openfl::_legacy::text::TextFormat dtf = t->get_defaultTextFormat();
HXLINE(  76)		 ::flixel::addons::ui::FontDef fd =  ::flixel::addons::ui::FontDef_obj::__alloc( HX_CTX ,HX_("",00,00,00,00),null(),null(),null(),null());
HXLINE(  77)		fd->fromStr(dtf->font,null());
HXLINE(  78)		fd->format->font = dtf->font;
HXLINE(  79)		fd->format->size = dtf->size;
HXLINE(  80)		fd->format->color = dtf->color;
HXLINE(  81)		fd->format->bold = dtf->bold;
HXLINE(  82)		fd->format->italic = dtf->italic;
HXLINE(  83)		fd->format->underline = dtf->underline;
HXLINE(  84)		fd->format->url = dtf->url;
HXLINE(  85)		fd->format->letterSpacing = dtf->letterSpacing;
HXLINE(  86)		fd->format->leading = dtf->leading;
HXLINE(  87)		fd->format->target = dtf->target;
HXLINE(  88)		fd->format->align = dtf->align;
HXLINE(  89)		return fd;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FontDef_obj,copyFromTextField,return )

 ::flixel::addons::ui::FontDef FontDef_obj::copyFromFlxText( ::flixel::text::FlxText t){
            	HX_STACKFRAME(&_hx_pos_6202c8c3d680a662_93_copyFromFlxText)
HXLINE(  94)		 ::flixel::addons::ui::FontDef fd = ::flixel::addons::ui::FontDef_obj::copyFromTextField(t->textField);
HXLINE(  95)		fd->fromStr(t->_font,null());
HXLINE(  96)		fd->border->style = t->borderStyle;
HXLINE(  97)		fd->border->color = t->borderColor;
HXLINE(  98)		fd->border->quality = t->borderQuality;
HXLINE(  99)		fd->border->size = t->borderSize;
HXLINE( 100)		return fd;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FontDef_obj,copyFromFlxText,return )

 ::flixel::addons::ui::FontDef FontDef_obj::fromXML( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_6202c8c3d680a662_301_fromXML)
HXLINE( 302)		::String fontFace = ::flixel::addons::ui::U_obj::xml_str(data,HX_("font",cf,5d,c0,43),null(),null());
HXLINE( 303)		::String fontStyle = ::flixel::addons::ui::U_obj::xml_str(data,HX_("style",31,a5,1d,84),null(),null());
HXLINE( 304)		::String fontFile = null();
HXLINE( 305)		if ((fontFace != HX_("",00,00,00,00))) {
HXLINE( 307)			fontFile = ::flixel::addons::ui::FlxUI_obj::font(fontFace,fontStyle,null());
            		}
HXLINE( 309)		::String fontStyle1 = ::flixel::addons::ui::U_obj::xml_str(data,HX_("style",31,a5,1d,84),null(),null());
HXLINE( 310)		int fontSize = ::flixel::addons::ui::FlxUI_obj::fontSize(fontFile,::flixel::addons::ui::U_obj::xml_i(data,HX_("size",c1,a0,53,4c),(int)8));
HXLINE( 311)		int fontColor = ::flixel::addons::ui::U_obj::xml_color(data,HX_("color",63,71,5c,4a),true,(int)-1);
HXLINE( 312)		::String fontAlign = ::flixel::addons::ui::U_obj::xml_str(data,HX_("align",c5,56,91,21),null(),null());
HXLINE( 313)		::String align;
HXDLIN( 313)		::String _g = fontAlign.toLowerCase();
HXDLIN( 313)		::String _hx_switch_0 = _g;
            		if (  (_hx_switch_0==HX_("center",d5,25,db,05)) ){
HXLINE( 313)			align = HX_("center",d5,25,db,05);
HXDLIN( 313)			goto _hx_goto_23;
            		}
            		if (  (_hx_switch_0==HX_("justify",50,df,b5,83)) ){
HXLINE( 313)			align = HX_("justify",50,df,b5,83);
HXDLIN( 313)			goto _hx_goto_23;
            		}
            		if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE( 313)			align = HX_("left",07,08,b0,47);
HXDLIN( 313)			goto _hx_goto_23;
            		}
            		if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE( 313)			align = HX_("right",dc,0b,64,e9);
HXDLIN( 313)			goto _hx_goto_23;
            		}
            		/* default */{
HXLINE( 313)			align = HX_("left",07,08,b0,47);
            		}
            		_hx_goto_23:;
HXLINE( 321)		 ::flixel::addons::ui::FontDef fd =  ::flixel::addons::ui::FontDef_obj::__alloc( HX_CTX ,::flixel::addons::ui::U_obj::xml_str(data,HX_("font",cf,5d,c0,43),null(),null()),HX_(".ttf",78,3b,c0,1e),fontFile,null(),null());
HXLINE( 322)		fd->format->color = fontColor;
HXLINE( 323)		fd->format->size = fontSize;
HXLINE( 324)		fd->format->align = align;
HXLINE( 325)		fd->set_size(fontSize);
HXLINE( 326)		fd->setFontStyle(fontStyle1);
HXLINE( 327)		fd->border = ::flixel::addons::ui::BorderDef_obj::fromXML(data);
HXLINE( 328)		return fd;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FontDef_obj,fromXML,return )


hx::ObjectPtr< FontDef_obj > FontDef_obj::__new(::String Name,::String __o_Extension,::String __o_File, ::openfl::_legacy::text::TextFormat Format, ::flixel::addons::ui::BorderDef Border) {
	hx::ObjectPtr< FontDef_obj > __this = new FontDef_obj();
	__this->__construct(Name,__o_Extension,__o_File,Format,Border);
	return __this;
}

hx::ObjectPtr< FontDef_obj > FontDef_obj::__alloc(hx::Ctx *_hx_ctx,::String Name,::String __o_Extension,::String __o_File, ::openfl::_legacy::text::TextFormat Format, ::flixel::addons::ui::BorderDef Border) {
	FontDef_obj *__this = (FontDef_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FontDef_obj), true, "flixel.addons.ui.FontDef"));
	*(void **)__this = FontDef_obj::_hx_vtable;
	__this->__construct(Name,__o_Extension,__o_File,Format,Border);
	return __this;
}

FontDef_obj::FontDef_obj()
{
}

void FontDef_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FontDef);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(extension,"extension");
	HX_MARK_MEMBER_NAME(file,"file");
	HX_MARK_MEMBER_NAME(format,"format");
	HX_MARK_MEMBER_NAME(border,"border");
	HX_MARK_MEMBER_NAME(_size,"_size");
	HX_MARK_END_CLASS();
}

void FontDef_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(extension,"extension");
	HX_VISIT_MEMBER_NAME(file,"file");
	HX_VISIT_MEMBER_NAME(format,"format");
	HX_VISIT_MEMBER_NAME(border,"border");
	HX_VISIT_MEMBER_NAME(_size,"_size");
}

hx::Val FontDef_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_size() ); }
		if (HX_FIELD_EQ(inName,"file") ) { return hx::Val( file ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"apply") ) { return hx::Val( apply_dyn() ); }
		if (HX_FIELD_EQ(inName,"_size") ) { return hx::Val( _size ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"format") ) { return hx::Val( format ); }
		if (HX_FIELD_EQ(inName,"border") ) { return hx::Val( border ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fromStr") ) { return hx::Val( fromStr_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_size") ) { return hx::Val( get_size_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_size") ) { return hx::Val( set_size_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyTxt") ) { return hx::Val( applyTxt_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyFlx") ) { return hx::Val( applyFlx_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"extension") ) { return hx::Val( extension ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fixFontName") ) { return hx::Val( fixFontName_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getFontStyle") ) { return hx::Val( getFontStyle_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFontStyle") ) { return hx::Val( setFontStyle_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getFontExtension") ) { return hx::Val( getFontExtension_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"stripFontExtensions") ) { return hx::Val( stripFontExtensions_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FontDef_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"fromXML") ) { outValue = fromXML_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"EXTENSIONS") ) { outValue = ( EXTENSIONS ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"copyFromFlxText") ) { outValue = copyFromFlxText_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"copyFromTextField") ) { outValue = copyFromTextField_dyn(); return true; }
	}
	return false;
}

hx::Val FontDef_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_size(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"file") ) { file=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_size") ) { _size=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"format") ) { format=inValue.Cast<  ::openfl::_legacy::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"border") ) { border=inValue.Cast<  ::flixel::addons::ui::BorderDef >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"extension") ) { extension=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FontDef_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"EXTENSIONS") ) { EXTENSIONS=ioValue.Cast< ::Array< ::String > >(); return true; }
	}
	return false;
}

void FontDef_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"));
	outFields->push(HX_HCSTRING("extension","\x7f","\x93","\x10","\xe5"));
	outFields->push(HX_HCSTRING("file","\x7c","\xce","\xbb","\x43"));
	outFields->push(HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd"));
	outFields->push(HX_HCSTRING("border","\xec","\x4c","\x1a","\x64"));
	outFields->push(HX_HCSTRING("_size","\xa0","\xbc","\x64","\xff"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FontDef_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(FontDef_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsString,(int)offsetof(FontDef_obj,extension),HX_HCSTRING("extension","\x7f","\x93","\x10","\xe5")},
	{hx::fsString,(int)offsetof(FontDef_obj,file),HX_HCSTRING("file","\x7c","\xce","\xbb","\x43")},
	{hx::fsObject /*::openfl::_legacy::text::TextFormat*/ ,(int)offsetof(FontDef_obj,format),HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd")},
	{hx::fsObject /*::flixel::addons::ui::BorderDef*/ ,(int)offsetof(FontDef_obj,border),HX_HCSTRING("border","\xec","\x4c","\x1a","\x64")},
	{hx::fsInt,(int)offsetof(FontDef_obj,_size),HX_HCSTRING("_size","\xa0","\xbc","\x64","\xff")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FontDef_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::String >*/ ,(void *) &FontDef_obj::EXTENSIONS,HX_HCSTRING("EXTENSIONS","\x14","\xf0","\x79","\x7b")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FontDef_obj_sMemberFields[] = {
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("extension","\x7f","\x93","\x10","\xe5"),
	HX_HCSTRING("file","\x7c","\xce","\xbb","\x43"),
	HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd"),
	HX_HCSTRING("border","\xec","\x4c","\x1a","\x64"),
	HX_HCSTRING("get_size","\x4a","\x5c","\x0e","\xcc"),
	HX_HCSTRING("set_size","\xbe","\xb5","\x6b","\x7a"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("applyTxt","\xa2","\x39","\xfb","\x24"),
	HX_HCSTRING("applyFlx","\xa4","\x8f","\xf0","\x24"),
	HX_HCSTRING("apply","\x6e","\x85","\x3b","\x24"),
	HX_HCSTRING("fromStr","\x67","\x79","\x02","\x58"),
	HX_HCSTRING("_size","\xa0","\xbc","\x64","\xff"),
	HX_HCSTRING("stripFontExtensions","\xbb","\x07","\x99","\x6a"),
	HX_HCSTRING("getFontExtension","\x3a","\x0d","\x07","\xbf"),
	HX_HCSTRING("fixFontName","\xaf","\x6a","\x82","\xbd"),
	HX_HCSTRING("getFontStyle","\x6c","\xe5","\x4f","\x3f"),
	HX_HCSTRING("setFontStyle","\xe0","\x08","\x49","\x54"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void FontDef_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FontDef_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FontDef_obj::EXTENSIONS,"EXTENSIONS");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FontDef_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FontDef_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FontDef_obj::EXTENSIONS,"EXTENSIONS");
};

#endif

hx::Class FontDef_obj::__mClass;

static ::String FontDef_obj_sStaticFields[] = {
	HX_HCSTRING("EXTENSIONS","\x14","\xf0","\x79","\x7b"),
	HX_HCSTRING("copyFromTextField","\x0e","\x09","\x89","\x89"),
	HX_HCSTRING("copyFromFlxText","\x40","\x80","\x9b","\x2a"),
	HX_HCSTRING("fromXML","\x8d","\x22","\x06","\x58"),
	::String(null())
};

void FontDef_obj::__register()
{
	hx::Object *dummy = new FontDef_obj;
	FontDef_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.ui.FontDef","\x05","\xfa","\x2d","\x9b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FontDef_obj::__GetStatic;
	__mClass->mSetStaticField = &FontDef_obj::__SetStatic;
	__mClass->mMarkFunc = FontDef_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FontDef_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FontDef_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FontDef_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FontDef_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FontDef_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FontDef_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FontDef_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_6202c8c3d680a662_23_boot)
HXDLIN(  23)		EXTENSIONS = ::Array_obj< ::String >::fromData( _hx_array_data_9b2dfa05_26,2);
            	}
}

} // end namespace flixel
} // end namespace addons
} // end namespace ui
