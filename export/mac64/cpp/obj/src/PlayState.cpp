// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Block
#include <Block.h>
#endif
#ifndef INCLUDED_Button
#include <Button.h>
#endif
#ifndef INCLUDED_EndingState
#include <EndingState.h>
#endif
#ifndef INCLUDED_Enemy
#include <Enemy.h>
#endif
#ifndef INCLUDED_Goal
#include <Goal.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_TiledLevel
#include <TiledLevel.h>
#endif
#ifndef INCLUDED_TitleState
#include <TitleState.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_Water
#include <Water.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledMap
#include <flixel/addons/editors/tiled/TiledMap.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroupIterator
#include <flixel/group/FlxTypedGroupIterator.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemap
#include <flixel/tile/FlxTilemap.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_16_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",16,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_59_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",59,0xb30d7781)
static const int _hx_array_data_46c2835d_2[] = {
	(int)0,(int)1,(int)2,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_138_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",138,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_207_overlapped,"PlayState","overlapped",0x8fe53519,"PlayState.overlapped","PlayState.hx",207,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_268_killPlayer,"PlayState","killPlayer",0x88e03f10,"PlayState.killPlayer","PlayState.hx",268,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_292_increaseWater,"PlayState","increaseWater",0x54cf3424,"PlayState.increaseWater","PlayState.hx",292,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_298_positionHUD,"PlayState","positionHUD",0x08a3a8fd,"PlayState.positionHUD","PlayState.hx",298,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_313_animateWater,"PlayState","animateWater",0x51d9f967,"PlayState.animateWater","PlayState.hx",313,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_336_goToTitle,"PlayState","goToTitle",0x92640884,"PlayState.goToTitle","PlayState.hx",336,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_340_goToEnding,"PlayState","goToEnding",0x5c343f7b,"PlayState.goToEnding","PlayState.hx",340,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_345_goToLevel,"PlayState","goToLevel",0xf48c0870,"PlayState.goToLevel","PlayState.hx",345,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_360_delay,"PlayState","delay",0x96e457b2,"PlayState.delay","PlayState.hx",360,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_355_delay,"PlayState","delay",0x96e457b2,"PlayState.delay","PlayState.hx",355,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_365_moveBlock,"PlayState","moveBlock",0xaf16082b,"PlayState.moveBlock","PlayState.hx",365,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_20_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",20,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_21_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",21,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_41_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",41,0xb30d7781)

void PlayState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_16_new)
HXLINE(  28)		this->rainAnimationCoolDown = (int)0;
HXLINE(  27)		this->canThrowWater = false;
HXLINE(  26)		this->levelFinished = false;
HXLINE(  25)		this->isDead = false;
HXLINE(  24)		this->isRunning = false;
HXLINE(  16)		super::__construct(TransIn,TransOut);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3634c52c) {
		if (inClassId<=(int)0x25a685e0) {
			if (inClassId<=(int)0x2335d9a7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x2335d9a7;
			} else {
				return inClassId==(int)0x25a685e0;
			}
		} else {
			return inClassId==(int)0x3634c52c;
		}
	} else {
		if (inClassId<=(int)0x55c33fb8) {
			return inClassId==(int)0x46c2835d || inClassId==(int)0x55c33fb8;
		} else {
			return inClassId==(int)0x743878ee;
		}
	}
}

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_59_create)
HXLINE(  60)		this->super::create();
HXLINE(  61)		this->set_bgColor((int)-8355712);
HXLINE(  65)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  65)		_hx_tmp((HX_("Loading level: ",66,a7,b0,62) + ::PlayState_obj::levelToLoad),hx::SourceInfo(HX_("PlayState.hx",81,77,0d,b3),65,HX_("PlayState",5d,83,c2,46),HX_("create",fc,66,0f,7c)));
HXLINE(  66)		this->level =  ::TiledLevel_obj::__alloc( HX_CTX ,((HX_("assets/data/maps/",5f,16,70,26) + ::PlayState_obj::levelToLoad) + HX_(".tmx",71,35,c0,1e)),hx::ObjectPtr<OBJ_>(this));
HXLINE(  68)		this->goals =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  69)		this->enemies =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  70)		this->waters =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  71)		this->buttons =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  72)		this->blocks =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  74)		this->add(this->level->bgLayer);
HXLINE(  75)		this->add(this->level->platformTiles);
HXLINE(  76)		this->level->loadObjects(hx::ObjectPtr<OBJ_>(this));
HXLINE(  77)		this->add(this->level->objectsLayer);
HXLINE(  78)		this->add(this->waters);
HXLINE(  80)		this->add(this->player);
HXLINE(  83)		this->splash =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  84)		this->splash->set_x(this->player->x);
HXLINE(  85)		 ::flixel::FlxSprite _hx_tmp1 = this->splash;
HXDLIN(  85)		_hx_tmp1->set_y((this->player->y - (int)8));
HXLINE(  86)		this->splash->loadGraphic(HX_("assets/images/splash.png",8d,99,4b,b9),true,(int)32,(int)8,null(),null());
HXLINE(  87)		this->splash->animation->add(HX_("idle",14,a7,b3,45),::Array_obj< int >::fromData( _hx_array_data_46c2835d_2,3),(int)8,true,null(),null());
HXLINE(  88)		this->splash->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(  89)		this->splash->set_visible(false);
HXLINE(  90)		this->add(this->splash);
HXLINE(  93)		this->add(this->level->fgLayer);
HXLINE(  94)		this->add(this->level->rainLayer);
HXLINE(  99)		this->lifeIcon =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 100)		this->lifeIcon->loadGraphic(HX_("assets/images/icon.png",df,2f,17,1f),true,(int)16,(int)16,null(),null());
HXLINE( 101)		this->lifeIcon->set_x((int)2);
HXLINE( 102)		this->lifeIcon->set_y((int)5);
HXLINE( 103)		this->add(this->lifeIcon);
HXLINE( 105)		this->livesText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)10,(int)5,(int)70,(HX_(" X ",e8,94,18,00) + ::PlayState_obj::lives),(int)8,null());
HXLINE( 106)		this->livesText->set_color((int)-16777216);
HXLINE( 107)		this->add(this->livesText);
HXLINE( 109)		this->waterText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)90,(int)20,(int)70,HX_("Water: 0",33,ab,2b,06),(int)8,null());
HXLINE( 110)		this->waterText->set_visible(false);
HXLINE( 111)		this->add(this->waterText);
HXLINE( 113)		this->gameOverText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)200,(int)20,(int)200,HX_("GAME OVER",42,a0,a3,c0),(int)12,null());
HXLINE( 114)		this->gameOverText->set_visible(false);
HXLINE( 115)		this->gameOverText->set_color((int)-16777216);
HXLINE( 116)		this->add(this->gameOverText);
HXLINE( 118)		this->positionHUD();
HXLINE( 122)		if (hx::IsNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 124)			::flixel::FlxG_obj::sound->playMusic(HX_("assets/music/stage.wav",86,51,a2,a6),(int)1,true,null());
            		}
HXLINE( 128)		this->sndDie = ::flixel::FlxG_obj::sound->load(HX_("assets/sounds/hurt.wav",6c,32,7c,8f),null(),null(),null(),null(),null(),null(),null());
HXLINE( 129)		this->sndWaterFill = ::flixel::FlxG_obj::sound->load(HX_("assets/sounds/water_fill.wav",88,b4,6f,c7),null(),null(),null(),null(),null(),null(),null());
HXLINE( 130)		this->sndButtonClick = ::flixel::FlxG_obj::sound->load(HX_("assets/sounds/buttonPressed.wav",8f,67,3a,e8),null(),null(),null(),null(),null(),null(),null());
HXLINE( 131)		this->sndBlockMove = ::flixel::FlxG_obj::sound->load(HX_("assets/sounds/block_move.wav",20,74,9f,c3),null(),null(),null(),null(),null(),null(),null());
HXLINE( 132)		this->sndFireOut = ::flixel::FlxG_obj::sound->load(HX_("assets/sounds/fire_out.wav",22,71,c7,e8),null(),null(),null(),null(),null(),null(),null());
HXLINE( 134)		this->isRunning = true;
            	}


void PlayState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_138_update)
HXLINE( 139)		this->super::update(elapsed);
HXLINE( 141)		if (!(this->isRunning)) {
HXLINE( 142)			return;
            		}
HXLINE( 145)		this->animateWater();
HXLINE( 148)		if (hx::IsNotNull( this->player )) {
HXLINE( 151)			 ::flixel::FlxSprite _hx_tmp = this->splash;
HXDLIN( 151)			_hx_tmp->set_x((this->player->x - (int)6));
HXLINE( 152)			 ::flixel::FlxSprite _hx_tmp1 = this->splash;
HXDLIN( 152)			_hx_tmp1->set_y((this->player->y - (int)16));
HXLINE( 154)			this->level->collideWithLevel(this->player,null(),null());
HXLINE( 155)			if ((this->player->x < (int)0)) {
HXLINE( 156)				this->player->set_x((int)0);
            			}
HXLINE( 158)			if ((this->player->y < (int)0)) {
HXLINE( 159)				this->player->set_y((int)0);
            			}
HXLINE( 161)			Float _hx_tmp2 = this->player->x;
HXDLIN( 161)			if ((_hx_tmp2 > (this->level->fullWidth - (int)16))) {
HXLINE( 162)				 ::Player _hx_tmp3 = this->player;
HXDLIN( 162)				_hx_tmp3->set_x((this->level->fullWidth - (int)16));
            			}
HXLINE( 164)			Float _hx_tmp4 = this->player->y;
HXDLIN( 164)			if ((_hx_tmp4 > (this->level->fullHeight + (int)32))) {
HXLINE( 165)				 ::Player _hx_tmp5 = this->player;
HXDLIN( 165)				_hx_tmp5->set_y((this->level->fullHeight + (int)32));
HXLINE( 166)				this->killPlayer();
            			}
HXLINE( 169)			if (this->player->overlaps(this->level->rainLayer,null(),null())) {
HXLINE( 170)				this->increaseWater();
HXLINE( 171)				this->canThrowWater = false;
HXLINE( 172)				this->splash->set_visible(true);
            			}
            			else {
HXLINE( 174)				this->canThrowWater = true;
HXLINE( 175)				this->splash->set_visible(false);
            			}
HXLINE( 178)			::flixel::FlxG_obj::overlap(this->goals,this->player,null(),this->overlapped_dyn());
            		}
HXLINE( 182)		::flixel::FlxG_obj::overlap(this->waters,this->enemies,null(),this->overlapped_dyn());
HXLINE( 183)		{
HXLINE( 183)			 ::flixel::group::FlxTypedGroupIterator w =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->waters->members,null());
HXDLIN( 183)			while(w->hasNext()){
HXLINE( 183)				 ::Water w1 = w->next().StaticCast<  ::Water >();
HXLINE( 184)				bool _hx_tmp6;
HXDLIN( 184)				bool _hx_tmp7;
HXDLIN( 184)				bool _hx_tmp8;
HXDLIN( 184)				Float w2 = w1->x;
HXDLIN( 184)				Float _hx_tmp9 = (w2 + w1->get_width());
HXDLIN( 184)				if ((_hx_tmp9 > ::flixel::FlxG_obj::worldBounds->x)) {
HXLINE( 184)					 ::flixel::math::FlxRect _this = ::flixel::FlxG_obj::worldBounds;
HXDLIN( 184)					_hx_tmp8 = (w1->x < (_this->x + _this->width));
            				}
            				else {
HXLINE( 184)					_hx_tmp8 = false;
            				}
HXDLIN( 184)				if (_hx_tmp8) {
HXLINE( 184)					Float w3 = w1->y;
HXDLIN( 184)					Float _hx_tmp10 = (w3 + w1->get_height());
HXDLIN( 184)					_hx_tmp7 = (_hx_tmp10 > ::flixel::FlxG_obj::worldBounds->y);
            				}
            				else {
HXLINE( 184)					_hx_tmp7 = false;
            				}
HXDLIN( 184)				if (_hx_tmp7) {
HXLINE( 184)					 ::flixel::math::FlxRect _this1 = ::flixel::FlxG_obj::worldBounds;
HXDLIN( 184)					_hx_tmp6 = (w1->y < (_this1->y + _this1->height));
            				}
            				else {
HXLINE( 184)					_hx_tmp6 = false;
            				}
HXDLIN( 184)				if (!(_hx_tmp6)) {
HXLINE( 185)					this->waters->remove(w1,null()).StaticCast<  ::Water >();
HXLINE( 186)					w1->destroy();
            				}
            			}
            		}
HXLINE( 191)		::flixel::FlxG_obj::overlap(this->enemies,this->player,null(),this->overlapped_dyn());
HXLINE( 197)		::flixel::FlxG_obj::overlap(this->buttons,this->player,this->overlapped_dyn(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 200)		::flixel::FlxG_obj::overlap(this->blocks,this->player,null(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 203)		this->positionHUD();
HXLINE( 204)		 ::flixel::text::FlxText _hx_tmp11 = this->waterText;
HXDLIN( 204)		_hx_tmp11->set_text((HX_("Water: ",5d,e6,fd,f7) + this->player->water));
            	}


bool PlayState_obj::overlapped( ::flixel::FlxObject Sprite1, ::flixel::FlxObject Sprite2){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_207_overlapped)
HXLINE( 208)		::String sprite1ClassName = ::Type_obj::getClassName(::Type_obj::getClass(Sprite1));
HXLINE( 209)		::String sprite2ClassName = ::Type_obj::getClassName(::Type_obj::getClass(Sprite2));
HXLINE( 214)		bool _hx_tmp;
HXDLIN( 214)		bool _hx_tmp1;
HXDLIN( 214)		if ((sprite1ClassName == HX_("Goal",33,b5,42,2f))) {
HXLINE( 214)			_hx_tmp1 = (sprite2ClassName == HX_("Player",81,5f,4d,6c));
            		}
            		else {
HXLINE( 214)			_hx_tmp1 = false;
            		}
HXDLIN( 214)		if (_hx_tmp1) {
HXLINE( 214)			_hx_tmp = !(this->levelFinished);
            		}
            		else {
HXLINE( 214)			_hx_tmp = false;
            		}
HXDLIN( 214)		if (_hx_tmp) {
HXLINE( 216)			 ::Goal g = hx::TCast<  ::Goal >::cast(Sprite1);
HXLINE( 217)			this->isRunning = false;
HXLINE( 218)			if (hx::IsNotNull( g->targetLevel )) {
HXLINE( 220)				this->delay((int)500);
HXLINE( 221)				this->goToLevel(g->targetLevel,::PlayState_obj::lives);
            			}
            			else {
HXLINE( 223)				this->delay((int)500);
HXLINE( 224)				this->goToTitle();
            			}
            		}
HXLINE( 228)		bool _hx_tmp2;
HXDLIN( 228)		bool _hx_tmp3;
HXDLIN( 228)		if ((sprite1ClassName == HX_("Enemy",28,82,a8,03))) {
HXLINE( 228)			_hx_tmp3 = (sprite2ClassName == HX_("Player",81,5f,4d,6c));
            		}
            		else {
HXLINE( 228)			_hx_tmp3 = false;
            		}
HXDLIN( 228)		if (_hx_tmp3) {
HXLINE( 228)			_hx_tmp2 = !(this->levelFinished);
            		}
            		else {
HXLINE( 228)			_hx_tmp2 = false;
            		}
HXDLIN( 228)		if (_hx_tmp2) {
HXLINE( 229)			this->killPlayer();
            		}
HXLINE( 232)		bool _hx_tmp4;
HXDLIN( 232)		bool _hx_tmp5;
HXDLIN( 232)		if ((sprite1ClassName == HX_("Water",f7,87,52,58))) {
HXLINE( 232)			_hx_tmp5 = (sprite2ClassName == HX_("Enemy",28,82,a8,03));
            		}
            		else {
HXLINE( 232)			_hx_tmp5 = false;
            		}
HXDLIN( 232)		if (_hx_tmp5) {
HXLINE( 232)			_hx_tmp4 = !(this->levelFinished);
            		}
            		else {
HXLINE( 232)			_hx_tmp4 = false;
            		}
HXDLIN( 232)		if (_hx_tmp4) {
HXLINE( 233)			 ::Water w = hx::TCast<  ::Water >::cast(Sprite1);
HXLINE( 234)			 ::Enemy e = hx::TCast<  ::Enemy >::cast(Sprite2);
HXLINE( 236)			this->waters->remove(w,null()).StaticCast<  ::Water >();
HXLINE( 237)			w->destroy();
HXLINE( 239)			if ((e->type == HX_("fire",b6,d3,bb,43))) {
HXLINE( 240)				this->sndFireOut->play(null(),null(),null());
HXLINE( 241)				this->enemies->remove(e,null()).StaticCast<  ::Enemy >();
HXLINE( 242)				e->destroy();
            			}
            		}
HXLINE( 252)		bool _hx_tmp6;
HXDLIN( 252)		bool _hx_tmp7;
HXDLIN( 252)		if ((sprite1ClassName == HX_("Button",12,d6,74,0e))) {
HXLINE( 252)			_hx_tmp7 = (sprite2ClassName == HX_("Player",81,5f,4d,6c));
            		}
            		else {
HXLINE( 252)			_hx_tmp7 = false;
            		}
HXDLIN( 252)		if (_hx_tmp7) {
HXLINE( 252)			_hx_tmp6 = !(this->levelFinished);
            		}
            		else {
HXLINE( 252)			_hx_tmp6 = false;
            		}
HXDLIN( 252)		if (_hx_tmp6) {
HXLINE( 253)			 ::Button b = hx::TCast<  ::Button >::cast(Sprite1);
HXLINE( 254)			 ::Player p = hx::TCast<  ::Player >::cast(Sprite2);
HXLINE( 256)			bool _hx_tmp8;
HXDLIN( 256)			if ((b->water <= p->water)) {
HXLINE( 256)				_hx_tmp8 = (b->pressed == false);
            			}
            			else {
HXLINE( 256)				_hx_tmp8 = false;
            			}
HXDLIN( 256)			if (_hx_tmp8) {
HXLINE( 257)				this->sndButtonClick->play(null(),null(),null());
HXLINE( 258)				b->pressButton();
HXLINE( 261)				this->moveBlock(b->id);
            			}
            		}
HXLINE( 265)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,overlapped,return )

void PlayState_obj::killPlayer(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_268_killPlayer)
HXLINE( 270)		if (!(this->isRunning)) {
HXLINE( 271)			return;
            		}
HXLINE( 274)		this->sndDie->play(null(),null(),null());
HXLINE( 275)		this->player->playDeadAnimation();
HXLINE( 277)		this->isRunning = false;
HXLINE( 279)		::PlayState_obj::lives = (::PlayState_obj::lives - (int)1);
HXLINE( 281)		if ((::PlayState_obj::lives < (int)0)) {
HXLINE( 282)			this->gameOverText->set_visible(true);
HXLINE( 283)			this->delay((int)2000);
HXLINE( 284)			this->goToTitle();
            		}
            		else {
HXLINE( 286)			this->delay((int)500);
HXLINE( 287)			this->goToLevel(::PlayState_obj::levelToLoad,::PlayState_obj::lives);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,killPlayer,(void))

void PlayState_obj::increaseWater(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_292_increaseWater)
HXLINE( 293)		this->sndWaterFill->play(null(),null(),null());
HXLINE( 294)		this->player->addWater();
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,increaseWater,(void))

void PlayState_obj::positionHUD(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_298_positionHUD)
HXLINE( 299)		 ::flixel::math::FlxPoint camPos = ::flixel::FlxG_obj::camera->scroll;
HXLINE( 301)		 ::flixel::FlxSprite _hx_tmp = this->lifeIcon;
HXDLIN( 301)		_hx_tmp->set_x((camPos->x + (int)5));
HXLINE( 302)		 ::flixel::FlxSprite _hx_tmp1 = this->lifeIcon;
HXDLIN( 302)		_hx_tmp1->set_y((camPos->y + (int)5));
HXLINE( 303)		 ::flixel::text::FlxText _hx_tmp2 = this->livesText;
HXDLIN( 303)		_hx_tmp2->set_x((camPos->x + (int)18));
HXLINE( 304)		 ::flixel::text::FlxText _hx_tmp3 = this->livesText;
HXDLIN( 304)		_hx_tmp3->set_y((camPos->y + (int)7));
HXLINE( 305)		 ::flixel::text::FlxText _hx_tmp4 = this->waterText;
HXDLIN( 305)		_hx_tmp4->set_x((camPos->x + (int)90));
HXLINE( 306)		 ::flixel::text::FlxText _hx_tmp5 = this->waterText;
HXDLIN( 306)		_hx_tmp5->set_y((camPos->y + (int)5));
HXLINE( 307)		 ::flixel::text::FlxText _hx_tmp6 = this->gameOverText;
HXDLIN( 307)		_hx_tmp6->set_x((camPos->x + (int)200));
HXLINE( 308)		 ::flixel::text::FlxText _hx_tmp7 = this->gameOverText;
HXDLIN( 308)		_hx_tmp7->set_y((camPos->y + (int)5));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,positionHUD,(void))

void PlayState_obj::animateWater(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_313_animateWater)
HXDLIN( 313)		if ((this->rainAnimationCoolDown <= (int)0)) {
HXLINE( 314)			this->rainAnimationCoolDown = ::PlayState_obj::RAIN_ANIMATION_TIME;
HXLINE( 316)			 ::flixel::tile::FlxTilemap tm = hx::TCast<  ::flixel::tile::FlxTilemap >::cast(Dynamic( this->level->rainLayer->members->__get((int)0)).StaticCast<  ::flixel::FlxBasic >());
HXLINE( 317)			::Array< int > tiles = tm->getData(false);
HXLINE( 318)			{
HXLINE( 318)				int _g1 = (int)0;
HXDLIN( 318)				int _g = tiles->length;
HXDLIN( 318)				while((_g1 < _g)){
HXLINE( 318)					_g1 = (_g1 + (int)1);
HXDLIN( 318)					int i = (_g1 - (int)1);
HXLINE( 320)					bool _hx_tmp;
HXDLIN( 320)					if ((tiles->__get(i) != (int)3)) {
HXLINE( 320)						_hx_tmp = (tiles->__get(i) != (int)4);
            					}
            					else {
HXLINE( 320)						_hx_tmp = false;
            					}
HXDLIN( 320)					if (_hx_tmp) {
HXLINE( 321)						continue;
            					}
HXLINE( 324)					if ((tiles->__get(i) == (int)3)) {
HXLINE( 325)						tm->setTileByIndex(i,(int)4,true);
            					}
            					else {
HXLINE( 327)						tm->setTileByIndex(i,(int)3,true);
            					}
            				}
            			}
            		}
            		else {
HXLINE( 331)			this->rainAnimationCoolDown--;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,animateWater,(void))

void PlayState_obj::goToTitle(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_336_goToTitle)
HXDLIN( 336)		 ::flixel::FlxState nextState =  ::TitleState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 336)		if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXDLIN( 336)			::flixel::FlxG_obj::game->_requestedState = nextState;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,goToTitle,(void))

void PlayState_obj::goToEnding(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_340_goToEnding)
HXDLIN( 340)		 ::flixel::FlxState nextState =  ::EndingState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 340)		if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXDLIN( 340)			::flixel::FlxG_obj::game->_requestedState = nextState;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,goToEnding,(void))

void PlayState_obj::goToLevel(::String levelToLoad,int l){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_345_goToLevel)
HXDLIN( 345)		if ((levelToLoad == HX_("end",db,03,4d,00))) {
HXLINE( 346)			this->goToEnding();
            		}
            		else {
HXLINE( 349)			::PlayState_obj::levelToLoad = levelToLoad;
HXLINE( 350)			::PlayState_obj::lives = l;
HXLINE( 351)			{
HXLINE( 351)				 ::flixel::FlxState nextState =  ::PlayState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 351)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 351)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,goToLevel,(void))

void PlayState_obj::delay(int ms){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_360_delay)
HXLINE( 360)			::flixel::FlxG_obj::game->_state->set_active(true);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_355_delay)
HXLINE( 357)		::flixel::FlxG_obj::game->_state->set_active(false);
HXLINE( 358)		::haxe::Timer_obj::delay( ::Dynamic(new _hx_Closure_0()),ms);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,delay,(void))

void PlayState_obj::moveBlock(int id){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_365_moveBlock)
HXDLIN( 365)		 ::flixel::group::FlxTypedGroupIterator bl =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->blocks->members,null());
HXDLIN( 365)		while(bl->hasNext()){
HXDLIN( 365)			 ::Block bl1 = bl->next().StaticCast<  ::Block >();
HXLINE( 366)			bool _hx_tmp;
HXDLIN( 366)			if ((bl1->id == id)) {
HXLINE( 366)				_hx_tmp = !(bl1->moved);
            			}
            			else {
HXLINE( 366)				_hx_tmp = false;
            			}
HXDLIN( 366)			if (_hx_tmp) {
HXLINE( 367)				this->sndBlockMove->play(null(),null(),null());
HXLINE( 368)				bl1->move();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,moveBlock,(void))

::String PlayState_obj::levelToLoad;

int PlayState_obj::RAIN_ANIMATION_TIME;

int PlayState_obj::lives;


hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	PlayState_obj *__this = (PlayState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(isRunning,"isRunning");
	HX_MARK_MEMBER_NAME(isDead,"isDead");
	HX_MARK_MEMBER_NAME(levelFinished,"levelFinished");
	HX_MARK_MEMBER_NAME(canThrowWater,"canThrowWater");
	HX_MARK_MEMBER_NAME(rainAnimationCoolDown,"rainAnimationCoolDown");
	HX_MARK_MEMBER_NAME(level,"level");
	HX_MARK_MEMBER_NAME(splash,"splash");
	HX_MARK_MEMBER_NAME(player,"player");
	HX_MARK_MEMBER_NAME(goals,"goals");
	HX_MARK_MEMBER_NAME(enemies,"enemies");
	HX_MARK_MEMBER_NAME(waters,"waters");
	HX_MARK_MEMBER_NAME(buttons,"buttons");
	HX_MARK_MEMBER_NAME(blocks,"blocks");
	HX_MARK_MEMBER_NAME(livesText,"livesText");
	HX_MARK_MEMBER_NAME(lifeIcon,"lifeIcon");
	HX_MARK_MEMBER_NAME(waterText,"waterText");
	HX_MARK_MEMBER_NAME(gameOverText,"gameOverText");
	HX_MARK_MEMBER_NAME(sndDie,"sndDie");
	HX_MARK_MEMBER_NAME(sndWaterFill,"sndWaterFill");
	HX_MARK_MEMBER_NAME(sndFireOut,"sndFireOut");
	HX_MARK_MEMBER_NAME(sndButtonClick,"sndButtonClick");
	HX_MARK_MEMBER_NAME(sndBlockMove,"sndBlockMove");
	 ::flixel::addons::ui::FlxUIState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(isRunning,"isRunning");
	HX_VISIT_MEMBER_NAME(isDead,"isDead");
	HX_VISIT_MEMBER_NAME(levelFinished,"levelFinished");
	HX_VISIT_MEMBER_NAME(canThrowWater,"canThrowWater");
	HX_VISIT_MEMBER_NAME(rainAnimationCoolDown,"rainAnimationCoolDown");
	HX_VISIT_MEMBER_NAME(level,"level");
	HX_VISIT_MEMBER_NAME(splash,"splash");
	HX_VISIT_MEMBER_NAME(player,"player");
	HX_VISIT_MEMBER_NAME(goals,"goals");
	HX_VISIT_MEMBER_NAME(enemies,"enemies");
	HX_VISIT_MEMBER_NAME(waters,"waters");
	HX_VISIT_MEMBER_NAME(buttons,"buttons");
	HX_VISIT_MEMBER_NAME(blocks,"blocks");
	HX_VISIT_MEMBER_NAME(livesText,"livesText");
	HX_VISIT_MEMBER_NAME(lifeIcon,"lifeIcon");
	HX_VISIT_MEMBER_NAME(waterText,"waterText");
	HX_VISIT_MEMBER_NAME(gameOverText,"gameOverText");
	HX_VISIT_MEMBER_NAME(sndDie,"sndDie");
	HX_VISIT_MEMBER_NAME(sndWaterFill,"sndWaterFill");
	HX_VISIT_MEMBER_NAME(sndFireOut,"sndFireOut");
	HX_VISIT_MEMBER_NAME(sndButtonClick,"sndButtonClick");
	HX_VISIT_MEMBER_NAME(sndBlockMove,"sndBlockMove");
	 ::flixel::addons::ui::FlxUIState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PlayState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"level") ) { return hx::Val( level ); }
		if (HX_FIELD_EQ(inName,"goals") ) { return hx::Val( goals ); }
		if (HX_FIELD_EQ(inName,"delay") ) { return hx::Val( delay_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"isDead") ) { return hx::Val( isDead ); }
		if (HX_FIELD_EQ(inName,"splash") ) { return hx::Val( splash ); }
		if (HX_FIELD_EQ(inName,"player") ) { return hx::Val( player ); }
		if (HX_FIELD_EQ(inName,"waters") ) { return hx::Val( waters ); }
		if (HX_FIELD_EQ(inName,"blocks") ) { return hx::Val( blocks ); }
		if (HX_FIELD_EQ(inName,"sndDie") ) { return hx::Val( sndDie ); }
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enemies") ) { return hx::Val( enemies ); }
		if (HX_FIELD_EQ(inName,"buttons") ) { return hx::Val( buttons ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lifeIcon") ) { return hx::Val( lifeIcon ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isRunning") ) { return hx::Val( isRunning ); }
		if (HX_FIELD_EQ(inName,"livesText") ) { return hx::Val( livesText ); }
		if (HX_FIELD_EQ(inName,"waterText") ) { return hx::Val( waterText ); }
		if (HX_FIELD_EQ(inName,"goToTitle") ) { return hx::Val( goToTitle_dyn() ); }
		if (HX_FIELD_EQ(inName,"goToLevel") ) { return hx::Val( goToLevel_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveBlock") ) { return hx::Val( moveBlock_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sndFireOut") ) { return hx::Val( sndFireOut ); }
		if (HX_FIELD_EQ(inName,"overlapped") ) { return hx::Val( overlapped_dyn() ); }
		if (HX_FIELD_EQ(inName,"killPlayer") ) { return hx::Val( killPlayer_dyn() ); }
		if (HX_FIELD_EQ(inName,"goToEnding") ) { return hx::Val( goToEnding_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"positionHUD") ) { return hx::Val( positionHUD_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"gameOverText") ) { return hx::Val( gameOverText ); }
		if (HX_FIELD_EQ(inName,"sndWaterFill") ) { return hx::Val( sndWaterFill ); }
		if (HX_FIELD_EQ(inName,"sndBlockMove") ) { return hx::Val( sndBlockMove ); }
		if (HX_FIELD_EQ(inName,"animateWater") ) { return hx::Val( animateWater_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"levelFinished") ) { return hx::Val( levelFinished ); }
		if (HX_FIELD_EQ(inName,"canThrowWater") ) { return hx::Val( canThrowWater ); }
		if (HX_FIELD_EQ(inName,"increaseWater") ) { return hx::Val( increaseWater_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"sndButtonClick") ) { return hx::Val( sndButtonClick ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"rainAnimationCoolDown") ) { return hx::Val( rainAnimationCoolDown ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PlayState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"lives") ) { outValue = ( lives ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"levelToLoad") ) { outValue = ( levelToLoad ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"RAIN_ANIMATION_TIME") ) { outValue = ( RAIN_ANIMATION_TIME ); return true; }
	}
	return false;
}

hx::Val PlayState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"level") ) { level=inValue.Cast<  ::TiledLevel >(); return inValue; }
		if (HX_FIELD_EQ(inName,"goals") ) { goals=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"isDead") ) { isDead=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"splash") ) { splash=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"player") ) { player=inValue.Cast<  ::Player >(); return inValue; }
		if (HX_FIELD_EQ(inName,"waters") ) { waters=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blocks") ) { blocks=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sndDie") ) { sndDie=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enemies") ) { enemies=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"buttons") ) { buttons=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lifeIcon") ) { lifeIcon=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isRunning") ) { isRunning=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"livesText") ) { livesText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"waterText") ) { waterText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sndFireOut") ) { sndFireOut=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"gameOverText") ) { gameOverText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sndWaterFill") ) { sndWaterFill=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sndBlockMove") ) { sndBlockMove=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"levelFinished") ) { levelFinished=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canThrowWater") ) { canThrowWater=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"sndButtonClick") ) { sndButtonClick=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"rainAnimationCoolDown") ) { rainAnimationCoolDown=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PlayState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"lives") ) { lives=ioValue.Cast< int >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"levelToLoad") ) { levelToLoad=ioValue.Cast< ::String >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"RAIN_ANIMATION_TIME") ) { RAIN_ANIMATION_TIME=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("isRunning","\x35","\xeb","\x67","\xef"));
	outFields->push(HX_HCSTRING("isDead","\xae","\x13","\xcd","\x5f"));
	outFields->push(HX_HCSTRING("levelFinished","\x16","\x89","\x3a","\x0e"));
	outFields->push(HX_HCSTRING("canThrowWater","\x41","\xed","\x1c","\x7a"));
	outFields->push(HX_HCSTRING("rainAnimationCoolDown","\xfb","\x7e","\x78","\x8f"));
	outFields->push(HX_HCSTRING("level","\x84","\x15","\x63","\x72"));
	outFields->push(HX_HCSTRING("splash","\x67","\x81","\x98","\xbf"));
	outFields->push(HX_HCSTRING("player","\x61","\xeb","\xb8","\x37"));
	outFields->push(HX_HCSTRING("goals","\x00","\x68","\xee","\x97"));
	outFields->push(HX_HCSTRING("enemies","\xa6","\x68","\x0e","\xd3"));
	outFields->push(HX_HCSTRING("waters","\x7c","\xfc","\x4f","\xbb"));
	outFields->push(HX_HCSTRING("buttons","\x41","\x52","\x75","\xca"));
	outFields->push(HX_HCSTRING("blocks","\x86","\x2e","\xea","\xa7"));
	outFields->push(HX_HCSTRING("livesText","\x54","\xf8","\x60","\x6f"));
	outFields->push(HX_HCSTRING("lifeIcon","\x95","\x52","\x01","\x50"));
	outFields->push(HX_HCSTRING("waterText","\x64","\x68","\x9b","\xcf"));
	outFields->push(HX_HCSTRING("gameOverText","\x33","\xb6","\x41","\x70"));
	outFields->push(HX_HCSTRING("sndDie","\x57","\x99","\x6b","\x93"));
	outFields->push(HX_HCSTRING("sndWaterFill","\x91","\x71","\xd7","\x6d"));
	outFields->push(HX_HCSTRING("sndFireOut","\x0f","\xee","\xe7","\x9d"));
	outFields->push(HX_HCSTRING("sndButtonClick","\x0d","\x08","\x95","\x95"));
	outFields->push(HX_HCSTRING("sndBlockMove","\x55","\xb6","\x69","\xf5"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(PlayState_obj,isRunning),HX_HCSTRING("isRunning","\x35","\xeb","\x67","\xef")},
	{hx::fsBool,(int)offsetof(PlayState_obj,isDead),HX_HCSTRING("isDead","\xae","\x13","\xcd","\x5f")},
	{hx::fsBool,(int)offsetof(PlayState_obj,levelFinished),HX_HCSTRING("levelFinished","\x16","\x89","\x3a","\x0e")},
	{hx::fsBool,(int)offsetof(PlayState_obj,canThrowWater),HX_HCSTRING("canThrowWater","\x41","\xed","\x1c","\x7a")},
	{hx::fsInt,(int)offsetof(PlayState_obj,rainAnimationCoolDown),HX_HCSTRING("rainAnimationCoolDown","\xfb","\x7e","\x78","\x8f")},
	{hx::fsObject /*::TiledLevel*/ ,(int)offsetof(PlayState_obj,level),HX_HCSTRING("level","\x84","\x15","\x63","\x72")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(PlayState_obj,splash),HX_HCSTRING("splash","\x67","\x81","\x98","\xbf")},
	{hx::fsObject /*::Player*/ ,(int)offsetof(PlayState_obj,player),HX_HCSTRING("player","\x61","\xeb","\xb8","\x37")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,goals),HX_HCSTRING("goals","\x00","\x68","\xee","\x97")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,enemies),HX_HCSTRING("enemies","\xa6","\x68","\x0e","\xd3")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,waters),HX_HCSTRING("waters","\x7c","\xfc","\x4f","\xbb")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,buttons),HX_HCSTRING("buttons","\x41","\x52","\x75","\xca")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,blocks),HX_HCSTRING("blocks","\x86","\x2e","\xea","\xa7")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(PlayState_obj,livesText),HX_HCSTRING("livesText","\x54","\xf8","\x60","\x6f")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(PlayState_obj,lifeIcon),HX_HCSTRING("lifeIcon","\x95","\x52","\x01","\x50")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(PlayState_obj,waterText),HX_HCSTRING("waterText","\x64","\x68","\x9b","\xcf")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(PlayState_obj,gameOverText),HX_HCSTRING("gameOverText","\x33","\xb6","\x41","\x70")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(PlayState_obj,sndDie),HX_HCSTRING("sndDie","\x57","\x99","\x6b","\x93")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(PlayState_obj,sndWaterFill),HX_HCSTRING("sndWaterFill","\x91","\x71","\xd7","\x6d")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(PlayState_obj,sndFireOut),HX_HCSTRING("sndFireOut","\x0f","\xee","\xe7","\x9d")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(PlayState_obj,sndButtonClick),HX_HCSTRING("sndButtonClick","\x0d","\x08","\x95","\x95")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(PlayState_obj,sndBlockMove),HX_HCSTRING("sndBlockMove","\x55","\xb6","\x69","\xf5")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo PlayState_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &PlayState_obj::levelToLoad,HX_HCSTRING("levelToLoad","\xe5","\x89","\x77","\x44")},
	{hx::fsInt,(void *) &PlayState_obj::RAIN_ANIMATION_TIME,HX_HCSTRING("RAIN_ANIMATION_TIME","\x53","\xac","\x8e","\x15")},
	{hx::fsInt,(void *) &PlayState_obj::lives,HX_HCSTRING("lives","\x07","\xf0","\x07","\x75")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_HCSTRING("isRunning","\x35","\xeb","\x67","\xef"),
	HX_HCSTRING("isDead","\xae","\x13","\xcd","\x5f"),
	HX_HCSTRING("levelFinished","\x16","\x89","\x3a","\x0e"),
	HX_HCSTRING("canThrowWater","\x41","\xed","\x1c","\x7a"),
	HX_HCSTRING("rainAnimationCoolDown","\xfb","\x7e","\x78","\x8f"),
	HX_HCSTRING("level","\x84","\x15","\x63","\x72"),
	HX_HCSTRING("splash","\x67","\x81","\x98","\xbf"),
	HX_HCSTRING("player","\x61","\xeb","\xb8","\x37"),
	HX_HCSTRING("goals","\x00","\x68","\xee","\x97"),
	HX_HCSTRING("enemies","\xa6","\x68","\x0e","\xd3"),
	HX_HCSTRING("waters","\x7c","\xfc","\x4f","\xbb"),
	HX_HCSTRING("buttons","\x41","\x52","\x75","\xca"),
	HX_HCSTRING("blocks","\x86","\x2e","\xea","\xa7"),
	HX_HCSTRING("livesText","\x54","\xf8","\x60","\x6f"),
	HX_HCSTRING("lifeIcon","\x95","\x52","\x01","\x50"),
	HX_HCSTRING("waterText","\x64","\x68","\x9b","\xcf"),
	HX_HCSTRING("gameOverText","\x33","\xb6","\x41","\x70"),
	HX_HCSTRING("sndDie","\x57","\x99","\x6b","\x93"),
	HX_HCSTRING("sndWaterFill","\x91","\x71","\xd7","\x6d"),
	HX_HCSTRING("sndFireOut","\x0f","\xee","\xe7","\x9d"),
	HX_HCSTRING("sndButtonClick","\x0d","\x08","\x95","\x95"),
	HX_HCSTRING("sndBlockMove","\x55","\xb6","\x69","\xf5"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("overlapped","\xa8","\xbf","\xcc","\x03"),
	HX_HCSTRING("killPlayer","\x9f","\xc9","\xc7","\xfc"),
	HX_HCSTRING("increaseWater","\xf5","\x6c","\x3f","\xa1"),
	HX_HCSTRING("positionHUD","\x8e","\x5b","\x55","\xff"),
	HX_HCSTRING("animateWater","\xb6","\x85","\xa4","\x36"),
	HX_HCSTRING("goToTitle","\xd5","\x44","\x11","\x56"),
	HX_HCSTRING("goToEnding","\x0a","\xca","\x1b","\xd0"),
	HX_HCSTRING("goToLevel","\xc1","\x44","\x39","\xb8"),
	HX_HCSTRING("delay","\x83","\xd7","\x26","\xd7"),
	HX_HCSTRING("moveBlock","\x7c","\x44","\xc3","\x72"),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(PlayState_obj::levelToLoad,"levelToLoad");
	HX_MARK_MEMBER_NAME(PlayState_obj::RAIN_ANIMATION_TIME,"RAIN_ANIMATION_TIME");
	HX_MARK_MEMBER_NAME(PlayState_obj::lives,"lives");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(PlayState_obj::levelToLoad,"levelToLoad");
	HX_VISIT_MEMBER_NAME(PlayState_obj::RAIN_ANIMATION_TIME,"RAIN_ANIMATION_TIME");
	HX_VISIT_MEMBER_NAME(PlayState_obj::lives,"lives");
};

#endif

hx::Class PlayState_obj::__mClass;

static ::String PlayState_obj_sStaticFields[] = {
	HX_HCSTRING("levelToLoad","\xe5","\x89","\x77","\x44"),
	HX_HCSTRING("RAIN_ANIMATION_TIME","\x53","\xac","\x8e","\x15"),
	HX_HCSTRING("lives","\x07","\xf0","\x07","\x75"),
	::String(null())
};

void PlayState_obj::__register()
{
	hx::Object *dummy = new PlayState_obj;
	PlayState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("PlayState","\x5d","\x83","\xc2","\x46");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PlayState_obj::__GetStatic;
	__mClass->mSetStaticField = &PlayState_obj::__SetStatic;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(PlayState_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PlayState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_20_boot)
HXDLIN(  20)		levelToLoad = HX_("stage0",b2,fb,f1,05);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_21_boot)
HXDLIN(  21)		RAIN_ANIMATION_TIME = (int)10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_41_boot)
HXDLIN(  41)		lives = (int)5;
            	}
}

