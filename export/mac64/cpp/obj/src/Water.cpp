// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Water
#include <Water.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0552193e6fd2077c_8_new,"Water","new",0x5856f069,"Water.new","Water.hx",8,0x0622cf27)
HX_LOCAL_STACK_FRAME(_hx_pos_0552193e6fd2077c_43_update,"Water","update",0xffa951a0,"Water.update","Water.hx",43,0x0622cf27)
HX_LOCAL_STACK_FRAME(_hx_pos_0552193e6fd2077c_57_destroy,"Water","destroy",0x3b348583,"Water.destroy","Water.hx",57,0x0622cf27)

void Water_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::PlayState state,int facing,Float accelX,Float accelY){
Float X = __o_X.Default(((Float)0.0));
Float Y = __o_Y.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_0552193e6fd2077c_8_new)
HXLINE(  12)		this->MAX_VELOCITY = ((Float)120.0);
HXLINE(  11)		this->GRAVITY = ((Float)250.0);
HXLINE(  16)		super::__construct(X,Y,null());
HXLINE(  18)		this->maxVelocity->set_x(this->MAX_VELOCITY);
HXLINE(  19)		this->maxVelocity->set_y(this->MAX_VELOCITY);
HXLINE(  22)		this->acceleration->set_x(accelX);
HXLINE(  23)		this->acceleration->set_y(accelY);
HXLINE(  25)		this->set_facing(facing);
HXLINE(  27)		if ((facing == (int)1)) {
HXLINE(  28)			this->scale->set_x((int)-1);
            		}
HXLINE(  31)		this->loadGraphic(HX_("assets/images/water.png",c7,87,57,5e),true,(int)32,(int)32,null(),null());
HXLINE(  32)		this->set_alpha(((Float)0.8));
HXLINE(  35)		this->set_width((int)20);
HXLINE(  36)		this->set_height((int)20);
HXLINE(  37)		this->offset->set_x((int)6);
HXLINE(  38)		this->offset->set_y((int)6);
            	}

Dynamic Water_obj::__CreateEmpty() { return new Water_obj; }

void *Water_obj::_hx_vtable = 0;

Dynamic Water_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Water_obj > _hx_result = new Water_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool Water_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x585287f7;
	}
}

void Water_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_0552193e6fd2077c_43_update)
HXLINE(  44)		this->super::update(elapsed);
HXLINE(  46)		if ((this->facing == (int)16)) {
HXLINE(  47)			 ::flixel::math::FlxPoint _g = this->acceleration;
HXDLIN(  47)			_g->set_x((_g->x + this->MAX_VELOCITY));
            		}
            		else {
HXLINE(  49)			 ::flixel::math::FlxPoint _g1 = this->acceleration;
HXDLIN(  49)			_g1->set_x((_g1->x - this->MAX_VELOCITY));
            		}
HXLINE(  52)		this->acceleration->set_y(this->GRAVITY);
            	}


void Water_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_0552193e6fd2077c_57_destroy)
HXDLIN(  57)		this->super::destroy();
            	}



hx::ObjectPtr< Water_obj > Water_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::PlayState state,int facing,Float accelX,Float accelY) {
	hx::ObjectPtr< Water_obj > __this = new Water_obj();
	__this->__construct(__o_X,__o_Y,state,facing,accelX,accelY);
	return __this;
}

hx::ObjectPtr< Water_obj > Water_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::PlayState state,int facing,Float accelX,Float accelY) {
	Water_obj *__this = (Water_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Water_obj), true, "Water"));
	*(void **)__this = Water_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,state,facing,accelX,accelY);
	return __this;
}

Water_obj::Water_obj()
{
}

hx::Val Water_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"GRAVITY") ) { return hx::Val( GRAVITY ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"MAX_VELOCITY") ) { return hx::Val( MAX_VELOCITY ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Water_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"GRAVITY") ) { GRAVITY=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"MAX_VELOCITY") ) { MAX_VELOCITY=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Water_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("GRAVITY","\x2e","\x42","\xd3","\xf7"));
	outFields->push(HX_HCSTRING("MAX_VELOCITY","\x78","\xf2","\xbf","\x58"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Water_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Water_obj,GRAVITY),HX_HCSTRING("GRAVITY","\x2e","\x42","\xd3","\xf7")},
	{hx::fsFloat,(int)offsetof(Water_obj,MAX_VELOCITY),HX_HCSTRING("MAX_VELOCITY","\x78","\xf2","\xbf","\x58")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Water_obj_sStaticStorageInfo = 0;
#endif

static ::String Water_obj_sMemberFields[] = {
	HX_HCSTRING("GRAVITY","\x2e","\x42","\xd3","\xf7"),
	HX_HCSTRING("MAX_VELOCITY","\x78","\xf2","\xbf","\x58"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	::String(null()) };

static void Water_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Water_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Water_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Water_obj::__mClass,"__mClass");
};

#endif

hx::Class Water_obj::__mClass;

void Water_obj::__register()
{
	hx::Object *dummy = new Water_obj;
	Water_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Water","\xf7","\x87","\x52","\x58");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Water_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Water_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Water_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Water_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Water_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Water_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

