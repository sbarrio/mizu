// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_TitleState
#include <TitleState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a55214e0452daa02_16_new,"TitleState","new",0x3b23deeb,"TitleState.new","TitleState.hx",16,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_22_create,"TitleState","create",0x801cc151,"TitleState.create","TitleState.hx",22,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_60_update,"TitleState","update",0x8b12e05e,"TitleState.update","TitleState.hx",60,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_82_delay,"TitleState","delay",0x70ffdece,"TitleState.delay","TitleState.hx",82,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_77_delay,"TitleState","delay",0x70ffdece,"TitleState.delay","TitleState.hx",77,0xd132a6e5)

void TitleState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_a55214e0452daa02_16_new)
HXLINE(  18)		this->keyPressed = false;
HXLINE(  16)		super::__construct(TransIn,TransOut);
            	}

Dynamic TitleState_obj::__CreateEmpty() { return new TitleState_obj; }

void *TitleState_obj::_hx_vtable = 0;

Dynamic TitleState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TitleState_obj > _hx_result = new TitleState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool TitleState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3634c52c) {
		if (inClassId<=(int)0x25a685e0) {
			if (inClassId<=(int)0x2335d9a7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x2335d9a7;
			} else {
				return inClassId==(int)0x25a685e0;
			}
		} else {
			return inClassId==(int)0x3634c52c;
		}
	} else {
		if (inClassId<=(int)0x55c33fb8) {
			return inClassId==(int)0x3a655841 || inClassId==(int)0x55c33fb8;
		} else {
			return inClassId==(int)0x743878ee;
		}
	}
}

void TitleState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_22_create)
HXLINE(  23)		this->super::create();
HXLINE(  25)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  26)		bg->set_x((int)0);
HXLINE(  27)		bg->set_y((int)-256);
HXLINE(  28)		bg->loadGraphic(HX_("assets/images/title_bg.png",b2,44,96,ff),true,(int)640,(int)512,null(),null());
HXLINE(  29)		this->add(bg);
HXLINE(  31)		 ::flixel::FlxSprite logo =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  32)		logo->set_x((int)40);
HXLINE(  33)		logo->set_y((int)20);
HXLINE(  34)		logo->loadGraphic(HX_("assets/images/title_logo_big.png",99,8e,3a,46),true,(int)240,(int)137,null(),null());
HXLINE(  35)		this->add(logo);
HXLINE(  37)		::flixel::tweens::FlxTween_obj::tween(bg, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),(int)-320)
            			->setFixed(1,HX_("y",79,00,00,00),(int)0)),(int)10, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("type",ba,f2,08,4d),(int)2)));
HXLINE(  39)		 ::flixel::text::FlxText text =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)85,(int)150,(int)200,HX_("Press any key",ae,e0,32,b3),(int)17,true);
HXLINE(  41)		this->add(text);
HXLINE(  43)		 ::flixel::text::FlxText copyText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)110,(int)220,(int)320,HX_("LD40 - sbarrio 2017",2b,06,38,05),(int)8,true);
HXLINE(  44)		copyText->set_color((int)-1);
HXLINE(  45)		this->add(copyText);
HXLINE(  48)		if (hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(  49)			{
HXLINE(  49)				 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(  49)				_this->cleanup(_this->autoDestroy,true);
            			}
HXLINE(  50)			::flixel::FlxG_obj::sound->music->destroy();
HXLINE(  51)			::flixel::FlxG_obj::sound->music = null();
            		}
HXLINE(  55)		this->sndStart = ::flixel::FlxG_obj::sound->load(HX_("assets/sounds/start.wav",21,09,96,62),null(),null(),null(),null(),null(),null(),null());
            	}


void TitleState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_60_update)
HXLINE(  61)		this->super::update(elapsed);
HXLINE(  63)		if ((::flixel::FlxG_obj::keys->firstJustPressed() != (int)-1)) {
HXLINE(  64)			this->keyPressed = true;
HXLINE(  66)			this->sndStart->play(null(),null(),null());
HXLINE(  69)			this->delay((int)500);
HXLINE(  70)			::PlayState_obj::levelToLoad = HX_("stage0",b2,fb,f1,05);
HXLINE(  71)			::PlayState_obj::lives = (int)5;
HXLINE(  72)			{
HXLINE(  72)				 ::flixel::FlxState nextState =  ::PlayState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(  72)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  72)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
            	}


void TitleState_obj::delay(int ms){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_a55214e0452daa02_82_delay)
HXLINE(  82)			::flixel::FlxG_obj::game->_state->set_active(true);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_a55214e0452daa02_77_delay)
HXLINE(  79)		::flixel::FlxG_obj::game->_state->set_active(false);
HXLINE(  80)		::haxe::Timer_obj::delay( ::Dynamic(new _hx_Closure_0()),ms);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TitleState_obj,delay,(void))


hx::ObjectPtr< TitleState_obj > TitleState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	hx::ObjectPtr< TitleState_obj > __this = new TitleState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

hx::ObjectPtr< TitleState_obj > TitleState_obj::__alloc(hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	TitleState_obj *__this = (TitleState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TitleState_obj), true, "TitleState"));
	*(void **)__this = TitleState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

TitleState_obj::TitleState_obj()
{
}

void TitleState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TitleState);
	HX_MARK_MEMBER_NAME(keyPressed,"keyPressed");
	HX_MARK_MEMBER_NAME(sndStart,"sndStart");
	 ::flixel::addons::ui::FlxUIState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TitleState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(keyPressed,"keyPressed");
	HX_VISIT_MEMBER_NAME(sndStart,"sndStart");
	 ::flixel::addons::ui::FlxUIState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val TitleState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"delay") ) { return hx::Val( delay_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"sndStart") ) { return hx::Val( sndStart ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"keyPressed") ) { return hx::Val( keyPressed ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TitleState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"sndStart") ) { sndStart=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"keyPressed") ) { keyPressed=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TitleState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("keyPressed","\xc3","\x72","\x6e","\xa8"));
	outFields->push(HX_HCSTRING("sndStart","\x39","\x44","\xcb","\xa2"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TitleState_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(TitleState_obj,keyPressed),HX_HCSTRING("keyPressed","\xc3","\x72","\x6e","\xa8")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(TitleState_obj,sndStart),HX_HCSTRING("sndStart","\x39","\x44","\xcb","\xa2")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TitleState_obj_sStaticStorageInfo = 0;
#endif

static ::String TitleState_obj_sMemberFields[] = {
	HX_HCSTRING("keyPressed","\xc3","\x72","\x6e","\xa8"),
	HX_HCSTRING("sndStart","\x39","\x44","\xcb","\xa2"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("delay","\x83","\xd7","\x26","\xd7"),
	::String(null()) };

static void TitleState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TitleState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TitleState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TitleState_obj::__mClass,"__mClass");
};

#endif

hx::Class TitleState_obj::__mClass;

void TitleState_obj::__register()
{
	hx::Object *dummy = new TitleState_obj;
	TitleState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("TitleState","\x79","\x8d","\xa1","\x8c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TitleState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TitleState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TitleState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TitleState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TitleState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TitleState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

