// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Water
#include <Water.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_14_new,"Player","new",0x8d5554f3,"Player.new","Player.hx",14,0xa27fc9dd)
static const int _hx_array_data_6c4d5f81_1[] = {
	(int)0,(int)1,
};
static const int _hx_array_data_6c4d5f81_2[] = {
	(int)2,(int)3,
};
static const int _hx_array_data_6c4d5f81_3[] = {
	(int)4,(int)5,
};
static const int _hx_array_data_6c4d5f81_4[] = {
	(int)6,(int)7,
};
static const int _hx_array_data_6c4d5f81_5[] = {
	(int)8,(int)9,
};
static const int _hx_array_data_6c4d5f81_6[] = {
	(int)12,(int)13,(int)14,(int)15,(int)16,(int)17,
};
static const int _hx_array_data_6c4d5f81_7[] = {
	(int)18,(int)19,(int)20,(int)21,(int)22,(int)23,
};
static const int _hx_array_data_6c4d5f81_8[] = {
	(int)24,(int)25,(int)26,(int)27,(int)28,(int)29,
};
static const int _hx_array_data_6c4d5f81_9[] = {
	(int)30,(int)31,(int)32,(int)33,(int)34,(int)35,
};
static const int _hx_array_data_6c4d5f81_10[] = {
	(int)36,(int)37,(int)38,(int)39,(int)40,(int)41,
};
static const int _hx_array_data_6c4d5f81_11[] = {
	(int)42,
};
static const int _hx_array_data_6c4d5f81_12[] = {
	(int)43,
};
static const int _hx_array_data_6c4d5f81_13[] = {
	(int)44,
};
static const int _hx_array_data_6c4d5f81_14[] = {
	(int)45,
};
static const int _hx_array_data_6c4d5f81_15[] = {
	(int)46,
};
static const int _hx_array_data_6c4d5f81_16[] = {
	(int)47,
};
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_147_update,"Player","update",0xf1f8df56,"Player.update","Player.hx",147,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_239_moveRight,"Player","moveRight",0x5cfa8fde,"Player.moveRight","Player.hx",239,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_244_moveLeft,"Player","moveLeft",0x7bdd7a45,"Player.moveLeft","Player.hx",244,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_249_jump,"Player","jump",0x1abc40fb,"Player.jump","Player.hx",249,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_254_throwWater,"Player","throwWater",0xa0cf44de,"Player.throwWater","Player.hx",254,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_280_addWater,"Player","addWater",0xcff844c3,"Player.addWater","Player.hx",280,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_288_destroy,"Player","destroy",0x4e80f70d,"Player.destroy","Player.hx",288,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_291_playIdleAnimation,"Player","playIdleAnimation",0xbcc75e8f,"Player.playIdleAnimation","Player.hx",291,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_314_playWalkAnimation,"Player","playWalkAnimation",0x49cec1fa,"Player.playWalkAnimation","Player.hx",314,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_337_playJumpAnimation,"Player","playJumpAnimation",0x244fb575,"Player.playJumpAnimation","Player.hx",337,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_361_playDeadAnimation,"Player","playDeadAnimation",0x57eb44ff,"Player.playDeadAnimation","Player.hx",361,0xa27fc9dd)

void Player_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::PlayState state){
Float X = __o_X.Default(((Float)0.0));
Float Y = __o_Y.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_14_new)
HXLINE(  61)		this->water = ((Float)0);
HXLINE(  54)		this->isReadyToThrowWater = true;
HXLINE(  53)		this->throwWaterCoolDownTime = (int)0;
HXLINE(  52)		this->animFinished = true;
HXLINE(  51)		this->isReadyToJump = false;
HXLINE(  28)		this->WATER_LEVEL_4 = ((Float)100);
HXLINE(  27)		this->WATER_LEVEL_3 = ((Float)75);
HXLINE(  26)		this->WATER_LEVEL_2 = ((Float)50);
HXLINE(  25)		this->WATER_LEVEL_1 = ((Float)25);
HXLINE(  24)		this->WATER_LEVEL_0 = ((Float)0);
HXLINE(  22)		this->THROW_WATER_COOLDOWN_TIME = (int)40;
HXLINE(  21)		this->WATER_INCREASE = ((Float)0.5);
HXLINE(  20)		this->MAX_WATER = ((Float)100.0);
HXLINE(  19)		this->JUMP_FACTOR = ((Float)0.50);
HXLINE(  18)		this->GRAVITY = ((Float)500.0);
HXLINE(  17)		this->MAX_VELOCITY = ((Float)100.0);
HXLINE(  72)		super::__construct(X,Y,null());
HXLINE(  74)		this->playState = state;
HXLINE(  77)		this->DRAG_LEVEL_0 = (this->MAX_VELOCITY * (int)4);
HXLINE(  78)		this->DRAG_LEVEL_1 = (this->MAX_VELOCITY * (int)3);
HXLINE(  79)		this->DRAG_LEVEL_2 = (this->MAX_VELOCITY * (int)2);
HXLINE(  80)		this->DRAG_LEVEL_3 = (this->MAX_VELOCITY * ((Float)1.2));
HXLINE(  81)		this->DRAG_LEVEL_4 = this->MAX_VELOCITY;
HXLINE(  83)		this->GRAVITY_LEVEL_0 = this->GRAVITY;
HXLINE(  84)		this->GRAVITY_LEVEL_1 = (this->GRAVITY * ((Float)1.2));
HXLINE(  85)		this->GRAVITY_LEVEL_2 = (this->GRAVITY * ((Float)1.5));
HXLINE(  86)		this->GRAVITY_LEVEL_3 = (this->GRAVITY * ((Float)1.7));
HXLINE(  87)		this->GRAVITY_LEVEL_4 = (this->GRAVITY * (int)2);
HXLINE(  89)		this->JUMP_FACTOR_LEVEL_0 = ((Float)0.50);
HXLINE(  90)		this->JUMP_FACTOR_LEVEL_1 = ((Float)0.40);
HXLINE(  91)		this->JUMP_FACTOR_LEVEL_2 = ((Float)0.30);
HXLINE(  92)		this->JUMP_FACTOR_LEVEL_3 = ((Float)0.25);
HXLINE(  93)		this->JUMP_FACTOR_LEVEL_4 = ((Float)0.18);
HXLINE(  95)		this->currentDrag = this->DRAG_LEVEL_0;
HXLINE(  96)		this->currentGravity = this->GRAVITY_LEVEL_0;
HXLINE(  97)		this->currentJumpFactor = this->JUMP_FACTOR_LEVEL_0;
HXLINE(  99)		this->maxVelocity->set_x(this->MAX_VELOCITY);
HXLINE( 100)		this->drag->set_x(this->currentDrag);
HXLINE( 101)		this->acceleration->set_y(this->currentGravity);
HXLINE( 103)		this->loadGraphic(HX_("assets/images/player.png",87,88,81,c6),true,(int)32,(int)32,null(),null());
HXLINE( 106)		::haxe::IMap_obj::set(this->_facingFlip,(int)16, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),false)
            			->setFixed(1,HX_("y",79,00,00,00),false)));
HXLINE( 107)		::haxe::IMap_obj::set(this->_facingFlip,(int)1, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),true)
            			->setFixed(1,HX_("y",79,00,00,00),false)));
HXLINE( 110)		this->set_width((int)20);
HXLINE( 111)		this->set_height((int)20);
HXLINE( 112)		this->offset->set_x((int)6);
HXLINE( 113)		this->offset->set_y((int)12);
HXLINE( 118)		this->animation->add(HX_("idle0",9c,8a,7e,b7),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_1,2),(int)3,true,null(),null());
HXLINE( 119)		this->animation->add(HX_("idle1",9d,8a,7e,b7),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_2,2),(int)3,true,null(),null());
HXLINE( 120)		this->animation->add(HX_("idle2",9e,8a,7e,b7),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_3,2),(int)3,true,null(),null());
HXLINE( 121)		this->animation->add(HX_("idle3",9f,8a,7e,b7),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_4,2),(int)3,true,null(),null());
HXLINE( 122)		this->animation->add(HX_("idle4",a0,8a,7e,b7),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_5,2),(int)3,true,null(),null());
HXLINE( 126)		this->animation->add(HX_("walk0",07,0b,1f,c5),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_6,6),(int)8,false,null(),null());
HXLINE( 127)		this->animation->add(HX_("walk1",08,0b,1f,c5),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_7,6),(int)8,false,null(),null());
HXLINE( 128)		this->animation->add(HX_("walk2",09,0b,1f,c5),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_8,6),(int)8,false,null(),null());
HXLINE( 129)		this->animation->add(HX_("walk3",0a,0b,1f,c5),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_9,6),(int)8,false,null(),null());
HXLINE( 130)		this->animation->add(HX_("walk4",0b,0b,1f,c5),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_10,6),(int)8,false,null(),null());
HXLINE( 132)		this->animation->add(HX_("jump0",82,8b,22,56),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_11,1),(int)1,false,null(),null());
HXLINE( 133)		this->animation->add(HX_("jump1",83,8b,22,56),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_12,1),(int)1,false,null(),null());
HXLINE( 134)		this->animation->add(HX_("jump2",84,8b,22,56),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_13,1),(int)1,false,null(),null());
HXLINE( 135)		this->animation->add(HX_("jump3",85,8b,22,56),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_14,1),(int)1,false,null(),null());
HXLINE( 136)		this->animation->add(HX_("jump4",86,8b,22,56),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_15,1),(int)1,false,null(),null());
HXLINE( 138)		this->animation->add(HX_("dead",a4,4e,66,42),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_16,1),(int)6,false,null(),null());
HXLINE( 141)		this->sndJump = ::flixel::FlxG_obj::sound->load(HX_("assets/sounds/jump.wav",cb,f6,7d,b4),null(),null(),null(),null(),null(),null(),null());
HXLINE( 142)		this->sndWaterOut = ::flixel::FlxG_obj::sound->load(HX_("assets/sounds/water_out.wav",65,30,c0,fa),null(),null(),null(),null(),null(),null(),null());
HXLINE( 143)		this->sndGrounded = ::flixel::FlxG_obj::sound->load(HX_("assets/sounds/grounded.wav",03,54,f9,94),null(),null(),null(),null(),null(),null(),null());
            	}

Dynamic Player_obj::__CreateEmpty() { return new Player_obj; }

void *Player_obj::_hx_vtable = 0;

Dynamic Player_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Player_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x6c4d5f81;
	}
}

void Player_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_147_update)
HXLINE( 150)		if ((this->water < this->WATER_LEVEL_1)) {
HXLINE( 151)			this->currentGravity = this->GRAVITY_LEVEL_0;
HXLINE( 152)			this->currentDrag = this->DRAG_LEVEL_0;
HXLINE( 153)			this->currentJumpFactor = this->JUMP_FACTOR_LEVEL_0;
            		}
HXLINE( 156)		bool _hx_tmp;
HXDLIN( 156)		if ((this->water > this->WATER_LEVEL_1)) {
HXLINE( 156)			_hx_tmp = (this->water < this->WATER_LEVEL_2);
            		}
            		else {
HXLINE( 156)			_hx_tmp = false;
            		}
HXDLIN( 156)		if (_hx_tmp) {
HXLINE( 157)			this->currentGravity = this->GRAVITY_LEVEL_1;
HXLINE( 158)			this->currentDrag = this->DRAG_LEVEL_1;
HXLINE( 159)			this->currentJumpFactor = this->JUMP_FACTOR_LEVEL_1;
            		}
HXLINE( 162)		bool _hx_tmp1;
HXDLIN( 162)		if ((this->water > this->WATER_LEVEL_2)) {
HXLINE( 162)			_hx_tmp1 = (this->water < this->WATER_LEVEL_3);
            		}
            		else {
HXLINE( 162)			_hx_tmp1 = false;
            		}
HXDLIN( 162)		if (_hx_tmp1) {
HXLINE( 163)			this->currentGravity = this->GRAVITY_LEVEL_2;
HXLINE( 164)			this->currentDrag = this->DRAG_LEVEL_2;
HXLINE( 165)			this->currentJumpFactor = this->JUMP_FACTOR_LEVEL_2;
            		}
HXLINE( 168)		bool _hx_tmp2;
HXDLIN( 168)		if ((this->water > this->WATER_LEVEL_3)) {
HXLINE( 168)			_hx_tmp2 = (this->water < this->WATER_LEVEL_4);
            		}
            		else {
HXLINE( 168)			_hx_tmp2 = false;
            		}
HXDLIN( 168)		if (_hx_tmp2) {
HXLINE( 169)			this->currentGravity = this->GRAVITY_LEVEL_3;
HXLINE( 170)			this->currentDrag = this->DRAG_LEVEL_3;
HXLINE( 171)			this->currentJumpFactor = this->JUMP_FACTOR_LEVEL_3;
            		}
HXLINE( 174)		if ((this->water >= this->WATER_LEVEL_4)) {
HXLINE( 175)			this->currentGravity = this->GRAVITY_LEVEL_4;
HXLINE( 176)			this->currentDrag = this->DRAG_LEVEL_4;
HXLINE( 177)			this->currentJumpFactor = this->JUMP_FACTOR_LEVEL_4;
            		}
HXLINE( 180)		this->acceleration->set_x((int)0);
HXLINE( 181)		this->acceleration->set_y(this->currentGravity);
HXLINE( 183)		if ((((int)this->touching & (int)(int)4096) <= (int)0)) {
HXLINE( 184)			this->isReadyToJump = false;
            		}
HXLINE( 187)		bool _hx_tmp3;
HXDLIN( 187)		bool _hx_tmp4;
HXDLIN( 187)		if ((((int)this->touching & (int)(int)4096) > (int)0)) {
HXLINE( 187)			_hx_tmp4 = (this->velocity->y == (int)0);
            		}
            		else {
HXLINE( 187)			_hx_tmp4 = false;
            		}
HXDLIN( 187)		if (_hx_tmp4) {
HXLINE( 187)			_hx_tmp3 = !(this->isReadyToJump);
            		}
            		else {
HXLINE( 187)			_hx_tmp3 = false;
            		}
HXDLIN( 187)		if (_hx_tmp3) {
HXLINE( 188)			this->isReadyToJump = true;
            		}
HXLINE( 192)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 192)		if (_this->keyManager->checkStatus((int)37,_this->status)) {
HXLINE( 194)			this->moveLeft();
            		}
HXLINE( 197)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 197)		if (_this1->keyManager->checkStatus((int)39,_this1->status)) {
HXLINE( 199)			this->moveRight();
            		}
HXLINE( 202)		bool _hx_tmp5;
HXDLIN( 202)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 202)		if (_this2->keyManager->checkStatus((int)90,_this2->status)) {
HXLINE( 202)			_hx_tmp5 = this->isReadyToJump;
            		}
            		else {
HXLINE( 202)			_hx_tmp5 = false;
            		}
HXDLIN( 202)		if (_hx_tmp5) {
HXLINE( 203)			this->sndJump->play(null(),null(),null());
HXLINE( 204)			this->jump();
            		}
HXLINE( 207)		bool _hx_tmp6;
HXDLIN( 207)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 207)		if (_this3->keyManager->checkStatus((int)88,_this3->status)) {
HXLINE( 207)			_hx_tmp6 = this->isReadyToThrowWater;
            		}
            		else {
HXLINE( 207)			_hx_tmp6 = false;
            		}
HXDLIN( 207)		if (_hx_tmp6) {
HXLINE( 208)			this->throwWater();
            		}
HXLINE( 211)		if ((this->throwWaterCoolDownTime > (int)0)) {
HXLINE( 212)			this->throwWaterCoolDownTime--;
            		}
            		else {
HXLINE( 214)			this->isReadyToThrowWater = true;
            		}
HXLINE( 218)		bool animFinished = true;
HXLINE( 219)		bool _hx_tmp7;
HXDLIN( 219)		if (hx::IsNotNull( this->animation->_curAnim )) {
HXLINE( 219)			_hx_tmp7 = !(this->animation->_curAnim->finished);
            		}
            		else {
HXLINE( 219)			_hx_tmp7 = false;
            		}
HXDLIN( 219)		if (_hx_tmp7) {
HXLINE( 220)			animFinished = false;
            		}
HXLINE( 223)		bool _hx_tmp8;
HXDLIN( 223)		if ((this->velocity->x != (int)0)) {
HXLINE( 223)			_hx_tmp8 = this->isReadyToJump;
            		}
            		else {
HXLINE( 223)			_hx_tmp8 = false;
            		}
HXDLIN( 223)		if (_hx_tmp8) {
HXLINE( 225)			this->playWalkAnimation(this->water);
            		}
HXLINE( 228)		bool _hx_tmp9;
HXDLIN( 228)		if ((this->velocity->x == (int)0)) {
HXLINE( 228)			_hx_tmp9 = this->isReadyToJump;
            		}
            		else {
HXLINE( 228)			_hx_tmp9 = false;
            		}
HXDLIN( 228)		if (_hx_tmp9) {
HXLINE( 229)			this->playIdleAnimation(this->water);
            		}
HXLINE( 232)		if ((this->velocity->y != (int)0)) {
HXLINE( 233)			this->playJumpAnimation(this->water);
            		}
HXLINE( 236)		this->super::update(elapsed);
            	}


void Player_obj::moveRight(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_239_moveRight)
HXLINE( 240)		this->set_facing((int)16);
HXLINE( 241)		{
HXLINE( 241)			 ::flixel::math::FlxPoint _g = this->acceleration;
HXDLIN( 241)			_g->set_x((_g->x + this->currentDrag));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,moveRight,(void))

void Player_obj::moveLeft(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_244_moveLeft)
HXLINE( 245)		this->set_facing((int)1);
HXLINE( 246)		{
HXLINE( 246)			 ::flixel::math::FlxPoint _g = this->acceleration;
HXDLIN( 246)			_g->set_x((_g->x - this->currentDrag));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,moveLeft,(void))

void Player_obj::jump(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_249_jump)
HXLINE( 250)		 ::flixel::math::FlxPoint _hx_tmp = this->velocity;
HXDLIN( 250)		_hx_tmp->set_y((-(this->acceleration->y) * this->currentJumpFactor));
HXLINE( 251)		this->isReadyToJump = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,jump,(void))

void Player_obj::throwWater(){
            	HX_GC_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_254_throwWater)
HXLINE( 256)		bool _hx_tmp;
HXDLIN( 256)		bool _hx_tmp1;
HXDLIN( 256)		if (!((this->water <= this->WATER_LEVEL_1))) {
HXLINE( 256)			_hx_tmp1 = !(this->isReadyToThrowWater);
            		}
            		else {
HXLINE( 256)			_hx_tmp1 = true;
            		}
HXDLIN( 256)		if (!(_hx_tmp1)) {
HXLINE( 256)			_hx_tmp = !(this->playState->canThrowWater);
            		}
            		else {
HXLINE( 256)			_hx_tmp = true;
            		}
HXDLIN( 256)		if (_hx_tmp) {
HXLINE( 257)			return;
            		}
HXLINE( 260)		this->sndWaterOut->play(null(),null(),null());
HXLINE( 262)		this->isReadyToThrowWater = false;
HXLINE( 264)		this->throwWaterCoolDownTime = this->THROW_WATER_COOLDOWN_TIME;
HXLINE( 265)		this->water = (int)0;
HXLINE( 268)		Float wx = this->x;
HXLINE( 269)		Float wy = (this->y - (int)16);
HXLINE( 270)		if ((this->facing == (int)1)) {
HXLINE( 271)			wx = (wx - (int)32);
            		}
            		else {
HXLINE( 273)			wx = (wx + (int)32);
            		}
HXLINE( 276)		 ::Water w =  ::Water_obj::__alloc( HX_CTX ,wx,wy,this->playState,this->facing,this->acceleration->x,this->acceleration->y);
HXLINE( 277)		this->playState->waters->add(w).StaticCast<  ::Water >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,throwWater,(void))

void Player_obj::addWater(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_280_addWater)
HXLINE( 281)		 ::Player _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 281)		_hx_tmp->water = (_hx_tmp->water + this->WATER_INCREASE);
HXLINE( 282)		if ((this->water > this->MAX_WATER)) {
HXLINE( 283)			this->water = this->MAX_WATER;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,addWater,(void))

void Player_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_288_destroy)
HXDLIN( 288)		this->super::destroy();
            	}


void Player_obj::playIdleAnimation(Float w){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_291_playIdleAnimation)
HXLINE( 293)		if ((w < this->WATER_LEVEL_1)) {
HXLINE( 294)			this->animation->play(HX_("idle0",9c,8a,7e,b7),null(),null(),null());
            		}
HXLINE( 297)		bool _hx_tmp;
HXDLIN( 297)		if ((w > this->WATER_LEVEL_1)) {
HXLINE( 297)			_hx_tmp = (w < this->WATER_LEVEL_2);
            		}
            		else {
HXLINE( 297)			_hx_tmp = false;
            		}
HXDLIN( 297)		if (_hx_tmp) {
HXLINE( 298)			this->animation->play(HX_("idle1",9d,8a,7e,b7),null(),null(),null());
            		}
HXLINE( 301)		bool _hx_tmp1;
HXDLIN( 301)		if ((w > this->WATER_LEVEL_2)) {
HXLINE( 301)			_hx_tmp1 = (w < this->WATER_LEVEL_3);
            		}
            		else {
HXLINE( 301)			_hx_tmp1 = false;
            		}
HXDLIN( 301)		if (_hx_tmp1) {
HXLINE( 302)			this->animation->play(HX_("idle2",9e,8a,7e,b7),null(),null(),null());
            		}
HXLINE( 305)		bool _hx_tmp2;
HXDLIN( 305)		if ((w > this->WATER_LEVEL_3)) {
HXLINE( 305)			_hx_tmp2 = (w < this->WATER_LEVEL_4);
            		}
            		else {
HXLINE( 305)			_hx_tmp2 = false;
            		}
HXDLIN( 305)		if (_hx_tmp2) {
HXLINE( 306)			this->animation->play(HX_("idle3",9f,8a,7e,b7),null(),null(),null());
            		}
HXLINE( 309)		if ((w >= this->WATER_LEVEL_4)) {
HXLINE( 310)			this->animation->play(HX_("idle4",a0,8a,7e,b7),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,playIdleAnimation,(void))

void Player_obj::playWalkAnimation(Float w){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_314_playWalkAnimation)
HXLINE( 316)		if ((w < this->WATER_LEVEL_1)) {
HXLINE( 317)			this->animation->play(HX_("walk0",07,0b,1f,c5),null(),null(),null());
            		}
HXLINE( 320)		bool _hx_tmp;
HXDLIN( 320)		if ((w > this->WATER_LEVEL_1)) {
HXLINE( 320)			_hx_tmp = (w < this->WATER_LEVEL_2);
            		}
            		else {
HXLINE( 320)			_hx_tmp = false;
            		}
HXDLIN( 320)		if (_hx_tmp) {
HXLINE( 321)			this->animation->play(HX_("walk1",08,0b,1f,c5),null(),null(),null());
            		}
HXLINE( 324)		bool _hx_tmp1;
HXDLIN( 324)		if ((w > this->WATER_LEVEL_2)) {
HXLINE( 324)			_hx_tmp1 = (w < this->WATER_LEVEL_3);
            		}
            		else {
HXLINE( 324)			_hx_tmp1 = false;
            		}
HXDLIN( 324)		if (_hx_tmp1) {
HXLINE( 325)			this->animation->play(HX_("walk2",09,0b,1f,c5),null(),null(),null());
            		}
HXLINE( 328)		bool _hx_tmp2;
HXDLIN( 328)		if ((w > this->WATER_LEVEL_3)) {
HXLINE( 328)			_hx_tmp2 = (w < this->WATER_LEVEL_4);
            		}
            		else {
HXLINE( 328)			_hx_tmp2 = false;
            		}
HXDLIN( 328)		if (_hx_tmp2) {
HXLINE( 329)			this->animation->play(HX_("walk3",0a,0b,1f,c5),null(),null(),null());
            		}
HXLINE( 332)		if ((w >= this->WATER_LEVEL_4)) {
HXLINE( 333)			this->animation->play(HX_("walk4",0b,0b,1f,c5),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,playWalkAnimation,(void))

void Player_obj::playJumpAnimation(Float w){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_337_playJumpAnimation)
HXLINE( 339)		if ((w < this->WATER_LEVEL_1)) {
HXLINE( 340)			this->animation->play(HX_("jump0",82,8b,22,56),null(),null(),null());
            		}
HXLINE( 343)		bool _hx_tmp;
HXDLIN( 343)		if ((w > this->WATER_LEVEL_1)) {
HXLINE( 343)			_hx_tmp = (w < this->WATER_LEVEL_2);
            		}
            		else {
HXLINE( 343)			_hx_tmp = false;
            		}
HXDLIN( 343)		if (_hx_tmp) {
HXLINE( 344)			this->animation->play(HX_("jump1",83,8b,22,56),null(),null(),null());
            		}
HXLINE( 347)		bool _hx_tmp1;
HXDLIN( 347)		if ((w > this->WATER_LEVEL_2)) {
HXLINE( 347)			_hx_tmp1 = (w < this->WATER_LEVEL_3);
            		}
            		else {
HXLINE( 347)			_hx_tmp1 = false;
            		}
HXDLIN( 347)		if (_hx_tmp1) {
HXLINE( 348)			this->animation->play(HX_("jump2",84,8b,22,56),null(),null(),null());
            		}
HXLINE( 351)		bool _hx_tmp2;
HXDLIN( 351)		if ((w > this->WATER_LEVEL_3)) {
HXLINE( 351)			_hx_tmp2 = (w < this->WATER_LEVEL_4);
            		}
            		else {
HXLINE( 351)			_hx_tmp2 = false;
            		}
HXDLIN( 351)		if (_hx_tmp2) {
HXLINE( 352)			this->animation->play(HX_("jump3",85,8b,22,56),null(),null(),null());
            		}
HXLINE( 355)		if ((w >= this->WATER_LEVEL_4)) {
HXLINE( 356)			this->animation->play(HX_("jump4",86,8b,22,56),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,playJumpAnimation,(void))

void Player_obj::playDeadAnimation(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_361_playDeadAnimation)
HXDLIN( 361)		this->animation->play(HX_("dead",a4,4e,66,42),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,playDeadAnimation,(void))


hx::ObjectPtr< Player_obj > Player_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::PlayState state) {
	hx::ObjectPtr< Player_obj > __this = new Player_obj();
	__this->__construct(__o_X,__o_Y,state);
	return __this;
}

hx::ObjectPtr< Player_obj > Player_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::PlayState state) {
	Player_obj *__this = (Player_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Player_obj), true, "Player"));
	*(void **)__this = Player_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,state);
	return __this;
}

Player_obj::Player_obj()
{
}

void Player_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Player);
	HX_MARK_MEMBER_NAME(MAX_VELOCITY,"MAX_VELOCITY");
	HX_MARK_MEMBER_NAME(GRAVITY,"GRAVITY");
	HX_MARK_MEMBER_NAME(JUMP_FACTOR,"JUMP_FACTOR");
	HX_MARK_MEMBER_NAME(MAX_WATER,"MAX_WATER");
	HX_MARK_MEMBER_NAME(WATER_INCREASE,"WATER_INCREASE");
	HX_MARK_MEMBER_NAME(THROW_WATER_COOLDOWN_TIME,"THROW_WATER_COOLDOWN_TIME");
	HX_MARK_MEMBER_NAME(WATER_LEVEL_0,"WATER_LEVEL_0");
	HX_MARK_MEMBER_NAME(WATER_LEVEL_1,"WATER_LEVEL_1");
	HX_MARK_MEMBER_NAME(WATER_LEVEL_2,"WATER_LEVEL_2");
	HX_MARK_MEMBER_NAME(WATER_LEVEL_3,"WATER_LEVEL_3");
	HX_MARK_MEMBER_NAME(WATER_LEVEL_4,"WATER_LEVEL_4");
	HX_MARK_MEMBER_NAME(DRAG_LEVEL_0,"DRAG_LEVEL_0");
	HX_MARK_MEMBER_NAME(DRAG_LEVEL_1,"DRAG_LEVEL_1");
	HX_MARK_MEMBER_NAME(DRAG_LEVEL_2,"DRAG_LEVEL_2");
	HX_MARK_MEMBER_NAME(DRAG_LEVEL_3,"DRAG_LEVEL_3");
	HX_MARK_MEMBER_NAME(DRAG_LEVEL_4,"DRAG_LEVEL_4");
	HX_MARK_MEMBER_NAME(GRAVITY_LEVEL_0,"GRAVITY_LEVEL_0");
	HX_MARK_MEMBER_NAME(GRAVITY_LEVEL_1,"GRAVITY_LEVEL_1");
	HX_MARK_MEMBER_NAME(GRAVITY_LEVEL_2,"GRAVITY_LEVEL_2");
	HX_MARK_MEMBER_NAME(GRAVITY_LEVEL_3,"GRAVITY_LEVEL_3");
	HX_MARK_MEMBER_NAME(GRAVITY_LEVEL_4,"GRAVITY_LEVEL_4");
	HX_MARK_MEMBER_NAME(JUMP_FACTOR_LEVEL_0,"JUMP_FACTOR_LEVEL_0");
	HX_MARK_MEMBER_NAME(JUMP_FACTOR_LEVEL_1,"JUMP_FACTOR_LEVEL_1");
	HX_MARK_MEMBER_NAME(JUMP_FACTOR_LEVEL_2,"JUMP_FACTOR_LEVEL_2");
	HX_MARK_MEMBER_NAME(JUMP_FACTOR_LEVEL_3,"JUMP_FACTOR_LEVEL_3");
	HX_MARK_MEMBER_NAME(JUMP_FACTOR_LEVEL_4,"JUMP_FACTOR_LEVEL_4");
	HX_MARK_MEMBER_NAME(isReadyToJump,"isReadyToJump");
	HX_MARK_MEMBER_NAME(animFinished,"animFinished");
	HX_MARK_MEMBER_NAME(throwWaterCoolDownTime,"throwWaterCoolDownTime");
	HX_MARK_MEMBER_NAME(isReadyToThrowWater,"isReadyToThrowWater");
	HX_MARK_MEMBER_NAME(currentDrag,"currentDrag");
	HX_MARK_MEMBER_NAME(currentGravity,"currentGravity");
	HX_MARK_MEMBER_NAME(currentJumpFactor,"currentJumpFactor");
	HX_MARK_MEMBER_NAME(water,"water");
	HX_MARK_MEMBER_NAME(playState,"playState");
	HX_MARK_MEMBER_NAME(sndJump,"sndJump");
	HX_MARK_MEMBER_NAME(sndWaterOut,"sndWaterOut");
	HX_MARK_MEMBER_NAME(sndGrounded,"sndGrounded");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Player_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(MAX_VELOCITY,"MAX_VELOCITY");
	HX_VISIT_MEMBER_NAME(GRAVITY,"GRAVITY");
	HX_VISIT_MEMBER_NAME(JUMP_FACTOR,"JUMP_FACTOR");
	HX_VISIT_MEMBER_NAME(MAX_WATER,"MAX_WATER");
	HX_VISIT_MEMBER_NAME(WATER_INCREASE,"WATER_INCREASE");
	HX_VISIT_MEMBER_NAME(THROW_WATER_COOLDOWN_TIME,"THROW_WATER_COOLDOWN_TIME");
	HX_VISIT_MEMBER_NAME(WATER_LEVEL_0,"WATER_LEVEL_0");
	HX_VISIT_MEMBER_NAME(WATER_LEVEL_1,"WATER_LEVEL_1");
	HX_VISIT_MEMBER_NAME(WATER_LEVEL_2,"WATER_LEVEL_2");
	HX_VISIT_MEMBER_NAME(WATER_LEVEL_3,"WATER_LEVEL_3");
	HX_VISIT_MEMBER_NAME(WATER_LEVEL_4,"WATER_LEVEL_4");
	HX_VISIT_MEMBER_NAME(DRAG_LEVEL_0,"DRAG_LEVEL_0");
	HX_VISIT_MEMBER_NAME(DRAG_LEVEL_1,"DRAG_LEVEL_1");
	HX_VISIT_MEMBER_NAME(DRAG_LEVEL_2,"DRAG_LEVEL_2");
	HX_VISIT_MEMBER_NAME(DRAG_LEVEL_3,"DRAG_LEVEL_3");
	HX_VISIT_MEMBER_NAME(DRAG_LEVEL_4,"DRAG_LEVEL_4");
	HX_VISIT_MEMBER_NAME(GRAVITY_LEVEL_0,"GRAVITY_LEVEL_0");
	HX_VISIT_MEMBER_NAME(GRAVITY_LEVEL_1,"GRAVITY_LEVEL_1");
	HX_VISIT_MEMBER_NAME(GRAVITY_LEVEL_2,"GRAVITY_LEVEL_2");
	HX_VISIT_MEMBER_NAME(GRAVITY_LEVEL_3,"GRAVITY_LEVEL_3");
	HX_VISIT_MEMBER_NAME(GRAVITY_LEVEL_4,"GRAVITY_LEVEL_4");
	HX_VISIT_MEMBER_NAME(JUMP_FACTOR_LEVEL_0,"JUMP_FACTOR_LEVEL_0");
	HX_VISIT_MEMBER_NAME(JUMP_FACTOR_LEVEL_1,"JUMP_FACTOR_LEVEL_1");
	HX_VISIT_MEMBER_NAME(JUMP_FACTOR_LEVEL_2,"JUMP_FACTOR_LEVEL_2");
	HX_VISIT_MEMBER_NAME(JUMP_FACTOR_LEVEL_3,"JUMP_FACTOR_LEVEL_3");
	HX_VISIT_MEMBER_NAME(JUMP_FACTOR_LEVEL_4,"JUMP_FACTOR_LEVEL_4");
	HX_VISIT_MEMBER_NAME(isReadyToJump,"isReadyToJump");
	HX_VISIT_MEMBER_NAME(animFinished,"animFinished");
	HX_VISIT_MEMBER_NAME(throwWaterCoolDownTime,"throwWaterCoolDownTime");
	HX_VISIT_MEMBER_NAME(isReadyToThrowWater,"isReadyToThrowWater");
	HX_VISIT_MEMBER_NAME(currentDrag,"currentDrag");
	HX_VISIT_MEMBER_NAME(currentGravity,"currentGravity");
	HX_VISIT_MEMBER_NAME(currentJumpFactor,"currentJumpFactor");
	HX_VISIT_MEMBER_NAME(water,"water");
	HX_VISIT_MEMBER_NAME(playState,"playState");
	HX_VISIT_MEMBER_NAME(sndJump,"sndJump");
	HX_VISIT_MEMBER_NAME(sndWaterOut,"sndWaterOut");
	HX_VISIT_MEMBER_NAME(sndGrounded,"sndGrounded");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Player_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"jump") ) { return hx::Val( jump_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"water") ) { return hx::Val( water ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"GRAVITY") ) { return hx::Val( GRAVITY ); }
		if (HX_FIELD_EQ(inName,"sndJump") ) { return hx::Val( sndJump ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"moveLeft") ) { return hx::Val( moveLeft_dyn() ); }
		if (HX_FIELD_EQ(inName,"addWater") ) { return hx::Val( addWater_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"MAX_WATER") ) { return hx::Val( MAX_WATER ); }
		if (HX_FIELD_EQ(inName,"playState") ) { return hx::Val( playState ); }
		if (HX_FIELD_EQ(inName,"moveRight") ) { return hx::Val( moveRight_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"throwWater") ) { return hx::Val( throwWater_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"JUMP_FACTOR") ) { return hx::Val( JUMP_FACTOR ); }
		if (HX_FIELD_EQ(inName,"currentDrag") ) { return hx::Val( currentDrag ); }
		if (HX_FIELD_EQ(inName,"sndWaterOut") ) { return hx::Val( sndWaterOut ); }
		if (HX_FIELD_EQ(inName,"sndGrounded") ) { return hx::Val( sndGrounded ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"MAX_VELOCITY") ) { return hx::Val( MAX_VELOCITY ); }
		if (HX_FIELD_EQ(inName,"DRAG_LEVEL_0") ) { return hx::Val( DRAG_LEVEL_0 ); }
		if (HX_FIELD_EQ(inName,"DRAG_LEVEL_1") ) { return hx::Val( DRAG_LEVEL_1 ); }
		if (HX_FIELD_EQ(inName,"DRAG_LEVEL_2") ) { return hx::Val( DRAG_LEVEL_2 ); }
		if (HX_FIELD_EQ(inName,"DRAG_LEVEL_3") ) { return hx::Val( DRAG_LEVEL_3 ); }
		if (HX_FIELD_EQ(inName,"DRAG_LEVEL_4") ) { return hx::Val( DRAG_LEVEL_4 ); }
		if (HX_FIELD_EQ(inName,"animFinished") ) { return hx::Val( animFinished ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"WATER_LEVEL_0") ) { return hx::Val( WATER_LEVEL_0 ); }
		if (HX_FIELD_EQ(inName,"WATER_LEVEL_1") ) { return hx::Val( WATER_LEVEL_1 ); }
		if (HX_FIELD_EQ(inName,"WATER_LEVEL_2") ) { return hx::Val( WATER_LEVEL_2 ); }
		if (HX_FIELD_EQ(inName,"WATER_LEVEL_3") ) { return hx::Val( WATER_LEVEL_3 ); }
		if (HX_FIELD_EQ(inName,"WATER_LEVEL_4") ) { return hx::Val( WATER_LEVEL_4 ); }
		if (HX_FIELD_EQ(inName,"isReadyToJump") ) { return hx::Val( isReadyToJump ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"WATER_INCREASE") ) { return hx::Val( WATER_INCREASE ); }
		if (HX_FIELD_EQ(inName,"currentGravity") ) { return hx::Val( currentGravity ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"GRAVITY_LEVEL_0") ) { return hx::Val( GRAVITY_LEVEL_0 ); }
		if (HX_FIELD_EQ(inName,"GRAVITY_LEVEL_1") ) { return hx::Val( GRAVITY_LEVEL_1 ); }
		if (HX_FIELD_EQ(inName,"GRAVITY_LEVEL_2") ) { return hx::Val( GRAVITY_LEVEL_2 ); }
		if (HX_FIELD_EQ(inName,"GRAVITY_LEVEL_3") ) { return hx::Val( GRAVITY_LEVEL_3 ); }
		if (HX_FIELD_EQ(inName,"GRAVITY_LEVEL_4") ) { return hx::Val( GRAVITY_LEVEL_4 ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"currentJumpFactor") ) { return hx::Val( currentJumpFactor ); }
		if (HX_FIELD_EQ(inName,"playIdleAnimation") ) { return hx::Val( playIdleAnimation_dyn() ); }
		if (HX_FIELD_EQ(inName,"playWalkAnimation") ) { return hx::Val( playWalkAnimation_dyn() ); }
		if (HX_FIELD_EQ(inName,"playJumpAnimation") ) { return hx::Val( playJumpAnimation_dyn() ); }
		if (HX_FIELD_EQ(inName,"playDeadAnimation") ) { return hx::Val( playDeadAnimation_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"JUMP_FACTOR_LEVEL_0") ) { return hx::Val( JUMP_FACTOR_LEVEL_0 ); }
		if (HX_FIELD_EQ(inName,"JUMP_FACTOR_LEVEL_1") ) { return hx::Val( JUMP_FACTOR_LEVEL_1 ); }
		if (HX_FIELD_EQ(inName,"JUMP_FACTOR_LEVEL_2") ) { return hx::Val( JUMP_FACTOR_LEVEL_2 ); }
		if (HX_FIELD_EQ(inName,"JUMP_FACTOR_LEVEL_3") ) { return hx::Val( JUMP_FACTOR_LEVEL_3 ); }
		if (HX_FIELD_EQ(inName,"JUMP_FACTOR_LEVEL_4") ) { return hx::Val( JUMP_FACTOR_LEVEL_4 ); }
		if (HX_FIELD_EQ(inName,"isReadyToThrowWater") ) { return hx::Val( isReadyToThrowWater ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"throwWaterCoolDownTime") ) { return hx::Val( throwWaterCoolDownTime ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"THROW_WATER_COOLDOWN_TIME") ) { return hx::Val( THROW_WATER_COOLDOWN_TIME ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Player_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"water") ) { water=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"GRAVITY") ) { GRAVITY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sndJump") ) { sndJump=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"MAX_WATER") ) { MAX_WATER=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playState") ) { playState=inValue.Cast<  ::PlayState >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"JUMP_FACTOR") ) { JUMP_FACTOR=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentDrag") ) { currentDrag=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sndWaterOut") ) { sndWaterOut=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sndGrounded") ) { sndGrounded=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"MAX_VELOCITY") ) { MAX_VELOCITY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DRAG_LEVEL_0") ) { DRAG_LEVEL_0=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DRAG_LEVEL_1") ) { DRAG_LEVEL_1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DRAG_LEVEL_2") ) { DRAG_LEVEL_2=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DRAG_LEVEL_3") ) { DRAG_LEVEL_3=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DRAG_LEVEL_4") ) { DRAG_LEVEL_4=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"animFinished") ) { animFinished=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"WATER_LEVEL_0") ) { WATER_LEVEL_0=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"WATER_LEVEL_1") ) { WATER_LEVEL_1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"WATER_LEVEL_2") ) { WATER_LEVEL_2=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"WATER_LEVEL_3") ) { WATER_LEVEL_3=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"WATER_LEVEL_4") ) { WATER_LEVEL_4=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isReadyToJump") ) { isReadyToJump=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"WATER_INCREASE") ) { WATER_INCREASE=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentGravity") ) { currentGravity=inValue.Cast< Float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"GRAVITY_LEVEL_0") ) { GRAVITY_LEVEL_0=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"GRAVITY_LEVEL_1") ) { GRAVITY_LEVEL_1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"GRAVITY_LEVEL_2") ) { GRAVITY_LEVEL_2=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"GRAVITY_LEVEL_3") ) { GRAVITY_LEVEL_3=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"GRAVITY_LEVEL_4") ) { GRAVITY_LEVEL_4=inValue.Cast< Float >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"currentJumpFactor") ) { currentJumpFactor=inValue.Cast< Float >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"JUMP_FACTOR_LEVEL_0") ) { JUMP_FACTOR_LEVEL_0=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"JUMP_FACTOR_LEVEL_1") ) { JUMP_FACTOR_LEVEL_1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"JUMP_FACTOR_LEVEL_2") ) { JUMP_FACTOR_LEVEL_2=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"JUMP_FACTOR_LEVEL_3") ) { JUMP_FACTOR_LEVEL_3=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"JUMP_FACTOR_LEVEL_4") ) { JUMP_FACTOR_LEVEL_4=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isReadyToThrowWater") ) { isReadyToThrowWater=inValue.Cast< bool >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"throwWaterCoolDownTime") ) { throwWaterCoolDownTime=inValue.Cast< int >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"THROW_WATER_COOLDOWN_TIME") ) { THROW_WATER_COOLDOWN_TIME=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Player_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("MAX_VELOCITY","\x78","\xf2","\xbf","\x58"));
	outFields->push(HX_HCSTRING("GRAVITY","\x2e","\x42","\xd3","\xf7"));
	outFields->push(HX_HCSTRING("JUMP_FACTOR","\x40","\x63","\x6c","\x70"));
	outFields->push(HX_HCSTRING("MAX_WATER","\xbc","\xf8","\xc6","\x82"));
	outFields->push(HX_HCSTRING("WATER_INCREASE","\x4a","\x3c","\x79","\x36"));
	outFields->push(HX_HCSTRING("THROW_WATER_COOLDOWN_TIME","\xe0","\xdd","\x90","\xbf"));
	outFields->push(HX_HCSTRING("WATER_LEVEL_0","\xcd","\xb9","\x69","\xef"));
	outFields->push(HX_HCSTRING("WATER_LEVEL_1","\xce","\xb9","\x69","\xef"));
	outFields->push(HX_HCSTRING("WATER_LEVEL_2","\xcf","\xb9","\x69","\xef"));
	outFields->push(HX_HCSTRING("WATER_LEVEL_3","\xd0","\xb9","\x69","\xef"));
	outFields->push(HX_HCSTRING("WATER_LEVEL_4","\xd1","\xb9","\x69","\xef"));
	outFields->push(HX_HCSTRING("DRAG_LEVEL_0","\xca","\x22","\xf7","\xec"));
	outFields->push(HX_HCSTRING("DRAG_LEVEL_1","\xcb","\x22","\xf7","\xec"));
	outFields->push(HX_HCSTRING("DRAG_LEVEL_2","\xcc","\x22","\xf7","\xec"));
	outFields->push(HX_HCSTRING("DRAG_LEVEL_3","\xcd","\x22","\xf7","\xec"));
	outFields->push(HX_HCSTRING("DRAG_LEVEL_4","\xce","\x22","\xf7","\xec"));
	outFields->push(HX_HCSTRING("GRAVITY_LEVEL_0","\x04","\x3b","\x49","\x82"));
	outFields->push(HX_HCSTRING("GRAVITY_LEVEL_1","\x05","\x3b","\x49","\x82"));
	outFields->push(HX_HCSTRING("GRAVITY_LEVEL_2","\x06","\x3b","\x49","\x82"));
	outFields->push(HX_HCSTRING("GRAVITY_LEVEL_3","\x07","\x3b","\x49","\x82"));
	outFields->push(HX_HCSTRING("GRAVITY_LEVEL_4","\x08","\x3b","\x49","\x82"));
	outFields->push(HX_HCSTRING("JUMP_FACTOR_LEVEL_0","\x16","\xbe","\x64","\xaf"));
	outFields->push(HX_HCSTRING("JUMP_FACTOR_LEVEL_1","\x17","\xbe","\x64","\xaf"));
	outFields->push(HX_HCSTRING("JUMP_FACTOR_LEVEL_2","\x18","\xbe","\x64","\xaf"));
	outFields->push(HX_HCSTRING("JUMP_FACTOR_LEVEL_3","\x19","\xbe","\x64","\xaf"));
	outFields->push(HX_HCSTRING("JUMP_FACTOR_LEVEL_4","\x1a","\xbe","\x64","\xaf"));
	outFields->push(HX_HCSTRING("isReadyToJump","\x02","\x81","\x1b","\xe7"));
	outFields->push(HX_HCSTRING("animFinished","\xa3","\xce","\x2f","\x67"));
	outFields->push(HX_HCSTRING("throwWaterCoolDownTime","\x29","\x94","\x89","\xa0"));
	outFields->push(HX_HCSTRING("isReadyToThrowWater","\x25","\xc4","\x34","\xff"));
	outFields->push(HX_HCSTRING("currentDrag","\xcd","\x04","\x02","\x7b"));
	outFields->push(HX_HCSTRING("currentGravity","\x15","\xe3","\x93","\x85"));
	outFields->push(HX_HCSTRING("currentJumpFactor","\xf6","\xb9","\xe0","\x82"));
	outFields->push(HX_HCSTRING("water","\x17","\x18","\x25","\xc5"));
	outFields->push(HX_HCSTRING("playState","\x7d","\xa3","\xef","\xa4"));
	outFields->push(HX_HCSTRING("sndJump","\xf7","\xfc","\xba","\x6e"));
	outFields->push(HX_HCSTRING("sndWaterOut","\x40","\x99","\x72","\xf0"));
	outFields->push(HX_HCSTRING("sndGrounded","\x2f","\xdb","\x43","\x54"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Player_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Player_obj,MAX_VELOCITY),HX_HCSTRING("MAX_VELOCITY","\x78","\xf2","\xbf","\x58")},
	{hx::fsFloat,(int)offsetof(Player_obj,GRAVITY),HX_HCSTRING("GRAVITY","\x2e","\x42","\xd3","\xf7")},
	{hx::fsFloat,(int)offsetof(Player_obj,JUMP_FACTOR),HX_HCSTRING("JUMP_FACTOR","\x40","\x63","\x6c","\x70")},
	{hx::fsFloat,(int)offsetof(Player_obj,MAX_WATER),HX_HCSTRING("MAX_WATER","\xbc","\xf8","\xc6","\x82")},
	{hx::fsFloat,(int)offsetof(Player_obj,WATER_INCREASE),HX_HCSTRING("WATER_INCREASE","\x4a","\x3c","\x79","\x36")},
	{hx::fsInt,(int)offsetof(Player_obj,THROW_WATER_COOLDOWN_TIME),HX_HCSTRING("THROW_WATER_COOLDOWN_TIME","\xe0","\xdd","\x90","\xbf")},
	{hx::fsFloat,(int)offsetof(Player_obj,WATER_LEVEL_0),HX_HCSTRING("WATER_LEVEL_0","\xcd","\xb9","\x69","\xef")},
	{hx::fsFloat,(int)offsetof(Player_obj,WATER_LEVEL_1),HX_HCSTRING("WATER_LEVEL_1","\xce","\xb9","\x69","\xef")},
	{hx::fsFloat,(int)offsetof(Player_obj,WATER_LEVEL_2),HX_HCSTRING("WATER_LEVEL_2","\xcf","\xb9","\x69","\xef")},
	{hx::fsFloat,(int)offsetof(Player_obj,WATER_LEVEL_3),HX_HCSTRING("WATER_LEVEL_3","\xd0","\xb9","\x69","\xef")},
	{hx::fsFloat,(int)offsetof(Player_obj,WATER_LEVEL_4),HX_HCSTRING("WATER_LEVEL_4","\xd1","\xb9","\x69","\xef")},
	{hx::fsFloat,(int)offsetof(Player_obj,DRAG_LEVEL_0),HX_HCSTRING("DRAG_LEVEL_0","\xca","\x22","\xf7","\xec")},
	{hx::fsFloat,(int)offsetof(Player_obj,DRAG_LEVEL_1),HX_HCSTRING("DRAG_LEVEL_1","\xcb","\x22","\xf7","\xec")},
	{hx::fsFloat,(int)offsetof(Player_obj,DRAG_LEVEL_2),HX_HCSTRING("DRAG_LEVEL_2","\xcc","\x22","\xf7","\xec")},
	{hx::fsFloat,(int)offsetof(Player_obj,DRAG_LEVEL_3),HX_HCSTRING("DRAG_LEVEL_3","\xcd","\x22","\xf7","\xec")},
	{hx::fsFloat,(int)offsetof(Player_obj,DRAG_LEVEL_4),HX_HCSTRING("DRAG_LEVEL_4","\xce","\x22","\xf7","\xec")},
	{hx::fsFloat,(int)offsetof(Player_obj,GRAVITY_LEVEL_0),HX_HCSTRING("GRAVITY_LEVEL_0","\x04","\x3b","\x49","\x82")},
	{hx::fsFloat,(int)offsetof(Player_obj,GRAVITY_LEVEL_1),HX_HCSTRING("GRAVITY_LEVEL_1","\x05","\x3b","\x49","\x82")},
	{hx::fsFloat,(int)offsetof(Player_obj,GRAVITY_LEVEL_2),HX_HCSTRING("GRAVITY_LEVEL_2","\x06","\x3b","\x49","\x82")},
	{hx::fsFloat,(int)offsetof(Player_obj,GRAVITY_LEVEL_3),HX_HCSTRING("GRAVITY_LEVEL_3","\x07","\x3b","\x49","\x82")},
	{hx::fsFloat,(int)offsetof(Player_obj,GRAVITY_LEVEL_4),HX_HCSTRING("GRAVITY_LEVEL_4","\x08","\x3b","\x49","\x82")},
	{hx::fsFloat,(int)offsetof(Player_obj,JUMP_FACTOR_LEVEL_0),HX_HCSTRING("JUMP_FACTOR_LEVEL_0","\x16","\xbe","\x64","\xaf")},
	{hx::fsFloat,(int)offsetof(Player_obj,JUMP_FACTOR_LEVEL_1),HX_HCSTRING("JUMP_FACTOR_LEVEL_1","\x17","\xbe","\x64","\xaf")},
	{hx::fsFloat,(int)offsetof(Player_obj,JUMP_FACTOR_LEVEL_2),HX_HCSTRING("JUMP_FACTOR_LEVEL_2","\x18","\xbe","\x64","\xaf")},
	{hx::fsFloat,(int)offsetof(Player_obj,JUMP_FACTOR_LEVEL_3),HX_HCSTRING("JUMP_FACTOR_LEVEL_3","\x19","\xbe","\x64","\xaf")},
	{hx::fsFloat,(int)offsetof(Player_obj,JUMP_FACTOR_LEVEL_4),HX_HCSTRING("JUMP_FACTOR_LEVEL_4","\x1a","\xbe","\x64","\xaf")},
	{hx::fsBool,(int)offsetof(Player_obj,isReadyToJump),HX_HCSTRING("isReadyToJump","\x02","\x81","\x1b","\xe7")},
	{hx::fsBool,(int)offsetof(Player_obj,animFinished),HX_HCSTRING("animFinished","\xa3","\xce","\x2f","\x67")},
	{hx::fsInt,(int)offsetof(Player_obj,throwWaterCoolDownTime),HX_HCSTRING("throwWaterCoolDownTime","\x29","\x94","\x89","\xa0")},
	{hx::fsBool,(int)offsetof(Player_obj,isReadyToThrowWater),HX_HCSTRING("isReadyToThrowWater","\x25","\xc4","\x34","\xff")},
	{hx::fsFloat,(int)offsetof(Player_obj,currentDrag),HX_HCSTRING("currentDrag","\xcd","\x04","\x02","\x7b")},
	{hx::fsFloat,(int)offsetof(Player_obj,currentGravity),HX_HCSTRING("currentGravity","\x15","\xe3","\x93","\x85")},
	{hx::fsFloat,(int)offsetof(Player_obj,currentJumpFactor),HX_HCSTRING("currentJumpFactor","\xf6","\xb9","\xe0","\x82")},
	{hx::fsFloat,(int)offsetof(Player_obj,water),HX_HCSTRING("water","\x17","\x18","\x25","\xc5")},
	{hx::fsObject /*::PlayState*/ ,(int)offsetof(Player_obj,playState),HX_HCSTRING("playState","\x7d","\xa3","\xef","\xa4")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(Player_obj,sndJump),HX_HCSTRING("sndJump","\xf7","\xfc","\xba","\x6e")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(Player_obj,sndWaterOut),HX_HCSTRING("sndWaterOut","\x40","\x99","\x72","\xf0")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(Player_obj,sndGrounded),HX_HCSTRING("sndGrounded","\x2f","\xdb","\x43","\x54")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Player_obj_sStaticStorageInfo = 0;
#endif

static ::String Player_obj_sMemberFields[] = {
	HX_HCSTRING("MAX_VELOCITY","\x78","\xf2","\xbf","\x58"),
	HX_HCSTRING("GRAVITY","\x2e","\x42","\xd3","\xf7"),
	HX_HCSTRING("JUMP_FACTOR","\x40","\x63","\x6c","\x70"),
	HX_HCSTRING("MAX_WATER","\xbc","\xf8","\xc6","\x82"),
	HX_HCSTRING("WATER_INCREASE","\x4a","\x3c","\x79","\x36"),
	HX_HCSTRING("THROW_WATER_COOLDOWN_TIME","\xe0","\xdd","\x90","\xbf"),
	HX_HCSTRING("WATER_LEVEL_0","\xcd","\xb9","\x69","\xef"),
	HX_HCSTRING("WATER_LEVEL_1","\xce","\xb9","\x69","\xef"),
	HX_HCSTRING("WATER_LEVEL_2","\xcf","\xb9","\x69","\xef"),
	HX_HCSTRING("WATER_LEVEL_3","\xd0","\xb9","\x69","\xef"),
	HX_HCSTRING("WATER_LEVEL_4","\xd1","\xb9","\x69","\xef"),
	HX_HCSTRING("DRAG_LEVEL_0","\xca","\x22","\xf7","\xec"),
	HX_HCSTRING("DRAG_LEVEL_1","\xcb","\x22","\xf7","\xec"),
	HX_HCSTRING("DRAG_LEVEL_2","\xcc","\x22","\xf7","\xec"),
	HX_HCSTRING("DRAG_LEVEL_3","\xcd","\x22","\xf7","\xec"),
	HX_HCSTRING("DRAG_LEVEL_4","\xce","\x22","\xf7","\xec"),
	HX_HCSTRING("GRAVITY_LEVEL_0","\x04","\x3b","\x49","\x82"),
	HX_HCSTRING("GRAVITY_LEVEL_1","\x05","\x3b","\x49","\x82"),
	HX_HCSTRING("GRAVITY_LEVEL_2","\x06","\x3b","\x49","\x82"),
	HX_HCSTRING("GRAVITY_LEVEL_3","\x07","\x3b","\x49","\x82"),
	HX_HCSTRING("GRAVITY_LEVEL_4","\x08","\x3b","\x49","\x82"),
	HX_HCSTRING("JUMP_FACTOR_LEVEL_0","\x16","\xbe","\x64","\xaf"),
	HX_HCSTRING("JUMP_FACTOR_LEVEL_1","\x17","\xbe","\x64","\xaf"),
	HX_HCSTRING("JUMP_FACTOR_LEVEL_2","\x18","\xbe","\x64","\xaf"),
	HX_HCSTRING("JUMP_FACTOR_LEVEL_3","\x19","\xbe","\x64","\xaf"),
	HX_HCSTRING("JUMP_FACTOR_LEVEL_4","\x1a","\xbe","\x64","\xaf"),
	HX_HCSTRING("isReadyToJump","\x02","\x81","\x1b","\xe7"),
	HX_HCSTRING("animFinished","\xa3","\xce","\x2f","\x67"),
	HX_HCSTRING("throwWaterCoolDownTime","\x29","\x94","\x89","\xa0"),
	HX_HCSTRING("isReadyToThrowWater","\x25","\xc4","\x34","\xff"),
	HX_HCSTRING("currentDrag","\xcd","\x04","\x02","\x7b"),
	HX_HCSTRING("currentGravity","\x15","\xe3","\x93","\x85"),
	HX_HCSTRING("currentJumpFactor","\xf6","\xb9","\xe0","\x82"),
	HX_HCSTRING("water","\x17","\x18","\x25","\xc5"),
	HX_HCSTRING("playState","\x7d","\xa3","\xef","\xa4"),
	HX_HCSTRING("sndJump","\xf7","\xfc","\xba","\x6e"),
	HX_HCSTRING("sndWaterOut","\x40","\x99","\x72","\xf0"),
	HX_HCSTRING("sndGrounded","\x2f","\xdb","\x43","\x54"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("moveRight","\x0b","\xdb","\x2a","\xa7"),
	HX_HCSTRING("moveLeft","\xb8","\x73","\x67","\xea"),
	HX_HCSTRING("jump","\xee","\xc4","\x69","\x46"),
	HX_HCSTRING("throwWater","\x11","\xc1","\xe0","\x40"),
	HX_HCSTRING("addWater","\x36","\x3e","\x82","\x3e"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("playIdleAnimation","\xbc","\x1e","\x2a","\x85"),
	HX_HCSTRING("playWalkAnimation","\x27","\x82","\x31","\x12"),
	HX_HCSTRING("playJumpAnimation","\xa2","\x75","\xb2","\xec"),
	HX_HCSTRING("playDeadAnimation","\x2c","\x05","\x4e","\x20"),
	::String(null()) };

static void Player_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Player_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#endif

hx::Class Player_obj::__mClass;

void Player_obj::__register()
{
	hx::Object *dummy = new Player_obj;
	Player_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Player","\x81","\x5f","\x4d","\x6c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Player_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Player_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Player_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Player_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Player_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Player_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

